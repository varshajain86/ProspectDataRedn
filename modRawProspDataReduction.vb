Option Explicit On
Imports System.Math
Imports System.Runtime.CompilerServices
Imports AxFPSpread
Imports CrystalDecisions.CrystalReports.Engine
Imports OracleInProcServer
Imports ProspectDataReduction.ViewModels

Module modRawProspDataReduction
    'Attribute VB_Name = "modRawProspDataReduction"
    '**********************************************************************
    'RAW PROSPECT DATA REDUCTION MODULE
    '
    'Special Comments
    '----------------
    'Process flow for data reduction:
    '
    'A) gGenerateProspectDataset
    '   1) GetAreaRawProspData
    '
    '   2) ProcessAreaRawProspData
    '
    '      Splits  Splits  Splits  Splits
    '      Splits  Splits  Splits  Splits
    '
    '      a. GetProcessThisSplit
    '      b. ReduceSplitData            (Calc Wt%'s here) (GetFeAdjust, GetUpperOrLowerZone)
    '      c. PlaceInSplitSprd           (PlaceInRawProspMinSprd also)
    '      d. DetermineSplitMineability  Adjusts Mtx yards, Calcs MtxxOnSpec (PC),
    '                                    MtxxOnSpec (100%)
    '      e. DetermineSplitTpaMisc      Adjusts Mtx yards, Calcs MtxxAll (PC),
    '                                    MtxxAll (100%)
    '            1. CalcTotPbSpec        (Reflects pebble mineability)
    '            2. CalcTotPrSpec        (Reflects pebble mineability and oversize
    '                                     mineability)
    '            3. FinalWtPctCalcs      (Calc Wt%'s here)
    '
    '      Holes  Holes  Holes  Holes
    '      Holes  Holes  Holes  Holes
    '
    '   3) ProcessForHoleMineability
    '      a. GetHoleMineabilitySimp
    '            1. AddSplToHoleSumDataMineable
    '            2. CalcDataFromSumDataMineable   (Calc Wt%'s here)
    '            3. DetermineHoleMineability      Adjusts Mtx yards, Adjusts Ovb yards,
    '
    '   4) gCompositeSplitData
    '      a. AssignSplThks
    '      b. AddSplToHoleSumDataComp
    '      c. AssignCompositedHoleData
    '            1. CalcDataFromSumDataComp
    '
    'Interacts with these spreadsheets on frmProspDataReduction:
    '1) ssSplitReview
    '2) ssCompReview
    '3) ssCompErrors
    '
    'Doloflot Plant 2010
    '-------------------
    'Based on BLUESTARMgOMODEL.xls from Glen Oswald
    '
    'Prod BPL = 36.4 + (0.339 * FdBPL) + (0.435 * pa64) + (30.0 * acid) - (14.5 * P2O5) -
    '           (0.350 * flotmin)
    '
    'BPL %Recovery = 100 * (1 - EXP(-4.56 + (0.0474 * FdMgO) + (0.0226 * grind) -
    '                (0.0964 * flotmin) - (5.90 * P2O5) + (12.2 * acid) + (0.121 * pa64)))
    '
    'Prod Insol = (1 - (ProdBPL * 0.012844) - (ProdMgO * 0.048303) -
    '             (ProdAl2O3 * 0.016062) + (ProdFe2O3 * 0.15825)) / 0.012591)
    '
    '
    'Doloflot feed:           Doloflot product:               Grind         70
    'TPA = 211                TPA = 169                       Acid          4.6
    'BPL = 47.2               BPL = 52.9                      P2O5          9.3
    'Insol = 16.7             Insol = 21.7                    PA64          10
    'Fe2O3 = 1.21             Fe2O3 = 1.36                    Flot minutes  20
    'Al2O3 = 1.43             Al2O3 = 1.60                    Target MgO    0.9
    'MgO = 3.54               MgO = 0.90                      Al2O3>        1
    'CaO = 37.3               CaO = 41.8                      Fe2O3>        1
    '
    'Prod BPL = 36.4 + (0.339 * 47.2) + (0.435 * 10) + (30.0 * 4.6) - (14.5 * 9.3) -
    '           (0.350 * 20) = 52.9
    '
    'BPL %Rcvry = 100 * (1 - EXP(-4.56 + (0.0474 * 3.54) + (0.0226 * 70) -
    '             (0.0964 * 20) - (5.90 * 9.3) + (12.2 * 4.6) + (0.121 * 10))) =
    '             100 * (1 - EXP(-2.2782)) = 100 * (1 - 0.1025) = 89.75
    '
    'Prod BPLxTPA = 211 * 47.2 * .8975 = 8938.4
    '
    'Prod TPA = 8938.4 / 52.9 = 169
    '
    'Prod Fe2O3 = (52.9 / 47.2) * 1.21 = 1.36
    '
    'Prod Al2O3 = (52.9 / 47.2) * 1.43 = 1.60
    '
    'Prod CaO = (52.9 / 47.2) * 37.3 = 41.8
    '
    'Prod Insol = (1 - (52.9 * 0.012844) - (0.90 * 0.048303) - (1.60 * 0.016062) +
    '             (1.36 * 0.015825)) / 0.012591 = 21.7
    '
    '**********************************************************************
    '   Maintenance Log
    '
    '   01/10/2007, lss
    '       Added this module.
    '   03/07/2007, lss
    '       Fixed gGetMtxDensityComp2 -- Replaced 11 with 181.
    '   04/17/2007, lss
    '       Changed gRawProspSplRdctnType and gRawProspSplRdctnSumType to
    '       use mProdInfoType and mFdTlInfoType.
    '   05/23/2007, lss
    '       Removed In-place" and "To-the-plant" stuff -- it was confusing
    '       things.
    '   07/10/2007, lss
    '       Made some modifications so that the oversize works correctly
    '       (CalcTotPrSpec changes, added gGetTotalValue4Spec).
    '   07/24/2007, lss
    '       Minor changes to Sub CalcDataFromSumDataComp.  Weight%'s were
    '       not correct.
    '       Modified Function ProcessAreaRawProspData to handle Null
    '       .ClaySettChar
    '   07/27/2007, lss
    '       Added AOI to Sub ReduceSplitData.
    '    08/20/2007, lss
    '       Modifications for lab density vs calc density, mtx %solids.
    '    08/21/2007, lss
    '       Cleaned up SurvCadd transfer text file
    '       (CreateAndSaveSurvCaddTextFile).
    '    08/22/2007, lss
    '       Corrected GetProcessThisSplit() in Function
    '       ProcessAreaRawProspData.
    '    08/23/2007, lss
    '       Added MtxTpa to AddMoisTextFileSplit and AddMoisTextFileHole.
    '       Need this so that I have the correct MtxTpa over in MOIS (this
    '       MtxTpa contains oversize material).
    '    08/27/2007, lss
    '       Modified Function GetCompTfileStrSurvCadd -- Key value changed
    '       to 0 for the "Waste line" stuff.
    '    11/01/2007, lss
    '       Added more IsDBNull() stuff to Function ProcessAreaRawProspData.
    '    11/12/2007, lss
    '       Sub AddSplToHoleSumDataComp -- no longer looks at InclCpb,
    '       InclFpb -- should not be excluding Cpb or Fpb from the sum
    '       (or InclOs for that matter either).
    '       Modified CalcDataFromSumDataComp to handle .Os.WtPct correctly.
    '    11/13/2007, lss
    '       Fixed problem with calculating Itb thickness in
    '       Sub AssignSplThks.
    '    11/26/2007, lss
    '       Renamed Public Function CompositeSplitData as
    '       gCompositeSplitData.
    '    12/05/2007, lss
    '       Modified AdjIns -- different Insol adjustment parameters for
    '       Catalog and 100% now.
    '    01/07/2008, lss
    '       Added MplInpBplTarg, MplInpMgoTarg, MplRejBplTarg,
    '             MplRejMgoTarg, MplM1BpltRvry, MplM1BplHwire,
    '             MplM1InsHwire, MplM1MgoImprove
    '    01/07/2008, lss
    '        Will check in Function GetCompTfileStrSurvCadd for
    '        .MtxColor, .DegConsol, .DigChar, .PumpChar, .Lithology,
    '        .PhosphColor that are numeric!
    '    01/15/2008, lss
    '        Modified Sub AddSplToHoleSumDataMineable.  It now considers
    '        the following recovery parameters when summing splits:
    '        1) aRcvryParamsData.InclCpbAlways
    '        2) aRcvryParamsData.InclCpbNever
    '        3) aRcvryParamsData.InclFpbAlways
    '        4) aRcvryParamsData.InclFpbNever
    '        5) aRcvryParamsData.InclOsAlways
    '        6) aRcvryParamsData.InclOsNever
    '    01/17/2008, lss
    '        Finished with modifications for Off-spec pebble MgO plant for
    '        now -- will do some more work later after we have done some
    '        more testing with what I have.
    '    01/17/2008, lss
    '        Function GetCompTfileStrSurvCadd:
    '        OVB + INP  ABC_TOP --> ABC
    '              MTX  ABC_KEY --> ABC
    '              FLR  Z_TOP   --> Z
    '    01/30/2008, lss
    '        Functiion GetCompTfileStrSurvCadd -- changed "A" to "N" for
    '        ORIDE stuff.
    '    02/05/2008, lss
    '        Added aInclMgPlt -- for MOIS RAR file output can optionally
    '        include the MgO plant data.
    '    02/11/2008, lss
    '        Added .WstThk to gGetDataFromReviewSprd (same as .ItbThk).
    '    02/19/2008, lss
    '        Added Total pebble and Total feed to SurvCADD transfer file.
    '        PT_TPA , PT_PCT, PT_BPL, PT_INS, PT_IA, PT_FE, PT_AL, PT_MGO,
    '        PT_CPR
    '        FT_TPA , FT_PCT, FT_BPL
    '    02/20/2008, lss
    '        Corrected GetTrsCornerSql() to handle aSplitOverrideName
    '        correctly.
    '        Added unmineable hole overburden thickness reassignment to
    '        Sub CalcDataFromSumDataComp.
    '    03/03/2008, lss
    '        Added aUserUnmineableOride As Boolean and
    '        aUserUnmineableOrideOvbThk to gSaveProspectData.
    '    05/22/2008, lss
    '        Having problems with SmartHeap Library "Out of memory. Please
    '        free some memory, then choose retry." errors on larger runs.
    '        Modified for "No Review" functionality.  Also had Allen T.
    '        start marking unmineable holes in the raw prospect data.
    '    05/27/2008, lss
    '        Not calculating ovb' correctly for unmineable holes on multi-
    '        hole runs (individual holes OK).  Added
    '        Spl1Depth = ThkTable(1).SplitDepthTop to gCompositeSplitData.
    '    06/26/2008, lss
    '        Changed TpbMg >= aRcvryParamsData.MplInpMgoTarg Then to
    '        TpbMg > aRcvryParamsData.MplInpMgoTarg Then
    '    06/27/2008, lss
    '        Modified Function OffSpecPbPltProcess to check for MgO plant
    '        reject before it checks for MgO plant input.
    '    09/05/2008, lss
    '        Modified Function OffSpecPbPltProcess -- changed some Ands to
    '        Ors -- made comments in the Function.
    '        Modified Function GetCompTfileStrSurvCadd to add some pebble
    '        analyte fill-in data where appropriate -- made comments in the
    '        function.
    '    09/08/2008, lss
    '        Modified ProcessAreaRawProspData -- If user uses raw prospect
    '        minabilities as override then need to check the hole
    '        minability in raw prospect first.  A hole could have splits
    '        marked as minable in raw prospect but the hole has been marked
    '        unminable which should then make all of the splits for the
    '        hole be overridden as unminable.
    '    09/11/2008, lss
    '        Added SpecAreaName to gProcDataType.  Added ClaySettlingLvl,
    '        PbClayPct and MtxPctSol to gProcDataType also.
    '    09/17/2008, lss
    '        Added aUseOrigHole to Function GetAreaRawProspData.
    '    12/20/2008, lss
    '        Modified CreateAndSaveSurvCaddTextFile to handle "Forced
    '        minable" holes correctly.
    '    12/30/2008, lss
    '        Minable override cannot override a "Forced minable".
    '        (in Sub AddSplToHoleSumDataComp).
    '    02/12/2009, lss
    '        Modified SurvCadd text file to show blanks instead of zeros.
    '        In Function GetCompTfileStrSurvCadd.
    '    02/20/2009, lss
    '        Modified to track total pebble that has been rejected at the
    '        washer.
    '    03/02/2009, lss
    '        Changed SurvCADD text file output headers:
    '        MI_FE --> MI_FEO
    '        MI_AL --> MI_ALO
    '        MR_FE --> MR_FEO
    '        MR_AL --> MR_ALO
    '        MP_FE --> MP_FEO
    '        MP_AL --> MP_ALO
    '        OS_FE --> OS_FEO
    '        OS_AL --> OS_ALO
    '        PC_FE --> PC_FEO
    '        PC_AL --> PC_ALO
    '        PF_FE --> PF_FEO
    '        PF_AL --> PF_ALO
    '        PT_FE --> PT_FEO
    '        PT_AL --> PT_ALO
    '        IP_FE --> IP_FEO
    '        IP_AL --> IP_ALO
    '        CN_FE --> CN_FEO
    '        CN_AL --> CN_ALO
    '    03/26/2009, lss
    '        Modified Function GetCompTfileStrSurvCadd to handle "Key"
    '        assignment for "MF" holes.
    '    06/08/2009, lss
    '        Started adding adjusted Fe stuff.
    '    06/17/2009, lss
    '        Fixed BD text file for TFDTPA, TFDPCT, TFDBPL -- changed
    '        headings around.
    '    07/28/2009, lss
    '        Modifications for when user does not set any product quality
    '        cutoffs -- split or hole.  All changes marked with 07/28/2009.
    '    07/28/2009, lss
    '       Sub CalcTotPbSpec -- added zeroing code.  Changes marked with
    '       07/28/2009.
    '    07/29/2009, lss
    '       Modifed Function GetCompTfileStrSurvCadd() for adjusted Fe2O3.
    '    09/09/2009, lss
    '       Added CanSelectRejectTcn stuff.
    '    09/10/2009, lss
    '       Added Public Function gGetMaterialOnSpec.
    '    09/16/2009, lss
    '       Fixed header for FEOA stuff -- Function
    '       GetTextFileHeaderSurvCadd
    '    09/17/2009, lss
    '       Modified so SurvCADD Split type output is handled.
    '       Function CreateAndSaveSurvCaddTextFile and
    '       Function GetCompTfileStrSurvCadd.
    '    12/09/2009, lss
    '       Modified Function GetCompTfileStrSurvCadd -- Mtx"X" wasn't
    '       working correctly for splits.
    '    01/12/2010, lss
    '       For SurvCadd split output -- need to put overburden thickness
    '       in SPLTK column.  Currently it is showing up as zero.
    '    01/28/2010, lss
    '       Fixed Public Function CreateAndSaveSurvCaddTextFile to handle
    '       split override minabilities correctly!  Change other places
    '       also -- all marked with 01/28/2010, lss.
    '    01/28/2010, lss
    '       SurvCadd transfer file -- not handling "Key" item correctly for
    '       split text files -- fixed this.
    '   02/16/2010, lss
    '       Modified Sub ReduceSplitData -- calls gCalcMoist2 instead
    '       of gCalcMoist in order to handle 2 sets of matrix %moisture
    '       samples.
    '   06/10/2010, lss
    '       Added DpAl2O3GreaterThan and DpFe2O3GreaterThan As Single to
    '       gDataRdctnParamsType.
    '   06/15/2010, lss
    '       Added Public Sub gAddProdCoeffOr100Pct.
    '   06/16/2010, lss
    '       Started modifying to handle Doloflot plant processing.
    '       Added Function DoloflotPltProcess.
    '       Added Sub PlaceDoloflotPltInReview
    '   07/01/2010, lss
    '       Removed DpAl2O3GreaterThan and DpFe2O3GreaterThan As Single to
    '       gDataRdctnParamsType -- they are not needed!
    '   07/26/2010, lss
    '       Function GetTrsCornerSql
    '       Added PV.MTX_MOIST_WET_WT2, PV.MTX_MOIST_DRY_WT2,
    '       PV.MTX_MOIST_TARE_WT2
    '   03/23/2011, lss
    '       GetTextFileHeaderSurvCadd -- changed "MI_FEOA" to "MR_FEOA".
    '   03/29/2011, lss
    '       Modified so that adjusted Fe2O3 functionality works for
    '       "Original MgO Plant" functionality.
    '   08/12/2011, lss
    '       Modified for Doloflot Plant at Four Corners.  it is essentially
    '       the same as the Off-spec pebble MgO plant and pretty much
    '       uses the functionality I added previously.
    '   11/17/2011, lss
    '       Made changes for "new" doloflot model for Four Corners.
    '       Function OffSpecPbPltProcessFco2
    '   10/01/2013, lss
    '       Made some changes back in March, 2013.
    '       (Needed to have TOS elevation for the splits.)
    '       Elevation -- don't need it here (7 characters).
    '       TxtRow = TxtRow & "      -" & " "
    '       03/18/2013, lss
    '       Let's put the elevation in -- Top-of-Split Elevation ?
    '       TosElev = .Elevation - .SplitDepthTop
    '       If TosElev < 0 Then
    '           TosElev = 0
    '       End If
    '       TxtRow = TxtRow & gPadLeftChar(Format(TosElev, "###0.00"), 7, " ") & " "
    '       -----
    '       (Needed to have the M# -- using the Lithology slot in the text file.)
    '       Lithology
    '       Not needed for anything -- will put a "-" here!
    '       TxtRow = TxtRow & "     -" & " "
    '       03/18/2013, lss
    '       Will put the M-###### number here (just the ###### part)
    '       TxtRow = TxtRow & Mid(.SampleId, 3) & " "
    '
    '**********************************************************************


    'Private log As String = String.Empty

    Public Enum ProductType
        CCn
        FCn
        TCn
        IP
        IPRej
        CPb
        CPbRej
        FPb
        FPbRej
        TPb
        TPbRej
        Os
        OTpr
        ATpr
        Tpr
    End Enum

    <Extension()>
    Public Function DisplayName(this As ProductType) As String
        Select Case this
            Case 0 : Return "Coarce Concentarte"
            Case 1 : Return "Fine Concentrate"
            Case 2 : Return "Total Concentarte"
            Case 3 : Return "IP"
            Case 4 : Return "Coarce Pebble"
            Case 5 : Return "Fine Pebble"
            Case 6 : Return "Total Pebble"
            Case 7 : Return "Ovesize"
            Case Else : Return "Invalid"
        End Select
    End Function

    Public Structure ResultLine
        Public IntResult As Integer
        Public RawProspResult As gRawProspSplRdctnType
    End Structure

    Public Class SplitResultSet
        Public IntResult As Integer
        Public SplitResults As List(Of gRawProspSplRdctnType)
        Public HoleResults As List(Of gRawProspSplRdctnType)
        Public Sub New()
            SplitResults = New List(Of gRawProspSplRdctnType)
            HoleResults = New List(Of gRawProspSplRdctnType)
        End Sub
    End Class
    Public Function GetResultSetFromSpreadSheets(ByVal aSsSplitReview As AxvaSpread, ByVal aSsCompReview As AxvaSpread) As SplitResultSet

        Dim SplitData As gRawProspSplRdctnType
        Dim HoleData As gRawProspSplRdctnType
        Dim ThisHoleLocation As String = String.Empty
        Dim CurrHoleLocation As String = String.Empty
        Dim HoleCnt As Integer = 0

        Dim ProspectResults As New SplitResultSet()

        With aSsSplitReview
            For RowIdx = 1 To .MaxRows
                'See if this is the last split for a hole!
                .Row = RowIdx
                .Col = 1
                ThisHoleLocation = .Text

                If ThisHoleLocation <> CurrHoleLocation And CurrHoleLocation <> "" Then
                    'We have moved on to another hole -- need to add a "HLE" row for
                    'the hole we just finished.
                    HoleCnt = HoleCnt + 1

                    'Get the hole data
                    HoleData = gGetDataFromReviewSprd(aSsCompReview, HoleCnt)
                    ProspectResults.HoleResults.Add(HoleData)

                End If

                'Get the split data
                SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                ProspectResults.SplitResults.Add(SplitData)

                CurrHoleLocation = ThisHoleLocation
            Next RowIdx

            'Have one more hole row to add!
            HoleCnt = HoleCnt + 1

            'Get the hole data
            HoleData = gGetDataFromReviewSprd(aSsCompReview, HoleCnt)
            ProspectResults.HoleResults.Add(HoleData)
        End With

        Return New SplitResultSet()
    End Function


    Public Enum Result
        NotRun
        Success
        Cancelled
        HasErrors
    End Enum
    Public Class HoleResultSet
        Public ProcessResult As Result
        Public HoleResults As List(Of Hole)
        Public Sub New()
            HoleResults = New List(Of Hole)
        End Sub
    End Class
    Public Class Hole
        Public Data As gRawProspSplRdctnType
        Public Splits As List(Of gRawProspSplRdctnType)
        Public Sub New()
            Data = New gRawProspSplRdctnType()
            Splits = New List(Of gRawProspSplRdctnType)
        End Sub
    End Class
    Public Function GetHolesFromSpreadSheets(ByVal aSsSplitReview As AxvaSpread, ByVal aSsCompReview As AxvaSpread) As List(Of Hole)

        Dim SplitData As gRawProspSplRdctnType
        Dim Splits As List(Of gRawProspSplRdctnType)
        Dim HoleData As gRawProspSplRdctnType
        Dim Hole As Hole
        Dim ThisHoleLocation As String = String.Empty
        Dim CurrHoleLocation As String = String.Empty
        Dim HoleCnt As Integer = 0
        Dim Holes As New List(Of Hole)

        With aSsSplitReview
            Splits = New List(Of gRawProspSplRdctnType)
            Hole = New Hole()
            For RowIdx = 1 To .MaxRows
                .Row = RowIdx
                .Col = 1
                ThisHoleLocation = .Text
                If Not ThisHoleLocation.Equals(CurrHoleLocation) Then
                    'We have moved on to another hole -- need to add a "HLE" row for
                    'the hole we just finished.
                    If Not RowIdx = 1 Then
                        Holes.Add(Hole) 'Adding previus Hole
                    End If
                    HoleCnt = HoleCnt + 1
                    'Get the hole data
                    HoleData = gGetDataFromReviewSprd(aSsCompReview, HoleCnt)
                    Hole = New Hole()
                    Hole.Data = HoleData
                    CurrHoleLocation = ThisHoleLocation
                End If
                'Get the split data
                SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                Hole.Splits.Add(SplitData)
            Next RowIdx
            Holes.Add(Hole)
        End With
        Return Holes
    End Function

    Public Function GetHolesFromSplitSpreadSheets(ByVal aSsSplitReview As AxvaSpread) As List(Of Hole)

        Dim SplitData As gRawProspSplRdctnType
        Dim Splits As List(Of gRawProspSplRdctnType)
        Dim HoleData As gRawProspSplRdctnType
        Dim Hole As Hole

        Dim ThisHoleLocation As String = String.Empty
        Dim CurrHoleLocation As String = String.Empty

        Dim HoleCnt As Integer = 0
        Dim Holes As New List(Of Hole)

        With aSsSplitReview
            Splits = New List(Of gRawProspSplRdctnType)
            Hole = New Hole()
            Dim ThisTwp As String = String.Empty
            Dim ThisRge As String = String.Empty
            Dim ThisSec As String = String.Empty
            Dim ThisHole As String = String.Empty
            Dim ThisHoleId As String = String.Empty

            For RowIdx = 1 To .MaxRows
                .Row = RowIdx
                .Col = 1
                ThisHoleLocation = .Text
                If Not ThisHoleLocation.Equals(CurrHoleLocation) Then
                    'We have moved on to another hole 
                    If Not RowIdx = 1 Then
                        Holes.Add(Hole) 'Adding previus Hole
                    End If
                    HoleCnt = HoleCnt + 1

                    HoleData = New gRawProspSplRdctnType()
                    HoleData.HoleDesc = ThisHoleLocation     'TT-RR-SS HHHH
                    ThisTwp = Val(Mid(ThisHoleLocation, 1, 2))
                    ThisRge = Val(Mid(ThisHoleLocation, 4, 2))
                    ThisSec = Val(Mid(ThisHoleLocation, 7, 2))
                    ThisHole = Mid(ThisHoleLocation, 10)
                    ThisHoleId = Mid(ThisHoleLocation, 4, 2) & Mid(ThisHoleLocation, 7, 2) & Mid(ThisHoleLocation, 1, 2) & Mid(ThisHoleLocation, 10)

                    HoleData.HoleDesc = ThisHoleLocation
                    HoleData.Section = ThisSec
                    HoleData.Township = ThisTwp
                    HoleData.Range = ThisRge
                    HoleData.HoleLocation = ThisHole
                    HoleData.SurvCaddHoleId = ThisHoleId

                    '.Col = 2    'Split#
                    'HoleData.SplitNumber = Val(.Value)
                    .Col = 3    'Prospect date
                    HoleData.ProspDate = .Text
                    '.Col = 4    'Mineability calculated ("M" = Mineable, "U" = Unmineable)
                    'HoleData.MineableCalcd = .Text
                    '.Col = 5    'Mineability override ("M" = Mineable, "U" = Unmineable)
                    'HoleData.MineableOride = .Text
                    .Col = 6    'Forty
                    HoleData.Forty = Val(.Value)
                    .Col = 7    'Xcoord
                    HoleData.Xcoord = Val(.Value)
                    .Col = 8    'Ycoord
                    HoleData.Ycoord = Val(.Value)
                    .Col = 9    'Elevation
                    HoleData.Elevation = Val(.Value)
                    .Col = 10   'Ownership
                    HoleData.Ownership = .Text
                    .Col = 11   'Minedout status (0 = Not mined, 1 = Mined)
                    HoleData.MinedOutStatus = Val(.Value)
                    .Col = 12   'Hole type (0 = Auger, 1 = Rotary)
                    HoleData.HoleType = .Text
                    .Col = 13   'Expanded prospect hole  ("E" = Expanded otherwise blank)
                    HoleData.ExpDrill = .Text
                    .Col = 14   'Total hole depth
                    HoleData.TotDepth = Val(.Value)

                    Hole = New Hole()
                    Hole.Data = HoleData
                    CurrHoleLocation = ThisHoleLocation

                End If
                'Get the split data
                SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                Hole.Splits.Add(SplitData)
            Next RowIdx
            Holes.Add(Hole)
        End With
        Return Holes
    End Function


    Public Class mProdInfoType
        Public ProdType As ProductType

        Public Tpa As Single
        Public WtPct As Single
        Public Bpl As Single
        Public Ins As Single
        Public Fe As Single
        Public Al As Single
        Public Ia As Single
        Public Mg As Single
        Public Ca As Single
        '-----
        Public ReadOnly Property Mer As Single
            Get
                Return gGetQualityMer(Bpl, Fe, Al, Mg, 2)
            End Get
        End Property
        Public ReadOnly Property CaOP2O5 As Single
            Get
                Return gGetQualityP2O5(Ca, Bpl, 2)
            End Get
        End Property
        Public ReadOnly Property Fe2O3P2O5 As Single
            Get
                Return gGetQualityP2O5Times100(Fe, Bpl, 2)
            End Get
        End Property
        Public ReadOnly Property MgOP2O5 As Single
            Get
                Return gGetQualityP2O5Times100(Mg, Bpl, 2)
            End Get
        End Property

        '-----
        Public FeAdj As Single
        Public IaAdj As Single
        '-----
        Public IsOnSpec As Boolean?
        Public BplOffSpecFlag As Boolean
        Public InsOffSpecFlag As Boolean
        Public FeOffSpecFlag As Boolean
        Public AlOffSpecFlag As Boolean
        Public IaOffSpecFlag As Boolean
        Public MgOffSpecFlag As Boolean
        Public CaOffSpecFlag As Boolean
        Public MerOffSpecFlag As Boolean
        Public CaOP2O5OffSpecFlag As Boolean
        Public Fe2O3P2O5OffSpecFlag As Boolean
        Public MgOP2O5OffSpecFlag As Boolean
        '-----
        'Public MgoOffSpec As Boolean?
        '-----
        Public IsOnSpecRej As Boolean?
    End Class

    Public Structure mFdTlInfoType
        Public Tpa As Single
        Public WtPct As Single
        Public Bpl As Single
        Public Ins As Single
        Public WtPctUnMineFlag As Boolean?
    End Structure

    Public Structure mSumDataType
        Public Tpa As Single
        Public TwBpl As Single
        Public BplTons As Double
        Public TwIns As Single
        Public InsTons As Double
        Public TwIa As Single
        Public IaTons As Double
        Public TwFe As Single
        Public FeTons As Double
        Public TwAl As Single
        Public AlTons As Double
        Public TwMg As Single
        Public MgTons As Double
        Public TwCa As Single
        Public CaTons As Double
        '-----
        Public TwFeAdj As Single
        Public FeAdjTons As Double
        Public TwIaAdj As Single
        Public IaAdjTons As Double
    End Structure

    Public Structure gAreaDefnParamsType
        Public AreaMethod As String
        Public BegDrillDate As Date
        Public EndDrillDate As Date
        Public Ownership As String
        Public HoleMetLabProcessType As String
        Public MinedStatus As String
        Public MineName As String
        Public SpecAreaName As String
    End Structure

    Public Structure gDataRdctnParamsType
        Public RcvryScenarioName As String
        Public ProspSetName As String
        Public WhoDefined As String
        Public WhenDefined As Date
        Public MineName As String

        'Recovery factors -- fraRecovery
        Public OvbVolRcvryMode As String      '1
        Public OvbVolRcvryCf As Single        '2
        Public OvbVolRcvryVf As Single        '3
        Public OvbVolRcvryFa As Single        '4
        Public MineVolRcvryMode As String     '5
        Public MineVolRcvryCf As Single       '6
        Public MineVolRcvryVf As Single       '7
        Public MineVolRcvryFa As Single       '8
        Public AdjOsTonsWvol As Integer       '9
        Public AdjPbTonsWvol As Integer       '10
        Public AdjIpTonsWvol As Integer       '11
        Public AdjFdTonsWvol As Integer       '12
        Public AdjClTonsWvol As Integer       '13
        Public PbTonRcvryCrs As Single        '14
        Public PbTonRcvryFne As Single        '15
        Public IpTonRcvryTot As Single        '16
        Public FdTonRcvryCrs As Single        '17
        Public FdTonRcvryFne As Single        '18
        Public FdBplRcvryCrs As Single        '19
        Public FdBplRcvryFne As Single        '20
        Public ClTonRcvryTot As Single        '21
        Public FlotRcvryMode As String        '22
        Public FlotRcvryCrsCf As Single       '23
        Public FlotRcvryCrsVf As Single       '24
        Public FlotRcvryFneCf As Single       '25
        Public FlotRcvryFneVf As Single       '26
        Public FlotRcvryCrsTlBpl As Single    '27
        Public FlotRcvryCrsCnIns As Single    '28
        Public FlotRcvryFneTlBpl As Single    '29
        Public FlotRcvryFneCnIns As Single    '30
        Public LmTest As Integer              '31
        Public HwTest As Integer              '32

        'Product adjustments -- fraProdAdj
        Public CrsPbInsAdjMode As String      '33
        Public CrsPbInsAdj As Single          '34
        Public FnePbInsAdjMode As String      '35
        Public FnePbInsAdj As Single          '36
        Public IpInsAdjMode As String         '37
        Public IpInsAdj As Single             '38
        Public CrsCnInsAdjMode As String      '39
        Public CrsCnInsAdj As Single          '40
        Public FneCnInsAdjMode As String      '41
        Public FneCnInsAdj As Single          '42
        Public AdjInsAfterQualTest As Integer '43

        'Economic and physical mineability criteria -- fraMineability
        Public ClPctMaxSpl As Single          '44
        Public MtxxMaxSpl As Single           '45
        Public MaxTotDepthSpl As Single       '46
        Public MaxTotDepthModeSpl As String   '47
        Public MinOreThk As Single            '48
        Public MinItbThk As Single            '49
        Public ClPctMaxHole As Single         '50
        Public MtxxMaxHole As Single          '51
        Public TotxMaxHole As Single          '52
        Public TotPrTpaMinHole As Single      '53
        Public MineFirstSpl As Integer        '54
        '-----
        Public InclCpbAlways As Boolean       '55
        Public InclFpbAlways As Boolean       '56
        Public InclOsAlways As Boolean        '57
        Public InclCpbNever As Boolean        '58
        Public InclFpbNever As Boolean        '59
        Public InclOsNever As Boolean         '60
        Public CanSelectRejectTpb As Boolean  '61
        Public CanSelectRejectTcn As Boolean  '62    Added 09/09/2009, lss

        'Product quality specifications -- fraProdQual
        'Will use an array of gDataRdctnProdQualType for this

        'Density criteria -- fraDensity
        Public DensCalcMode As String         '63
        Public DensMlvSpecChk As Boolean      '64
        Public DensLrSpecChk As Boolean       '65
        Public DensUpperLimit As Single      '66
        Public DensLowerLimit As Single       '67
        '-----
        Public FlotRcvryMode100 As String     '68
        '-----
        'Insol adjustments for 100% prospect -- fraProdAdj100Pct
        'Added 12/03/2007, lss
        Public CrsPbInsAdjMode100 As String   '69
        Public CrsPbInsAdj100 As Single       '70
        Public FnePbInsAdjMode100 As String   '71
        Public FnePbInsAdj100 As Single       '72
        Public IpInsAdjMode100 As String      '73
        Public IpInsAdj100 As Single          '74
        Public CrsCnInsAdjMode100 As String   '75
        Public CrsCnInsAdj100 As Single       '76
        Public FneCnInsAdjMode100 As String   '77
        Public FneCnInsAdj100 As Single       '78
        '-----
        'Off-spec pebble MgO plant
        'Added 01/07/2008, lss
        Public MplInpBplTarg As Single        '79
        Public MplInpMgoTarg As Single        '80
        Public MplRejBplTarg As Single        '81
        Public MplRejMgoTarg As Single        '82
        Public MplM1BpltRcvry As Single       '83
        Public MplM1BplHwire As Single        '84
        Public MplM1InsHwire As Single        '85
        Public MplM1MgoImprove As Single      '86
        Public MineHasOffSpecPbPlt As Boolean '87
        '-----
        'Override using raw prospect minabilities
        Public UseRawProspAsOverride As Boolean  '88
        '-----
        Public SetPbToMgPlt As Boolean           '89
        '-----
        Public UseFeAdjust As Boolean            '90
        Public UpperZoneFeAdjust As Single       '91
        Public LowerZoneFeAdjust As Single       '92
        '-----
        Public DpCrsPbMgoCutoff As Single        '93  06/10/2010, lss -- Don't realy need but will leave in.
        Public DpFnePbMgoCutoff As Single        '94
        Public DpIpMgoCutoff As Single           '95
        Public DpGrind As Single                 '96
        Public DpAcid As Single                  '97
        Public DpP2o5 As Single                  '98
        Public DpPa64 As Single                  '99
        Public DpFlotMin As Single               '100
        Public DpTargMgo As Single               '101
        '-----
        Public UseDoloflotPlant2010 As Boolean   '102
        Public UseOrigMgoPlant As Boolean        '103
        Public UseDoloflotPlantFco As Boolean    '104
        '-----
        Public WgFeAdjCutoffDate As Date         '105
        '-----
        'New 11/16/2011
        Public DpPctWtM200Mesh As Single         '106
        Public DpCondMinutes As Single           '107
        Public DpCondPctSolids As Single         '108
    End Structure

    Public Structure gDataRdctnProdQualType
        Public MatlTypeName As String
        Public MatlName As String
        Public SpecLevel As String
        Public Bpl As Single
        Public Fe2O3 As Single
        Public Al2O3 As Single
        Public Ia As Single
        Public MgO As Single
        Public CaO As Single
        Public Mer As Single
        Public CaOP2O5 As Single
    End Structure

    Public Structure gProcDataType
        Public Township As Integer
        Public Range As Integer
        Public Section As Integer
        Public HoleLocation As String
        Public Forty As Integer
        Public State As String
        Public Quadrant As Integer
        Public MineName As String
        Public ExpDrill As Integer
        Public SplitTotalNum As Integer
        Public Xcoord As Double
        Public Ycoord As Double
        Public FtlDepth As Single
        Public OvbCored As Single
        Public Ownership As String
        Public ProspDate As String
        Public MinedStatus As Integer
        Public Elevation As Single
        Public TotDepth As Single
        Public Aoi As Single
        Public CoordSurveyed As Integer
        Public HoleComment As String
        Public HoleLocationChar As String
        Public Released As Integer
        Public Redrilled As Integer
        Public RedrillDate As String
        Public UseForReduction As Integer
        Public County As String
        Public BankCode As String
        '-----
        Public SampleId As String
        Public SplitNumber As Integer
        Public Barren As Integer
        Public SplitFtlBottom As Single
        Public MtxTotWetWt As Single
        '-----
        Public MtxMoistWetWt As Single
        Public MtxMoistDryWt As Single
        Public MtxMoistTareWt As Single
        Public MtxMoistWetWt2 As Single
        Public MtxMoistDryWt2 As Single
        Public MtxMoistTareWt2 As Single
        '-----
        Public FdTotWetWt As Single
        Public FdTotWetWtMsr As Single
        Public FdMoistWetWt As Single
        Public FdMoistDryWt As Single
        Public FdMoistTareWt As Single
        Public FdScrnSampWt As Single
        Public DensCylSize As Single
        Public DensCylWetWt As Single
        Public DensCylH2oWt As Single
        Public DryDensity As Single
        Public FlotWetWt As Single
        Public MtxProcWetWt As Single
        Public ExpExcessWt As Single
        Public MtxColor As String
        Public DegConsol As String
        Public DigChar As String
        Public PumpChar As String
        Public Lithology As String
        Public PhosphColor As String
        Public PhysMineable As Integer
        Public ClaySettChar As String
        Public FdScrnSampWtComp As Single
        Public SplitDepthTop As Single
        Public SplitDepthBot As Single
        Public SplitThck As Single
        Public WashDate As String
        Public OrigData As Integer
        Public MetLabComment As String
        Public ChemLabComment As String
        Public RerunStatus As Integer
        Public DateRerun As String
        '-----
        Public SizeFrctnCode As String
        Public SfcBpl As Single
        Public SfcFeAl As Single
        Public SfcInsol As Single
        Public SfcCaO As Single
        Public SfcMgO As Single
        Public SfcFe2O3 As Single
        Public SfcAl2O3 As Single
        Public SfcCd As Single
        Public SizeFrctnWt As Single
        Public SizeFrctnWtMsr As Single
        Public SizeFrctnType As String
        Public SfcProsprawOrder As Integer
        '-----
        Public SfcDescription As String
        Public SfcMatlName As String
        Public SfcMatlAbbrv As String
        Public SfcDefnOrder As Integer
        Public RegAlphaCode As String
        Public RegAnalysisCode As String
        Public ExpAlphaCode As String
        Public ExpAnalysisCode As String
        '-----
        Public OwnershipDesc As String
        Public DegConsolDesc As String
        Public DigCharDesc As String
        Public LithologyDesc As String
        Public MtxColorDesc As String
        Public PhosphColorDesc As String
        Public PumpCharDesc As String
        '-----
        Public OrideMineability As String
        '-----
        Public SplitRawProspMin As Integer
        Public SplitRawProspMinWhen As Date
        Public SplitRawProspMinWho As String
        '-----
        Public HoleRawProspMin As Integer
        Public HoleRawProspMinWhen As Date
        Public HoleRawProspMinWho As String
        '-----
        Public SpecAreaName As String
        Public ClaySettlingLvl As Integer
        Public PbClayPct As Integer
        Public MtxPctSol As Single
        '-----
        Public HardpanFrom As Single
        Public HardpanTo As Single
        Public HardpanThck As Single
        Public HardpanCode As String
    End Structure   'gProcDataType

    Public Structure gProcSfcDataType
        Public SizeFrctnCode As String
        Public SfcBpl As Single
        Public SfcFeAl As Single
        Public SfcInsol As Single
        Public SfcCaO As Single
        Public SfcMgO As Single
        Public SfcFe2O3 As Single
        Public SfcAl2O3 As Single
        Public SfcCd As Single
        Public SizeFrctnWt As Single
        Public SizeFrctnWtMsr As Single
        Public SizeFrctnType As String
        Public SfcDescription As String
        Public SfcMatlName As String
        Public SfcMatlAbbrv As String
    End Structure

    Public Class gRawProspSplRdctnType
        Public Sub New()
            Os = New mProdInfoType()         'PC final      (PC, InsAdj)
            Os100 = New mProdInfoType()       '100% final    (InsAdj)
            Cpb = New mProdInfoType()         'PC final      (PC, InsAdj)
            Cpb100 = New mProdInfoType()      '100% final    (InsAdj)
            CpbRej = New mProdInfoType()      'PC final      (PC, InsAdj)
            CpbRej100 = New mProdInfoType()   '100% final    (InsAdj)
            Fpb = New mProdInfoType()         'PC final      (PC, InsAdj)
            Fpb100 = New mProdInfoType()      '100% final    (InsAdj)
            FpbRej = New mProdInfoType()      'PC final      (PC, InsAdj)
            'FpbRej100 = New mProdInfoType()      'PC final      (PC, InsAdj)
            Tpb = New mProdInfoType()         'PC final      (PC, InsAdj)
            Tpb100 = New mProdInfoType()      '100% final    (InsAdj)
            Ip = New mProdInfoType()          'PC final      (PC, InsAdj)
            Ip100 = New mProdInfoType()       '100% final    (InsAdj)
            Ccn = New mProdInfoType()         'PC final      (PC, InsAdj)
            Ccn100 = New mProdInfoType()      '100% final    (InsAdj)
            Fcn = New mProdInfoType()         'PC final      (PC, InsAdj)
            Fcn100 = New mProdInfoType()      '100% final    (InsAdj)
            Tcn = New mProdInfoType()         'PC final      (PC, InsAdj)
            Tcn100 = New mProdInfoType()      '100% final    (InsAdj)
            OTpr = New mProdInfoType()         'PC final      (PC, InsAdj)
            OTpr100 = New mProdInfoType()      '100% final    (InsAdj)
            ATpr = New mProdInfoType()         'PC final      (PC, InsAdj)
            ATpr100 = New mProdInfoType()      '100% final    (InsAdj)
            Tpr = New mProdInfoType()         'PC final      (PC, InsAdj)
            Tpr100 = New mProdInfoType()
            MgPltInp = New mProdInfoType()        'PC final      (PC, InsAdj)
            MgPltInp100 = New mProdInfoType()     '100% final    (InsAdj)
            MgPltRej = New mProdInfoType()        'PC final      (PC, InsAdj)
            MgPltRej100 = New mProdInfoType()     '100% final    (InsAdj)
            MgPltProd = New mProdInfoType()       'PC final      (PC, InsAdj)
            MgPltProd100 = New mProdInfoType()    '100% final    (InsAdj)
            MgPltTcn = New mProdInfoType()        'PC final      (PC, InsAdj)
            MgPltTcn100 = New mProdInfoType()     '100% final    (InsAdj)
            MgPltTpr = New mProdInfoType()        'PC final      (PC, InsAdj)
            MgPltTpr100 = New mProdInfoType()     '100% final    (InsAdj)
            TpbRej = New mProdInfoType()          'PC final      (PC, InsAdj)
            TpbRej100 = New mProdInfoType()       '100% final    (InsAdj)
            IpRej = New mProdInfoType()          'PC final      (PC, InsAdj)
            IpRej100 = New mProdInfoType()       '100% final    (InsAdj)
            TcnRej = New mProdInfoType()          'PC final      (PC, InsAdj)
            TcnRej100 = New mProdInfoType()       '100% final    (InsAdj)
            DfFpbInp = New mProdInfoType()        'PC final      (PC, InsAdj)
            DfFpbInp100 = New mProdInfoType()     '100% final    (InsAdj)
            DfFpbProd = New mProdInfoType()       'PC final      (PC, InsAdj)
            DfFpbProd100 = New mProdInfoType()    '100% final    (InsAdj)
            DfIpInp = New mProdInfoType()        'PC final      (PC, InsAdj)
            DfIpInp100 = New mProdInfoType()     '100% final    (InsAdj)
            DfIpProd = New mProdInfoType()       'PC final      (PC, InsAdj)
            DfIpProd100 = New mProdInfoType()    '100% final    (InsAdj)
            DfTcn = New mProdInfoType()        'PC final      (PC, InsAdj)
            DfTcn100 = New mProdInfoType()     '100% final    (InsAdj)
            DfTpr = New mProdInfoType()        'PC final      (PC, InsAdj)
            DfTpr100 = New mProdInfoType()     '100% final    (InsAdj)
        End Sub
        Public RowIdxSs As Long 'Temporary property while we are eliminating the 800 column grids
        Public Township As Integer
        Public Range As Integer
        Public Section As Integer
        Public HoleLocation As String
        Public SplitNumber As Integer
        Public SampleId As String
        Public ProspDate As String
        Public MineableCalcd As String  'PC & 100%
        Public MineableOride As String  'PC & 100%
        Public Forty As Integer
        Public Xcoord As Double
        Public Ycoord As Double
        Public Elevation As Single
        Public Ownership As String
        Public Aoi As Single
        Public MinedOutStatus As String
        Public HoleType As String
        Public ExpDrill As String
        Public TotDepth As Single
        Public SplitDepthTop As Single
        Public SplitDepthBot As Single
        Public SplitThck As Single
        Public Override As String
        Public Key As Integer
        Public cClass As String
        Public Bed As String
        Public Level As String
        Public Horizon As String
        '-----
        Public MtxxOnSpec As Single     'PC     Split
        Public TotxOnSpec As Single     'PC     Split
        Public MtxxAll As Single        'PC     Split
        Public TotxAll As Single        'PC     Split
        '-----
        Public MtxxOnSpec100 As Single  '100%   Split
        Public TotxOnSpec100 As Single  '100%   Split
        Public MtxxAll100 As Single     '100%   Split
        Public TotxAll100 As Single     '100%   Split
        '-----
        Public MtxTPA As Single         'Based on matrix density
        Public MtxTpaPc As Single       'Used for PC
        Public MtxBPL As Single         'Don't really care about Matrix BPL!
        Public MtxDensity As Single
        '-----
        Public SplitBarren As Integer
        Public MtxColor As String
        Public DegConsol As String
        Public DigChar As String
        Public PumpChar As String
        Public Lithology As String
        Public PhosphColor As String
        Public SurvCaddHoleId As String
        Public HoleDesc As String
        '-----
        Public MtxPctMoist As Single
        Public MtxPctSol As Single
        Public FdPctMoist As Single
        Public FdPctSol As Single
        Public MtxTotDryWt As Single
        Public FdTotDryWt As Single
        '-----
        '-----100% mineabilities are always the same as PC mineabilities
        '-----
        Public OvbThk As Single             'PC or 100%
        Public ItbThk As Single             'PC or 100%
        Public MtxThk As Single             'PC or 100%
        Public WstThk As Single             'PC or 100%
        '-----
        'PC = Production coeficient
        '-----
        'Oversize
        Public Os As mProdInfoType          'PC final      (PC, InsAdj)
        Public Os100 As mProdInfoType       '100% final    (InsAdj)
        '-----
        'Coarse pebble
        Public Cpb As mProdInfoType         'PC final      (PC, InsAdj)
        Public Cpb100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        '06/25/2010, lss  Added this (for Ona Dolaflot situation)
        'Coarse pebble -- rejected
        Public CpbRej As mProdInfoType      'PC final      (PC, InsAdj)
        Public CpbRej100 As mProdInfoType   '100% final    (InsAdj)
        '-----
        'Fine pebble
        Public Fpb As mProdInfoType         'PC final      (PC, InsAdj)
        Public Fpb100 As mProdInfoType      '100% final    (InsAdj)
        'Fine pebble -- rejected
        Public FpbRej As mProdInfoType      'PC final      (PC, InsAdj)
        'Public FpbRej100 As mProdInfoType      'PC final      (PC, InsAdj)
        '-----
        'Total pebble
        Public Tpb As mProdInfoType         'PC final      (PC, InsAdj)
        Public Tpb100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'IP  IP  IP
        Public Ip As mProdInfoType          'PC final      (PC, InsAdj)
        Public Ip100 As mProdInfoType       '100% final    (InsAdj)
        '-----
        'Coarse concentrate
        Public Ccn As mProdInfoType         'PC final      (PC, InsAdj)
        Public Ccn100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'Fine concentrate
        Public Fcn As mProdInfoType         'PC final      (PC, InsAdj)
        Public Fcn100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'Total concentrate
        Public Tcn As mProdInfoType         'PC final      (PC, InsAdj)
        Public Tcn100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'On-spec Total product
        Public OTpr As mProdInfoType         'PC final      (PC, InsAdj)
        Public OTpr100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'On-spec product
        Public ATpr As mProdInfoType         'PC final      (PC, InsAdj)
        Public ATpr100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'Total product
        Public Tpr As mProdInfoType         'PC final      (PC, InsAdj)
        Public Tpr100 As mProdInfoType      '100% final    (InsAdj)
        '-----
        'Coarse feed
        Public Cfd As mFdTlInfoType         'PC final      (PC)
        Public Cfd100 As mFdTlInfoType      '100% final    ( )
        '-----
        'Fine feed
        Public Ffd As mFdTlInfoType         'PC final      (PC)
        Public Ffd100 As mFdTlInfoType      '100% final    ( )
        '-----
        'Total feed
        Public Tfd As mFdTlInfoType         'PC final      (PC)
        Public Tfd100 As mFdTlInfoType      '100% final    ( )
        '-----
        'Waste clay
        Public Wcl As mFdTlInfoType         'PC final      (ProdCoeff applied)
        Public Wcl100 As mFdTlInfoType      '100% final    ( )
        '-----
        'Tails
        Public TlCrs As mFdTlInfoType       'PC final      (PC)
        Public TlFne As mFdTlInfoType       'PC final      (PC)
        Public Ttl As mFdTlInfoType         'PC final      (PC)
        Public TlCrs100 As mFdTlInfoType    '100% final    (InsAdj)
        Public TlFne100 As mFdTlInfoType    '100%          (InsAdj)
        Public Ttl100 As mFdTlInfoType      '100%          (InsAdj)
        '-----
        '-----MineableHole and MineableHole100 will really be the same!
        '-----
        Public MineableHole As String       'Hole PC
        Public MineableHole100 As String    'Hole 100%
        '-----
        Public PctWclUnMineFlag As Boolean
        Public TotDepthUnMineFlag As Boolean
        Public MtxXUnMineFlag As Boolean
        '-----
        Public TotXUnMineFlag As Boolean     'Hole level
        Public TprTpaUnMineFlag As Boolean   'Hole level
        Public MtxThkUnMineFlag As Boolean   'Hole level
        '-----
        Public CpbOnSpec As String             'Split
        Public FpbOnSpec As String             'Split
        Public TpbOnSpec As String             'Split
        Public CcnOnSpec As String             'Split
        Public FcnOnSpec As String             'Split
        Public TcnOnSpec As String             'Split
        Public OsOnSpec As String              'Split
        Public IpOnSpec As String              'Split
        Public TprOnSpec As String             'Split
        Public ATprOnSpec As String             'Split

        Public TpbOnSpecRej As String          'Split

        Public FpbMgoOffSpec As String      'Split    Added 06/21/2010, lss for Doloflot plant
        Public IpMgoOffSpec As String       'Split    Added 06/21/2010, lss for Doloflot plant
        Public MtxUnMineFlag As Boolean?    'Split
        Public MtxxAllUnMineFlag As Boolean? 'Split
        Public TDephtUnMineFlag As Boolean? 'Split
        Public IsSplitMineable As Boolean?  'Split
        '-----
        Public CpbMinHole As String         'Hole
        Public FpbMinHole As String         'Hole
        Public TpbMinHole As String         'Hole
        Public CcnMinHole As String         'Hole
        Public FcnMinHole As String         'Hole
        Public TcnMinHole As String         'Hole
        Public OsMinHole As String          'Hole
        Public IpMinHole As String          'Hole
        '-----
        Public MtxxOnSpec100Hole As Single  '100%   Hole
        Public TotxOnSpec100Hole As Single  '100%   Hole
        Public MtxxAll100Hole As Single     '100%   Hole
        Public TotxAll100Hole As Single     '100%   Hole
        '-----
        Public MtxxOnSpecPcHole As Single   'PC     Hole
        Public TotxOnSpecPcHole As Single   'PC     Hole
        Public MtxxAllPcHole As Single      'PC     Hole
        Public TotxAllPcHole As Single      'PC     Hole
        '-----
        'MgO plant input
        Public MgPltInp As mProdInfoType        'PC final      (PC, InsAdj)
        Public MgPltInp100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'MgO plant reject
        Public MgPltRej As mProdInfoType        'PC final      (PC, InsAdj)
        Public MgPltRej100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'MgO plant product
        Public MgPltProd As mProdInfoType       'PC final      (PC, InsAdj)
        Public MgPltProd100 As mProdInfoType    '100% final    (InsAdj)
        '-----
        'MgO plant Total Cn including the MgO plant product
        Public MgPltTcn As mProdInfoType        'PC final      (PC, InsAdj)
        Public MgPltTcn100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'MgO plant Total Prod including the MgO plant product
        Public MgPltTpr As mProdInfoType        'PC final      (PC, InsAdj)
        Public MgPltTpr100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'Total pebble -- rejected at washer
        Public TpbRej As mProdInfoType          'PC final      (PC, InsAdj)
        Public TpbRej100 As mProdInfoType       '100% final    (InsAdj)
        '-----
        'IP -- rejected
        Public IpRej As mProdInfoType          'PC final      (PC, InsAdj)
        Public IpRej100 As mProdInfoType       '100% final    (InsAdj)
        '-----
        'Total concentrate -- rejected somewhere!
        Public TcnRej As mProdInfoType          'PC final      (PC, InsAdj)
        Public TcnRej100 As mProdInfoType       '100% final    (InsAdj)

        '06/14/2010, lss
        'Doloflot plant
        'Fine pebble input (Doloflot plant)
        Public DfFpbInp As mProdInfoType        'PC final      (PC, InsAdj)
        Public DfFpbInp100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'Fine pebble reject (Doloflot plant) -- Doloflot plant doesn't have reject.
        '-----
        'Fine pebble product (Doloflot plant)
        Public DfFpbProd As mProdInfoType       'PC final      (PC, InsAdj)
        Public DfFpbProd100 As mProdInfoType    '100% final    (InsAdj)
        '-----
        'IP input (Doloflot plant)
        Public DfIpInp As mProdInfoType        'PC final      (PC, InsAdj)
        Public DfIpInp100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'IP reject (Doloflot plant) -- Doloflot plant doesn't have reject.
        '-----
        'IP reject (Doloflot plant)
        Public DfIpProd As mProdInfoType       'PC final      (PC, InsAdj)
        Public DfIpProd100 As mProdInfoType    '100% final    (InsAdj)
        '-----
        'Total product (Fpb + IP) input (Doloflot plant)
        ''DfTpInp As mProdInfoType        'PC final      (PC, InsAdj)
        ''DfTpInp100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'Total product (Fpb + IP) input (Doloflot plant)
        ''DfTpProd As mProdInfoType       'PC final      (PC, InsAdj)
        ''DfTpProd100 As mProdInfoType    '100% final    (InsAdj)
        '-----
        'Doloflot -- Total Cn including the Doloflot plant product
        Public DfTcn As mProdInfoType        'PC final      (PC, InsAdj)
        Public DfTcn100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        'Doloflot -- Total Prod including the Doloflot plant product
        Public DfTpr As mProdInfoType        'PC final      (PC, InsAdj)
        Public DfTpr100 As mProdInfoType     '100% final    (InsAdj)
        '-----
        Public HardpanFrom As Single
        Public HardpanTo As Single
        Public HardpanThck As Single
        Public HardpanCode As String
    End Class   'gRawProspSplRdctnType

    Public Structure gRawProspSplRdctnSumType
        'OvbThk, ItbThk, MtxThk, WstThk are the same for PC and 100%
        Public OvbThk As Single             'Overburden thickness (includes unmineable splits at top of hole)
        Public ItbThk As Single             'Interburden thickness
        Public MtxThk As Single             'Minable matrix thickness
        Public WstThk As Single             'Waste thickness -- in case we are not worrying about breaking out overburden and interburdens.
        '-----
        Public MtxTPA As Single         'PC
        Public MtxTpa100 As Single      '100
        '-----
        Public Os As mSumDataType       'PC
        Public Cpb As mSumDataType      'PC
        Public CpbRej As mSumDataType   'PC  Added 06/25/2010, lss
        Public Fpb As mSumDataType      'PC
        Public Ip As mSumDataType       'PC
        Public Ccn As mSumDataType      'PC
        Public Fcn As mSumDataType      'PC
        Public Tcn As mSumDataType      'PC
        Public Wcl As mSumDataType      'PC
        Public Cfd As mSumDataType      'PC
        Public Ffd As mSumDataType      'PC
        Public Ttl As mSumDataType      'PC
        '-----
        Public Os100 As mSumDataType      '100%
        Public Cpb100 As mSumDataType     '100%
        Public CpbRej100 As mSumDataType  '100%  Added 06/25/2010, lss
        Public Fpb100 As mSumDataType     '100%
        Public Ip100 As mSumDataType      '100%
        Public Ccn100 As mSumDataType     '100%
        Public Fcn100 As mSumDataType     '100%
        Public Tcn100 As mSumDataType     '100%
        Public Wcl100 As mSumDataType     '100%
        Public Cfd100 As mSumDataType     '100%
        Public Ffd100 As mSumDataType     '100%
        Public Ttl100 As mSumDataType     '100%
        '-----
        'Added these 04/27/2009 for Area Report.
        Public Tpb As mSumDataType         'PC
        Public Tpr As mSumDataType         'PC
        Public Tfd As mSumDataType         'PC
        Public MgPltTcn As mSumDataType    'PC
        Public MgPltTpr As mSumDataType    'PC
        Public Tpb100 As mSumDataType      '100%
        Public Tpr100 As mSumDataType      '100%
        Public Tfd100 As mSumDataType      '100%
        Public MgPltTcn100 As mSumDataType '100%
        Public MgPltTpr100 As mSumDataType '100%
        '-----
        'Miscellaneous -- same for PC and 100%
        Public MtxDensityFt As Single
        Public MtxFt As Single              'Sum of split thicknesses
        Public NumMineableSplits As Integer
        Public NumMineableSplitsForced As Integer
        Public MtxTpaWet As Single
        '-----
        Public MgPltInp As mSumDataType       'PC
        Public MgPltRej As mSumDataType       'PC
        Public MgPltProd As mSumDataType      'PC
        Public MgPltInp100 As mSumDataType    '100
        Public MgPltRej100 As mSumDataType    '100
        Public MgPltProd100 As mSumDataType   '100
        '-----
        Public TpbRej As mSumDataType         'PC
        Public TpbRej100 As mSumDataType      '100%
        '-----
        Public TcnRej As mSumDataType         'PC
        Public TcnRej100 As mSumDataType      '100%

        '06/14/2010, lss
        'Doloflot plant
        'Fine pebble input (Doloflot plant)
        Public DfFpbInp As mSumDataType       'PC
        Public DfFpbInp100 As mSumDataType    '100%
        '-----
        'Fine pebble reject (Doloflot plant) -- Doloflot plant doesn't have reject.
        '-----
        'Fine pebble product (Doloflot plant)
        Public DfFpbProd As mSumDataType        'PC
        Public DfFpbProd100 As mSumDataType     '100%
        '-----
        'IP input (Doloflot plant)
        Public DfIpInp As mSumDataType         'PC
        Public DfIpInp100 As mSumDataType      '100%
        '-----
        'IP reject (Doloflot plant) -- Doloflot plant doesn't have reject.
        '-----
        'IP product (Doloflot plant)
        Public DfIpProd As mSumDataType        'PC
        Public DfIpProd100 As mSumDataType     '100%
        Public HoleAtprWtPct As Double
        '-----
        'Doloflot -- Total Cn including the Doloflot plant product
        'DfTcn As mSumDataType         'PC
        'DfTcn100 As mSumDataType      '100%
        '-----
        'Doloflot -- Total Prod including the Doloflot plant product
        'DfTpr As mSumDataType         'PC
        'DfTpr100 As mSumDataType      '100%
    End Structure

    Public Structure mSecCornerType
        Public Twp As Integer
        Public Sec As Integer
        Public Rge As Integer
    End Structure

    Public Structure mSecCoordType
        Public X As Single
        Public Y As Single
    End Structure

    Public Structure mProdAssignType
        Public OsWt As Single
        Public OsBpl As Single
        Public OsIns As Single
        Public OsCa As Single
        Public OsMg As Single
        Public OsFe As Single
        Public OsAl As Single
        Public OsIa As Single
        '-----
        Public CpbWt As Single
        Public CpbBpl As Single
        Public CpbIns As Single
        Public CpbCa As Single
        Public CpbMg As Single
        Public CpbFe As Single
        Public CpbAl As Single
        Public CpbIa As Single
        '-----
        Public FpbWt As Single
        Public FpbBpl As Single
        Public FpbIns As Single
        Public FpbCa As Single
        Public FpbMg As Single
        Public FpbFe As Single
        Public FpbAl As Single
        Public FpbIA As Single
        '-----
        Public IpWt As Single
        Public IpBpl As Single
        Public IpIns As Single
        Public IpCa As Single
        Public IpMg As Single
        Public IpFe As Single
        Public IpAl As Single
        Public IpIa As Single
        '-----
        Public CfdWt As Single
        Public CfdBpl As Single
        '-----
        Public FfdWt As Single
        Public FfdBpl As Single
        '-----
        Public ClWt As Single
        '-----
        Public TpbWt As Single
        Public TpbBpl As Single
        Public TpbIns As Single
        Public TpbCa As Single
        Public TpbMg As Single
        Public TpbFe As Single
        Public TpbAl As Single
        Public TpbIA As Single
        '-----
        Public TfdWt As Single
        Public TfdBpl As Single
        '-----
        Public CnWt As Single
        Public CnBpl As Single
        Public CnIns As Single
        Public CnCa As Single
        Public CnMg As Single
        Public CnFe As Single
        Public CnAl As Single
        Public CnIa As Single
        '-----
        Public TlWt As Single
        Public TlBpl As Single
        '-----
        Public OsFeAdj As Single
        Public CpbFeAdj As Single
        Public FpbFeAdj As Single
        Public IpFeAdj As Single
        Public TpbFeAdj As Single
        Public CnFeAdj As Single
        '-----
        Public OsIaAdj As Single
        Public CpbIaAdj As Single
        Public FpbIaAdj As Single
        Public IpIaAdj As Single
        Public TpbIaAdj As Single
        Public CnIaAdj As Single
    End Structure

    Public Structure mSfcSumDataType
        Public SizeFrctnCode As String
        Public WtSumPb As Single
        Public WtSumFd As Single
        '-----
        Public WtWBpl As Single
        Public WtWIns As Single
        Public WtWCa As Single
        Public WtWFe As Single
        Public WtWAl As Single
        Public WtWMg As Single
        Public WtWIa As Single
        Public BplWt As Single
        Public InsWt As Single
        Public CaWt As Single
        Public FeWt As Single
        Public AlWt As Single
        Public MgWt As Single
        Public IaWt As Single
        '-----
        Public WtWFeAdj As Single
        Public FeAdjWt As Single
    End Structure

    Public Structure mProdSumDataType
        Public Product As String
        Public WtSumPb As Single
        Public WtSumFd As Single
        '-----
        Public WtWBpl As Single
        Public WtWIns As Single
        Public WtWCa As Single
        Public WtWFe As Single
        Public WtWAl As Single
        Public WtWMg As Single
        Public WtWIa As Single
        Public BplWt As Single
        Public InsWt As Single
        Public CaWt As Single
        Public FeWt As Single
        Public AlWt As Single
        Public MgWt As Single
        Public IaWt As Single
        '-----
        Public WtWFeAdj As Single
        Public FeWtAdj As Single
    End Structure

    Private Structure mMineProbsType
        Public CpbBpl As Boolean
        Public CpbFe As Boolean
        Public CpbAl As Boolean
        Public CpbIa As Boolean
        Public CpbMg As Boolean
        Public CpbCa As Boolean
        Public CpbMer As Boolean
        Public CpbCpr As Boolean
        '-----
        Public FpbBpl As Boolean
        Public FpbFe As Boolean
        Public FpbAl As Boolean
        Public FpbIA As Boolean
        Public FpbMg As Boolean
        Public FpbCa As Boolean
        Public FpbMer As Boolean
        Public FpbCpr As Boolean
        '-----
        Public IpBpl As Boolean
        Public IpFe As Boolean
        Public IpAl As Boolean
        Public IpIa As Boolean
        Public IpMg As Boolean
        Public IpCa As Boolean
        Public IpMer As Boolean
        Public IpCpr As Boolean
        '-----
        Public CcnBpl As Boolean
        Public CcnFe As Boolean
        Public CcnAl As Boolean
        Public CcnIa As Boolean
        Public CcnMg As Boolean
        Public CcnCa As Boolean
        Public CcnMer As Boolean
        Public CcnCpr As Boolean
        '-----
        Public FcnBpl As Boolean
        Public FcnFe As Boolean
        Public FcnAl As Boolean
        Public FcnIa As Boolean
        Public FcnMg As Boolean
        Public FcnCa As Boolean
        Public FcnMer As Boolean
        Public FcnCpr As Boolean
        '-----
        Public TpbBpl As Boolean
        Public TpbFe As Boolean
        Public TpbAl As Boolean
        Public TpbIA As Boolean
        Public TpbMg As Boolean
        Public TpbCa As Boolean
        Public TpbMer As Boolean
        Public TpbCpr As Boolean
        '-----
        Public TcnBpl As Boolean
        Public TcnFe As Boolean
        Public TcnAl As Boolean
        Public TcnIa As Boolean
        Public TcnMg As Boolean
        Public TcnCa As Boolean
        Public TcnMer As Boolean
        Public TcnCpr As Boolean
        '-----
        Public PctWcl As Boolean
        Public TotDepth As Boolean
        Public MtxX As Boolean
        '-----
        Public TotX As Boolean     'Hole level
        Public TprTpa As Boolean   'Hole level
        Public MtxThk As Boolean   'Hole level
    End Structure

    Public Structure gSplThkType
        Public SplNum As Integer
        Public SplThk As Single
        Public SplMineable As String
        Public SplitDepthTop As Single
        Public SplitDepthBot As Single
        Public SplAdjThk As Single
    End Structure

    'Private Declare Function GetAsyncKeyState Lib "user32"
    '    (ByVal vKey As Long) As Integer
    'Private Const VK_ESCAPE = &H1B
    'Private Const VK_LBUTTON = &H1

    Public Function gGetProspDatasetTfileLoc(ByVal aUserId As String) As String

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        On Error GoTo gGetProspDatasetTfileLocError

        Dim params As OraParameters
        Dim SQLStmt As OraSqlStmt
        Dim UserInfoDynaset As OraDynaset
        Dim ThisLoc As String
        Dim RecordCount As Integer

        gGetProspDatasetTfileLoc = ""

        'Get the users prospect user miscellaneous info
        'USER_ID is in upper-case in PROSP_USER_MISC
        params = gDBParams

        params.Add("pUserId", StrConv(aUserId, vbUpperCase), ORAPARM_INPUT)
        params("pUserId").serverType = ORATYPE_VARCHAR2

        params.Add("pResult", 0, ORAPARM_OUTPUT)
        params("pResult").serverType = ORATYPE_CURSOR

        'PROCEDURE get_prosp_user_misc
        'pUserId             IN     VARCHAR2,
        'pResult             IN OUT c_usermisc)
        SQLStmt = gOradatabase.CreateSql("Begin mois.mois_prosp_data_rdctn.get_prosp_user_misc(" +
                  ":pUserId, :pResult);end;", ORASQL_FAILEXEC)
        UserInfoDynaset = params("pResult").Value
        ClearParams(params)
        RecordCount = UserInfoDynaset.RecordCount

        If RecordCount = 1 Then
            UserInfoDynaset.MoveFirst()
            ThisLoc = UserInfoDynaset.Fields("prosp_dataset_tfile_loc").Value
        Else
            ThisLoc = ""
        End If

        UserInfoDynaset.Close()

        gGetProspDatasetTfileLoc = ThisLoc

        Exit Function

gGetProspDatasetTfileLocError:
        MsgBox("Error getting text file location." & vbCrLf &
               Err.Description,
               vbOKOnly + vbExclamation,
               "File Location Error")

        On Error Resume Next
        ClearParams(params)
        On Error Resume Next
        UserInfoDynaset.Close()
    End Function

    Public Sub gLoadOverrideTxtFile(ByVal aTxtFileName As String,
                                    ByRef aOverrideSpr As AxvaSpread)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        On Error GoTo gLoadOverrideTxtFileError

        Dim a As Object
        Dim fs As Object
        Dim ThisStr As String

        aOverrideSpr.MaxRows = 0

        'Check split override text file name
        If Trim(aTxtFileName) = "" Then
            MsgBox("You must enter a text file name." +
                    Chr(10) + Chr(10) + "Split override data not loaded!", vbExclamation, "Error Loading Data")

            Exit Sub
        End If

        'Open the split override text file and process it
        fs = CreateObject("Scripting.FileSystemObject")
        a = fs.OpenTextFile(aTxtFileName, 1)

        Do While Not a.atendofstream
            ThisStr = a.ReadLine
            ProcessSplitOverrideStr(ThisStr, aOverrideSpr)
        Loop

        MsgBox("Data load completed.",
               vbOKOnly, "Data Load")

        Exit Sub

gLoadOverrideTxtFileError:
        MsgBox("Error loading split override text file." & vbCrLf &
               Err.Description,
               vbOKOnly + vbExclamation,
               "Split Override Load Error")
    End Sub

    Private Sub ProcessSplitOverrideStr(ByVal aString As String,
                                        ByRef aOverrideSpr As AxvaSpread)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim ThisSec As Integer
        Dim ThisTwp As Integer
        Dim ThisRge As Integer
        Dim ThisHole As String
        Dim ThisMineStatus As String
        Dim ThisHoleLoc As String
        Dim SplIdx As Integer

        'String will look like:
        '013332236742642MMUUUUU or '013332236742642 M M UUU UU
        'The blanks in the second case indicate don't care (use
        'calculated mineability).

        'sqdtwrgscftholeH1234556789...
        's    = State
        'qd   = Quadrant
        'tw   = Township
        'rg   = Range
        'sc   = Section
        'hole = Hole
        'H    = Hole override mineability (will be ignored)
        '1    = Split#1 override mineability
        '2    = Split#2 override mineability
        '3    = Split#3 override mineability
        '4    = Split#4 override mineability
        'Etc.

        If Len(Trim(aString)) > 15 Then
            ThisTwp = Mid(aString, 4, 2)
            ThisRge = Mid(aString, 6, 2)
            ThisSec = Mid(aString, 8, 2)
            ThisHole = Mid(aString, 12, 4)

            '07/12/2007, lss
            'Note:  The character in Column 16 indicates the Hole mineability.
            '       The MOIS system will not deal with override hole mineabilities
            '       at this time -- only split override mineabilities.  The split
            '       mineabilities begin in column 17! The following line of code
            '       was:  ThisMineStatus = Mid(aString, 16)

            ThisMineStatus = Mid(aString, 17)
            ThisHoleLoc = gGetHoleLocationTrs(ThisSec,
                                              ThisTwp,
                                              ThisRge,
                                              ThisHole)

            For SplIdx = 1 To Len(ThisMineStatus)
                With aOverrideSpr
                    .MaxRows = .MaxRows + 1
                    .Row = .MaxRows
                    .Col = 1
                    .Text = ThisHoleLoc
                    .Col = 2
                    .Value = SplIdx
                    .Col = 3    'Mineability - M, U, C
                    .Text = "C"     'Default to use calculated mineability
                    If StrConv(Mid(ThisMineStatus, SplIdx, 1), vbUpperCase) = "M" Then
                        .Text = "M"
                    End If
                    If StrConv(Mid(ThisMineStatus, SplIdx, 1), vbUpperCase) = "U" Then
                        .Text = "U"
                    End If
                End With
            Next SplIdx
        End If
    End Sub


    Public Property gFormProspDataReduction As frmProspDataReduction


    Public Function gGenerateProspectDataset(ByVal aAreaDefnData As ViewModels.ProspectAreaDefinition,
                                             ByVal aSsProdDist As ViewModels.ProductSizeDesignation,
                                             ByRef aRcvryParamsData As gDataRdctnParamsType,
                                             ByRef aRcvryProdQual As ViewModels.ProductRecoveryDefinition,
                                             ByRef aSsSplitReview As AxvaSpread,
                                             ByRef aSsCompReview As AxvaSpread,
                                             ByVal aSplitOverrideName As String,
                                             ByRef aSsRawProspMin As AxvaSpread,
                                             ByRef aSfcReproData(,) As String,
                                             ByVal aScope As String,
                                             ByVal aNoReview As Boolean,
                                             ByVal aSaveType As String,
                                             ByVal aMineHasOffSpecPbPlt As Boolean,
                                             ByVal aProspectDatasetName As String,
                                             ByVal aProspDatasetTextFileName As String,
                                             ByVal aChk100Pct As Integer,
                                             ByVal aChkProductionCoefficient As Integer,
                                             ByVal aOptInclSplits As Boolean,
                                             ByVal aOptInclComposites As Boolean, ByVal aOptInclBoth As Boolean,
                                             ByVal aChkInclMgPlt As Integer,
                                             ByVal aUseOrigHole As Boolean,
                                             ByVal aMineHasDoloflotPlt As Boolean,
                                             Optional ByVal ProdSizeDefnName As String = "Not Defined") As SplitResultSet


        'Dim aRawProspDynaset As OraDynaset = Nothing
        Dim ReturnValue As Integer = 1
        Dim ProspResult As SplitResultSet = New SplitResultSet()

        Try

            '06/15/2010, lss  27 Parameters at this time.
            Dim RawProspDataStatus As Boolean
            Dim SkipMinedOutHoles As Integer
            Dim ProcessStatus As Boolean

            'aScope will be "Hole" or "Batch"

            'gGenerateProspectDataset = 1   OK
            'gGenerateProspectDataset = 2   User escaped
            'gGenerateProspectDataset = 3   Problems

            '
            ' 5) aSsProdDist
            '    -----------
            '    Spreadsheet assigning each SFC used in the data reduction to
            '    a "product".
            '    The products are:
            '        OS    -- oversize
            '        CrsPb -- coarse pebble
            '        FnePb -- fine pebble
            '        IP    -- intermediate product
            '        CrsFd -- coarse feed
            '        FneFd -- fine feed
            '        Clay  -- waste clay
            '
            ' 5) aRcvryData
            '    ----------
            '    User assigned data from the "Prod Adj", "Recovery" and "Mineability"
            '    tabs on form frmProspDataReduction.
            '
            ' 6) RcvryProdQual()
            '    ---------------
            '    User assigned data from the "Prod Qual" tab on form frmProspDataReduction.
            '
            ' 7) aSsSplitReview
            '    --------------
            '    The "results" of this procedure will go into this spreadsheet (reduced
            '    splits).
            '
            ' 8) aSsCompReview
            '    -------------
            '    Eventually the "results" of compositing splits will go here but I
            '    don't think that this procedure will do it.  Will pass it in here for
            '    now though.
            '
            ' 9) aSplitOverrideName
            '    ------------------
            '
            '10) aSfcData()
            '    ----------
            '    This is an array that contains data that divides any SFC that
            '    is used in the raw prospect data for a split into the SFC's
            '    that are actually going to be used in the data reduction.

            If aAreaDefnData.MinedStatus = "Yes" Then
                SkipMinedOutHoles = 1
            Else
                SkipMinedOutHoles = 0
            End If

            If aNoReview Then
                aSsSplitReview.ReDraw = False
                aSsCompReview.ReDraw = False
                aSsSplitReview.Visible = False
                aSsCompReview.Visible = False
            Else
                aSsSplitReview.ReDraw = True
                aSsCompReview.ReDraw = True
                aSsSplitReview.Visible = True
                aSsCompReview.Visible = True
            End If

            'First need to get the raw prospect data we will be dealing with.
            'Each row in the dynaset (RawProspDynaset) is some size fraction code
            'data for a split.
            '
            'NOTE: Splits that are barren have no size fraction code data
            '      will still show up in RawProspDynaset.

            'Get the raw prospect data from the database -- will be in aRawProspDynaset.
            'May not have to get the data if we already have it.
            If Not gHaveRawProspData Then
                If aScope = "Batch" Then
                    gFormProspDataReduction.lblProcComm0.Text = "Getting raw prosp data from database..."
                    gFormProspDataReduction.Refresh()
                End If
                If aScope = "Hole" Then
                    'frmProspDataHoleReduction.sbrMain.Panels(1).Text = "Getting raw prosp data from database..."
                    'frmProspDataHoleReduction.Refresh()
                End If

                RawProspDataStatus = GetAreaRawProspData(aAreaDefnData,
                                                         SkipMinedOutHoles,
                                                         aSplitOverrideName,
                                                         aScope,
                                                         aUseOrigHole)

                If Not RawProspDataStatus Then

                    If aScope = "Batch" Then
                        gFormProspDataReduction.lblProcComm0.Text = ""
                        gFormProspDataReduction.lblProcComm1.Text = ""
                        gFormProspDataReduction.lblProcComm2.Text = ""
                    End If

                    gHaveRawProspData = False

                    'ReturnValue = 3
                    'Return ReturnValue
                    ProspResult.IntResult = 3
                    Return ProspResult

                Else
                    gHaveRawProspData = True
                End If
            Else
                If aScope = "Batch" Then
                    gFormProspDataReduction.lblProcComm0.Text = "Already have raw prosp data."
                    gFormProspDataReduction.lblProcComm1.Text = CStr(gRawProspDynaset.RecordCount) &
                                                                 " SFC items to process"
                    gFormProspDataReduction.Refresh()
                End If
            End If

            'Now we need to process the data which is in RawProspDynaset.
            'ProcessAreaRawProspData will reduce the raw prospect data based
            'on parameters defined by the user -- it will place splits in ssSplitReview
            'on frmProspDataReduction.
            If aScope = "Batch" Then
                gFormProspDataReduction.lblProcComm0.Text = "Reducing raw prospect data..."
                gFormProspDataReduction.Refresh()
            End If
            If aScope = "Hole" Then
                'frmProspDataHoleReduction.sbrMain.Panels(1).Text = "Reducing raw prospect data..."
                'frmProspDataHoleReduction.Refresh()
            End If

            Dim MinableOride() As String
            Dim SavedMinableOrides As Boolean
            If aSsSplitReview.MaxRows <> 0 Then
                ReDim MinableOride(aSsSplitReview.MaxRows)
                'Need to keep the minable overrides from the previous run so that
                'we don't lose then -- in case the user modified them.
                For RowIdx = 1 To aSsSplitReview.MaxRows
                    With aSsSplitReview
                        .Row = RowIdx
                        .Col = 5
                        MinableOride(RowIdx) = .Text
                    End With
                Next RowIdx
                SavedMinableOrides = True
            End If


            'Reduce the raw prospect data and determine split minabilities.
            ProspResult = ProcessAreaRawProspData(aAreaDefnData,
                                                  gRawProspDynaset,
                                                  aSsProdDist,
                                                  aRcvryParamsData,
                                                  aRcvryProdQual,
                                                  aSsRawProspMin,
                                                  aSfcReproData,
                                                  aSplitOverrideName,
                                                  aScope,
                                                  ProdSizeDefnName)

            If ProspResult.IntResult <> 1 Then
                'ReturnValue = ProspResult.IntResult
                'Return ReturnValue
                Return ProspResult
            End If


            'The split mineabilities are also now set in aSsSplitReview (Col 4 =
            'Mineable Calc'd).  Also have Col 5 = Mineable Oride.
            'The mineability was determined using the ProdCoeff data.
            'Now we have to composite the mineable splits. We will need to composite both ProdCoeff data
            'and 100% data.  The split mineabilities in both cases will be the
            'same!

            'We must now process through the splits hole by hole to analyze
            'mineability on a total hole basis -- some of the split minabilities
            'may change.

            If ProspResult.SplitResults.Count > 0 Then
                If aScope = "Batch" Then
                    gFormProspDataReduction.lblProcComm0.Text = "Determining hole mineabilities..."
                    gFormProspDataReduction.Refresh()
                End If

                Dim IsIPDistributedTo As Boolean = False
                IsIPDistributedTo = MatlDistributedTo(aSsProdDist, "IP")

                Dim HoleResultSet As New HoleResultSet()
                Dim HoleDesc As String = String.Empty
                Dim Hole As Hole
                For Each Split As gRawProspSplRdctnType In ProspResult.SplitResults
                    If Not HoleDesc.Equals(Split.HoleDesc) Then
                        Hole = New Hole()
                        HoleResultSet.HoleResults.Add(Hole)
                        HoleDesc = Split.HoleDesc
                        With Hole.Data
                            'This is the first split that we have for this hole!
                            'Will "initiate" the overburden thickness at this point!
                            .OvbThk = Split.SplitDepthTop

                            'Need to capture these values that were determined
                            'during the hole mineability processing.
                            'Note that these are all hole data values.
                            .OsOnSpec = Split.OsMinHole
                            .CpbOnSpec = Split.CpbMinHole
                            .FpbOnSpec = Split.FpbMinHole
                            .TpbOnSpec = Split.TpbMinHole
                            .IpOnSpec = Split.IpMinHole
                            .CcnOnSpec = Split.CcnMinHole
                            .FcnOnSpec = Split.FcnMinHole
                            .TcnOnSpec = Split.TcnMinHole
                            '-----
                            .MtxxOnSpecPcHole = Split.MtxxOnSpecPcHole
                            .MtxxOnSpec100Hole = Split.MtxxOnSpec100Hole
                            .TotxOnSpecPcHole = Split.TotxOnSpecPcHole
                            .TotxOnSpec100Hole = Split.TotxOnSpec100Hole

                            'Assign some basic hole data that does not need to be composited.
                            .Township = Split.Township
                            .Range = Split.Range
                            .Section = Split.Section
                            .HoleLocation = Split.HoleLocation
                            .HoleDesc = Split.HoleDesc
                            .SurvCaddHoleId = Split.SurvCaddHoleId
                            .SplitNumber = 0
                            .ProspDate = Split.ProspDate
                            .Forty = Split.Forty
                            .Xcoord = Split.Xcoord
                            .Ycoord = Split.Ycoord
                            .Elevation = Split.Elevation  'Elevations with the splits are hole elevations
                            '(not the elevation of the split).

                            'Changes 10/19/2011, lss
                            .HardpanFrom = Split.HardpanFrom
                            .HardpanTo = Split.HardpanTo
                            .HardpanThck = Split.HardpanThck
                            .HardpanCode = Split.HardpanCode
                            '-----
                            .Ownership = Split.Ownership
                            .MinedOutStatus = Split.MinedOutStatus
                            .HoleType = Split.HoleType
                            .ExpDrill = Split.ExpDrill
                            .TotDepth = Split.TotDepth    'Total hole depth
                            .Override = Split.Override

                            '1 = Key (minable MTX) / 0 = Non-key (everything else)
                            'This assignment is NOT correct -- needs to be fixed!  It is not
                            'critical to anything that I know of.
                            .Key = Split.Key

                            .cClass = Split.cClass
                            .Bed = Split.Bed
                            .Level = Split.Level
                            .Horizon = Split.Horizon
                            .MtxColor = Split.MtxColor
                            .DegConsol = Split.DegConsol
                            .DigChar = Split.DigChar
                            .PumpChar = Split.PumpChar
                            .Lithology = Split.Lithology
                            .PhosphColor = Split.PhosphColor
                        End With
                        Hole.Splits.Add(Split)
                    Else
                        Hole.Splits.Add(Split)
                    End If
                Next

                'Alfonso: now that we have the Holes with their Splits in object collections: life would be much easier.


                'Will process for hole mineability based on ProdCoeff.  This hole mineablity
                'will apply to both ProdCoeff and 100%.
                'ProcessStatus = ProcessForHoleMineability(aSsSplitReview,
                '                                          aRcvryParamsData,
                '                                          aRcvryProdQual,
                '                                          IsIPDistributedTo,
                '                                          aScope)

                ProcessStatus = ProcessForHoleMineability2(HoleResultSet.HoleResults,
                                                           aRcvryParamsData,
                                                           aRcvryProdQual,
                                                           IsIPDistributedTo,
                                                           aScope)

                If aScope = "Batch" Then
                    gFormProspDataReduction.lblProcComm0.Text = "Compositing splits..."
                    gFormProspDataReduction.Refresh()
                End If

                'Will composite for both ProdCoeff and 100%.  All of the composited
                ' data will be in ssCompReview.


                gCompositeSplitData2(HoleResultSet.HoleResults,
                                            aRcvryParamsData,
                                            aRcvryProdQual,
                                            False,
                                            IsIPDistributedTo)


                For Each Hole2 As Hole In HoleResultSet.HoleResults
                    ProspResult.HoleResults.Add(Hole2.Data)
                Next

                For Each Hole2 As Hole In HoleResultSet.HoleResults
                    AssignCompositedHoleData(aSsCompReview, Hole2.Data)
                Next

                If aScope = "Batch" Then
                    gFormProspDataReduction.lblProcComm0.Text = "Split reduction complete."
                    gFormProspDataReduction.Refresh()
                End If

                If aNoReview Then
                    ProcessStatus = gSaveProspectDataset(aSaveType,
                                                        aProspectDatasetName,
                                                        aProspDatasetTextFileName,
                                                        aChk100Pct,
                                                        aChkProductionCoefficient,
                                                        aOptInclSplits,
                                                        aOptInclComposites,
                                                        aOptInclBoth,
                                                        aSsCompReview,
                                                        aSsSplitReview,
                                                        ProspResult.SplitResults,
                                                        ProspResult.HoleResults,
                                                        aMineHasOffSpecPbPlt,
                                                        aChkInclMgPlt,
                                                        False,
                                                        0,
                                                        aNoReview,
                                                        1,
                                                        aRcvryParamsData.SetPbToMgPlt,
                                                        aMineHasDoloflotPlt,
                                                        aRcvryProdQual.UseAdjustedFeToDetermineMineability)
                    Select Case aSaveType
                        Case "MoisText", "SurvCaddText"
                            If Not aProspDatasetTextFileName.Equals(String.Empty) Then
                                Using sw As New System.IO.StreamWriter(aProspDatasetTextFileName, True)
                                    For Each line As String In gOutputLines
                                        sw.WriteLine(line)
                                    Next
                                    sw.Flush()
                                    sw.Close()
                                End Using
                                gOutputLines.Clear()
                            End If

                        Case "BdFormatText"
                    'FileClose(gFileNumber)
                        Case "Database"
                            'Not implemented
                    End Select
                    If aScope = "Batch" Then
                        gFormProspDataReduction.lblProcComm0.Text = "Reduction complete."
                        gFormProspDataReduction.Refresh()
                    End If
                    'Return ReturnValue
                    Return ProspResult

                Else
                    For Each Split As gRawProspSplRdctnType In ProspResult.SplitResults
                        Dim SplitRow As Long
                        SplitRow = PlaceInSplitSprd(aSsSplitReview, Split, aNoReview)
                        Split.RowIdxSs = SplitRow
                        FlagUnMineableSsSplitReview(aSsSplitReview, Split, SplitRow)
                        UpdateSsSplitReview(aSsSplitReview, Split, aRcvryParamsData, SplitRow)
                        SplitTpaMiscToSsSplitReview(aSsSplitReview, Split, aRcvryParamsData, SplitRow)
                        If SavedMinableOrides Then
                            With aSsSplitReview
                                .Row = SplitRow
                                .Col = 5
                                .Text = MinableOride(SplitRow)
                            End With
                            Split.MineableOride = MinableOride(SplitRow)
                        End If
                    Next
                End If

            Else
                MessageBox.Show("No holes were found in the designated area that met your requirements!",
                                "Prospect Dataset Generate Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)

                'ReturnValue = 3
                ProspResult.IntResult = 3
            End If

            'Return ReturnValue
            Return ProspResult

        Catch ex As Exception

            MsgBox("Error generating prospect dataset." & vbCrLf &
                          Err.Description,
                          vbOKOnly + vbExclamation,
                          "Prospect Dataset Generate Error")
            'ReturnValue = 3
            ProspResult.IntResult = 3

            If aScope = "Batch" Then
                gFormProspDataReduction.lblProcComm0.Text = ""
                gFormProspDataReduction.lblProcComm1.Text = ""
                gFormProspDataReduction.lblProcComm2.Text = ""
            End If

            'Return ReturnValue
            Return ProspResult
        End Try

    End Function


    Private Function GetAreaRawProspData(ByVal aAreaDefnData As ViewModels.ProspectAreaDefinition,
                                         ByVal aSkipMinedOutHoles As Integer,
                                         ByVal aSplitOverrideName As String,
                                         ByVal aScope As String,
                                         ByVal aUseOrigHole As Boolean) As Boolean


        Dim ReturnValue As Boolean
        Dim params As OraParameters
        Dim SQLStmt As OraSqlStmt
        '-----
        Dim SwTwp(0 To 5) As Integer
        Dim SwRge(0 To 5) As Integer
        Dim NeTwp(0 To 5) As Integer
        Dim NeRge(0 To 5) As Integer
        '-----
        Dim SWXcoord(0 To 5) As Double
        Dim SWYcoord(0 To 5) As Double
        Dim NEXcoord(0 To 5) As Double
        Dim NEYcoord(0 To 5) As Double
        '-----
        Dim Twp(0 To 20) As Integer
        Dim Rge(0 To 20) As Integer
        Dim Sec(0 To 20) As Integer
        Dim Hole(0 To 20) As Integer
        '-----
        Dim RecordCount As Long
        Dim RowIdx As Integer
        Dim ColIdx As Integer

        Dim SplitOverrideName As String

        Dim SqlStr As String
        Dim UseSqlStr As Boolean
        'On Error GoTo GetAreaRawProspDataError
        Try

            'Methods for getting area data:
            '1) TRS Corner              GetTrsCornerSql (Build dynamic SQL)
            '2) TRS Corner, XY Coords   get_prosp_raw_defined_areao    mois_raw_prospectnew
            '3) By holes                get_prosp_raw_defined_areaho   mois_raw_prospectnew
            '4) Mine name               get_prosp_raw_defined_aream2o  mois_raw_prospectnew

            'aUseOrigHole only applies to single hole reductions where the user wants to
            'reduce the original hole to a redrilled hole (aAreaDefnData.AreaMethod = "By Holes"
            'and aUseOrigHole will be True).  In almost all cases aUseOrigHole will be False.

            gRawProspDynaset = Nothing

            SqlStr = ""
            UseSqlStr = True

            If aSplitOverrideName = "" Then
                SplitOverrideName = "None"
            Else
                SplitOverrideName = aSplitOverrideName
            End If

            For RowIdx = 1 To 5
                SwTwp(RowIdx) = 0
                SwRge(RowIdx) = 0
                NeTwp(RowIdx) = 0
                NeRge(RowIdx) = 0
                SWXcoord(RowIdx) = 0
                SWYcoord(RowIdx) = 0
                NEXcoord(RowIdx) = 0
                NEYcoord(RowIdx) = 0
                Twp(RowIdx) = 0
                Rge(RowIdx) = 0
                Sec(RowIdx) = 0
                Hole(RowIdx) = 0
            Next RowIdx

            'If the user has defined an area by using T-R-S for the
            'SW and NE (instead of coordinates) we will get all of the
            'section data within the T-R's that are included -- we will
            'be bringing back extra sections but will determine which
            'sections we need at a later point (SectionInRange in
            'GetProcessThisSplit).

            If aAreaDefnData.ByTRSCornersAreaMethod Then
                Dim index As Integer = 0
                For Each item In aAreaDefnData.TRSCorners
                    index += 1
                    SwTwp(index) = Val(item.SW_Township)
                    SwRge(index) = Val(item.SW_Range)
                    NeTwp(index) = Val(item.NE_Township)
                    NeRge(index) = Val(item.NE_Range)
                    If index = 5 Then Exit For
                Next
            End If

            If aAreaDefnData.ByXYCoordinatesAreaMethod Then
                Dim index As Integer = 0
                For Each item In aAreaDefnData.XYCorners
                    index += 1
                    SWXcoord(index) = item.SW_XCoordinate
                    SWYcoord(index) = item.SW_YCoordinate
                    NEXcoord(index) = item.NE_XCoordinate
                    NEYcoord(index) = item.NE_YCoordinate
                    If index = 5 Then Exit For
                Next
            End If

            If aAreaDefnData.ByHolesAreaMethod Then
                Dim index As Integer = 0
                For Each item In aAreaDefnData.Holes
                    index += 1
                    Twp(index) = Val(item.Hole_Township)
                    Rge(index) = Val(item.Hole_Range)
                    Sec(index) = Val(item.Hole_Section)
                    Hole(index) = Val(item.Hole_Location)
                    If index = 20 Then Exit For
                Next
            End If

            If aAreaDefnData.ByTRSCornersAreaMethod Or
                aAreaDefnData.ByXYCoordinatesAreaMethod Then

                '08/22/2007, lss
                'The Else part of this If-Then-Else statement is really no longer
                'needed -- creating dynamic SQL using GetTrsCornerSql works
                'much better for AreaMethod = "TRS Corner".
                If aAreaDefnData.ByTRSCornersAreaMethod And UseSqlStr = True Then
                    'Does not return redrills (the original hole that was redrilled),
                    'unreleased holes, or not use-for-reduction holes.  User can select
                    'whether or not to return mined-out holes!
                    SqlStr = GetTrsCornerSql(aSkipMinedOutHoles,
                                             SwTwp,
                                             SwRge,
                                             NeTwp,
                                             NeRge,
                                             aAreaDefnData.TRSCorners.ToList,
                                             aSplitOverrideName)

                    'Check to see if the SQL that has been created make sense!

                    If Mid(SqlStr, 1, 1) = ")" Then
                        ReturnValue = False
                        Return ReturnValue
                    End If

                    gRawProspDynaset = gOradatabase.CreateDynaset(SqlStr, ORADYN_DEFAULT)
                    RecordCount = gRawProspDynaset.RecordCount
                Else
                    params = gDBParams

                    params.Add("pAreaMode", aAreaDefnData.AreaMethod, ORAPARM_INPUT)
                    params("pAreaMode").serverType = ORATYPE_VARCHAR2

                    params.Add("pSkipMinedOutHoles", aSkipMinedOutHoles, ORAPARM_INPUT)
                    params("pSkipMinedOutHoles").serverType = ORATYPE_NUMBER

                    params.Add("pSplitOrideSetName", aSplitOverrideName, ORAPARM_INPUT)
                    params("pSplitOrideSetName").serverType = ORATYPE_VARCHAR2

                    '04/25/2007, lss -- removed this for now!
                    'params.Add "pProspSetName", "User split override set", ORAPARM_INPUT
                    'params("pProspSetName").servertype = ORATYPE_VARCHAR2
                    '-----
                    params.Add("pSwTwp1", SwTwp(1), ORAPARM_INPUT)
                    params("pSwTwp1").serverType = ORATYPE_NUMBER

                    params.Add("pSwRge1", SwRge(1), ORAPARM_INPUT)
                    params("pSwRge1").serverType = ORATYPE_NUMBER

                    params.Add("pNeTwp1", NeTwp(1), ORAPARM_INPUT)
                    params("pNeTwp1").serverType = ORATYPE_NUMBER

                    params.Add("pNeRge1", NeRge(1), ORAPARM_INPUT)
                    params("pNeRge1").serverType = ORATYPE_NUMBER

                    params.Add("pSwXcoord1", SWXcoord(1), ORAPARM_INPUT)
                    params("pSwXcoord1").serverType = ORATYPE_NUMBER

                    params.Add("pSwYcoord1", SWYcoord(1), ORAPARM_INPUT)
                    params("pSwYcoord1").serverType = ORATYPE_NUMBER

                    params.Add("pNeXcoord1", NEXcoord(1), ORAPARM_INPUT)
                    params("pNeXcoord1").serverType = ORATYPE_NUMBER

                    params.Add("pNeYcoord1", NEYcoord(1), ORAPARM_INPUT)
                    params("pNeYcoord1").serverType = ORATYPE_NUMBER
                    '-----
                    params.Add("pSwTwp2", SwTwp(2), ORAPARM_INPUT)
                    params("pSwTwp2").serverType = ORATYPE_NUMBER

                    params.Add("pSwRge2", SwRge(2), ORAPARM_INPUT)
                    params("pSwRge2").serverType = ORATYPE_NUMBER

                    params.Add("pNeTwp2", NeTwp(2), ORAPARM_INPUT)
                    params("pNeTwp2").serverType = ORATYPE_NUMBER

                    params.Add("pNeRge2", NeRge(2), ORAPARM_INPUT)
                    params("pNeRge2").serverType = ORATYPE_NUMBER

                    params.Add("pSwXcoord2", SWXcoord(2), ORAPARM_INPUT)
                    params("pSwXcoord2").serverType = ORATYPE_NUMBER

                    params.Add("pSwYcoord2", SWYcoord(2), ORAPARM_INPUT)
                    params("pSwYcoord2").serverType = ORATYPE_NUMBER

                    params.Add("pNeXcoord2", NEXcoord(2), ORAPARM_INPUT)
                    params("pNeXcoord2").serverType = ORATYPE_NUMBER

                    params.Add("pNeYcoord2", NEYcoord(2), ORAPARM_INPUT)
                    params("pNeYcoord2").serverType = ORATYPE_NUMBER
                    '-----
                    params.Add("pSwTwp3", SwTwp(3), ORAPARM_INPUT)
                    params("pSwTwp3").serverType = ORATYPE_NUMBER

                    params.Add("pSwRge3", SwRge(3), ORAPARM_INPUT)
                    params("pSwRge3").serverType = ORATYPE_NUMBER

                    params.Add("pNeTwp3", NeTwp(3), ORAPARM_INPUT)
                    params("pNeTwp3").serverType = ORATYPE_NUMBER

                    params.Add("pNeRge3", NeRge(3), ORAPARM_INPUT)
                    params("pNeRge3").serverType = ORATYPE_NUMBER

                    params.Add("pSwXcoord3", SWXcoord(3), ORAPARM_INPUT)
                    params("pSwXcoord3").serverType = ORATYPE_NUMBER

                    params.Add("pSwYcoord3", SWYcoord(3), ORAPARM_INPUT)
                    params("pSwYcoord3").serverType = ORATYPE_NUMBER

                    params.Add("pNeXcoord3", NEXcoord(3), ORAPARM_INPUT)
                    params("pNeXcoord3").serverType = ORATYPE_NUMBER

                    params.Add("pNeYcoord3", NEYcoord(3), ORAPARM_INPUT)
                    params("pNeYcoord3").serverType = ORATYPE_NUMBER
                    '-----
                    params.Add("pSwTwp4", SwTwp(4), ORAPARM_INPUT)
                    params("pSwTwp4").serverType = ORATYPE_NUMBER

                    params.Add("pSwRge4", SwRge(4), ORAPARM_INPUT)
                    params("pSwRge4").serverType = ORATYPE_NUMBER

                    params.Add("pNeTwp4", NeTwp(4), ORAPARM_INPUT)
                    params("pNeTwp4").serverType = ORATYPE_NUMBER

                    params.Add("pNeRge4", NeRge(4), ORAPARM_INPUT)
                    params("pNeRge4").serverType = ORATYPE_NUMBER

                    params.Add("pSwXcoord4", SWXcoord(4), ORAPARM_INPUT)
                    params("pSwXcoord4").serverType = ORATYPE_NUMBER

                    params.Add("pSwYcoord4", SWYcoord(4), ORAPARM_INPUT)
                    params("pSwYcoord4").serverType = ORATYPE_NUMBER

                    params.Add("pNeXcoord4", NEXcoord(4), ORAPARM_INPUT)
                    params("pNeXcoord4").serverType = ORATYPE_NUMBER

                    params.Add("pNeYcoord4", NEYcoord(4), ORAPARM_INPUT)
                    params("pNeYcoord4").serverType = ORATYPE_NUMBER
                    '-----
                    params.Add("pSwTwp5", SwTwp(5), ORAPARM_INPUT)
                    params("pSwTwp5").serverType = ORATYPE_NUMBER

                    params.Add("pSwRge5", SwRge(5), ORAPARM_INPUT)
                    params("pSwRge5").serverType = ORATYPE_NUMBER

                    params.Add("pNeTwp5", NeTwp(5), ORAPARM_INPUT)
                    params("pNeTwp5").serverType = ORATYPE_NUMBER

                    params.Add("pNeRge5", NeRge(5), ORAPARM_INPUT)
                    params("pNeRge5").serverType = ORATYPE_NUMBER

                    params.Add("pSwXcoord5", SWXcoord(5), ORAPARM_INPUT)
                    params("pSwXcoord5").serverType = ORATYPE_NUMBER

                    params.Add("pSwYcoord5", SWYcoord(5), ORAPARM_INPUT)
                    params("pSwYcoord5").serverType = ORATYPE_NUMBER

                    params.Add("pNeXcoord5", NEXcoord(5), ORAPARM_INPUT)
                    params("pNeXcoord5").serverType = ORATYPE_NUMBER

                    params.Add("pNeYcoord5", NEYcoord(5), ORAPARM_INPUT)
                    params("pNeYcoord5").serverType = ORATYPE_NUMBER
                    '-----
                    params.Add("pResult", 0, ORAPARM_OUTPUT)
                    params("pResult").serverType = ORATYPE_CURSOR

                    'PROCEDURE get_prosp_raw_defined_areao
                    'pAreaMode              IN     VARCHAR2,
                    'pSkipMinedOutHoles     IN     NUMBER,
                    'pSplitOrideSetName     IN     VARCHAR2,
                    '--
                    'pSwTwp1                IN     NUMBER,
                    'pSwRge1                IN     NUMBER,
                    'pNeTwp1                IN     NUMBER,
                    'pNeRge1                IN     NUMBER,
                    'pSwXcoord1             IN     NUMBER,
                    'pSwYcoord1             IN     NUMBER,
                    'pNeXcoord1             IN     NUMBER,
                    'pNeYcoord1             IN     NUMBER,
                    '--
                    'pSwTwp2                IN     NUMBER,
                    'pSwRge2                IN     NUMBER,
                    'pNeTwp2                IN     NUMBER,
                    'pNeRge2                IN     NUMBER,
                    'pSwXcoord2             IN     NUMBER,
                    'pSwYcoord2             IN     NUMBER,
                    'pNeXcoord2             IN     NUMBER,
                    'pNeYcoord2             IN     NUMBER,
                    '--
                    'pSwTwp3                IN     NUMBER,
                    'pSwRge3                IN     NUMBER,
                    'pNeTwp3                IN     NUMBER,
                    'pNeRge3                IN     NUMBER,
                    'pSwXcoord3             IN     NUMBER,
                    'pSwYcoord3             IN     NUMBER,
                    'pNeXcoord3             IN     NUMBER,
                    'pNeYcoord3             IN     NUMBER,
                    '--
                    'pSwTwp4                IN     NUMBER,
                    'pSwRge4                IN     NUMBER,
                    'pNeTwp4                IN     NUMBER,
                    'pNeRge4                IN     NUMBER,
                    'pSwXcoord4             IN     NUMBER,
                    'pSwYcoord4             IN     NUMBER,
                    'pNeXcoord4             IN     NUMBER,
                    'pNeYcoord4             IN     NUMBER,
                    '--
                    'pSwTwp5                IN     NUMBER,
                    'pSwRge5                IN     NUMBER,
                    'pNeTwp5                IN     NUMBER,
                    'pNeRge5                IN     NUMBER,
                    'pSwXcoord5             IN     NUMBER,
                    'pSwYcoord5             IN     NUMBER,
                    'pNeXcoord5             IN     NUMBER,
                    'pNeYcoord5             IN     NUMBER,
                    '--
                    'pResult                IN OUT c_prospraw);
                    SQLStmt = gOradatabase.CreateSql("Begin mois.mois_raw_prospectnew2.get_prosp_raw_defined_areao(" +
                              ":pAreaMode, :pSkipMinedOutHoles, :pSplitOrideSetName, " +
                              ":pSwTwp1, :pSwRge1, :pNeTwp1, :pNeRge1, " +
                              ":pSwXcoord1, :pSwYcoord1, :pNeXcoord1, :pNeYcoord1, " +
                              ":pSwTwp2, :pSwRge2, :pNeTwp2, :pNeRge2, " +
                              ":pSwXcoord2, :pSwYcoord2, :pNeXcoord2, :pNeYcoord2, " +
                              ":pSwTwp3, :pSwRge3, :pNeTwp3, :pNeRge3, " +
                              ":pSwXcoord3, :pSwYcoord3, :pNeXcoord3, :pNeYcoord3, " +
                              ":pSwTwp4, :pSwRge4, :pNeTwp4, :pNeRge4, " +
                              ":pSwXcoord4, :pSwYcoord4, :pNeXcoord4, :pNeYcoord4, " +
                              ":pSwTwp5, :pSwRge5, :pNeTwp5, :pNeRge5, " +
                              ":pSwXcoord5, :pSwYcoord5, :pNeXcoord5, :pNeYcoord5, " +
                              ":pResult);end;", ORASQL_FAILEXEC)
                    gRawProspDynaset = params("pResult").Value
                    ClearParams(params)
                End If
            End If

            If aAreaDefnData.ByHolesAreaMethod Then
                'User has selected some holes in ssAreaByHoleSelect!

                'PROCEDURE get_prosp_raw_defined_areaho will return data for all holes,
                'Only redrills will be excluded (the original hole).  Does not check for released or
                'use-for-reduction status or mined-status!  The user selected the holes so they get
                'the holes!

                'By individual holes  By individual holes
                'By individual holes  By individual holes
                'By individual holes  By individual holes
                params = gDBParams

                params.Add("pTwp1", Twp(1), ORAPARM_INPUT)
                params("pTwp1").serverType = ORATYPE_NUMBER

                params.Add("pRge1", Rge(1), ORAPARM_INPUT)
                params("pRge1").serverType = ORATYPE_NUMBER

                params.Add("pSec1", Sec(1), ORAPARM_INPUT)
                params("pSec1").serverType = ORATYPE_NUMBER

                params.Add("pHole1", Hole(1), ORAPARM_INPUT)
                params("pHole1").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp2", Twp(2), ORAPARM_INPUT)
                params("pTwp2").serverType = ORATYPE_NUMBER

                params.Add("pRge2", Rge(2), ORAPARM_INPUT)
                params("pRge2").serverType = ORATYPE_NUMBER

                params.Add("pSec2", Sec(2), ORAPARM_INPUT)
                params("pSec2").serverType = ORATYPE_NUMBER

                params.Add("pHole2", Hole(2), ORAPARM_INPUT)
                params("pHole2").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp3", Twp(3), ORAPARM_INPUT)
                params("pTwp3").serverType = ORATYPE_NUMBER

                params.Add("pRge3", Rge(3), ORAPARM_INPUT)
                params("pRge3").serverType = ORATYPE_NUMBER

                params.Add("pSec3", Sec(3), ORAPARM_INPUT)
                params("pSec3").serverType = ORATYPE_NUMBER

                params.Add("pHole3", Hole(3), ORAPARM_INPUT)
                params("pHole3").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp4", Twp(4), ORAPARM_INPUT)
                params("pTwp4").serverType = ORATYPE_NUMBER

                params.Add("pRge4", Rge(4), ORAPARM_INPUT)
                params("pRge4").serverType = ORATYPE_NUMBER

                params.Add("pSec4", Sec(4), ORAPARM_INPUT)
                params("pSec4").serverType = ORATYPE_NUMBER

                params.Add("pHole4", Hole(4), ORAPARM_INPUT)
                params("pHole4").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp5", Twp(5), ORAPARM_INPUT)
                params("pTwp5").serverType = ORATYPE_NUMBER

                params.Add("pRge5", Rge(5), ORAPARM_INPUT)
                params("pRge5").serverType = ORATYPE_NUMBER

                params.Add("pSec5", Sec(5), ORAPARM_INPUT)
                params("pSec5").serverType = ORATYPE_NUMBER

                params.Add("pHole5", Hole(5), ORAPARM_INPUT)
                params("pHole5").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp6", Twp(6), ORAPARM_INPUT)
                params("pTwp6").serverType = ORATYPE_NUMBER

                params.Add("pRge6", Rge(6), ORAPARM_INPUT)
                params("pRge6").serverType = ORATYPE_NUMBER

                params.Add("pSec6", Sec(6), ORAPARM_INPUT)
                params("pSec6").serverType = ORATYPE_NUMBER

                params.Add("pHole6", Hole(6), ORAPARM_INPUT)
                params("pHole6").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp7", Twp(7), ORAPARM_INPUT)
                params("pTwp7").serverType = ORATYPE_NUMBER

                params.Add("pRge7", Rge(7), ORAPARM_INPUT)
                params("pRge7").serverType = ORATYPE_NUMBER

                params.Add("pSec7", Sec(7), ORAPARM_INPUT)
                params("pSec7").serverType = ORATYPE_NUMBER

                params.Add("pHole7", Hole(7), ORAPARM_INPUT)
                params("pHole7").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp8", Twp(8), ORAPARM_INPUT)
                params("pTwp8").serverType = ORATYPE_NUMBER

                params.Add("pRge8", Rge(8), ORAPARM_INPUT)
                params("pRge8").serverType = ORATYPE_NUMBER

                params.Add("pSec8", Sec(8), ORAPARM_INPUT)
                params("pSec8").serverType = ORATYPE_NUMBER

                params.Add("pHole8", Hole(8), ORAPARM_INPUT)
                params("pHole8").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp9", Twp(9), ORAPARM_INPUT)
                params("pTwp9").serverType = ORATYPE_NUMBER

                params.Add("pRge9", Rge(9), ORAPARM_INPUT)
                params("pRge9").serverType = ORATYPE_NUMBER

                params.Add("pSec9", Sec(9), ORAPARM_INPUT)
                params("pSec9").serverType = ORATYPE_NUMBER

                params.Add("pHole9", Hole(9), ORAPARM_INPUT)
                params("pHole9").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp10", Twp(10), ORAPARM_INPUT)
                params("pTwp10").serverType = ORATYPE_NUMBER

                params.Add("pRge10", Rge(10), ORAPARM_INPUT)
                params("pRge10").serverType = ORATYPE_NUMBER

                params.Add("pSec10", Sec(10), ORAPARM_INPUT)
                params("pSec10").serverType = ORATYPE_NUMBER

                params.Add("pHole10", Hole(10), ORAPARM_INPUT)
                params("pHole10").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp11", Twp(11), ORAPARM_INPUT)
                params("pTwp11").serverType = ORATYPE_NUMBER

                params.Add("pRge11", Rge(11), ORAPARM_INPUT)
                params("pRge11").serverType = ORATYPE_NUMBER

                params.Add("pSec11", Sec(11), ORAPARM_INPUT)
                params("pSec11").serverType = ORATYPE_NUMBER

                params.Add("pHole11", Hole(11), ORAPARM_INPUT)
                params("pHole11").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp12", Twp(12), ORAPARM_INPUT)
                params("pTwp12").serverType = ORATYPE_NUMBER

                params.Add("pRge12", Rge(12), ORAPARM_INPUT)
                params("pRge12").serverType = ORATYPE_NUMBER

                params.Add("pSec12", Sec(12), ORAPARM_INPUT)
                params("pSec12").serverType = ORATYPE_NUMBER

                params.Add("pHole12", Hole(12), ORAPARM_INPUT)
                params("pHole12").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp13", Twp(13), ORAPARM_INPUT)
                params("pTwp13").serverType = ORATYPE_NUMBER

                params.Add("pRge13", Rge(13), ORAPARM_INPUT)
                params("pRge13").serverType = ORATYPE_NUMBER

                params.Add("pSec13", Sec(13), ORAPARM_INPUT)
                params("pSec13").serverType = ORATYPE_NUMBER

                params.Add("pHole13", Hole(13), ORAPARM_INPUT)
                params("pHole13").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp14", Twp(14), ORAPARM_INPUT)
                params("pTwp14").serverType = ORATYPE_NUMBER

                params.Add("pRge14", Rge(14), ORAPARM_INPUT)
                params("pRge14").serverType = ORATYPE_NUMBER

                params.Add("pSec14", Sec(14), ORAPARM_INPUT)
                params("pSec14").serverType = ORATYPE_NUMBER

                params.Add("pHole14", Hole(14), ORAPARM_INPUT)
                params("pHole14").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp15", Twp(15), ORAPARM_INPUT)
                params("pTwp15").serverType = ORATYPE_NUMBER

                params.Add("pRge15", Rge(15), ORAPARM_INPUT)
                params("pRge15").serverType = ORATYPE_NUMBER

                params.Add("pSec15", Sec(15), ORAPARM_INPUT)
                params("pSec15").serverType = ORATYPE_NUMBER

                params.Add("pHole15", Hole(15), ORAPARM_INPUT)
                params("pHole15").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp16", Twp(16), ORAPARM_INPUT)
                params("pTwp16").serverType = ORATYPE_NUMBER

                params.Add("pRge16", Rge(16), ORAPARM_INPUT)
                params("pRge16").serverType = ORATYPE_NUMBER

                params.Add("pSec16", Sec(16), ORAPARM_INPUT)
                params("pSec16").serverType = ORATYPE_NUMBER

                params.Add("pHole16", Hole(16), ORAPARM_INPUT)
                params("pHole16").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp17", Twp(17), ORAPARM_INPUT)
                params("pTwp17").serverType = ORATYPE_NUMBER

                params.Add("pRge17", Rge(17), ORAPARM_INPUT)
                params("pRge17").serverType = ORATYPE_NUMBER

                params.Add("pSec17", Sec(17), ORAPARM_INPUT)
                params("pSec17").serverType = ORATYPE_NUMBER

                params.Add("pHole17", Hole(17), ORAPARM_INPUT)
                params("pHole17").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp18", Twp(18), ORAPARM_INPUT)
                params("pTwp18").serverType = ORATYPE_NUMBER

                params.Add("pRge18", Rge(18), ORAPARM_INPUT)
                params("pRge18").serverType = ORATYPE_NUMBER

                params.Add("pSec18", Sec(18), ORAPARM_INPUT)
                params("pSec18").serverType = ORATYPE_NUMBER

                params.Add("pHole18", Hole(18), ORAPARM_INPUT)
                params("pHole18").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp19", Twp(19), ORAPARM_INPUT)
                params("pTwp19").serverType = ORATYPE_NUMBER

                params.Add("pRge19", Rge(19), ORAPARM_INPUT)
                params("pRge19").serverType = ORATYPE_NUMBER

                params.Add("pSec19", Sec(19), ORAPARM_INPUT)
                params("pSec19").serverType = ORATYPE_NUMBER

                params.Add("pHole19", Hole(19), ORAPARM_INPUT)
                params("pHole19").serverType = ORATYPE_NUMBER
                '-----
                params.Add("pTwp20", Twp(20), ORAPARM_INPUT)
                params("pTwp20").serverType = ORATYPE_NUMBER

                params.Add("pRge20", Rge(20), ORAPARM_INPUT)
                params("pRge20").serverType = ORATYPE_NUMBER

                params.Add("pSec20", Sec(20), ORAPARM_INPUT)
                params("pSec20").serverType = ORATYPE_NUMBER

                params.Add("pHole20", Hole(20), ORAPARM_INPUT)
                params("pHole20").serverType = ORATYPE_NUMBER
                '-----
                'No SplitOverrideName selected = "None"
                params.Add("pSplitOrideSetName", SplitOverrideName, ORAPARM_INPUT)
                params("pSplitOrideSetName").serverType = ORATYPE_VARCHAR2
                '-----
                params.Add("pResult", 0, ORAPARM_OUTPUT)
                params("pResult").serverType = ORATYPE_CURSOR

                'PROCEDURE get_prosp_raw_defined_areaho  &  PROCEDURE get_prosp_raw_defined_areaho2
                'pTwp1                  IN     NUMBER,
                'pRge1                  IN     NUMBER,
                'pSec1                  IN     NUMBER,
                'pHole1                 IN     NUMBER,
                '--
                'pTwp2                  IN     NUMBER,
                'pRge2                  IN     NUMBER,
                'pSec2                  IN     NUMBER,
                'pHole2                 IN     NUMBER,
                '--
                'pTwp3                  IN     NUMBER,
                'pRge3                  IN     NUMBER,
                'pSec3                  IN     NUMBER,
                'pHole3                 IN     NUMBER,
                '--
                'pTwp4                  IN     NUMBER,
                'pRge4                  IN     NUMBER,
                'pSec4                  IN     NUMBER,
                'pHole4                 IN     NUMBER,
                '--
                'pTwp5                  IN     NUMBER,
                'pRge5                  IN     NUMBER,
                'pSec5                  IN     NUMBER,
                'pHole5                 IN     NUMBER,
                '--
                'pTwp6                  IN     NUMBER,
                'pRge6                  IN     NUMBER,
                'pSec6                  IN     NUMBER,
                'pHole6                 IN     NUMBER,
                '--
                'pTwp7                  IN     NUMBER,
                'pRge7                  IN     NUMBER,
                'pSec7                  IN     NUMBER,
                'pHole7                 IN     NUMBER,
                '--
                'pTwp8                  IN     NUMBER,
                'pRge8                  IN     NUMBER,
                'pSec8                  IN     NUMBER,
                'pHole8                 IN     NUMBER,
                '--
                'pTwp9                  IN     NUMBER,
                'pRge9                  IN     NUMBER,
                'pSec9                  IN     NUMBER,
                'pHole9                 IN     NUMBER,
                '--
                'pTwp10                 IN     NUMBER,
                'pRge10                 IN     NUMBER,
                'pSec10                 IN     NUMBER,
                'pHole10                IN     NUMBER,
                '--
                'pTwp11                 IN     NUMBER,
                'pRge11                 IN     NUMBER,
                'pSec11                 IN     NUMBER,
                'pHole11                IN     NUMBER,
                '--
                'pTwp12                 IN     NUMBER,
                'pRge12                 IN     NUMBER,
                'pSec12                 IN     NUMBER,
                'pHole12                IN     NUMBER,
                '--
                'pTwp13                 IN     NUMBER,
                'pRge13                 IN     NUMBER,
                'pSec13                 IN     NUMBER,
                'Hole13                 IN     NUMBER,
                '--
                'pTwp14                 IN     NUMBER,
                'pRge14                 IN     NUMBER,
                'pSec14                 IN     NUMBER,
                'pHole14                IN     NUMBER,
                '--
                'pTwp15                 IN     NUMBER,
                'pRge15                 IN     NUMBER,
                'pSec15                 IN     NUMBER,
                'pHole15                IN     NUMBER,
                '--
                'pTwp16                 IN     NUMBER,
                'pRge16                 IN     NUMBER,
                'pSec16                 IN     NUMBER,
                'pHole16                IN     NUMBER,
                '--
                'pTwp17                 IN     NUMBER,
                'pRge17                 IN     NUMBER,
                'pSec17                 IN     NUMBER,
                'pHole17                IN     NUMBER,
                '--
                'pTwp18                 IN     NUMBER,
                'pRge18                 IN     NUMBER,
                'pSec18                 IN     NUMBER,
                'pHole18                IN     NUMBER,
                '--
                'pTwp19                 IN     NUMBER,
                'pRge19                 IN     NUMBER,
                'pSec19                 IN     NUMBER,
                'pHole19                IN     NUMBER,
                '--
                'pTwp20                 IN     NUMBER,
                'pRge20                 IN     NUMBER,
                'pSec20                 IN     NUMBER,
                'pHole20                IN     NUMBER,
                '--
                'pSplitOrideSetName     IN     VARCHAR2,
                '--
                'pResult                IN OUT c_prospraw);
                If aUseOrigHole = False Then
                    SQLStmt = gOradatabase.CreateSql("Begin mois.mois_raw_prospectnew2.get_prosp_raw_defined_areaho(" +
                              ":pTwp1, :pRge1, :pSec1, :pHole1, " +
                              ":pTwp2, :pRge2, :pSec2, :pHole2, " +
                              ":pTwp3, :pRge3, :pSec3, :pHole3, " +
                              ":pTwp4, :pRge4, :pSec4, :pHole4, " +
                              ":pTwp5, :pRge5, :pSec5, :pHole5, " +
                              ":pTwp5, :pRge6, :pSec6, :pHole6, " +
                              ":pTwp5, :pRge7, :pSec7, :pHole7, " +
                              ":pTwp5, :pRge8, :pSec8, :pHole8, " +
                              ":pTwp5, :pRge9, :pSec9, :pHole9, " +
                              ":pTwp5, :pRge10, :pSec10, :pHole10, " +
                              ":pTwp5, :pRge11, :pSec11, :pHole11, " +
                              ":pTwp5, :pRge12, :pSec12, :pHole12, " +
                              ":pTwp5, :pRge13, :pSec13, :pHole13, " +
                              ":pTwp5, :pRge14, :pSec14, :pHole14, " +
                              ":pTwp5, :pRge15, :pSec15, :pHole15, " +
                              ":pTwp5, :pRge16, :pSec16, :pHole16, " +
                              ":pTwp5, :pRge17, :pSec17, :pHole17, " +
                              ":pTwp5, :pRge18, :pSec18, :pHole18, " +
                              ":pTwp5, :pRge19, :pSec19, :pHole19, " +
                              ":pTwp5, :pRge20, :pSec20, :pHole20, " +
                              ":pSplitOrideSetName, :pResult);end;", ORASQL_FAILEXEC)
                Else
                    SQLStmt = gOradatabase.CreateSql("Begin mois.mois_raw_prospectnew2.get_prosp_raw_defined_areaho2(" +
                              ":pTwp1, :pRge1, :pSec1, :pHole1, " +
                              ":pTwp2, :pRge2, :pSec2, :pHole2, " +
                              ":pTwp3, :pRge3, :pSec3, :pHole3, " +
                              ":pTwp4, :pRge4, :pSec4, :pHole4, " +
                              ":pTwp5, :pRge5, :pSec5, :pHole5, " +
                              ":pTwp5, :pRge6, :pSec6, :pHole6, " +
                              ":pTwp5, :pRge7, :pSec7, :pHole7, " +
                              ":pTwp5, :pRge8, :pSec8, :pHole8, " +
                              ":pTwp5, :pRge9, :pSec9, :pHole9, " +
                              ":pTwp5, :pRge10, :pSec10, :pHole10, " +
                              ":pTwp5, :pRge11, :pSec11, :pHole11, " +
                              ":pTwp5, :pRge12, :pSec12, :pHole12, " +
                              ":pTwp5, :pRge13, :pSec13, :pHole13, " +
                              ":pTwp5, :pRge14, :pSec14, :pHole14, " +
                              ":pTwp5, :pRge15, :pSec15, :pHole15, " +
                              ":pTwp5, :pRge16, :pSec16, :pHole16, " +
                              ":pTwp5, :pRge17, :pSec17, :pHole17, " +
                              ":pTwp5, :pRge18, :pSec18, :pHole18, " +
                              ":pTwp5, :pRge19, :pSec19, :pHole19, " +
                              ":pTwp5, :pRge20, :pSec20, :pHole20, " +
                              ":pSplitOrideSetName, :pResult);end;", ORASQL_FAILEXEC)
                End If

                gRawProspDynaset = params("pResult").Value
                ClearParams(params)

                RecordCount = gRawProspDynaset.RecordCount

                If RecordCount = 0 Then
                    'None of the hole(s) existed in raw prospect data!
                    ReturnValue = False
                    Return ReturnValue
                End If
            End If

            If aAreaDefnData.ByMineAreaAreaMethod Then
                'By mine name  By mine name  (Possibly by special area name also)
                'By mine name  By mine name  (Possibly by special area name also)
                'By mine name  By mine name  (Possibly by special area name also)

                'PROCEDURE get_prosp_raw_defined_aream2o -- does not return redrills (the
                'original hole that was drilled), unreleased holes, or not use-for-reduction holes.
                'User can select whether or not to return mined-out holes!

                params = gDBParams

                params.Add("pMineName", aAreaDefnData.MineName, ORAPARM_INPUT)
                params("pMineName").serverType = ORATYPE_VARCHAR2

                params.Add("pSpecAreaName", aAreaDefnData.SpecAreaName, ORAPARM_INPUT)
                params("pSpecAreaName").serverType = ORATYPE_VARCHAR2
                '-----
                'No SplitOverrideName selected = "None"
                params.Add("pSplitOrideSetName", SplitOverrideName, ORAPARM_INPUT)
                params("pSplitOrideSetName").serverType = ORATYPE_VARCHAR2
                '-----
                params.Add("pSkipMinedOutHoles", aSkipMinedOutHoles, ORAPARM_INPUT)
                params("pSkipMinedOutHoles").serverType = ORATYPE_NUMBER

                params.Add("pResult", 0, ORAPARM_OUTPUT)
                params("pResult").serverType = ORATYPE_CURSOR

                'PROCEDURE get_prosp_raw_defined_aream2o
                'pMineName              IN     VARCHAR2,
                'pSpecAreaName          IN     VARCHAR2,
                'pSplitOrideSetName     IN     VARCHAR2,
                'pSkipMinedOutHoles     IN     NUMBER,
                'pResult                IN OUT c_prospraw);
                SQLStmt = gOradatabase.CreateSql("Begin mois.mois_raw_prospectnew2.get_prosp_raw_defined_aream2o(" +
                          ":pMineName, :pSpecAreaName, :pSplitOrideSetName, :pSkipMinedOutHoles, :pResult);end;", ORASQL_FAILEXEC)
                gRawProspDynaset = params("pResult").Value
                ClearParams(params)
            End If

            'Note -- the dynaset will be different depending on whether or not
            '        aSplitOverrideName has data in it!

            RecordCount = gRawProspDynaset.RecordCount

            If aScope = "Batch" Then
                gFormProspDataReduction.lblProcComm1.Text = CStr(RecordCount) & " SFC items to process"
            End If


            ReturnValue = True
            Return ReturnValue

            'GetAreaRawProspDataError:

        Catch ex As Exception
            MsgBox("Error getting area raw prospect data." & vbCrLf &
                       Err.Description,
                       vbOKOnly + vbExclamation,
                       "Area Prospect Data Error")
            ReturnValue = False
            Return ReturnValue
            'On Error Resume Next
        Finally
            ClearParams(params)
        End Try

    End Function

    Private Function ProcessAreaRawProspData(ByVal aAreaDefnData As ViewModels.ProspectAreaDefinition,
                                             ByVal aRawProspDynaset As OraDynaset,
                                             ByVal aProdDist As ViewModels.ProductSizeDesignation,
                                             ByVal aRcvryParamsData As gDataRdctnParamsType,
                                             ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                             ByRef aSsRawProspMin As AxvaSpread,
                                             ByRef aSfcReproData(,) As String,
                                             ByVal aSplitOverrideName As String,
                                             ByVal aScope As String,
                                             Optional ByVal ProdSizeDefnName As String = "Not Defined") As SplitResultSet



        Dim ProspectResults As SplitResultSet = New SplitResultSet()

        Dim CurrTwp As Integer
        Dim CurrRge As Integer
        Dim CurrSec As Integer
        Dim CurrHole As String
        Dim CurrSplit As Integer

        Dim ThisTwp As Integer
        Dim ThisRge As Integer
        Dim ThisSec As Integer
        Dim ThisHole As String
        Dim ThisSplit As Integer
        Dim ThisOwnership As String
        Dim ThisProspDate As Date
        Dim ThisMinedOutStatus As Integer
        Dim ThisExpDrill As Integer
        Dim ProcData As gProcDataType
        Dim SfcData(25) As gProcSfcDataType
        Dim SfcCount As Integer
        Dim AddCount As Long
        Dim ProcessSplit As Boolean
        Dim NumProcessed As Long
        Dim PrematureExit As Boolean

        Dim RdctnCalcData As gRawProspSplRdctnType
        Dim SplitRow As Long
        Dim ProcessStatus As Boolean
        Dim MaxProcSpl As Long

        Dim RowIdx As Long
        Dim AddedToSprdCnt As Long


        Dim HoleCnt As Long
        Dim HoleMinabilityInRawProsp As String

        Try

            AddedToSprdCnt = 0

            'ProcessAreaRawProspData = 1   OK
            'ProcessAreaRawProspData = 2   User escaped
            'ProcessAreaRawProspData = 3   Problems

            'In aAreaDefnData have:
            '1) AreaMethod
            '2) BegDrillDate
            '3) EndDrillDate
            '4) HoleMetLabProcessType
            '5) MinedStatus
            '6) MineName
            '7) Ownership

            MaxProcSpl = 999999999

            PrematureExit = False

            'If aSsSplitReview.MaxRows <> 0 Then
            '    ReDim MinableOride(aSsSplitReview.MaxRows)

            '    'Need to keep the minable overrides from the previous run so that
            '    'we don't lose then -- in case the user modified them.
            '    For RowIdx = 1 To aSsSplitReview.MaxRows
            '        With aSsSplitReview
            '            .Row = RowIdx
            '            .Col = 5
            '            MinableOride(RowIdx) = .Text
            '        End With
            '    Next RowIdx
            '    SavedMinableOrides = True
            'End If

            'Now make sure that there is nothing in the "review" spreadsheets.
            'aSsSplitReview.MaxRows = 0
            'aSsCompReview.MaxRows = 0
            aSsRawProspMin.MaxRows = 0

            CurrTwp = -99
            CurrRge = -99
            CurrSec = -99
            CurrHole = "XXXX"
            CurrSplit = -99
            AddCount = 0
            SfcCount = 0
            NumProcessed = 0
            HoleCnt = 0

            'Note -- the dynaset will be different depending on whether or not
            '        a split override set has been designated by the user!

            aRawProspDynaset.MoveFirst()

            'log = String.Empty

            Do While Not aRawProspDynaset.EOF
                'Escape functionality
                'If GetAsyncKeyState(VK_ESCAPE) < 0 Then
                '    ProcessAreaRawProspData = 2
                '    Exit Function
                'End If

                With ProcData
                    ThisTwp = aRawProspDynaset.Fields("township").Value
                    ThisRge = aRawProspDynaset.Fields("range").Value
                    ThisSec = aRawProspDynaset.Fields("section").Value
                    ThisHole = aRawProspDynaset.Fields("hole_location").Value
                    ThisSplit = aRawProspDynaset.Fields("split_number").Value
                    ThisOwnership = aRawProspDynaset.Fields("ownership").Value
                    ThisProspDate = aRawProspDynaset.Fields("prosp_date").Value

                    'mined_status will be 0 or 1 (0 = no, 1 = yes)
                    ThisMinedOutStatus = aRawProspDynaset.Fields("mined_status").Value

                    'exp_drill will be 0 or 1 (0 = no, 1 = yes)
                    ThisExpDrill = aRawProspDynaset.Fields("exp_drill").Value

                    If (ThisTwp <> CurrTwp Or ThisRge <> CurrRge Or
                        ThisHole <> CurrHole Or ThisSec <> CurrSec Or
                        ThisSplit <> CurrSplit) And
                        CurrTwp <> -99 Then

                        'Split number has changed!
                        'Number of splits processed
                        NumProcessed = NumProcessed + 1

                        If aScope = "Batch" Then
                            If NumProcessed Mod 100 = 0 Then
                                gFormProspDataReduction.lblProcComm2.Text = "Splits processed = " &
                                CStr(NumProcessed) & "  (" & CStr(AddCount) & ")"
                                gFormProspDataReduction.Refresh()
                            End If
                        End If

                        'Is this a split we want to process?
                        'Things that will cause a split not to be processed:
                        '1) Is drill date in selected date range?
                        '2) Is the hole ownership what we want?
                        '3) Is the mined-out status what we want?
                        '4) Is the hole type what we want (Expanded vs Regular)?
                        '5) If we have defined an area by the TRS Corner method
                        '   then is this section needed?

                        'ProcData contains the information for the split we are
                        'processing.


                        ProcessSplit = GetProcessThisSplit(ProcData.Township,
                                                           ProcData.Range,
                                                           ProcData.Section,
                                                           ProcData.HoleLocation,
                                                           ProcData.Ownership,
                                                           ProcData.ProspDate,
                                                           ThisMinedOutStatus,
                                                           ThisExpDrill,
                                                           aAreaDefnData)

                        'Process the split if we need to
                        If ProcessSplit Then
                            Dim ThisDate As Date = ProcData.ProspDate

                            RdctnCalcData = ReduceSplitData(aProdDist,
                                                            aRcvryParamsData,
                                                            aRecoveryParams,
                                                            ProcData,
                                                            SfcData,
                                                            aSfcReproData,
                                                            ProdSizeDefnName)

                            'SplitRow = PlaceInSplitSprd(aSsSplitReview,   ############  Temp 
                            '                            RdctnCalcData,
                            '                            ProcData.SampleId,
                            '                            aNoReview)
                            'RdctnCalcData.RowIdxSs = SplitRow 'Temporary reference!!


                            'Need to add to ssRawProspMin also.
                            PlaceInRawProspMinSprd(aSsRawProspMin, ProcData)

                            'May need to "recover" a "saved" minable override from previous
                            'run.
                            'If SavedMinableOrides Then
                            '    'With aSsSplitReview
                            '    '    .Row = SplitRow
                            '    '    .Col = 5
                            '    '    .Text = MinableOride(SplitRow)
                            '    'End With
                            '    RdctnCalcData.MineableOride = MinableOride(SplitRow) ' Added by Alf
                            'End If

                            'Have both the ProdCoeff and the 100% data for this split.
                            'Now use the ProdCoeff data to determine the split
                            'mineability.
                            DetermineSplitMineability(RdctnCalcData,
                                                      aRcvryParamsData,
                                                      aRecoveryParams,
                                                      aProdDist)
                            'FlagUnMineableSsSplitReview(aSsSplitReview, RdctnCalcData, SplitRow)  ################  Temp
                            'UpdateSsSplitReview(aSsSplitReview, RdctnCalcData, aRcvryParamsData, SplitRow)

                            ProcessStatus = DetermineSplitTpaMisc(RdctnCalcData,
                                                                  aRcvryParamsData,
                                                                  aRecoveryParams)

                            'SplitTpaMiscToSsSplitReview(aSsSplitReview,    #############   Temp
                            '                    RdctnCalcData,
                            '                    aRcvryParamsData,
                            '                    SplitRow)

                            ProspectResults.SplitResults.Add(RdctnCalcData)  ' THE RESULT FOR EACH SPLIT!!!!!!!!!!!!!!!!

                            AddCount = AddCount + 1

                            If AddCount >= MaxProcSpl Then

                                ProspectResults.IntResult = 1

                                'Final display of process counts to the user
                                If aScope = "Batch" Then
                                    gFormProspDataReduction.lblProcComm2.Text = "Splits processed = " &
                                    CStr(NumProcessed) & "  (" & CStr(AddCount) & ")"
                                    gFormProspDataReduction.Refresh()
                                End If

                                PrematureExit = True
                                Exit Do
                            End If
                        End If

                        'If aNoReview Then
                        '    'Need to know if we have a complete hole for aNoReview = True processing.
                        '    'If we have a complete hole then process it and write to the appropriate
                        '    'output text file.
                        '    If (ThisTwp <> CurrTwp Or ThisRge <> CurrRge Or
                        '        ThisHole <> CurrHole Or ThisSec <> CurrSec) And
                        '        CurrTwp <> -99 Then

                        '        'Hole has changed!
                        '        HoleCnt = HoleCnt + 1

                        '        If aSsSplitReview.MaxRows <> 0 Then

                        '            Dim IsIPDistributedTo As Boolean = False
                        '            Dim Holes As List(Of gRawProspSplRdctnType)

                        '            IsIPDistributedTo = MatlDistributedTo(aProdDist, "IP")



                        '            ProcessStatus = ProcessForHoleMineability(aSsSplitReview,
                        '                                                      aRcvryParamsData,
                        '                                                      aRecoveryParams,
                        '                                                      IsIPDistributedTo,
                        '                                                      aScope)



                        '            Holes = gCompositeSplitData(aSsSplitReview,
                        '                                        aRcvryParamsData,
                        '                                        aRecoveryParams,
                        '                                        False,
                        '                                        IsIPDistributedTo)

                        '            ProspectResults.HoleResults.AddRange(Holes)

                        '            For Each Hole As gRawProspSplRdctnType In Holes
                        '                AssignCompositedHoleData(aSsCompReview, Hole)
                        '            Next

                        '            'We have Holes

                        '            'Processing ready -- create some composite output
                        '            ProcessStatus = gSaveProspectDataset(aSaveType,
                        '                                                 aProspectDatasetName,
                        '                                                 aProspDatasetTextFileName,
                        '                                                 aChk100Pct,
                        '                                                 aChkProductionCoefficient,
                        '                                                 aOptInclSplits,
                        '                                                 aOptInclComposites,
                        '                                                 aOptInclBoth,
                        '                                                 aSsCompReview,
                        '                                                 aSsSplitReview,
                        '                                                 ProspectResults.SplitResults,
                        '                                                 ProspectResults.HoleResults,
                        '                                                 aMineHasOffSpecPbPlt,
                        '                                                 aChkInclMgPlt,
                        '                                                 False,
                        '                                                 0,
                        '                                                 aNoReview,
                        '                                                 HoleCnt,
                        '                                                 aRcvryParamsData.SetPbToMgPlt,
                        '                                                 aMineHasDoloflotPlt,
                        '                                                 aRecoveryParams.UseAdjustedFeToDetermineMineability)
                        '        End If

                        '        'Done processing this hole -- reset stuff
                        '        aSsSplitReview.MaxRows = 0
                        '        aSsCompReview.MaxRows = 0
                        '    End If
                        'End If

                        ZeroSfcData(SfcData)
                        SfcCount = 0
                    End If

                    'Get the data into ProcData from the dynaset returned from
                    'the database so that we can work with it.
                    .Township = aRawProspDynaset.Fields("township").Value
                    .Range = aRawProspDynaset.Fields("range").Value
                    .Section = aRawProspDynaset.Fields("section").Value
                    .HoleLocation = aRawProspDynaset.Fields("hole_location").Value
                    .Forty = aRawProspDynaset.Fields("forty").Value
                    .State = aRawProspDynaset.Fields("state").Value
                    .Quadrant = aRawProspDynaset.Fields("quadrant").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("mine_name").Value) Then
                        .MineName = aRawProspDynaset.Fields("mine_name").Value
                    Else
                        .MineName = ""
                    End If

                    .ExpDrill = aRawProspDynaset.Fields("exp_drill").Value
                    .SplitTotalNum = aRawProspDynaset.Fields("split_total_num").Value
                    .Xcoord = aRawProspDynaset.Fields("x_coord").Value
                    .Ycoord = aRawProspDynaset.Fields("y_coord").Value
                    .FtlDepth = aRawProspDynaset.Fields("ftl_depth").Value
                    .OvbCored = aRawProspDynaset.Fields("ovb_cored").Value
                    .Ownership = aRawProspDynaset.Fields("ownership").Value
                    .ProspDate = Format(aRawProspDynaset.Fields("prosp_date").Value, "MM/dd/yyyy")
                    .MinedStatus = aRawProspDynaset.Fields("mined_status").Value
                    .Elevation = aRawProspDynaset.Fields("elevation").Value

                    'Currently in Function ProcessAreaRawProspData
                    'Changes 10/19/2011, lss
                    If Not IsDBNull(aRawProspDynaset.Fields("hardpan_from").Value) Then
                        .HardpanFrom = aRawProspDynaset.Fields("hardpan_from").Value
                    Else
                        .HardpanFrom = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hardpan_to").Value) Then
                        .HardpanTo = aRawProspDynaset.Fields("hardpan_to").Value
                    Else
                        .HardpanTo = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hardpan_thck").Value) Then
                        .HardpanThck = aRawProspDynaset.Fields("hardpan_thck").Value
                    Else
                        .HardpanThck = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hardpan_code").Value) Then
                        .HardpanCode = aRawProspDynaset.Fields("hardpan_code").Value
                    Else
                        .HardpanCode = 0
                    End If

                    .TotDepth = aRawProspDynaset.Fields("tot_depth").Value
                    .Aoi = aRawProspDynaset.Fields("aoi").Value
                    .CoordSurveyed = aRawProspDynaset.Fields("coord_surveyed").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("hole_comment").Value) Then
                        .HoleComment = aRawProspDynaset.Fields("hole_comment").Value
                    Else
                        .HoleComment = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hole_location_char").Value) Then
                        .HoleLocationChar = aRawProspDynaset.Fields("hole_location_char").Value
                    Else
                        .HoleLocationChar = ""
                    End If

                    .Released = aRawProspDynaset.Fields("released").Value
                    .Redrilled = aRawProspDynaset.Fields("redrilled").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("redrill_date").Value) Then
                        .RedrillDate = Format(aRawProspDynaset.Fields("redrill_date").Value, "MM/dd/yyyy")
                    Else
                        .RedrillDate = ""
                    End If
                    .UseForReduction = aRawProspDynaset.Fields("use_for_reduction").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("county").Value) Then
                        .County = aRawProspDynaset.Fields("county").Value
                    Else
                        .County = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("bank_code").Value) Then
                        .BankCode = aRawProspDynaset.Fields("bank_code").Value
                    Else
                        .BankCode = ""
                    End If
                    '-----
                    .SampleId = aRawProspDynaset.Fields("sample_id").Value
                    .SplitNumber = aRawProspDynaset.Fields("split_number").Value
                    .Barren = aRawProspDynaset.Fields("barren").Value
                    .SplitFtlBottom = aRawProspDynaset.Fields("split_ftl_bottom").Value
                    .MtxTotWetWt = aRawProspDynaset.Fields("mtx_tot_wet_wt").Value
                    '-----
                    .MtxMoistWetWt = aRawProspDynaset.Fields("mtx_moist_wet_wt").Value
                    .MtxMoistDryWt = aRawProspDynaset.Fields("mtx_moist_dry_wt").Value
                    .MtxMoistTareWt = aRawProspDynaset.Fields("mtx_moist_tare_wt").Value
                    .MtxMoistWetWt2 = aRawProspDynaset.Fields("mtx_moist_wet_wt2").Value
                    .MtxMoistDryWt2 = aRawProspDynaset.Fields("mtx_moist_dry_wt2").Value
                    .MtxMoistTareWt2 = aRawProspDynaset.Fields("mtx_moist_tare_wt2").Value
                    '-----
                    .FdTotWetWt = aRawProspDynaset.Fields("fd_tot_wet_wt").Value
                    .FdTotWetWtMsr = aRawProspDynaset.Fields("fd_tot_wet_wt_msr").Value
                    .FdMoistWetWt = aRawProspDynaset.Fields("fd_moist_wet_wt").Value
                    .FdMoistDryWt = aRawProspDynaset.Fields("fd_moist_dry_wt").Value
                    .FdMoistTareWt = aRawProspDynaset.Fields("fd_moist_tare_wt").Value
                    .FdScrnSampWt = aRawProspDynaset.Fields("fd_scrn_samp_wt").Value
                    .DensCylSize = aRawProspDynaset.Fields("dens_cyl_size").Value
                    .DensCylWetWt = aRawProspDynaset.Fields("dens_cyl_wet_wt").Value
                    .DensCylH2oWt = aRawProspDynaset.Fields("dens_cyl_h2o_wt").Value
                    .DryDensity = aRawProspDynaset.Fields("dry_density").Value
                    .FlotWetWt = aRawProspDynaset.Fields("flot_wet_wt").Value
                    .MtxProcWetWt = aRawProspDynaset.Fields("mtx_proc_wet_wt").Value
                    .ExpExcessWt = aRawProspDynaset.Fields("exp_excess_wt").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("mtx_color").Value) Then
                        .MtxColor = aRawProspDynaset.Fields("mtx_color").Value
                    Else
                        .MtxColor = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("deg_consol").Value) Then
                        .DegConsol = aRawProspDynaset.Fields("deg_consol").Value
                    Else
                        .DegConsol = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("dig_char").Value) Then
                        .DigChar = aRawProspDynaset.Fields("dig_char").Value
                    Else
                        .DigChar = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("pump_char").Value) Then
                        .PumpChar = aRawProspDynaset.Fields("pump_char").Value
                    Else
                        .PumpChar = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("lithology").Value) Then
                        .Lithology = aRawProspDynaset.Fields("lithology").Value
                    Else
                        .Lithology = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("phosph_color").Value) Then
                        .PhosphColor = aRawProspDynaset.Fields("phosph_color").Value
                    Else
                        .PhosphColor = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("phys_mineable").Value) Then
                        .PhysMineable = aRawProspDynaset.Fields("phys_mineable").Value
                    Else
                        .PhysMineable = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("clay_sett_char").Value) Then
                        .ClaySettChar = aRawProspDynaset.Fields("clay_sett_char").Value
                    Else
                        .ClaySettChar = ""
                    End If

                    .FdScrnSampWtComp = aRawProspDynaset.Fields("fd_scrn_samp_wt_comp").Value
                    .SplitDepthTop = aRawProspDynaset.Fields("split_depth_top").Value
                    .SplitDepthBot = aRawProspDynaset.Fields("split_depth_bot").Value
                    .SplitThck = aRawProspDynaset.Fields("split_thck").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("wash_date").Value) Then
                        .WashDate = Format(aRawProspDynaset.Fields("wash_date").Value, "MM/dd/yyyy")
                    Else
                        .WashDate = ""
                    End If

                    .OrigData = aRawProspDynaset.Fields("orig_data").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("metlab_comment").Value) Then
                        .MetLabComment = aRawProspDynaset.Fields("metlab_comment").Value
                    Else
                        .MetLabComment = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("chemlab_comment").Value) Then
                        .ChemLabComment = aRawProspDynaset.Fields("chemlab_comment").Value
                    Else
                        .ChemLabComment = ""
                    End If

                    .RerunStatus = aRawProspDynaset.Fields("rerun_status").Value

                    If Not IsDBNull(aRawProspDynaset.Fields("date_rerun").Value) Then
                        .DateRerun = Format(aRawProspDynaset.Fields("date_rerun").Value, "MM/dd/yyyy")
                    Else
                        .DateRerun = ""
                    End If
                    '-----
                    'If a split was barren then it has no size fraction code data
                    'and the size fraction code data may be Null!
                    If Not IsDBNull(aRawProspDynaset.Fields("size_frctn_code").Value) Then
                        .SizeFrctnCode = aRawProspDynaset.Fields("size_frctn_code").Value
                    Else
                        .SizeFrctnCode = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("bpl").Value) Then
                        .SfcBpl = aRawProspDynaset.Fields("bpl").Value
                    Else
                        .SfcBpl = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("feal").Value) Then
                        .SfcFeAl = aRawProspDynaset.Fields("feal").Value
                    Else
                        .SfcFeAl = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("insol").Value) Then
                        .SfcInsol = aRawProspDynaset.Fields("insol").Value
                    Else
                        .SfcInsol = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("cao").Value) Then
                        .SfcCaO = aRawProspDynaset.Fields("cao").Value
                    Else
                        .SfcCaO = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("mgo").Value) Then
                        .SfcMgO = aRawProspDynaset.Fields("mgo").Value
                    Else
                        .SfcMgO = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("fe2o3").Value) Then
                        .SfcFe2O3 = aRawProspDynaset.Fields("fe2o3").Value
                    Else
                        .SfcFe2O3 = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("al2o3").Value) Then
                        .SfcAl2O3 = aRawProspDynaset.Fields("al2o3").Value
                    Else
                        .SfcAl2O3 = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("cd").Value) Then
                        .SfcCd = aRawProspDynaset.Fields("cd").Value
                    Else
                        .SfcCd = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("size_frctn_wt").Value) Then
                        .SizeFrctnWt = aRawProspDynaset.Fields("size_frctn_wt").Value
                    Else
                        .SizeFrctnWt = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("size_frctn_wt_msr").Value) Then
                        .SizeFrctnWtMsr = aRawProspDynaset.Fields("size_frctn_wt_msr").Value
                    Else
                        .SizeFrctnWtMsr = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("size_frctn_type").Value) Then
                        .SizeFrctnType = aRawProspDynaset.Fields("size_frctn_type").Value
                    Else
                        .SizeFrctnType = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_prospraw_order").Value) Then
                        .SfcProsprawOrder = aRawProspDynaset.Fields("sfc_prospraw_order").Value
                    Else
                        .SfcProsprawOrder = 0
                    End If
                    '-----
                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_description").Value) Then
                        .SfcDescription = aRawProspDynaset.Fields("sfc_description").Value
                    Else
                        .SfcDescription = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_matl_name").Value) Then
                        .SfcMatlName = aRawProspDynaset.Fields("sfc_matl_name").Value
                    Else
                        .SfcMatlName = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_matl_abbrv").Value) Then
                        .SfcMatlAbbrv = aRawProspDynaset.Fields("sfc_matl_abbrv").Value
                    Else
                        .SfcMatlAbbrv = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_defn_order").Value) Then
                        .SfcDefnOrder = aRawProspDynaset.Fields("sfc_defn_order").Value
                    Else
                        .SfcDefnOrder = 0
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("reg_alpha_code").Value) Then
                        .RegAlphaCode = aRawProspDynaset.Fields("reg_alpha_code").Value
                    Else
                        .RegAlphaCode = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("reg_analysis_code").Value) Then
                        .RegAnalysisCode = aRawProspDynaset.Fields("reg_analysis_code").Value
                    Else
                        .RegAnalysisCode = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("exp_alpha_code").Value) Then
                        .ExpAlphaCode = aRawProspDynaset.Fields("exp_alpha_code").Value
                    Else
                        .ExpAlphaCode = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("exp_analysis_code").Value) Then
                        .ExpAnalysisCode = aRawProspDynaset.Fields("exp_analysis_code").Value
                    Else
                        .ExpAnalysisCode = ""
                    End If

                    '-----
                    If Not IsDBNull(aRawProspDynaset.Fields("ownership_desc").Value) Then
                        .OwnershipDesc = aRawProspDynaset.Fields("ownership_desc").Value
                    Else
                        .OwnershipDesc = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("deg_consol_desc").Value) Then
                        .DegConsolDesc = aRawProspDynaset.Fields("deg_consol_desc").Value
                    Else
                        .DegConsolDesc = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("dig_char_desc").Value) Then
                        .DigCharDesc = aRawProspDynaset.Fields("dig_char_desc").Value
                    Else
                        .DigCharDesc = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("lithology_desc").Value) Then
                        .LithologyDesc = aRawProspDynaset.Fields("lithology_desc").Value
                    Else
                        .LithologyDesc = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("mtx_color_desc").Value) Then
                        .MtxColorDesc = aRawProspDynaset.Fields("mtx_color_desc").Value
                    Else
                        .MtxColorDesc = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("phosph_color_desc").Value) Then
                        .PhosphColorDesc = aRawProspDynaset.Fields("phosph_color_desc").Value
                    Else
                        .PhosphColor = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("pump_char_desc").Value) Then
                        .PumpCharDesc = aRawProspDynaset.Fields("pump_char_desc").Value
                    Else
                        .PumpCharDesc = ""
                    End If

                    '07/17/2008, lss
                    'Made this change -- if the user checks chkUseRawProspAsOverride on
                    'frmProspDataReduction then the minabilities (if any) that are saved with the
                    'split in the raw prospect data are used as the mineability overrides.
                    If Not aRcvryParamsData.UseRawProspAsOverride Then
                        'Override mineability will be M, U, C
                        If aSplitOverrideName <> "" Then
                            If Not IsDBNull(aRawProspDynaset.Fields("oride_mineability").Value) Then
                                .OrideMineability = aRawProspDynaset.Fields("oride_mineability").Value
                            Else
                                'No override mineability is available for this split -- will
                                'assign it a "C".
                                .OrideMineability = "C"
                            End If
                        Else
                            'User did not define a split override set.
                            .OrideMineability = "C"
                        End If
                    Else    'aRcvryParamsData.UseRawProspAsOverride = True
                        'Need to check the hole minability in raw prospect first.  A hole could have
                        'splits marked as minable in raw prospect but the hole has been marked unminable
                        'which for our purposes here will make all of the splits for the hole unminable.
                        If Not IsDBNull(aRawProspDynaset.Fields("hole_minable").Value) Then
                            If aRawProspDynaset.Fields("hole_minable").Value = 0 Then
                                'Hole is not minable so this split is unminable.
                                .OrideMineability = "U"
                                HoleMinabilityInRawProsp = "N"
                            Else
                                'Hole is minable so let's proceed normally...
                                HoleMinabilityInRawProsp = "Y"
                                If Not IsDBNull(aRawProspDynaset.Fields("split_minable").Value) Then
                                    If aRawProspDynaset.Fields("split_minable").Value = 1 Then
                                        .OrideMineability = "M"
                                    Else
                                        .OrideMineability = "U"
                                    End If
                                Else
                                    .OrideMineability = "C"
                                End If
                            End If
                        Else
                            'Hole minability has not been set -- check the split minabilities.
                            'This really should not occur.
                            HoleMinabilityInRawProsp = "?"
                            If Not IsDBNull(aRawProspDynaset.Fields("split_minable").Value) Then
                                If aRawProspDynaset.Fields("split_minable").Value = 1 Then
                                    .OrideMineability = "M"
                                Else
                                    .OrideMineability = "U"
                                End If
                            Else
                                .OrideMineability = "C"
                            End If
                        End If
                    End If

                    'Split and hole minabilities as assigned in the raw prospect data.
                    'Replace raw prospect split minable data with raw prospect hole minable data!
                    If Not IsDBNull(aRawProspDynaset.Fields("hole_minable").Value) Then
                        .HoleRawProspMin = aRawProspDynaset.Fields("hole_minable").Value
                    Else
                        .HoleRawProspMin = -99
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hole_minable_when").Value) Then
                        .HoleRawProspMinWhen = aRawProspDynaset.Fields("hole_minable_when").Value
                    Else
                        .HoleRawProspMinWhen = #12/31/8888#
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("hole_minable_who").Value) Then
                        .HoleRawProspMinWho = aRawProspDynaset.Fields("hole_minable_who").Value
                    Else
                        .HoleRawProspMinWho = ""
                    End If
                    '-----
                    If Not IsDBNull(aRawProspDynaset.Fields("split_minable").Value) Then
                        .SplitRawProspMin = aRawProspDynaset.Fields("split_minable").Value
                    Else
                        .SplitRawProspMin = -99
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("split_minable_when").Value) Then
                        .SplitRawProspMinWhen = aRawProspDynaset.Fields("split_minable_when").Value
                    Else
                        .SplitRawProspMinWhen = #12/31/8888#
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("split_minable_who").Value) Then
                        .SplitRawProspMinWho = aRawProspDynaset.Fields("split_minable_who").Value
                    Else
                        .SplitRawProspMinWho = ""
                    End If

                    SfcCount = SfcCount + 1

                    SfcData(SfcCount).SizeFrctnCode = .SizeFrctnCode
                    SfcData(SfcCount).SfcBpl = .SfcBpl
                    SfcData(SfcCount).SfcFeAl = .SfcFeAl
                    SfcData(SfcCount).SfcInsol = .SfcInsol
                    SfcData(SfcCount).SfcCaO = .SfcCaO
                    SfcData(SfcCount).SfcMgO = .SfcMgO
                    SfcData(SfcCount).SfcFe2O3 = .SfcFe2O3
                    SfcData(SfcCount).SfcAl2O3 = .SfcAl2O3
                    SfcData(SfcCount).SfcCd = .SfcCd
                    SfcData(SfcCount).SizeFrctnWt = .SizeFrctnWt
                    SfcData(SfcCount).SizeFrctnWtMsr = .SizeFrctnWtMsr
                    SfcData(SfcCount).SizeFrctnType = .SizeFrctnType

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_description").Value) Then
                        SfcData(SfcCount).SfcDescription = aRawProspDynaset.Fields("sfc_description").Value
                    Else
                        SfcData(SfcCount).SfcDescription = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_matl_name").Value) Then
                        SfcData(SfcCount).SfcMatlName = aRawProspDynaset.Fields("sfc_matl_name").Value
                    Else
                        SfcData(SfcCount).SfcMatlName = ""
                    End If

                    If Not IsDBNull(aRawProspDynaset.Fields("sfc_matl_abbrv").Value) Then
                        SfcData(SfcCount).SfcMatlAbbrv = aRawProspDynaset.Fields("sfc_matl_abbrv").Value
                    Else
                        SfcData(SfcCount).SfcMatlAbbrv = ""
                    End If
                End With

                CurrTwp = ThisTwp
                CurrRge = ThisRge
                CurrSec = ThisSec
                CurrHole = ThisHole
                CurrSplit = ThisSplit

                aRawProspDynaset.MoveNext()

            Loop    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

            'Dim Grid As DataSet = FarPointGridToDataSet(aSsSplitReview)
            'Here is the Last Split  '#####################################################
            If Not PrematureExit Then
                'Process last split
                'Process last split
                'Process last split
                NumProcessed = NumProcessed + 1

                'Is this a split we want to process?

                'ProcData contains the information for the split we are
                'going to potentially process.
                ProcessSplit = GetProcessThisSplit(ProcData.Township,
                                                   ProcData.Range,
                                                   ProcData.Section,
                                                   ProcData.HoleLocation,
                                                   ProcData.Ownership,
                                                   ThisProspDate,
                                                   ThisMinedOutStatus,
                                                   ThisExpDrill,
                                                   aAreaDefnData)

                'Process the split if we need to
                If ProcessSplit Then
                    RdctnCalcData = ReduceSplitData(aProdDist,
                                                    aRcvryParamsData,
                                                    aRecoveryParams,
                                                    ProcData,
                                                    SfcData,
                                                    aSfcReproData,
                                                    ProdSizeDefnName)

                    'Currently in Function ProcessAreaRawProspData
                    'SplitRow = PlaceInSplitSprd(aSsSplitReview,  #############  Temp
                    '                            RdctnCalcData,
                    '                            ProcData.SampleId,
                    '                            aNoReview)

                    'Need to add to ssRawProspMin also.
                    PlaceInRawProspMinSprd(aSsRawProspMin, ProcData)

                    'May need to "recover" a "saved" minable override from previous
                    'run.
                    'If SavedMinableOrides Then
                    '    'With aSsSplitReview
                    '    '    .Row = SplitRow
                    '    '    .Col = 5
                    '    '    .Text = MinableOride(SplitRow)
                    '    'End With
                    '    RdctnCalcData.MineableOride = MinableOride(SplitRow) ' Added by Alf
                    'End If

                    'Have both the ProdCoeff and the 100% data for this split.
                    'Now use the ProdCoeff data to determine the split
                    'mineability.
                    DetermineSplitMineability(RdctnCalcData,
                                              aRcvryParamsData,
                                              aRecoveryParams,
                                              aProdDist)

                    'FlagUnMineableSsSplitReview(aSsSplitReview, RdctnCalcData, SplitRow)  ###############  Temp
                    'UpdateSsSplitReview(aSsSplitReview, RdctnCalcData, aRcvryParamsData, SplitRow)

                    ProcessStatus = DetermineSplitTpaMisc(RdctnCalcData,
                                                          aRcvryParamsData, aRecoveryParams)

                    'SplitTpaMiscToSsSplitReview(aSsSplitReview,   #####################  TEMP
                    '                            RdctnCalcData,
                    '                            aRcvryParamsData,
                    '                            SplitRow)

                    ProspectResults.SplitResults.Add(RdctnCalcData)   ' THE RESULT FOR LAST SPLIT!!!!!!!!!!!!!!!!

                    'If aNoReview Then
                    '    If aSsSplitReview.MaxRows <> 0 Then

                    '        Dim IsIPDistributedTo As Boolean = False
                    '        Dim Holes As List(Of gRawProspSplRdctnType)

                    '        IsIPDistributedTo = MatlDistributedTo(aProdDist, "IP")

                    '        ProcessStatus = ProcessForHoleMineability(aSsSplitReview,
                    '                                                  aRcvryParamsData,
                    '                                                  aRecoveryParams,
                    '                                                  IsIPDistributedTo,
                    '                                                  aScope)

                    '        Holes = gCompositeSplitData(aSsSplitReview,
                    '                                    aRcvryParamsData,
                    '                                    aRecoveryParams,
                    '                                    False,
                    '                                    IsIPDistributedTo)

                    '        ProspectResults.HoleResults.AddRange(Holes)

                    '        For Each Hole As gRawProspSplRdctnType In Holes
                    '            AssignCompositedHoleData(aSsCompReview, Hole)
                    '        Next

                    '        'Processing ready -- create some composite output
                    '        HoleCnt = HoleCnt + 1
                    '        ProcessStatus = gSaveProspectDataset(aSaveType,
                    '                                             aProspectDatasetName,
                    '                                             aProspDatasetTextFileName,
                    '                                             aChk100Pct,
                    '                                             aChkProductionCoefficient,
                    '                                             aOptInclSplits,
                    '                                             aOptInclComposites,
                    '                                             aOptInclBoth,
                    '                                             aSsCompReview,
                    '                                             aSsSplitReview,
                    '                                             ProspectResults.SplitResults,
                    '                                             ProspectResults.HoleResults,
                    '                                             aMineHasOffSpecPbPlt,
                    '                                             aChkInclMgPlt,
                    '                                             False,
                    '                                             0,
                    '                                             aNoReview,
                    '                                             HoleCnt,
                    '                                             aRcvryParamsData.SetPbToMgPlt,
                    '                                             aMineHasDoloflotPlt,
                    '                                             aRecoveryParams.UseAdjustedFeToDetermineMineability)

                    '        Select Case aSaveType
                    '            Case "MoisText", "SurvCaddText"
                    '                If Not aProspDatasetTextFileName.Equals(String.Empty) Then
                    '                    Using sw As New System.IO.StreamWriter(aProspDatasetTextFileName, True)
                    '                        For Each line As String In gOutputLines
                    '                            sw.WriteLine(line)
                    '                        Next
                    '                        sw.Flush()
                    '                        sw.Close()
                    '                    End Using
                    '                    gOutputLines.Clear()
                    '                End If

                    '            Case "BdFormatText"
                    '                'FileClose(gFileNumber)
                    '            Case "Database"
                    '                'Not implemented
                    '        End Select


                    '    End If
                    '    aSsSplitReview.MaxRows = 0
                    '    aSsCompReview.MaxRows = 0
                    'End If

                    AddCount = AddCount + 1
                End If
            End If

            ProspectResults.IntResult = 1

            'Display process counts to the user
            If aScope = "Batch" Then
                gFormProspDataReduction.lblProcComm2.Text = "Splits reduced = " &
                CStr(NumProcessed) & "  (" & CStr(AddCount) & ")"
                gFormProspDataReduction.Refresh()
            End If


            Return ProspectResults

        Catch ex As Exception
            MsgBox("Error processing area raw prospect data." & vbCrLf &
                   Err.Description,
                   vbOKOnly + vbExclamation,
                   "Data Process Error")
            ProspectResults.IntResult = 3
            Return ProspectResults
        End Try


    End Function


    Private Sub ZeroSfcData(ByRef aSfcData() As gProcSfcDataType)

        Dim RowIdx As Integer

        For RowIdx = 1 To UBound(aSfcData)
            aSfcData(RowIdx).SizeFrctnCode = ""
            aSfcData(RowIdx).SfcBpl = 0
            aSfcData(RowIdx).SfcFeAl = 0
            aSfcData(RowIdx).SfcInsol = 0
            aSfcData(RowIdx).SfcCaO = 0
            aSfcData(RowIdx).SfcMgO = 0
            aSfcData(RowIdx).SfcFe2O3 = 0
            aSfcData(RowIdx).SfcAl2O3 = 0
            aSfcData(RowIdx).SfcCd = 0
            aSfcData(RowIdx).SizeFrctnWt = 0
            aSfcData(RowIdx).SizeFrctnWtMsr = 0
            aSfcData(RowIdx).SizeFrctnType = ""
            aSfcData(RowIdx).SfcDescription = ""
            aSfcData(RowIdx).SfcMatlName = ""
            aSfcData(RowIdx).SfcMatlAbbrv = ""
        Next RowIdx
    End Sub

    Private Function ReduceSplitData(
                                ByVal aSsProdDist As ViewModels.ProductSizeDesignation, ' Scf-Product distribution
                                ByVal aRcvryParamsData As gDataRdctnParamsType,
                                ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                ByVal aProcData As gProcDataType,  'Split data with last sfc lab data (?)
                                ByVal aSfcData() As gProcSfcDataType,  'Split sfc lab data 
                                ByVal aSfcReproData(,) As String, 'Standard weighted sfc table
                                Optional ByVal ProdSizeDefnName As String = "Not Defined") As gRawProspSplRdctnType

        Dim aRdctnCalcData As New gRawProspSplRdctnType
        Dim ProdAssignData As mProdAssignType
        Dim MtxDensityMod As gMtxDensityModType
        Dim BplTonsTemp As Double
        Dim FlotRC As Single

        Dim FdBplTpa As Double
        Dim RcvrdBplTpa As Double

        Dim LabFlotRcvry As Single
        Dim LabFlotRc As Single

        Dim TlBpl As Single
        Dim TlTpa As Single
        Dim TlWtPct As Single
        Dim FlotRcvry As Single
        Dim FlotRcvryCf As Integer
        Dim DataIdx As Integer
        Dim FlotRcvryMode As String

        'Fill in what we can for the split before we start the reduction
        'All calculated data will be placed in aRdctnCalcData!  This is the
        'important data that will be returned ByRef from this procedure.
        Try
            With aRdctnCalcData

                .Section = aProcData.Section
                .Township = aProcData.Township
                .Range = aProcData.Range
                .HoleLocation = aProcData.HoleLocation
                .HoleDesc = gGetHoleLocationTrs(aProcData.Section,
                                                aProcData.Township,
                                                aProcData.Range,
                                                aProcData.HoleLocation)
                .SurvCaddHoleId = Mid(.HoleDesc, 1, 2) & Mid(.HoleDesc, 4, 2) & Mid(.HoleDesc, 7, 2) & Mid(.HoleDesc, 10)
                .SplitNumber = aProcData.SplitNumber
                .ProspDate = aProcData.ProspDate
                .MineableOride = aProcData.OrideMineability
                .Forty = aProcData.Forty
                .Xcoord = aProcData.Xcoord
                .Ycoord = aProcData.Ycoord
                .Elevation = aProcData.Elevation

                'Changes 10/19/2011, lss
                .HardpanFrom = aProcData.HardpanFrom
                .HardpanTo = aProcData.HardpanTo
                .HardpanCode = aProcData.HardpanCode
                .HardpanThck = aProcData.HardpanThck

                .Ownership = aProcData.Ownership
                .Aoi = aProcData.Aoi

                .SampleId = aProcData.SampleId

                'aProcData.MinedOutStatus will be 0 or 1 -- change to "Yes" or "No" here
                If aProcData.MinedStatus = 1 Then
                    .MinedOutStatus = "Yes"
                Else
                    .MinedOutStatus = "No"
                End If

                .HoleType = "Rotary"  'Hole type  (0 = Auger, 1 = Rotary)
                'Will call everything a rotary hole for now!

                'aProcData.ExpDrill will be 0 or 1 -- change to "Yes" or "No" here
                If aProcData.ExpDrill = 1 Then
                    .ExpDrill = "Yes"
                Else
                    .ExpDrill = "No"
                End If

                .TotDepth = aProcData.TotDepth
                .SplitDepthTop = aProcData.SplitDepthTop
                .SplitDepthBot = aProcData.SplitDepthBot
                .SplitThck = aProcData.SplitThck
                .MtxColor = aProcData.MtxColor
                .DegConsol = aProcData.DegConsol
                .DigChar = aProcData.DigChar
                .PumpChar = aProcData.PumpChar
                .Lithology = aProcData.Lithology
                .PhosphColor = aProcData.PhosphColor
                .SplitBarren = aProcData.Barren

                .MineableOride = aProcData.OrideMineability
                If .MineableOride <> "C" Then
                    'User has set an override mineability.
                    .Override = "Manual"
                Else
                    .Override = "Automatic"
                End If
            End With

            'Now we start the real reduction of the split data

            'Need to reproportion the size fraction code data that is available
            'for this split into the products that will be needed for the prospect
            'data reduction (Os, Cpb, Fpb, IP, Cfd, Ffd, Cl)

            With aRdctnCalcData
                .FdPctMoist = gCalcMoist(aProcData.FdMoistWetWt,
                                         aProcData.FdMoistDryWt,
                                         aProcData.FdMoistTareWt)
                .FdPctSol = 100 - .FdPctMoist

                'This weight (MtxTotDryWt) is in lbs.
                .FdTotDryWt = Round((100 - .FdPctMoist) / 100 * aProcData.FdTotWetWt, 1)
            End With

            ProdAssignData = GetProdAssignData(aProcData, aSfcData, aSfcReproData, aSsProdDist)


            'We now have (in ProdAssignData):
            '1) OS    wt and analysis
            '2) CrsPb wt and analysis
            '3) FnePb wt and analysis
            '4) CrsFd wt and analysis
            '5) FneFd wt and analysis
            '7) IP    wt and analysis
            '8) Cn    wt and analysis

            GetFeAdjust(ProdAssignData,
                        aRecoveryParams,
                        aProcData.MineName,
                        aProcData.ProspDate)

            'All of the weights are in grams!  The coarse and fine feed grams have
            'been ratio'd out from the float sample to the full matrix sample.

            'Calculate some miscellaneous stuff
            'Mtx %moisture
            'Mtx %solids
            'Total feed %moisture
            'Total feed %solids
            'Mtx total dry weight (lbs)
            'CrsPb %weight
            'FnePb %weight
            'TotPb %weight
            'CrsFd %weight
            'FneFd %weight
            'TotFd %weight
            'Os %weight
            'Clay %weight

            With aRdctnCalcData
                '.MtxPctMoist = gCalcMoist(aProcData.MtxMoistWetWt,
                '                          aProcData.MtxMoistDryWt,
                '                          aProcData.MtxMoistTareWt)
                '.MtxPctSol = 100 - .MtxPctMoist

                '02/16/2010, lss
                'Need to calculate mtx %moisture from 2 sets of matrix moisture samples.
                'The second set of matrix moisture samples (wet, dry, tare) will all be
                'zeros for older holes -- gCalcMoist2 will handle this correctly!
                .MtxPctMoist = gCalcMoist2(aProcData.MtxMoistWetWt,
                                           aProcData.MtxMoistDryWt,
                                           aProcData.MtxMoistTareWt,
                                           aProcData.MtxMoistWetWt2,
                                           aProcData.MtxMoistDryWt2,
                                           aProcData.MtxMoistTareWt2)
                .MtxPctSol = 100 - .MtxPctMoist

                .FdPctMoist = gCalcMoist(aProcData.FdMoistWetWt,
                                         aProcData.FdMoistDryWt,
                                         aProcData.FdMoistTareWt)
                .FdPctSol = 100 - .FdPctMoist

                'This weight (MtxTotDryWt) is in lbs.
                .MtxTotDryWt = Round((100 - .MtxPctMoist) / 100 * aProcData.MtxTotWetWt, 1)

                'CpbWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Cpb.WtPct = Round((ProdAssignData.CpbWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Cpb.WtPct = 0
                End If

                'FpbWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Fpb.WtPct = Round((ProdAssignData.FpbWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Fpb.WtPct = 0
                End If

                'Total pebble!
                .Tpb.WtPct = .Cpb.WtPct + .Fpb.WtPct

                'IpWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Ip.WtPct = Round((ProdAssignData.IpWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Ip.WtPct = 0
                End If

                'CfdWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Cfd.WtPct = Round((ProdAssignData.CfdWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Cfd.WtPct = 0
                End If

                'FfdWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Ffd.WtPct = Round((ProdAssignData.FfdWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Ffd.WtPct = 0
                End If

                .Tfd.WtPct = .Cfd.WtPct + .Ffd.WtPct

                'OsWt is in grams and is a dry weight (Divide by 453.6 to convert to lbs).
                If .MtxTotDryWt <> 0 Then
                    .Os.WtPct = Round((ProdAssignData.OsWt / 453.6) / .MtxTotDryWt * 100, 2)
                Else
                    .Os.WtPct = 0
                End If

                'Total pebble wt% + Total feed wt% + Oversize wt% + Waste clay wt% = 100

                'The waste clay wt% will be 100 - total pebble wt% - total feed wt% -
                'oversize wt%.  Will not allow the waste clay wt% to be negative!
                .Wcl.WtPct = Round(100 - .Tpb.WtPct - .Tfd.WtPct - .Os.WtPct, 2)

                If .Wcl.WtPct < 0 Then
                    .Wcl.WtPct = 0
                End If

                'Get some useful density information!
                .MtxDensity = gGetMtxDensityComp2(aProcData,
                                                  aRdctnCalcData,
                                                  ProdAssignData,
                                                  MtxDensityMod,
                                                  aRcvryParamsData)

                'Determine the mtx TPA
                '43560 = square feet per acre
                '2000  = pounds per ton
                .MtxTPA = Round(.MtxDensity * aProcData.SplitThck * 43560 / 2000, 0)

                'Determine some other TPA's that we can now get (will track both
                'ProdCoeff and 100%).
                .Os.Tpa = Round(.Os.WtPct / 100 * .MtxTPA, 0)
                .Cpb.Tpa = Round(.Cpb.WtPct / 100 * .MtxTPA, 0)
                .Fpb.Tpa = Round(.Fpb.WtPct / 100 * .MtxTPA, 0)
                .Tpb.Tpa = .Cpb.Tpa + .Fpb.Tpa
                .Ip.Tpa = Round(.Ip.WtPct / 100 * .MtxTPA, 0)
                .Cfd.Tpa = Round(.Cfd.WtPct / 100 * .MtxTPA, 0)
                .Ffd.Tpa = Round(.Ffd.WtPct / 100 * .MtxTPA, 0)
                .Tfd.Tpa = .Cfd.Tpa + .Ffd.Tpa

                .Os100.Tpa = Round(.Os.WtPct / 100 * .MtxTPA, 0)
                .Cpb100.Tpa = Round(.Cpb.WtPct / 100 * .MtxTPA, 0)
                .Fpb100.Tpa = Round(.Fpb.WtPct / 100 * .MtxTPA, 0)
                .Tpb100.Tpa = .Cpb.Tpa + .Fpb.Tpa
                .Ip100.Tpa = Round(.Ip.WtPct / 100 * .MtxTPA, 0)
                .Cfd100.Tpa = Round(.Cfd.WtPct / 100 * .MtxTPA, 0)
                .Ffd100.Tpa = Round(.Ffd.WtPct / 100 * .MtxTPA, 0)
                .Tfd100.Tpa = .Cfd100.Tpa + .Ffd100.Tpa

                'At this point we will determine a waste clay TPA by subtracting
                'the total feed, total pebble, and oversize TPA's from the
                'matrix TPA.  We will not allow the matrix TPA to go negative.
                '(Once again will track ProdCoeff and 100%).
                '08/22/2007 -- subtract out the OS also.
                .Wcl.Tpa = .MtxTPA - .Tfd.Tpa - .Tpb.Tpa - .Ip.Tpa - .Os.Tpa
                If .Wcl.Tpa < 0 Then
                    .Wcl.Tpa = 0
                End If

                .Wcl100.Tpa = .MtxTPA - .Tfd100.Tpa - .Tpb100.Tpa - .Ip100.Tpa - .Os100.Tpa
                If .Wcl100.Tpa < 0 Then
                    .Wcl100.Tpa = 0
                End If

                'Material/Product Recovery Adjustments  (Production coefficient)
                'Material/Product Recovery Adjustments  (Production coefficient)
                'Material/Product Recovery Adjustments  (Production coefficient)

                'Need to apply recoveries assigned by the user "Material-Product Recovery Factors"
                'on the Recovery Tab on frmProspDataReduction.  The 100% data that
                'we are tracking (Cpb100, Fpb100, etc. will not be affected).

                'Need to adjust the coarse pebble, fine pebble, IP,
                'coarse feed and fine feed TPA's using the recoveries
                'assigned by the user.  The coarse feed and fine feed BPL's
                'will be adjusted as well.
                'Stuff defined by the user:
                'aRcvryParamsData.PbTonRcvryCrs
                'aRcvryParamsData.PbTonRcvryFne
                'aRcvryParamsData.IpTonRcvryTot
                '-----
                'aRcvryParamsData.FdTonRcvryCrs
                'aRcvryParamsData.FdBplRcvryCrs
                'aRcvryParamsData.FdTonRcvryFne
                'aRcvryParamsData.FdBplRcvryFne
                '-----
                'aRcvryParamsData.ClTonRcvryTot

                .Cpb.Tpa = Round(.Cpb.Tpa * (aRecoveryParams.RecoveryDilutionParamaters.TotPbTonRcvry.Value / 100), 0)
                .Fpb.Tpa = Round(.Fpb.Tpa * (aRecoveryParams.RecoveryDilutionParamaters.TotPbTonRcvry.Value / 100), 0)
                .Ip.Tpa = Round(.Ip.Tpa * (aRecoveryParams.RecoveryDilutionParamaters.IpTonRcvryTot.Value / 100), 0)

                'Get recovery adjusted coarse feed TPA and BPL values.
                .Cfd.Tpa = Round(aRecoveryParams.RecoveryDilutionParamaters.TotFdTonRcvry.Value / 100 * .Cfd.Tpa, 0)
                BplTonsTemp = Round(.Cfd.Tpa * ProdAssignData.CfdBpl * aRecoveryParams.RecoveryDilutionParamaters.TotFdBplRcvry.Value / 100, 4)
                If .Cfd.Tpa <> 0 Then
                    .Cfd.Bpl = Round(BplTonsTemp / .Cfd.Tpa, 1)
                Else
                    .Cfd.Bpl = 0
                End If

                'Get recovery adjusted fine feed TPA and BPL values.
                .Ffd.Tpa = Round(aRecoveryParams.RecoveryDilutionParamaters.TotFdTonRcvry.Value / 100 * .Ffd.Tpa, 0)
                BplTonsTemp = Round(.Ffd.Tpa * ProdAssignData.FfdBpl * aRecoveryParams.RecoveryDilutionParamaters.TotFdBplRcvry.Value / 100, 4)
                If .Ffd.Tpa <> 0 Then
                    .Ffd.Bpl = Round(BplTonsTemp / .Ffd.Tpa, 1)
                Else
                    .Ffd.Bpl = 0
                End If

                'Get recovery adjusted coarse feed TPA and BPL values.  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DUPLICATE!!!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                .Cfd.Tpa = Round(aRecoveryParams.RecoveryDilutionParamaters.TotFdTonRcvry.Value / 100 * .Cfd.Tpa, 0)
                BplTonsTemp = Round(.Cfd.Tpa * ProdAssignData.CfdBpl * aRecoveryParams.RecoveryDilutionParamaters.TotFdBplRcvry.Value / 100, 4)
                If .Cfd.Tpa <> 0 Then
                    .Cfd.Bpl = Round(BplTonsTemp / .Cfd.Tpa, 1)
                Else
                    .Cfd.Bpl = 0
                End If
                '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DUPLICATE!!!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                'Need to adjust waste clay tons using the recovery assigned by the user.
                'Stuff defined by the user:
                'aRcvryParamsData.ClTonRcvryTot
                .Wcl.Tpa = Round(.Wcl.Tpa * (aRecoveryParams.RecoveryDilutionParamaters.ClTonRcvryTot.Value / 100), 0)

                'We have now changed the Cpb.Tpa, Fpb.Tpa, Ip.Tpa, Cfd.Tpa, Ffd.Tpa
                'and Wcl.Tpa.  Let's calculate a Mtx TPA for use with ProdCoeff.
                '(We have changed various material Tpa's so we need to resum the
                'matrix TPA to use with ProdCoeff stuff).
                '08/22/2007 -- added .Os.Tpa also.
                .MtxTpaPc = .Cpb.Tpa + .Fpb.Tpa + .Ip.Tpa + .Cfd.Tpa + .Ffd.Tpa +
                            .Wcl.Tpa + .Os.Tpa

                'Still need to get the coarse and fine feed BPL's set for the 100%
                'data we are tracking.
                'Fine feed BPL value
                .Ffd100.Bpl = ProdAssignData.FfdBpl
                'Coarse feed BPL value
                .Cfd100.Bpl = ProdAssignData.CfdBpl

                'Will need to process two times -- once for the ProdCoeff data
                'and once for the 100% data.

                'Insol adjustments  Insol adjustments  Insol adjustments
                'Insol adjustments  Insol adjustments  Insol adjustments
                'Insol adjustments  Insol adjustments  Insol adjustments

                'Now we can apply the Insol adjustments designated by the user.

                'Make adjustments for Insol as defined by the user.  This definition
                'is defined in aRcvryParamsData.  The mode will be:
                '1) Minimum     -- adjust lab Insol up to this value, if lab Insol above
                '                  this value then leave alone.
                '2) Direct      -- adjust lab Insol up or down to this value.
                '3) Incremental -- Add this value to the lab Insol.
                '4) In-Situ     -- use the lab Insol.

                'Stuff defined by the user:
                'aRcvryParamsData.CrsPbInsAdj
                'aRcvryParamsData.CrsPbInsAdjMode
                'aRcvryParamsData.FnePbInsAdj
                'aRcvryParamsData.FnePbInsAdjMode
                'aRcvryParamsData.IpInsAdj
                'aRcvryParamsData.IpInsAdjMode
                'aRcvryParamsData.CrsCnInsAdj
                'aRcvryParamsData.CrsCnInsAdjMode
                'aRcvryParamsData.FneCnInsAdj
                'aRcvryParamsData.FneCnInsAdjMode

                'aRcvryParamsData.CrsPbInsAdj100
                'aRcvryParamsData.CrsPbInsAdjMode100
                'aRcvryParamsData.FnePbInsAdj100
                'aRcvryParamsData.FnePbInsAdjMode100
                'aRcvryParamsData.IpInsAdj100
                'aRcvryParamsData.IpInsAdjMode100
                'aRcvryParamsData.CrsCnInsAdj100
                'aRcvryParamsData.CrsCnInsAdjMode100
                'aRcvryParamsData.FneCnInsAdj100
                'aRcvryParamsData.FneCnInsAdjMode100

                'aRcvryParamsData.MplInpBplTarg
                'aRcvryParamsData.MplInpMgoTarg
                'aRcvryParamsData.MplRejBplTarg
                'aRcvryParamsData.MplRejMgoTarg
                'aRcvryParamsData.MplM1BpltRvry
                'aRcvryParamsData.MplM1BplHwire
                'aRcvryParamsData.MplM1InsHwire
                'aRcvryParamsData.MplM1MgoImprove
                'aRcvryParamsData.MineHasOffSpecPbPlt

                'also have:
                'aRcvryParamsData.FlotRcvryMode
                'aRcvryParamsData.FlotRcvryCrsCnIns
                'aRcvryParamsData.FlotRcvryFneCnIns
                'If aRcvryParamsData.FlotRcvryMode = "Hard-wire" then these Insol
                'adjust values override any concentrate Insol adjusts from above.

                'Adjust the Coarse pebble, fine pebble, IP, fine concentrate,
                'coarse concentrate. The adjusted values will come back through
                'aRdctnCalcData.  Both the ProdCoeff and the 100% data we are
                'tracking will be adjusted.

                Dim RcvryPbInsAdjMode As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdjHardwire Then RcvryPbInsAdjMode = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdjMetLab Then RcvryPbInsAdjMode = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdjMinimum Then RcvryPbInsAdjMode = "Minimum"

                Dim RcvryPbInsAdjMode100 As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdj100Hardwire Then RcvryPbInsAdjMode100 = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdj100MetLab Then RcvryPbInsAdjMode100 = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotPbInsAdj100Minimum Then RcvryPbInsAdjMode100 = "Minimum"

                AdjIns(ProdAssignData,
                       aRdctnCalcData, "CrsPb",
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj, 0),
                       RcvryPbInsAdjMode,
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj100.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj100, 0),
                       RcvryPbInsAdjMode100) ', aRcvryParamsData.FlotRcvryMode, aRcvryParamsData.FlotRcvryCrsCnIns, aRcvryParamsData.FlotRcvryFneCnIns

                AdjIns(ProdAssignData,
                       aRdctnCalcData, "FnePb",
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj, 0),
                       RcvryPbInsAdjMode,
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj100.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotPbInsAdj100, 0),
                       RcvryPbInsAdjMode100) ', aRcvryParamsData.FlotRcvryMode, aRcvryParamsData.FlotRcvryCrsCnIns, aRcvryParamsData.FlotRcvryFneCnIns

                Dim RcvryIPInsAdjMode As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdjHardwire Then RcvryIPInsAdjMode = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdjMetLab Then RcvryIPInsAdjMode = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdjMinimum Then RcvryIPInsAdjMode = "Minimum"

                Dim RcvryIPInsAdjMode100 As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdj100Hardwire Then RcvryIPInsAdjMode100 = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdj100MetLab Then RcvryIPInsAdjMode100 = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsIPInsAdj100Minimum Then RcvryIPInsAdjMode100 = "Minimum"


                AdjIns(ProdAssignData,
                       aRdctnCalcData, "IP",
                       If(aRecoveryParams.RecoveryDilutionParamaters.IPInsAdj.HasValue, aRecoveryParams.RecoveryDilutionParamaters.IPInsAdj, 0),
                       RcvryIPInsAdjMode,
                       If(aRecoveryParams.RecoveryDilutionParamaters.IPInsAdj100.HasValue, aRecoveryParams.RecoveryDilutionParamaters.IPInsAdj100, 0),
                       RcvryIPInsAdjMode100) ', aRcvryParamsData.FlotRcvryMode, aRcvryParamsData.FlotRcvryCrsCnIns, aRcvryParamsData.FlotRcvryFneCnIns

                Dim RcvryCnInsAdjMode As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdjHardwire Then RcvryCnInsAdjMode = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdjMetLab Then RcvryCnInsAdjMode = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdjMinimum Then RcvryCnInsAdjMode = "Minimum"

                Dim RcvryCnInsAdjMode100 As String = String.Empty
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdj100Hardwire Then RcvryCnInsAdjMode100 = "Direct"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdj100MetLab Then RcvryCnInsAdjMode100 = "In-Situ"
                If aRecoveryParams.RecoveryDilutionParamaters.IsTotCnInsAdj100Minimum Then RcvryCnInsAdjMode100 = "Minimum"


                AdjIns(ProdAssignData,
                       aRdctnCalcData, "Fcn",
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj, 0),
                       RcvryCnInsAdjMode,
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj100.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj100, 0),
                       RcvryCnInsAdjMode100) ', aRcvryParamsData.FlotRcvryMode, aRcvryParamsData.FlotRcvryCrsCnIns, aRcvryParamsData.FlotRcvryFneCnIns

                AdjIns(ProdAssignData,
                       aRdctnCalcData, "Ccn",
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj, 0),
                       RcvryCnInsAdjMode,
                       If(aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj100.HasValue, aRecoveryParams.RecoveryDilutionParamaters.TotCnInsAdj100, 0),
                       RcvryCnInsAdjMode100) ', aRcvryParamsData.FlotRcvryMode, aRcvryParamsData.FlotRcvryCrsCnIns, aRcvryParamsData.FlotRcvryFneCnIns

                'Oversize analysis -- this has not really been addressed much
                'but will assign some values here (there is no assigned Insol
                'adjust for oversize):
                .Os.Bpl = ProdAssignData.OsBpl
                .Os.Ins = ProdAssignData.OsIns
                .Os.Fe = ProdAssignData.OsFe
                .Os.FeAdj = ProdAssignData.OsFeAdj
                .Os.Al = ProdAssignData.OsAl
                .Os.Ia = ProdAssignData.OsIa
                .Os.IaAdj = ProdAssignData.OsIaAdj
                .Os.Mg = ProdAssignData.OsMg
                .Os.Ca = ProdAssignData.OsCa

                .Os100.Bpl = ProdAssignData.OsBpl
                .Os100.Ins = ProdAssignData.OsIns
                .Os100.Fe = ProdAssignData.OsFe
                .Os100.FeAdj = ProdAssignData.OsFeAdj
                .Os100.Al = ProdAssignData.OsAl
                .Os100.Ia = ProdAssignData.OsIa
                .Os100.IaAdj = ProdAssignData.OsIaAdj
                .Os100.Mg = ProdAssignData.OsMg
                .Os100.Ca = ProdAssignData.OsCa

                'We now have Insol adjusted data for both the ProdCoeff and the 100%
                'data that we are tracking.  Remember that ProdCoeff data has recovery
                'factors applied + Insol adjustments.  The 100% data only has Insol
                'adjustments applied.

                'Lab Flotation  Lab Flotation  Lab Flotation
                'Lab Flotation  Lab Flotation  Lab Flotation
                'Lab Flotation  Lab Flotation  Lab Flotation

                'Stuff defined by the user:
                'aRcvryParamsData.FlotRcvryMode
                'aRcvryParamsData.FlotRcvryMode100

                'aRcvryParamsData.FlotRcvryMode will be "Linear model", "Hard-wire",
                '"Lab flotation", or "SqrRt feed BPL"
                'This recovery mode will be used for determining split mineability
                '(ProdCoeff stuff).

                'aRcvryParamsData.FlotRcvryMode100 will be "0 tail BPL' or
                '"SqrRt feed BPL"
                'This recovery mode will be used for 100%.

                'Linear model
                'aRcvryParamsData.FlotRcvryFneCf
                'aRcvryParamsData.FlotRcvryFneVf
                'aRcvryParamsData.FlotRcvryCrsCf
                'aRcvryParamsData.FlotRcvryCrsVf
                'aRcvryParamsData.LmTest

                'Hard-wire
                'aRcvryParamsData.FlotRcvryCrsCnIns
                'aRcvryParamsData.FlotRcvryCrsTlBpl
                'aRcvryParamsData.FlotRcvryFneCnIns
                'aRcvryParamsData.FlotRcvryFneTlBpl
                'aRcvryParamsData.HwTest

                'Lab flotation
                'No extra parameter data

                'SqrRt feed BPL
                'No extra parameter data

                'Will need to process two times -- once for the ProdCoeff data
                'and once for the 100% data.

                For DataIdx = 1 To 2

                    'DataIdx = 1   ProdCoeff (Catalog)
                    'DataIdx = 2   100%
                    If DataIdx = 1 Then
                        FlotRcvryMode = [Enum].GetName(GetType(FlotationRecoveryModes), aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryMode) 'aRcvryParamsData.FlotRcvryMode
                    Else
                        FlotRcvryMode = [Enum].GetName(GetType(FlotationRecovery100Modes), aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryMode100) 'aRcvryParamsData.FlotRcvryMode100
                    End If

                    Dim FloatIdx As Integer
                    'Will need to process here 2 times -- once to float the coarse
                    'feed and once to float the fine feed.
                    For FloatIdx = 1 To 2
                        Dim CnBpl As Single
                        Dim CnTpa As Single
                        Dim FdBpl As Single
                        Dim FdTpa As Single
                        Dim LabFlotCnTpa As Single
                        Dim LabFlotTlTpa As Single
                        Dim LabFlotTlBpl As Single
                        If FloatIdx = 1 Then
                            'Coarse feed --> coarse concentrate
                            If DataIdx = 1 Then
                                'Prod Coeff (Catalog)
                                FdBpl = .Cfd.Bpl
                                FdTpa = .Cfd.Tpa
                                CnBpl = .Ccn.Bpl
                            Else
                                '100%
                                FdBpl = .Cfd100.Bpl
                                FdTpa = .Cfd100.Tpa
                                CnBpl = .Ccn100.Bpl
                            End If
                        Else
                            'Fine feed --> fine concentrate
                            If DataIdx = 1 Then
                                FdBpl = .Ffd.Bpl
                                FdTpa = .Ffd.Tpa
                                CnBpl = .Fcn.Bpl
                            Else
                                FdBpl = .Ffd100.Bpl
                                FdTpa = .Ffd100.Tpa
                                CnBpl = .Fcn100.Bpl
                            End If
                        End If

                        'Need to get the "Lab flotation" recovery data here just in case
                        'we need it for the other methods.
                        LabFlotTlBpl = ProdAssignData.TlBpl
                        If FdBpl - LabFlotTlBpl <> 0 Then
                            LabFlotRc = Round((CnBpl - LabFlotTlBpl) /
                                            (FdBpl - LabFlotTlBpl), 10)
                        Else
                            LabFlotRc = 0
                        End If

                        If LabFlotRc <> 0 Then
                            LabFlotCnTpa = Round(FdTpa / LabFlotRc, 0)
                        Else
                            LabFlotCnTpa = 0
                        End If

                        LabFlotTlTpa = FdTpa - LabFlotCnTpa

                        If FdTpa * FdBpl <> 0 Then
                            LabFlotRcvry = Round((LabFlotCnTpa * CnBpl) /
                                         (FdTpa * FdBpl) * 100, 1)
                        Else
                            LabFlotRcvry = 0
                        End If

                        Select Case FlotRcvryMode
                            Case Is = "LinearModel"
                                'Cannot set the tail BPL here yet!  Will set it to zero
                                'for now!
                                TlBpl = 0

                            Case Is = "TailsBPLHardwire"
                                'Since we don't have coarse and fine concentrate in the raw
                                'prospect data we will use the fine concentrate value.
                                If FloatIdx = 1 Then
                                    TlBpl = aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryTlBplHw.Value 'aRcvryParamsData.FlotRcvryCrsTlBpl
                                Else
                                    TlBpl = aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryTlBplHw.Value 'aRcvryParamsData.FlotRcvryFneTlBpl
                                End If

                            Case Is = "LabFlotation"
                                TlBpl = ProdAssignData.TlBpl

                            Case Is = "ExponentFeedBPL"
                                If DataIdx = 1 Then
                                    TlBpl = Round(Pow(FdBpl, aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryFdBplExp.Value), 1) 'Round(Sqrt(FdBpl), 1)
                                Else
                                    TlBpl = Round(Pow(FdBpl, aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryFdBplExp100.Value), 1) 'Round(Sqrt(FdBpl), 1)
                                End If


                            Case Is = "ZeroTailBPL"
                                TlBpl = 0
                        End Select

                        If FlotRcvryMode <> "LinearModel" Then
                            'Anything except the Linear model!
                            'Anything except the Linear model!
                            'Anything except the Linear model!

                            If FdBpl - TlBpl <> 0 Then
                                FlotRC = Round((CnBpl - TlBpl) / (FdBpl - TlBpl), 10)
                            Else
                                FlotRC = 0
                            End If

                            If FlotRC <> 0 Then
                                CnTpa = Round(FdTpa / FlotRC, 0)
                            Else
                                CnTpa = 0
                            End If

                            If FdTpa * FdBpl <> 0 Then
                                FlotRcvry = Round((CnTpa * CnBpl) /
                                            (FdTpa * FdBpl) * 100, 1)
                            Else
                                FlotRcvry = 0
                            End If

                            TlTpa = FdTpa - CnTpa

                            If aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryHwUseLabFlotRcvryTest Then
                                'Additional stuff for the Hard-wire model.

                                'Test result of linear model vs lab flotation (if lab
                                'flotation < linear function, use lab value).
                                If LabFlotRcvry < FlotRcvry Then
                                    FlotRcvry = LabFlotRcvry
                                    CnTpa = LabFlotCnTpa
                                    TlBpl = LabFlotTlBpl
                                    TlTpa = LabFlotTlTpa
                                End If
                            End If
                        Else
                            'Linear model  Linear model  Linear model  Linear model
                            'Linear model  Linear model  Linear model  Linear model
                            'Linear model  Linear model  Linear model  Linear model

                            FdBplTpa = FdTpa * FdBpl

                            'Linear model -- Constant factor part
                            If FloatIdx = 1 Then
                                FlotRcvryCf = aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryHw.Value 'aRcvryParamsData.FlotRcvryCrsCf
                            Else
                                FlotRcvryCf = aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryHw.Value 'aRcvryParamsData.FlotRcvryFneCf
                            End If

                            If FlotRcvryCf <> 0 Then
                                RcvrdBplTpa = FlotRcvryCf / 100 * FdBplTpa

                                'RcvrdBplTpa= Concentrate BPL TPA
                                If CnBpl <> 0 Then
                                    CnTpa = Round(RcvrdBplTpa / CnBpl, 0)
                                Else
                                    CnTpa = 0
                                End If

                                If CnTpa <> 0 Then
                                    FlotRC = Round(FdTpa / CnTpa, 10)
                                Else
                                    FlotRC = 0
                                End If

                                'Tail BPL = (FlotRc * FdBPL - CnBPL) / (FlotRc - 1)
                                If FlotRC - 1 <> 0 Then
                                    TlBpl = Round((FlotRC * FdBpl - CnBpl) / (FlotRC - 1), 1)
                                Else
                                    TlBpl = 0
                                End If

                                If FdTpa * FdBpl <> 0 Then
                                    FlotRcvry = Round((CnTpa * CnBpl) /
                                                (FdTpa * FdBpl) * 100, 1)
                                Else
                                    FlotRcvry = 0
                                End If

                                TlTpa = FdTpa - CnTpa

                                If aRecoveryParams.RecoveryDilutionParamaters.FlotRcvryHwUseLabFlotRcvryTest Then ' aRcvryParamsData.LmTest = 1 Then
                                    'Test result of linear model vs lab flotation (if lab
                                    'flotation < linear function, use lab value).
                                    If LabFlotRcvry < FlotRcvry Then
                                        FlotRcvry = LabFlotRcvry
                                        CnTpa = LabFlotCnTpa
                                        TlBpl = LabFlotTlBpl
                                        TlTpa = LabFlotTlTpa
                                    End If
                                End If
                            End If

                            'Linear model -- Variable factor part
                            'Not sure what to do with the variable factor stuff here!
                            '04/04/2007 -- Gary Gavie said not to worry about the
                            '              variable factor stuff for now.
                            'If aRcvryParamsData.FlotRcvryCrsVf <> 0 Then
                            '    'Functionality not defined yet.
                            'End If
                        End If

                        TlTpa = FdTpa - CnTpa
                        If .MtxTPA <> 0 Then
                            TlWtPct = Round(TlTpa / .MtxTPA * 100, 2)
                        Else
                            TlWtPct = 0
                        End If

                        'Need to assign some values in aRdctnCalcData.
                        If DataIdx = 1 Then
                            If FloatIdx = 1 Then
                                .Ccn.Tpa = CnTpa
                                .TlCrs.Bpl = TlBpl
                                .TlCrs.Tpa = TlTpa
                            Else
                                .Fcn.Tpa = CnTpa
                                .TlFne.Bpl = TlBpl
                                .TlFne.Tpa = TlTpa
                            End If
                        Else
                            If FloatIdx = 1 Then
                                .Ccn100.Tpa = CnTpa
                                .TlCrs100.Bpl = TlBpl
                                .TlCrs100.Tpa = TlTpa
                            Else
                                .Fcn100.Tpa = CnTpa
                                .TlFne100.Bpl = TlBpl
                                .TlFne100.Tpa = TlTpa
                            End If
                        End If
                    Next FloatIdx
                Next DataIdx

                'Miscellanous  Miscellanous  Miscellanous
                'Miscellanous  Miscellanous  Miscellanous
                'Miscellanous  Miscellanous  Miscellanous

                'We are currently in Sub ReduceSplitData.

                'Calculate the total pebble from the coarse pebble and the
                'fine pebble.  Will calculate only the ProdCoeff.
                CalcTotPb(aRdctnCalcData,
                          "ProdCoeff")

                'Calculate the total concentrate from the coarse concentrate and the
                'fine concentrate.  Will calculate both the ProdCoeff and 100%.
                CalcTotCn(aRdctnCalcData, "Both")

                'Combine coarse and fine feed to get total feed (TPA and BPL).
                '(Both ProdCoeff and 100%)
                .Tfd.Tpa = .Cfd.Tpa + .Ffd.Tpa
                If .Cfd.Tpa + .Ffd.Tpa > 0 Then
                    .Tfd.Bpl = Round((.Cfd.Tpa * .Cfd.Bpl + .Ffd.Tpa * .Ffd.Bpl) /
                              (.Cfd.Tpa + .Ffd.Tpa), 1)
                Else
                    .Tfd.Bpl = 0
                End If

                .Tfd100.Tpa = .Cfd100.Tpa + .Ffd100.Tpa
                If .Cfd100.Tpa + .Ffd100.Tpa > 0 Then
                    .Tfd100.Bpl = Round((.Cfd100.Tpa * .Cfd100.Bpl + .Ffd100.Tpa * .Ffd100.Bpl) /
                                  (.Cfd100.Tpa + .Ffd100.Tpa), 1)
                Else
                    .Tfd100.Bpl = 0
                End If

                'Combine coarse and fine tails to get total tails (TPA and BPL).
                '(Both ProdCoeff and 100%)
                .Ttl.Tpa = .TlCrs.Tpa + .TlFne.Tpa
                If .TlCrs.Tpa + .TlFne.Tpa > 0 Then
                    .Ttl.Bpl = Round((.TlCrs.Tpa * .TlCrs.Bpl + .TlFne.Tpa * .TlFne.Bpl) /
                              (.TlCrs.Tpa + .TlFne.Tpa), 1)
                Else
                    .Ttl.Bpl = 0
                End If

                .Ttl100.Tpa = .TlCrs100.Tpa + .TlFne100.Tpa
                If .TlCrs100.Tpa + .TlFne100.Tpa > 0 Then
                    .Ttl100.Bpl = Round((.TlCrs100.Tpa * .TlCrs100.Bpl + .TlFne100.Tpa * .TlFne100.Bpl) /
                                  (.TlCrs100.Tpa + .TlFne100.Tpa), 1)
                Else
                    .Ttl100.Bpl = 0
                End If

                'Since we have changed the various TPA's let's recalculate the weight%'s.
                If .MtxTPA <> 0 Then
                    .Os.WtPct = Round(.Os.Tpa / .MtxTPA * 100, 2)
                Else
                    .Os.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Cpb.WtPct = Round(.Cpb.Tpa / .MtxTPA * 100, 2)
                Else
                    .Cpb.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Fpb.WtPct = Round(.Fpb.Tpa / .MtxTPA * 100, 2)
                Else
                    .Fpb.WtPct = 0
                End If
                .Tpb.WtPct = .Cpb.WtPct + .Fpb.WtPct
                If .MtxTPA <> 0 Then
                    .Ip.WtPct = Round(.Ip.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ip.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Cfd.WtPct = Round(.Cfd.Tpa / .MtxTPA * 100, 2)
                Else
                    .Cfd.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Ffd.WtPct = Round(.Ffd.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ffd.WtPct = 0
                End If

                If .MtxTPA <> 0 Then
                    .Ccn.WtPct = Round(.Ccn.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ccn.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Fcn.WtPct = Round(.Fcn.Tpa / .MtxTPA * 100, 2)
                Else
                    .Fcn.WtPct = 0
                End If
                .Tcn.WtPct = .Ccn.WtPct + .Fcn.WtPct

                .Tfd.WtPct = .Cfd.WtPct + .Ffd.WtPct
                .Wcl.WtPct = 100 - .Os.WtPct - .Tpb.WtPct - .Tfd.WtPct

                If .Wcl.WtPct < 0 Then
                    .Wcl.WtPct = 0
                End If

                If .MtxTPA <> 0 Then
                    .Ttl.WtPct = Round(.Ttl.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ttl.WtPct = 0
                End If

                'Calculating the All total product

                'Calculating All Total Products Catalog
                Dim AllProductsCat As New List(Of mProdInfoType)
                With AllProductsCat
                    .Add(aRdctnCalcData.Cpb)
                    .Add(aRdctnCalcData.Fpb)
                    .Add(aRdctnCalcData.Ip)
                    .Add(aRdctnCalcData.Ccn)
                    .Add(aRdctnCalcData.Fcn)
                End With
                .ATpr = CalcTotPrSpec(AllProductsCat, False)

                'Calculating All Total Product 100%
                Dim AllProducts100 As New List(Of mProdInfoType)
                With AllProducts100
                    .Add(aRdctnCalcData.Cpb100)
                    .Add(aRdctnCalcData.Fpb100)
                    .Add(aRdctnCalcData.Ip100)
                    .Add(aRdctnCalcData.Ccn100)
                    .Add(aRdctnCalcData.Fcn100)
                End With
                .ATpr100 = CalcTotPrSpec(AllProducts100, True)

            End With

            Return aRdctnCalcData

        Catch ex As Exception
            Throw ex
        End Try
    End Function

    Private Sub GetFeAdjust(ByRef aProdAssignData As mProdAssignType,
                            ByVal aRecoveryParams As ProductRecoveryDefinition,
                            ByVal aMineName As String,
                            ByVal aProspDate As Date)



        Dim ThisZone As String
        Dim CorrFactor As Single

        'We have (in ProdAssignData):
        '1) OS    wt and analysis
        '2) CrsPb wt and analysis
        '3) FnePb wt and analysis
        '4) CrsFd wt and analysis -- no Fe!
        '5) FneFd wt and analysis -- no Fe!
        '7) IP    wt and analysis
        '8) Cn    wt and analysis
        '9) TotPb wt and analysis

        aProdAssignData.OsFeAdj = aProdAssignData.OsFe
        aProdAssignData.CpbFeAdj = aProdAssignData.CpbFe
        aProdAssignData.FpbFeAdj = aProdAssignData.FpbFe
        aProdAssignData.TpbFeAdj = aProdAssignData.TpbFe
        aProdAssignData.IpFeAdj = aProdAssignData.IpFe
        aProdAssignData.CnFeAdj = aProdAssignData.CnFe

        aProdAssignData.OsIaAdj = aProdAssignData.OsIa
        aProdAssignData.CpbIaAdj = aProdAssignData.CpbIa
        aProdAssignData.FpbIaAdj = aProdAssignData.FpbIA
        aProdAssignData.TpbIaAdj = aProdAssignData.TpbIA
        aProdAssignData.IpIaAdj = aProdAssignData.IpIa
        aProdAssignData.CnIaAdj = aProdAssignData.CnIa

        'Will determine adjusted Fe's -- may not actually use them for anything!
        'If aRcvryParamsData.UseFeAdjust = True Then
        If GetFeNeedsAdjust(aMineName, aProspDate, aRecoveryParams.WingateCutoffDate) Then
            ThisZone = GetUpperOrLowerZone(aProdAssignData)

            If ThisZone = "Upper" Then
                'CorrFactor = aRcvryParamsData.UpperZoneFeAdjust / 100
                CorrFactor = aRecoveryParams.UpperLimitCorrection / 100
            Else
                'CorrFactor = aRcvryParamsData.LowerZoneFeAdjust / 100
                CorrFactor = aRecoveryParams.LowerLimitCorrection / 100
            End If

            aProdAssignData.OsFeAdj = Round(CorrFactor * aProdAssignData.OsFe, 2)
            aProdAssignData.CpbFeAdj = Round(CorrFactor * aProdAssignData.CpbFe, 2)
            aProdAssignData.FpbFeAdj = Round(CorrFactor * aProdAssignData.FpbFe, 2)
            aProdAssignData.TpbFeAdj = Round(CorrFactor * aProdAssignData.TpbFe, 2)
            aProdAssignData.IpFeAdj = Round(CorrFactor * aProdAssignData.IpFeAdj, 2)
            aProdAssignData.CnFeAdj = Round(CorrFactor * aProdAssignData.CnFe, 2)

            If aProdAssignData.OsAl <> 0 Then
                aProdAssignData.OsIaAdj = Round(CorrFactor * aProdAssignData.OsFe, 2) + aProdAssignData.OsAl
            End If
            If aProdAssignData.CpbAl <> 0 Then
                aProdAssignData.CpbIaAdj = Round(CorrFactor * aProdAssignData.CpbFe, 2) + aProdAssignData.CpbAl
            End If
            If aProdAssignData.FpbAl <> 0 Then
                aProdAssignData.FpbIaAdj = Round(CorrFactor * aProdAssignData.FpbFe, 2) + aProdAssignData.FpbAl
            End If
            If aProdAssignData.TpbAl <> 0 Then
                aProdAssignData.TpbIaAdj = Round(CorrFactor * aProdAssignData.TpbFe, 2) + aProdAssignData.TpbAl
            End If
            If aProdAssignData.IpAl <> 0 Then
                aProdAssignData.IpIaAdj = Round(CorrFactor * aProdAssignData.IpFeAdj, 2) + aProdAssignData.IpAl
            End If
            If aProdAssignData.CnAl <> 0 Then
                aProdAssignData.CnIaAdj = Round(CorrFactor * aProdAssignData.CnFe, 2) + aProdAssignData.CnAl
            End If
        End If
    End Sub

    Private Function GetUpperOrLowerZone(ByRef aProdAssignData As mProdAssignType) As String

        '06/05/2009 Rule of Lower Zone Determination -- Allen Truesdell
        'If combined pebble MgO is >= 120 and concentrate MgO >= 0.68 then the split should be
        'considered a lower carbonate zone.

        With aProdAssignData
            If .TpbMg >= 1.2 And .CnMg >= 0.68 Then
                GetUpperOrLowerZone = "Lower"
            Else
                GetUpperOrLowerZone = "Upper"
            End If
        End With
    End Function

    Private Function GetFeNeedsAdjust(ByVal aMineName As String,
                                  ByVal aProspDate As Date,
                                  ByVal aWgFeAdjCutoffDate As Date) As Boolean

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim ThisSource As String
        Dim CargillFeOkDate As Date
        Dim ImcFeOkDate As Date

        'Cargill -- 1/1/2007 and onward Fe's are OK
        'IMC     -- 2/1/1996 and onward Fe's are OK

        CargillFeOkDate = #1/1/2007#
        ImcFeOkDate = #2/1/1996#

        If Len(Trim(aMineName)) = 0 Then
            GetFeNeedsAdjust = False
            Exit Function
        End If

        'Have a "special" cutoff date for Wingate that the user has provided.
        If aMineName = "Wingate" Then
            CargillFeOkDate = aWgFeAdjCutoffDate
        End If

        If aMineName = "South Fort Meade" Or aMineName = "Hookers Prairie" Or
        aMineName = "Wingate" Then
            ThisSource = "Cargill"
        Else
            ThisSource = "IMC"
        End If

        If ThisSource = "Cargill" Then
            If aProspDate < CargillFeOkDate Then
                GetFeNeedsAdjust = True
            Else
                GetFeNeedsAdjust = False
            End If
        End If

        If ThisSource = "IMC" Then
            If aProspDate < ImcFeOkDate Then
                GetFeNeedsAdjust = True
            Else
                GetFeNeedsAdjust = False
            End If
        End If
    End Function


    Public Function GetProdAssignData(ByVal aProcData As gProcDataType, ByVal aSfcData() As gProcSfcDataType,
                                      ByVal aSfcReproData(,) As String, ByVal aSsProdDist As ViewModels.ProductSizeDesignation) As mProdAssignType
        Dim ProdAssignData As mProdAssignType

        'Build Product Distribution
        Dim ProdDist As New List(Of Mosaic.ProspectMining.Model.SFCProductDistribution)

        For Each item In aSsProdDist.Details
            Dim Product As String = String.Empty
            If item.IsOversize Then Product = "OS"
            If item.IsCoarsePb Then Product = "CrsPb"
            If item.IsFinePb Then Product = "FnePb"
            If item.IsIp Then Product = "IP"
            If item.IsCoarseFd Then Product = "CrsFd"
            If item.IsFineFd Then Product = "FneFd"
            If item.IsClay Then Product = "Clay"
            ProdDist.Add(New Mosaic.ProspectMining.Model.SFCProductDistribution With {.SFC = item.SFCCode, .Product = Product})
        Next


        'Build SFC Standard Weight Distribution
        Dim SFCStandardDef As New List(Of Mosaic.ProspectMining.Model.SFCStandardDistribution)
        For RowIdx = 3 To UBound(aSfcReproData, 1)
            For ColIdx = 2 To 22
                Dim SFCStandardItem As New Mosaic.ProspectMining.Model.SFCStandardDistribution()
                SFCStandardItem.SourceSFC = aSfcReproData(RowIdx, 1)
                If aSfcReproData(RowIdx, ColIdx) > 0 Then
                    SFCStandardItem.StandardSFC = aSfcReproData(0, ColIdx)
                    Double.TryParse(aSfcReproData(RowIdx, ColIdx), SFCStandardItem.PercentageWeight)
                    SFCStandardDef.Add(SFCStandardItem)
                End If
            Next
        Next


        'Build RawProspectSplit
        Dim RawSplit As Mosaic.ProspectMining.Model.RawProspectSplit = New Mosaic.ProspectMining.Model.RawProspectSplit With {.Location = aProcData.HoleLocation,
                                                                                                                       .Range = aProcData.Range,
                                                                                                                       .Township = aProcData.Township,
                                                                                                                       .Section = aProcData.Section,
                                                                                                                       .SplitNumber = aProcData.SplitNumber,
                                                                                                                       .ProspectDate = aProcData.ProspDate,
                                                                                                                       .MtxMoistDryWt = aProcData.MtxMoistDryWt,
                                                                                                                       .MtxMoistTareWt = aProcData.MtxMoistTareWt,
                                                                                                                       .MtxMoistWetWt = aProcData.MtxMoistWetWt,
                                                                                                                       .MtxMoistDryWt2 = aProcData.MtxMoistDryWt2,
                                                                                                                       .MtxMoistTareWt2 = aProcData.MtxMoistTareWt2,
                                                                                                                       .MtxMoistWetWt2 = aProcData.MtxMoistWetWt2,
                                                                                                                       .MtxTotWetWt = aProcData.MtxTotWetWt,
                                                                                                                       .FdMoistDryWt = aProcData.FdMoistDryWt,
                                                                                                                       .FdMoistTareWt = aProcData.FdMoistTareWt,
                                                                                                                       .FdMoistWetWt = aProcData.FdMoistWetWt,
                                                                                                                       .FdTotWetWt = aProcData.FdTotWetWt}

        Dim SfcQualities As New List(Of Mosaic.ProspectMining.Model.SFCQuality)

        For RowIdx = 1 To UBound(aSfcData)
            'Get the SFC data for this split (could be any SFC)

            Dim SFCQuality As Mosaic.ProspectMining.Model.SFCQuality
            SFCQuality = New Mosaic.ProspectMining.Model.SFCQuality With {.SizeFrctnCode = aSfcData(RowIdx).SizeFrctnCode,
                                                                          .SizeFrctnWt = aSfcData(RowIdx).SizeFrctnWt,
                                                                          .NominalProduct = aSfcData(RowIdx).SfcMatlAbbrv,
                                                                          .SizeFrctnType = aSfcData(RowIdx).SizeFrctnType,
                                                                          .SfcBpl = aSfcData(RowIdx).SfcBpl,
                                                                          .SfcInsol = aSfcData(RowIdx).SfcInsol,
                                                                          .SfcCaO = aSfcData(RowIdx).SfcCaO,
                                                                          .SfcFe2O3 = aSfcData(RowIdx).SfcFe2O3,
                                                                          .SfcAl2O3 = aSfcData(RowIdx).SfcAl2O3,
                                                                          .SfcMgO = aSfcData(RowIdx).SfcMgO,
                                                                          .SfcFeAl = aSfcData(RowIdx).SfcFeAl
                                                                            }
            SfcQualities.Add(SFCQuality)
        Next

        RawSplit.SfcQuality = SfcQualities

        Dim ReducerEngine As Mosaic.ProspectMining.Business.SplitDataReducer = New Mosaic.ProspectMining.Business.SplitDataReducer(RawSplit, SFCStandardDef, ProdDist)

        'Code to translate ReducedSplit to ProdAssignData
        For Each a As Mosaic.ProspectMining.Model.ProductQuality In ReducerEngine.ReducedSplit.SplitProductQuality
            Select Case a.Product
                Case Is = "OS"
                    ProdAssignData.OsWt = a.Weight
                    ProdAssignData.OsBpl = a.Bpl
                    ProdAssignData.OsAl = a.Al
                    ProdAssignData.OsCa = a.Ca
                    ProdAssignData.OsFe = a.Fe
                    ProdAssignData.OsIa = a.Ia
                    ProdAssignData.OsIns = a.Insol
                    ProdAssignData.OsMg = a.Mg
                Case Is = "CrsPb"
                    ProdAssignData.CpbWt = a.Weight
                    ProdAssignData.CpbBpl = a.Bpl
                    ProdAssignData.CpbAl = a.Al
                    ProdAssignData.CpbCa = a.Ca
                    ProdAssignData.CpbFe = a.Fe
                    ProdAssignData.CpbIa = a.Ia
                    ProdAssignData.CpbIns = a.Insol
                    ProdAssignData.CpbMg = a.Mg
                Case Is = "FnePb"
                    ProdAssignData.FpbWt = a.Weight
                    ProdAssignData.FpbBpl = a.Bpl
                    ProdAssignData.FpbAl = a.Al
                    ProdAssignData.FpbCa = a.Ca
                    ProdAssignData.FpbFe = a.Fe
                    ProdAssignData.FpbIA = a.Ia
                    ProdAssignData.FpbIns = a.Insol
                    ProdAssignData.FpbMg = a.Mg
                Case Is = "IP"
                    ProdAssignData.IpWt = a.Weight
                    ProdAssignData.IpBpl = a.Bpl
                    ProdAssignData.IpAl = a.Al
                    ProdAssignData.IpCa = a.Ca
                    ProdAssignData.IpFe = a.Fe
                    ProdAssignData.IpIa = a.Ia
                    ProdAssignData.IpIns = a.Insol
                    ProdAssignData.IpMg = a.Mg
                Case Is = "CrsFd"
                    ProdAssignData.CfdWt = a.Weight
                    ProdAssignData.CfdBpl = a.Bpl
                    'ProdAssignData.CfdCa = a.Ca
                    'ProdAssignData.CfdFe = a.Fe
                    'ProdAssignData.CfdIa = a.Ia
                    'ProdAssignData.CfdIns = a.Insol
                    'ProdAssignData.CfdAl = a.Mg
                Case Is = "FneFd"
                    ProdAssignData.FfdWt = a.Weight
                    ProdAssignData.FfdBpl = a.Bpl
                    'ProdAssignData.FpbAl = a.Al
                    'ProdAssignData.FpbCa = a.Ca
                    'ProdAssignData.FpbFe = a.Fe
                    'ProdAssignData.FpbIA = a.Ia
                    'ProdAssignData.FpbIns = a.Insol
                    'ProdAssignData.FpbMg = a.Mg
                Case Is = "Clay"
                    ProdAssignData.ClWt = a.Weight
                Case Is = "Cn"
                    ProdAssignData.CnWt = a.Weight
                    ProdAssignData.CnBpl = a.Bpl
                    ProdAssignData.CnAl = a.Al
                    ProdAssignData.CnCa = a.Ca
                    ProdAssignData.CnFe = a.Fe
                    ProdAssignData.CnIa = a.Ia
                    ProdAssignData.CnIns = a.Insol
                    ProdAssignData.CnMg = a.Mg
                Case Is = "Tl"
                    ProdAssignData.TlWt = a.Weight
                    ProdAssignData.TlBpl = a.Bpl
            End Select

        Next

        'Calculate Tpb and Tfd

        With ProdAssignData
            'Now we need to calculate the data for total pebble and total
            'feed.
            .TfdWt = .CfdWt + .FfdWt

            If IIf(.CfdBpl > 0, .CfdWt, 0) + IIf(.FfdBpl > 0, .FfdWt, 0) Then
                .TfdBpl = Round((.CfdWt * .CfdBpl + .FfdWt * .FfdBpl) /
                          (IIf(.CfdBpl > 0, .CfdWt, 0) +
                          IIf(.FfdBpl > 0, .FfdWt, 0)), 1)
            Else
                .TfdBpl = 0
            End If

            '-----
            'Total pebble  Total pebble  Total pebble
            'Total pebble  Total pebble  Total pebble
            'Total pebble  Total pebble  Total pebble

            .TpbWt = .CpbWt + .FpbWt
            If IIf(.CpbBpl > 0, .CpbWt, 0) + IIf(.FpbBpl > 0, .FpbWt, 0) Then
                .TpbBpl = Round((.CpbWt * .CpbBpl + .FpbWt * .FpbBpl) /
                              (IIf(.CpbBpl > 0, .CpbWt, 0) +
                              IIf(.FpbBpl > 0, .FpbWt, 0)), 1)
            Else
                .TpbBpl = 0
            End If
            If IIf(.CpbIns > 0, .CpbWt, 0) + IIf(.FpbIns > 0, .FpbWt, 0) Then
                .TpbIns = Round((.CpbWt * .CpbIns + .FpbWt * .FpbIns) /
                              (IIf(.CpbIns > 0, .CpbWt, 0) +
                              IIf(.FpbIns > 0, .FpbWt, 0)), 1)
            Else
                .TpbIns = 0
            End If
            If IIf(.CpbCa > 0, .CpbWt, 0) + IIf(.FpbCa > 0, .FpbWt, 0) Then
                .TpbCa = Round((.CpbWt * .CpbCa + .FpbWt * .FpbCa) /
                              (IIf(.CpbCa > 0, .CpbWt, 0) +
                              IIf(.FpbCa > 0, .FpbWt, 0)), 1)
            Else
                .TpbCa = 0
            End If
            If IIf(.CpbFe > 0, .CpbWt, 0) + IIf(.FpbFe > 0, .FpbWt, 0) Then
                .TpbFe = Round((.CpbWt * .CpbFe + .FpbWt * .FpbFe) /
                              (IIf(.CpbFe > 0, .CpbWt, 0) +
                              IIf(.FpbFe > 0, .FpbWt, 0)), 1)
            Else
                .TpbFe = 0
            End If
            If IIf(.CpbAl > 0, .CpbWt, 0) + IIf(.FpbAl > 0, .FpbWt, 0) Then
                .TpbAl = Round((.CpbWt * .CpbAl + .FpbWt * .FpbAl) /
                              (IIf(.CpbAl > 0, .CpbWt, 0) +
                              IIf(.FpbAl > 0, .FpbWt, 0)), 1)
            Else
                .TpbAl = 0
            End If
            If IIf(.CpbMg > 0, .CpbWt, 0) + IIf(.FpbMg > 0, .FpbWt, 0) Then
                .TpbMg = Round((.CpbWt * .CpbMg + .FpbWt * .FpbMg) /
                              (IIf(.CpbMg > 0, .CpbWt, 0) +
                              IIf(.FpbMg > 0, .FpbWt, 0)), 1)
            Else
                .TpbMg = 0
            End If
            If IIf(.CpbIa > 0, .CpbWt, 0) + IIf(.FpbIA > 0, .FpbWt, 0) Then
                .TpbIA = Round((.CpbWt * .CpbIa + .FpbWt * .FpbIA) /
                              (IIf(.CpbIa > 0, .CpbWt, 0) +
                              IIf(.FpbIA > 0, .FpbWt, 0)), 1)
            Else
                .TpbIA = 0
            End If
        End With


        Return ProdAssignData
    End Function


    'Public Sub GetReproData(ByRef aProdAssignData As mProdAssignType,
    '                        ByVal aSfcData() As gProcSfcDataType,
    '                        ByVal aSsProdDist As AxvaSpread,
    '                        ByVal aSfcReproData(,) As String,
    '                        ByVal aFdTotDryWt As Single)

    '    '**********************************************************************
    '    '
    '    '
    '    '
    '    '**********************************************************************

    '    Dim RowIdx As Integer
    '    Dim RowIdx2 As Integer
    '    Dim ColIdx As Integer
    '    Dim SfcSum(0 To 23) As mSfcSumDataType   '1 to 21 for normal size
    '    'fraction codes plus a row for
    '    'the concentrate plus a row for
    '    'tails (for a total of 23 rows).
    '    Dim ThisWt As Single
    '    Dim ThisMatlAbbrv As String
    '    Dim ThisSfcType As String
    '    Dim ThisBpl As Single
    '    Dim ThisIns As Single
    '    Dim ThisCa As Single
    '    Dim ThisFe As Single
    '    Dim ThisAl As Single
    '    Dim ThisMg As Single
    '    Dim ThisIa As Single
    '    Dim WtToAssign As Single
    '    Dim ProdSum(0 To 9) As mProdSumDataType '1 to 7 for normal materials and
    '    'an extra one for concentrate and
    '    'an extra one for tails (for
    '    'a total of 9)
    '    Dim ProdSumRow As Integer
    '    Dim ThisProd As String
    '    Dim TotFdWt As Single
    '    Dim TotFdTypeWt As Single   'This is in pounds!
    '    Dim WtFdType As Single
    '    Dim AdjWt As Single

    '    'Assuming that there are 21 SFC's for the data reduction!
    '    ' 1)  007
    '    ' 2)  008
    '    ' 3)  012
    '    ' 4)  016
    '    ' 5)  019
    '    ' 6)  025
    '    ' 7)  029
    '    ' 8)  035
    '    ' 9)  039
    '    '10)  051
    '    '11)  054
    '    '12)  056
    '    '13)  057
    '    '14)  074
    '    '15)  076
    '    '16)  080
    '    '17)  082
    '    '18)  084
    '    '19)  086
    '    '20)  087
    '    '21)  091

    '    'Need to take whatever SFC data is available for each split and
    '    'assign it to the SFC's we will be using in this data reduction.

    '    'The SFC data available for this split is in aSfcData().

    '    'The percent distribution data for every possible SFC assigned to
    '    'a split is in aSfcReproData().

    '    'The assignment of the SFC's used in the data reduction
    '    'will be found in aSsProdDist.

    '    'The final data assignments will be placed in aProdAssignData
    '    '(OS, Cpb, Fpb, Ip, Cfd, Ffd, Cl).
    '    'I will also place data for total pebble and total feed in
    '    'aProdAssignData so I don't need to calculate it elsewhere
    '    '(Tpb, Tfd).

    '    'Set up SFC names in SfcSum
    '    With aSsProdDist
    '        For RowIdx = 1 To .MaxRows  'There will be 21 rows!
    '            .Row = RowIdx
    '            .Col = 1
    '            SfcSum(RowIdx).SizeFrctnCode = .Text
    '        Next RowIdx
    '    End With

    '    'Make sure all of the summing values in SfcSum() are zero.
    '    ZeroSfcSum(SfcSum)
    '    TotFdTypeWt = 0
    '    TotFdWt = 0

    '    'Get the total feed weight first.
    '    For RowIdx = 1 To UBound(aSfcData)
    '        ThisWt = aSfcData(RowIdx).SizeFrctnWt
    '        ThisMatlAbbrv = aSfcData(RowIdx).SfcMatlAbbrv
    '        ThisSfcType = aSfcData(RowIdx).SizeFrctnType

    '        'T = Total sample, P = Partial sample  We want the feed
    '        'materials from the float sample.
    '        If ThisMatlAbbrv = "Fd" And ThisSfcType = "P" Then
    '            TotFdWt = TotFdWt + ThisWt
    '        End If
    '    Next RowIdx

    '    'Process each row in the SFC data for the split
    '    'Need to divvy any size fraction code into the 21 size fraction codes.

    '    For RowIdx = 1 To UBound(aSfcData)
    '        'Get the SFC data for this split (could be any SFC)
    '        ThisWt = aSfcData(RowIdx).SizeFrctnWt
    '        ThisMatlAbbrv = aSfcData(RowIdx).SfcMatlAbbrv
    '        ThisSfcType = aSfcData(RowIdx).SizeFrctnType
    '        ThisBpl = aSfcData(RowIdx).SfcBpl
    '        ThisIns = aSfcData(RowIdx).SfcInsol
    '        ThisCa = aSfcData(RowIdx).SfcCaO
    '        ThisFe = aSfcData(RowIdx).SfcFe2O3
    '        ThisAl = aSfcData(RowIdx).SfcAl2O3
    '        ThisMg = aSfcData(RowIdx).SfcMgO
    '        ThisIa = aSfcData(RowIdx).SfcFeAl

    '        'This is some SFC data for the split -- could be any SFC
    '        'Need to find it in aSfcReproData()!  The first two rows in
    '        'aSfcReproData() are column headers.  The first column in
    '        'aSfcReproData() is a column header.

    '        'If a size fraction material is "Pb" then it's weight is probably the
    '        'total weight of that size fraction in the matrix material.
    '        'If a size fraction material is anything else then it probably came from
    '        'floating only a sample taken from the total matrix material.
    '        'Will only worry about this for summing weights for future calculation
    '        'of %Wt values (% of total matrix).
    '        'Will sum two different types of weights "pebble type" = WtSumPb
    '        'and "feed type" = WtSumFd.  These two types of weights correspond to
    '        'column SIZE_FRCTN_TYPE in PROSP_RAW_SIZE_FRCTN ("T" = total sample,
    '        '"P" = partial sample). The "T" corresponds to what we will call
    '        'pebble type", the "P" corresponds to what we will call "feed type".

    '        Select Case ThisMatlAbbrv
    '            Case Is = "Cn"
    '                'Need to capture the concentrate in a special way.
    '                'This is concentrate -- will place it in the 1st "extra" row (Row 22)
    '                'and Column 1
    '                'This material is concentrate and had to have come from floating.
    '                'Will assign this material to .WtSumFd -- NO!!!!
    '                WtToAssign = ThisWt

    '                'Have to be careful here with the weight for concentrate.
    '                'Sometimes only the concentrate analysis was determined and
    '                'no weight was associated with it.  Will assign it a weight
    '                'of 1 so that we do not "lose" the concentrate analysis.
    '                'There should only be one concentrate sample so this should
    '                'not create a problem.
    '                If WtToAssign = -1 Or WtToAssign = 0 And ThisBpl <> 0 Then
    '                    WtToAssign = 1
    '                End If

    '                ''SfcSum(22).WtSumFd = SfcSum(22).WtSumFd + WtToAssign   NO!!!
    '                '-----
    '                If ThisBpl > 0 Then
    '                    SfcSum(22).BplWt = SfcSum(22).BplWt + WtToAssign * ThisBpl
    '                End If
    '                If ThisIns > 0 Then
    '                    SfcSum(22).InsWt = SfcSum(22).InsWt + WtToAssign * ThisIns
    '                End If
    '                If ThisCa > 0 Then
    '                    SfcSum(22).CaWt = SfcSum(22).CaWt + WtToAssign * ThisCa
    '                End If
    '                If ThisFe > 0 Then
    '                    SfcSum(22).FeWt = SfcSum(22).FeWt + WtToAssign * ThisFe
    '                End If
    '                If ThisAl > 0 Then
    '                    SfcSum(22).AlWt = SfcSum(22).AlWt + WtToAssign * ThisAl
    '                End If
    '                If ThisMg > 0 Then
    '                    SfcSum(22).MgWt = SfcSum(22).MgWt + WtToAssign * ThisMg
    '                End If
    '                If ThisIa > 0 Then
    '                    SfcSum(22).IaWt = SfcSum(22).IaWt + WtToAssign * ThisIa
    '                End If
    '                '-----
    '                If ThisBpl > 0 Then
    '                    SfcSum(22).WtWBpl = SfcSum(22).WtWBpl + WtToAssign
    '                End If
    '                If ThisIns > 0 Then
    '                    SfcSum(22).WtWIns = SfcSum(22).WtWIns + WtToAssign
    '                End If
    '                If ThisCa > 0 Then
    '                    SfcSum(22).WtWCa = SfcSum(22).WtWCa + WtToAssign
    '                End If
    '                If ThisFe > 0 Then
    '                    SfcSum(22).WtWFe = SfcSum(22).WtWFe + WtToAssign
    '                End If
    '                If ThisAl > 0 Then
    '                    SfcSum(22).WtWAl = SfcSum(22).WtWAl + WtToAssign
    '                End If
    '                If ThisMg > 0 Then
    '                    SfcSum(22).WtWMg = SfcSum(22).WtWMg + WtToAssign
    '                End If
    '                If ThisIa > 0 Then
    '                    SfcSum(22).WtWIa = SfcSum(22).WtWIa + WtToAssign
    '                End If

    '            Case Is = "Tl"
    '                'Need to capture the tails in a special way.
    '                'This is tails -- will place it in the 2nd "extra" row (Row 23)
    '                'and Column 1

    '                'This material is tails and had to have come from floating.
    '                'Will assign this material to .WtSumFd -- NO!!!

    '                'Have to be careful here with the weight for tails.
    '                'Sometimes only the tail analysis (BPL) was determined and
    '                'no weight was associated with it.  Will assign it a weight
    '                'of 1 so that we do not "lose" the tail analysis (BPL).
    '                'There should only be one tails sample so this should
    '                'not create a problem.
    '                If WtToAssign = -1 Or WtToAssign = 0 And ThisBpl <> 0 Then
    '                    WtToAssign = 1
    '                End If

    '                WtToAssign = ThisWt
    '                ''SfcSum(23).WtSumFd = SfcSum(23).WtSumFd + WtToAssign    NO!!!
    '                '-----
    '                If ThisBpl > 0 Then
    '                    SfcSum(23).BplWt = SfcSum(23).BplWt + WtToAssign * ThisBpl
    '                End If
    '                If ThisIns > 0 Then
    '                    SfcSum(23).InsWt = SfcSum(23).InsWt + WtToAssign * ThisIns
    '                End If
    '                If ThisCa > 0 Then
    '                    SfcSum(23).CaWt = SfcSum(23).CaWt + WtToAssign * ThisCa
    '                End If
    '                If ThisFe > 0 Then
    '                    SfcSum(23).FeWt = SfcSum(23).FeWt + WtToAssign * ThisFe
    '                End If
    '                If ThisAl > 0 Then
    '                    SfcSum(23).AlWt = SfcSum(23).AlWt + WtToAssign * ThisAl
    '                End If
    '                If ThisMg > 0 Then
    '                    SfcSum(23).MgWt = SfcSum(23).MgWt + WtToAssign * ThisMg
    '                End If
    '                If ThisIa > 0 Then
    '                    SfcSum(23).IaWt = SfcSum(23).IaWt + WtToAssign * ThisIa
    '                End If
    '                '-----
    '                If ThisBpl > 0 Then
    '                    SfcSum(23).WtWBpl = SfcSum(23).WtWBpl + WtToAssign
    '                End If
    '                If ThisIns > 0 Then
    '                    SfcSum(23).WtWIns = SfcSum(23).WtWIns + WtToAssign
    '                End If
    '                If ThisCa > 0 Then
    '                    SfcSum(23).WtWCa = SfcSum(23).WtWCa + WtToAssign
    '                End If
    '                If ThisFe > 0 Then
    '                    SfcSum(23).WtWFe = SfcSum(23).WtWFe + WtToAssign
    '                End If
    '                If ThisAl > 0 Then
    '                    SfcSum(23).WtWAl = SfcSum(23).WtWAl + WtToAssign
    '                End If
    '                If ThisMg > 0 Then
    '                    SfcSum(23).WtWMg = SfcSum(23).WtWMg + WtToAssign
    '                End If
    '                If ThisIa > 0 Then
    '                    SfcSum(23).WtWIa = SfcSum(23).WtWIa + WtToAssign
    '                End If

    '            Case Else   'Fd, Pb, Cl, etc.
    '                For RowIdx2 = 3 To UBound(aSfcReproData, 1)
    '                    If aSfcReproData(RowIdx2, 1) = aSfcData(RowIdx).SizeFrctnCode Then
    '                        For ColIdx = 2 To 22
    '                            'Need to add data to SfcSum().  SfcSum has 21 rows
    '                            'that correspond to these 21 columns.
    '                            WtToAssign = aSfcReproData(RowIdx2, ColIdx) / 100 * ThisWt

    '                            If ThisSfcType = "T" Then
    '                                'Material type should be pebble.
    '                                AdjWt = WtToAssign
    '                            Else    'ThisSfcType = "P" for partial
    '                                'This material came from floating a feed sample.
    '                                If TotFdWt <> 0 Then
    '                                    AdjWt = Round((WtToAssign / TotFdWt) *
    '                                            aFdTotDryWt * 453.6, 2)
    '                                Else
    '                                    AdjWt = 0
    '                                End If
    '                            End If

    '                            'Sum two different types of weights!  Will sum the two
    '                            'types of weights rather than using AdjWt -- this is for testing
    '                            'purposes only (me testing this program!).
    '                            If ThisSfcType = "T" Then
    '                                'Material type should be pebble.
    '                                SfcSum(ColIdx - 1).WtSumPb = SfcSum(ColIdx - 1).WtSumPb + WtToAssign
    '                            Else    'ThisSfcType = "P" for partial
    '                                'This material came from floating a feed sample.
    '                                SfcSum(ColIdx - 1).WtSumFd = SfcSum(ColIdx - 1).WtSumFd + WtToAssign
    '                                If ThisMatlAbbrv = "Fd" Then
    '                                    TotFdTypeWt = TotFdTypeWt + WtToAssign
    '                                End If
    '                            End If
    '                            '-----
    '                            If ThisBpl > 0 Then
    '                                SfcSum(ColIdx - 1).BplWt = SfcSum(ColIdx - 1).BplWt + AdjWt * ThisBpl
    '                            End If
    '                            If ThisIns > 0 Then
    '                                SfcSum(ColIdx - 1).InsWt = SfcSum(ColIdx - 1).InsWt + AdjWt * ThisIns
    '                            End If
    '                            If ThisCa > 0 Then
    '                                SfcSum(ColIdx - 1).CaWt = SfcSum(ColIdx - 1).CaWt + AdjWt * ThisCa
    '                            End If
    '                            If ThisFe > 0 Then
    '                                SfcSum(ColIdx - 1).FeWt = SfcSum(ColIdx - 1).FeWt + AdjWt * ThisFe
    '                            End If
    '                            If ThisAl > 0 Then
    '                                SfcSum(ColIdx - 1).AlWt = SfcSum(ColIdx - 1).AlWt + AdjWt * ThisAl
    '                            End If
    '                            If ThisMg > 0 Then
    '                                SfcSum(ColIdx - 1).MgWt = SfcSum(ColIdx - 1).MgWt + AdjWt * ThisMg
    '                            End If
    '                            If ThisIa > 0 Then
    '                                SfcSum(ColIdx - 1).IaWt = SfcSum(ColIdx - 1).IaWt + AdjWt * ThisIa
    '                            End If
    '                            '-----
    '                            If ThisBpl > 0 Then
    '                                SfcSum(ColIdx - 1).WtWBpl = SfcSum(ColIdx - 1).WtWBpl + AdjWt
    '                            End If
    '                            If ThisIns > 0 Then
    '                                SfcSum(ColIdx - 1).WtWIns = SfcSum(ColIdx - 1).WtWIns + AdjWt
    '                            End If
    '                            If ThisCa > 0 Then
    '                                SfcSum(ColIdx - 1).WtWCa = SfcSum(ColIdx - 1).WtWCa + AdjWt
    '                            End If
    '                            If ThisFe > 0 Then
    '                                SfcSum(ColIdx - 1).WtWFe = SfcSum(ColIdx - 1).WtWFe + AdjWt
    '                            End If
    '                            If ThisAl > 0 Then
    '                                SfcSum(ColIdx - 1).WtWAl = SfcSum(ColIdx - 1).WtWAl + AdjWt
    '                            End If
    '                            If ThisMg > 0 Then
    '                                SfcSum(ColIdx - 1).WtWMg = SfcSum(ColIdx - 1).WtWMg + AdjWt
    '                            End If
    '                            If ThisIa > 0 Then
    '                                SfcSum(ColIdx - 1).WtWIa = SfcSum(ColIdx - 1).WtWIa + AdjWt
    '                            End If
    '                        Next ColIdx
    '                    End If
    '                Next RowIdx2
    '        End Select
    '    Next RowIdx

    '    'Now have the SFC data for the split (could have been any SFC) assigned
    '    'to the 21 SFC's we will use for the reduction.  Now need to assign it
    '    'to the appropriate material (OS, CrsPb, FnePb, IP, CrsFd, FneFd, Clay)
    '    'Will use aSsProdDist to do this.  We previously summed up prospect
    '    'split SFC's to reduction SFC's.  Now we will sum the reduction SFC's to
    '    'products.
    '    ZeroProdSum(ProdSum)

    '    For ColIdx = 1 To 23    '1 to 21 normal + 1 for the concentrate
    '        '+ 1 for the tails
    '        'Concentrate is special -- it is in ColIdx = 22
    '        Select Case ColIdx
    '            Case Is = 22
    '                ThisProd = "Cn"
    '            Case Is = 23
    '                ThisProd = "Tl"
    '            Case Else
    '                ThisProd = GetProdForSfc(aSsProdDist, ColIdx)
    '        End Select

    '        Select Case ThisProd
    '            Case Is = "OS"
    '                ProdSumRow = 1
    '            Case Is = "CrsPb"
    '                ProdSumRow = 2
    '            Case Is = "FnePb"
    '                ProdSumRow = 3
    '            Case Is = "IP"
    '                ProdSumRow = 4
    '            Case Is = "CrsFd"
    '                ProdSumRow = 5
    '            Case Is = "FneFd"
    '                ProdSumRow = 6
    '            Case Is = "Clay"
    '                ProdSumRow = 7
    '            Case Is = "Cn"
    '                ProdSumRow = 8
    '            Case Is = "Tl"
    '                ProdSumRow = 9
    '        End Select

    '        ProdSum(ProdSumRow).WtSumPb = ProdSum(ProdSumRow).WtSumPb +
    '                                      SfcSum(ColIdx).WtSumPb
    '        ProdSum(ProdSumRow).WtSumFd = ProdSum(ProdSumRow).WtSumFd +
    '                                      SfcSum(ColIdx).WtSumFd
    '        ProdSum(ProdSumRow).WtWBpl = ProdSum(ProdSumRow).WtWBpl +
    '                                     SfcSum(ColIdx).WtWBpl
    '        ProdSum(ProdSumRow).WtWIns = ProdSum(ProdSumRow).WtWIns +
    '                                     SfcSum(ColIdx).WtWIns
    '        ProdSum(ProdSumRow).WtWCa = ProdSum(ProdSumRow).WtWCa +
    '                                    SfcSum(ColIdx).WtWCa
    '        ProdSum(ProdSumRow).WtWFe = ProdSum(ProdSumRow).WtWFe +
    '                                    SfcSum(ColIdx).WtWFe
    '        ProdSum(ProdSumRow).WtWAl = ProdSum(ProdSumRow).WtWAl +
    '                                    SfcSum(ColIdx).WtWAl
    '        ProdSum(ProdSumRow).WtWMg = ProdSum(ProdSumRow).WtWMg +
    '                                    SfcSum(ColIdx).WtWMg
    '        ProdSum(ProdSumRow).WtWIa = ProdSum(ProdSumRow).WtWIa +
    '                                    SfcSum(ColIdx).WtWIa
    '        ProdSum(ProdSumRow).BplWt = ProdSum(ProdSumRow).BplWt +
    '                                    SfcSum(ColIdx).BplWt
    '        ProdSum(ProdSumRow).InsWt = ProdSum(ProdSumRow).InsWt +
    '                                    SfcSum(ColIdx).InsWt
    '        ProdSum(ProdSumRow).CaWt = ProdSum(ProdSumRow).CaWt +
    '                                   SfcSum(ColIdx).CaWt
    '        ProdSum(ProdSumRow).FeWt = ProdSum(ProdSumRow).FeWt +
    '                                   SfcSum(ColIdx).FeWt
    '        ProdSum(ProdSumRow).AlWt = ProdSum(ProdSumRow).AlWt +
    '                                   SfcSum(ColIdx).AlWt
    '        ProdSum(ProdSumRow).MgWt = ProdSum(ProdSumRow).MgWt +
    '                                   SfcSum(ColIdx).MgWt
    '        ProdSum(ProdSumRow).IaWt = ProdSum(ProdSumRow).IaWt +
    '                                   SfcSum(ColIdx).IaWt
    '        ProdSum(ProdSumRow).Product = ThisProd
    '    Next ColIdx

    '    'Now have to set the data in aProdAssignData -- this is the product
    '    '(actually material) data that will be used for this split in the
    '    'reduction.
    '    'OsWt, CpbWt, FpbWt, IpWt, CfdWt, FfdWt will all be in grams!
    '    With aProdAssignData
    '        'Oversize  Oversize  Oversize  Oversize  Oversize
    '        'Oversize  Oversize  Oversize  Oversize  Oversize
    '        'Oversize  Oversize  Oversize  Oversize  Oversize

    '        'The "pebble type" weights are OK as they are.  The "feed type"
    '        'weights will have to be adjusted based on the dry weight of
    '        'the total feed sample (from the portion that was floated).
    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(1).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .OsWt = ProdSum(1).WtSumPb + WtFdType

    '        If ProdSum(1).WtWBpl > 0 Then
    '            .OsBpl = Round(ProdSum(1).BplWt / ProdSum(1).WtWBpl, 1)
    '        Else
    '            .OsBpl = 0
    '        End If

    '        If ProdSum(1).WtWIns > 0 Then
    '            .OsIns = Round(ProdSum(1).InsWt / ProdSum(1).WtWIns, 1)
    '        Else
    '            .OsIns = 0
    '        End If
    '        If ProdSum(1).WtWCa > 0 Then
    '            .OsCa = Round(ProdSum(1).CaWt / ProdSum(1).WtWCa, 1)
    '        Else
    '            .OsCa = 0
    '        End If
    '        If ProdSum(1).WtWFe > 0 Then
    '            .OsFe = Round(ProdSum(1).FeWt / ProdSum(1).WtWFe, 2)
    '        Else
    '            .OsFe = 0
    '        End If
    '        If ProdSum(1).WtWAl > 0 Then
    '            .OsAl = Round(ProdSum(1).AlWt / ProdSum(1).WtWAl, 2)
    '        Else
    '            .OsAl = 0
    '        End If
    '        If ProdSum(1).WtWMg > 0 Then
    '            .OsMg = Round(ProdSum(1).MgWt / ProdSum(1).WtWMg, 2)
    '        Else
    '            .OsMg = 0
    '        End If
    '        If ProdSum(1).WtWIa > 0 Then
    '            .OsIa = Round(ProdSum(1).IaWt / ProdSum(1).WtWIa, 2)
    '        Else
    '            .OsIa = 0
    '        End If

    '        '-----
    '        'Coarse pebble  Coarse pebble  Coarse pebble
    '        'Coarse pebble  Coarse pebble  Coarse pebble
    '        'Coarse pebble  Coarse pebble  Coarse pebble

    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(2).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .CpbWt = ProdSum(2).WtSumPb + WtFdType

    '        If ProdSum(2).WtWBpl > 0 Then
    '            .CpbBpl = Round(ProdSum(2).BplWt / ProdSum(2).WtWBpl, 1)
    '        Else
    '            .CpbBpl = 0
    '        End If
    '        If ProdSum(2).WtWIns > 0 Then
    '            .CpbIns = Round(ProdSum(2).InsWt / ProdSum(2).WtWIns, 1)
    '        Else
    '            .CpbIns = 0
    '        End If
    '        If ProdSum(2).WtWCa > 0 Then
    '            .CpbCa = Round(ProdSum(2).CaWt / ProdSum(2).WtWCa, 1)
    '        Else
    '            .CpbCa = 0
    '        End If
    '        If ProdSum(2).WtWFe > 0 Then
    '            .CpbFe = Round(ProdSum(2).FeWt / ProdSum(2).WtWFe, 2)
    '        Else
    '            .CpbFe = 0
    '        End If
    '        If ProdSum(2).WtWAl > 0 Then
    '            .CpbAl = Round(ProdSum(2).AlWt / ProdSum(2).WtWAl, 2)
    '        Else
    '            .CpbAl = 0
    '        End If
    '        If ProdSum(2).WtWMg > 0 Then
    '            .CpbMg = Round(ProdSum(2).MgWt / ProdSum(2).WtWMg, 2)
    '        Else
    '            .CpbMg = 0
    '        End If
    '        If ProdSum(2).WtWIa > 0 Then
    '            .CpbIa = Round(ProdSum(2).IaWt / ProdSum(2).WtWIa, 2)
    '        Else
    '            .CpbIa = 0
    '        End If

    '        '-----
    '        'Fine pebble  Fine pebble  Fine pebble  Fine pebble
    '        'Fine pebble  Fine pebble  Fine pebble  Fine pebble
    '        'Fine pebble  Fine pebble  Fine pebble  Fine pebble

    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(3).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .FpbWt = ProdSum(3).WtSumPb + WtFdType

    '        If ProdSum(3).WtWBpl > 0 Then
    '            .FpbBpl = Round(ProdSum(3).BplWt / ProdSum(3).WtWBpl, 1)
    '        Else
    '            .FpbBpl = 0
    '        End If
    '        If ProdSum(3).WtWIns > 0 Then
    '            .FpbIns = Round(ProdSum(3).InsWt / ProdSum(3).WtWIns, 1)
    '        Else
    '            .FpbIns = 0
    '        End If
    '        If ProdSum(3).WtWCa > 0 Then
    '            .FpbCa = Round(ProdSum(3).CaWt / ProdSum(3).WtWCa, 1)
    '        Else
    '            .FpbCa = 0
    '        End If
    '        If ProdSum(3).WtWFe > 0 Then
    '            .FpbFe = Round(ProdSum(3).FeWt / ProdSum(3).WtWFe, 3)
    '        Else
    '            .FpbFe = 0
    '        End If
    '        If ProdSum(3).WtWAl > 0 Then
    '            .FpbAl = Round(ProdSum(3).AlWt / ProdSum(3).WtWAl, 3)
    '        Else
    '            .FpbAl = 0
    '        End If
    '        If ProdSum(3).WtWMg > 0 Then
    '            .FpbMg = Round(ProdSum(3).MgWt / ProdSum(3).WtWMg, 3)
    '        Else
    '            .FpbMg = 0
    '        End If
    '        If ProdSum(3).WtWIa > 0 Then
    '            .FpbIA = Round(ProdSum(3).IaWt / ProdSum(3).WtWIa, 3)
    '        Else
    '            .FpbIA = 0
    '        End If
    '        '-----
    '        'IP  IP  IP  IP  IP  IP  IP  IP  IP
    '        'IP  IP  IP  IP  IP  IP  IP  IP  IP
    '        'IP  IP  IP  IP  IP  IP  IP  IP  IP

    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(4).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .IpWt = ProdSum(4).WtSumPb + WtFdType

    '        If ProdSum(4).WtWBpl > 0 Then
    '            .IpBpl = Round(ProdSum(4).BplWt / ProdSum(4).WtWBpl, 1)
    '        Else
    '            .IpBpl = 0
    '        End If
    '        If ProdSum(4).WtWIns > 0 Then
    '            .IpIns = Round(ProdSum(4).InsWt / ProdSum(4).WtWIns, 1)
    '        Else
    '            .IpIns = 0
    '        End If
    '        If ProdSum(4).WtWCa > 0 Then
    '            .IpCa = Round(ProdSum(4).CaWt / ProdSum(4).WtWCa, 1)
    '        Else
    '            .IpCa = 0
    '        End If
    '        If ProdSum(4).WtWFe > 0 Then
    '            .IpFe = Round(ProdSum(4).FeWt / ProdSum(4).WtWFe, 4)
    '        Else
    '            .IpFe = 0
    '        End If
    '        If ProdSum(4).WtWAl > 0 Then
    '            .IpAl = Round(ProdSum(4).AlWt / ProdSum(4).WtWAl, 4)
    '        Else
    '            .IpAl = 0
    '        End If
    '        If ProdSum(4).WtWMg > 0 Then
    '            .IpMg = Round(ProdSum(4).MgWt / ProdSum(4).WtWMg, 4)
    '        Else
    '            .IpMg = 0
    '        End If
    '        If ProdSum(4).WtWIa > 0 Then
    '            .IpIa = Round(ProdSum(4).IaWt / ProdSum(4).WtWIa, 4)
    '        Else
    '            .IpIa = 0
    '        End If
    '        '-----
    '        'Coarse feed  Coarse feed  Coarse feed  Coarse feed
    '        'Coarse feed  Coarse feed  Coarse feed  Coarse feed
    '        'Coarse feed  Coarse feed  Coarse feed  Coarse feed

    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(5).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .CfdWt = ProdSum(5).WtSumPb + WtFdType

    '        If ProdSum(5).WtWBpl > 0 Then
    '            .CfdBpl = Round(ProdSum(5).BplWt / ProdSum(5).WtWBpl, 1)
    '        Else
    '            .CfdBpl = 0
    '        End If
    '        '-----
    '        'Fine feed Fine feed  Fine feed  Fine feed  Fine feed
    '        'Fine feed Fine feed  Fine feed  Fine feed  Fine feed
    '        'Fine feed Fine feed  Fine feed  Fine feed  Fine feed

    '        If TotFdTypeWt <> 0 Then
    '            WtFdType = Round((ProdSum(6).WtSumFd / TotFdTypeWt) *
    '                       aFdTotDryWt * 453.6, 2)
    '        Else
    '            WtFdType = 0
    '        End If

    '        .FfdWt = ProdSum(6).WtSumPb + WtFdType

    '        If ProdSum(6).WtWBpl > 0 Then
    '            .FfdBpl = Round(ProdSum(6).BplWt / ProdSum(6).WtWBpl, 1)
    '        Else
    '            .FfdBpl = 0
    '        End If
    '        '-----
    '        .ClWt = ProdSum(7).WtSumFd

    '        'Now we need to calculate the data for total pebble and total
    '        'feed.
    '        .TfdWt = .CfdWt + .FfdWt

    '        If IIf(.CfdBpl > 0, .CfdWt, 0) + IIf(.FfdBpl > 0, .FfdWt, 0) Then
    '            .TfdBpl = Round((.CfdWt * .CfdBpl + .FfdWt * .FfdBpl) /
    '                      (IIf(.CfdBpl > 0, .CfdWt, 0) +
    '                      IIf(.FfdBpl > 0, .FfdWt, 0)), 1)
    '        Else
    '            .TfdBpl = 0
    '        End If
    '        '-----
    '        'Total pebble  Total pebble  Total pebble
    '        'Total pebble  Total pebble  Total pebble
    '        'Total pebble  Total pebble  Total pebble

    '        .TpbWt = .CpbWt + .FpbWt
    '        If IIf(.CpbBpl > 0, .CpbWt, 0) + IIf(.FpbBpl > 0, .FpbWt, 0) Then
    '            .TpbBpl = Round((.CpbWt * .CpbBpl + .FpbWt * .FpbBpl) /
    '                      (IIf(.CpbBpl > 0, .CpbWt, 0) +
    '                      IIf(.FpbBpl > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbBpl = 0
    '        End If
    '        If IIf(.CpbIns > 0, .CpbWt, 0) + IIf(.FpbIns > 0, .FpbWt, 0) Then
    '            .TpbIns = Round((.CpbWt * .CpbIns + .FpbWt * .FpbIns) /
    '                      (IIf(.CpbIns > 0, .CpbWt, 0) +
    '                      IIf(.FpbIns > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbIns = 0
    '        End If
    '        If IIf(.CpbCa > 0, .CpbWt, 0) + IIf(.FpbCa > 0, .FpbWt, 0) Then
    '            .TpbCa = Round((.CpbWt * .CpbCa + .FpbWt * .FpbCa) /
    '                      (IIf(.CpbCa > 0, .CpbWt, 0) +
    '                      IIf(.FpbCa > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbCa = 0
    '        End If
    '        If IIf(.CpbFe > 0, .CpbWt, 0) + IIf(.FpbFe > 0, .FpbWt, 0) Then
    '            .TpbFe = Round((.CpbWt * .CpbFe + .FpbWt * .FpbFe) /
    '                      (IIf(.CpbFe > 0, .CpbWt, 0) +
    '                      IIf(.FpbFe > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbFe = 0
    '        End If
    '        If IIf(.CpbAl > 0, .CpbWt, 0) + IIf(.FpbAl > 0, .FpbWt, 0) Then
    '            .TpbAl = Round((.CpbWt * .CpbAl + .FpbWt * .FpbAl) /
    '                      (IIf(.CpbAl > 0, .CpbWt, 0) +
    '                      IIf(.FpbAl > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbAl = 0
    '        End If
    '        If IIf(.CpbMg > 0, .CpbWt, 0) + IIf(.FpbMg > 0, .FpbWt, 0) Then
    '            .TpbMg = Round((.CpbWt * .CpbMg + .FpbWt * .FpbMg) /
    '                      (IIf(.CpbMg > 0, .CpbWt, 0) +
    '                      IIf(.FpbMg > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbMg = 0
    '        End If
    '        If IIf(.CpbIa > 0, .CpbWt, 0) + IIf(.FpbIA > 0, .FpbWt, 0) Then
    '            .TpbIA = Round((.CpbWt * .CpbIa + .FpbWt * .FpbIA) /
    '                      (IIf(.CpbIa > 0, .CpbWt, 0) +
    '                      IIf(.FpbIA > 0, .FpbWt, 0)), 1)
    '        Else
    '            .TpbIA = 0
    '        End If

    '        'Need to get the concentrate also!
    '        '-----
    '        'Concentrate  Concentrate  Concentrate  Concentrate
    '        'Concentrate  Concentrate  Concentrate  Concentrate
    '        'Concentrate  Concentrate  Concentrate  Concentrate

    '        .CnWt = ProdSum(8).WtSumFd
    '        If ProdSum(8).WtWBpl > 0 Then
    '            .CnBpl = Round(ProdSum(8).BplWt / ProdSum(8).WtWBpl, 1)
    '        Else
    '            .CnBpl = 0
    '        End If
    '        If ProdSum(8).WtWIns > 0 Then
    '            .CnIns = Round(ProdSum(8).InsWt / ProdSum(8).WtWIns, 1)
    '        Else
    '            .CnIns = 0
    '        End If
    '        If ProdSum(8).WtWCa > 0 Then
    '            .CnCa = Round(ProdSum(8).CaWt / ProdSum(8).WtWCa, 1)
    '        Else
    '            .CnCa = 0
    '        End If
    '        If ProdSum(8).WtWFe > 0 Then
    '            .CnFe = Round(ProdSum(8).FeWt / ProdSum(8).WtWFe, 2)
    '        Else
    '            .CnFe = 0
    '        End If
    '        If ProdSum(8).WtWAl > 0 Then
    '            .CnAl = Round(ProdSum(8).AlWt / ProdSum(8).WtWAl, 2)
    '        Else
    '            .CnAl = 0
    '        End If
    '        If ProdSum(8).WtWMg > 0 Then
    '            .CnMg = Round(ProdSum(8).MgWt / ProdSum(8).WtWMg, 2)
    '        Else
    '            .CnMg = 0
    '        End If
    '        If ProdSum(8).WtWIa > 0 Then
    '            .CnIa = Round(ProdSum(8).IaWt / ProdSum(8).WtWIa, 2)
    '        Else
    '            .CnIa = 0
    '        End If

    '        'Need to get the tails also!
    '        '-----
    '        'Tails  Tails  Tails  Tails  Tails  Tails  Tails
    '        'Tails  Tails  Tails  Tails  Tails  Tails  Tails
    '        'Tails  Tails  Tails  Tails  Tails  Tails  Tails

    '        .TlWt = ProdSum(9).WtSumFd
    '        If ProdSum(9).WtWBpl > 0 Then
    '            .TlBpl = Round(ProdSum(9).BplWt / ProdSum(9).WtWBpl, 1)
    '        Else
    '            .TlBpl = 0
    '        End If
    '    End With
    'End Sub

    Public Function GetProdForSfc(ByRef aSsProdDist As ViewModels.ProductSizeDesignation,
                                  ByVal aRowIdx As Integer) As String
        If aSsProdDist.Details.Count < aRowIdx Then Return String.Empty
        With aSsProdDist.Details(aRowIdx - 1)
            Select Case True
                Case .IsOversize : Return "OS"
                Case .IsCoarsePb : Return "CrsPb"
                Case .IsFinePb : Return "FnePb"
                Case .IsIp : Return "IP"
                Case .IsCoarseFd : Return "CrsFd"
                Case .IsFineFd : Return "FneFd"
                Case .IsClay : Return "Clay"
            End Select
        End With
        Return String.Empty
    End Function

    Public Function gSaveProspectDataset(ByVal aSaveType As String,
                                         ByVal aProspectDatasetName As String,
                                         ByVal aProspDatasetTextFileName As String,
                                         ByVal a100Pct As Integer,
                                         ByVal aProdCoeff As Integer,
                                         ByVal aInclSplits As Boolean,
                                         ByVal aInclComposites As Boolean,
                                         ByVal aInclBoth As Boolean,
                                         ByVal aSsCompReview As AxvaSpread,
                                         ByVal aSsSplitReview As AxvaSpread,
                                         ByVal Splits As List(Of gRawProspSplRdctnType),
                                         ByVal Holes As List(Of gRawProspSplRdctnType),
                                         ByVal aMineHasOffSpecPbPlt As Boolean,
                                         ByVal aInclMgPlt As Integer,
                                         ByVal aUserUnmineableOride As Boolean,
                                         ByVal aUserUnmineableOrideOvbThk As Single,
                                         ByVal aNoReview As Boolean,
                                         ByVal aHoleCnt As Long,
                                         ByVal aSetPbToMgPlt As Boolean,
                                         ByVal aMineHasDoloflotPlt As Boolean,
                                         ByVal aUseFeAdjust As Boolean) As Boolean


        '05/14/2007 -- focus is on creating a 100% hole (composite) text file
        '              from the data that is in aSsCompReview.  This is for use
        '              in SurvCADD.

        '08/16/2007 -- added in creation of RAR based transfer text files so that
        '              we can add holes to MOIS.

        Dim ProcessStatus As Boolean
        'gOutputLines = New List(Of String)
        gSaveProspectDataset = False

        'Text files  Text files  Text files
        'Text files  Text files  Text files
        'Text files  Text files  Text files

        'Transfer textfiles will be
        '1)  SurvCadd -- either 100% or ProdCoeff
        '2)  "special" IMC type transfer text file for use with the
        '    "Old" MOIS prospect data tables -- either 100% or ProdCoeff.

        If aSaveType = "MoisText" Then
            'Special MOIS transfer text file
            'Special MOIS transfer text file
            'Special MOIS transfer text file

            'MOIS text transfer file is based on the IMC RAR transfer text file
            'format -- Holes and splits combined.
            ProcessStatus = CreateAndSaveMoisTextFile(aProspDatasetTextFileName,
                                                      Splits,
                                                      Holes,
                                                      a100Pct,
                                                      aProdCoeff,
                                                      aInclMgPlt,
                                                      aNoReview,
                                                      aHoleCnt)
            gSaveProspectDataset = ProcessStatus
        End If

        If aSaveType = "SurvCaddText" Then
            'SurvCadd transfer text file
            'SurvCadd transfer text file
            'SurvCadd transfer text file

            'SurvCADD transfer text files will eventually be of three types:
            'Split, Holes or Splits and Holes combined.  For now only the
            'Holes version is available -- that is all that Gary Gavie can use
            'right now (as of 08/16/2007).

            '09/14/2009, lss
            'Made split version available.
            ProcessStatus = CreateAndSaveSurvCaddTextFile(aProspDatasetTextFileName,
                                                          aInclSplits,
                                                          aInclComposites,
                                                          aInclBoth,
                                                          aSsSplitReview,
                                                          Splits,
                                                          Holes,
                                                          a100Pct,
                                                          aProdCoeff,
                                                          aMineHasOffSpecPbPlt,
                                                          aUserUnmineableOride,
                                                          aUserUnmineableOrideOvbThk,
                                                          aNoReview,
                                                          aHoleCnt,
                                                          aSetPbToMgPlt,
                                                          aMineHasDoloflotPlt,
                                                          aUseFeAdjust)
            gSaveProspectDataset = ProcessStatus
        End If

        If aSaveType = "BdFormatText" Then
            'BD format text file
            'BD format text file
            'BD format text file

            ProcessStatus = CreateAndSaveBdFormatTextFile(aProspDatasetTextFileName,
                                                          aSsCompReview,
                                                          aSsSplitReview,
                                                          a100Pct,
                                                          aProdCoeff,
                                                          aInclMgPlt,
                                                          aNoReview,
                                                          aHoleCnt,
                                                          aUseFeAdjust,
                                                          aMineHasDoloflotPlt)
            gSaveProspectDataset = ProcessStatus
        End If

        'Save to database  Save to database  Save to database
        'Save to database  Save to database  Save to database
        'Save to database  Save to database  Save to database
        'Still have to write this!
        If aSaveType = "Database" Then
            gSaveProspectDataset = False
        End If
    End Function

    Public Function CreateAndSaveSurvCaddTextFile(ByVal aProspDatasetTextFileName As String,
                                                  ByVal aInclSplits As Boolean,
                                                  ByVal aInclComposites As Boolean,
                                                  ByVal aInclBoth As Boolean,
                                                  ByVal aSsSplitReview As AxvaSpread,
                                                  ByVal Splits As List(Of gRawProspSplRdctnType),
                                                  ByVal Holes As List(Of gRawProspSplRdctnType),
                                                  ByVal a100Pct As Integer,
                                                  ByVal aProdCoeff As Integer,
                                                  ByVal aMineHasOffSpecPbPlt As Boolean,
                                                  ByVal aUserUnmineableOride As Boolean,
                                                  ByVal aUserUnmineableOrideOvbThk As Single,
                                                  ByVal aNoReview As Boolean,
                                                  ByVal aHoleCnt As Long,
                                                  ByVal aSetPbToMgPlt As Boolean,
                                                  ByVal aMineHasDoloflotPlt As Boolean,
                                                  ByVal aUseFeAdjust As Boolean) As Boolean


        Dim ResultValue As Boolean = False

        Try
            Dim TextFileLevel As String = String.Empty
            Dim DataType As String = String.Empty
            Dim RowIdx As Integer
            Dim RowIdx2 As Integer
            Dim LineIdx As Integer
            Dim TfileStr As String = String.Empty
            Dim ThisHoleLocation As String = String.Empty
            Dim PrevHoleLocation As String = String.Empty
            Dim PrevSplitMinableStatus As String = String.Empty
            Dim ThisSplit As Integer
            Dim ThisSplitMinableCalcd As String = String.Empty
            Dim ThisSplitMinableOride As String = String.Empty
            Dim ThisSplitMinableStatus As String = String.Empty
            Dim LastSplitInHole As Boolean
            Dim NextHoleLocation As String = String.Empty
            Dim MinableSplitFound As Boolean
            Dim FirstSplitInHole As Boolean
            Dim AssignedBedCode As String = String.Empty
            Dim AssignedClassCode As String = String.Empty
            Dim CurrentBedCodeInt As Integer
            Dim BedCodeList As String = String.Empty
            Dim AllTheRestUnMinable As Boolean
            Dim ThisSplitBottom As Single
            Dim ThisSplitMinableCalcd2 As String = String.Empty
            Dim ThisSplitMinableOride2 As String = String.Empty
            Dim ThisSplitMinableStatus2 As String = String.Empty
            Dim ThisHoleForcedMinable As Boolean = False
            Dim HdrRow As String = String.Empty

            PrevHoleLocation = ""
            NextHoleLocation = ""
            MinableSplitFound = False
            FirstSplitInHole = False
            LastSplitInHole = False
            AssignedBedCode = ""
            AssignedClassCode = ""
            BedCodeList = "ABCDEFGHIJKLMNOPQRSTUVWXY"
            CurrentBedCodeInt = 1
            AllTheRestUnMinable = False
            ThisSplitBottom = 0
            ThisHoleForcedMinable = False

            'Three types of text files can be created:
            '1) Split-level     Uses aSsSplitReview                    **Available**
            '2) Hole-level      Uses aSsCompReview                     **Available**
            '3) Combined        Uses aSsSplitReview & aSsCompReview    **Not Available**

            'For now will only create 1 textfile per access of this procedure.
            If aInclBoth = True Then
                TextFileLevel = "Combined"
            Else
                If aInclSplits = True Then
                    TextFileLevel = "Splits"
                End If
                If aInclComposites = True Then
                    TextFileLevel = "Holes"
                End If
            End If

            If aProdCoeff = 1 Then
                DataType = "ProdCoeff"
            Else
                DataType = "100%"
            End If

            'Check comma-delimited text file name
            If Trim(aProspDatasetTextFileName) = "" Or
                Mid(aProspDatasetTextFileName,
                    Len(aProspDatasetTextFileName)) = "\" Then

                MsgBox("You must enter a text file name." +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")

                ResultValue = False
                Return ResultValue
            End If

            'Check to see if user has generated any data.
            If Splits.Count = 0 Then
                MsgBox("You have not generated any reduced prospect data!" +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")
                Return False
            End If

            'Add the header row first.  The header row will be the same for
            'Holes, Splits or Combined.
            If aHoleCnt = 1 Then
                HdrRow = GetTextFileHeaderSurvCadd()
                gOutputLines.Add(HdrRow)
            End If

            If TextFileLevel = "Holes" Then

                For Each HoleData In Holes
                    If HoleData.MineableHole = "MF" Then ThisHoleForcedMinable = True
                    For LineIdx = 1 To 3
                        TfileStr = GetCompTfileStrSurvCadd(HoleData,
                                                        LineIdx,
                                                        DataType,
                                                        aMineHasOffSpecPbPlt,
                                                        aUserUnmineableOride,
                                                        aUserUnmineableOrideOvbThk,
                                                        aSetPbToMgPlt,
                                                        "Hole",
                                                        "",
                                                        "",
                                                        0,
                                                        ThisHoleForcedMinable,
                                                        aMineHasDoloflotPlt,
                                                        aUseFeAdjust)
                        gOutputLines.Add(TfileStr)
                    Next LineIdx
                Next
            End If

            'Splits  Splits  Splits
            'Splits  Splits  Splits
            'Splits  Splits  Splits

            'If hole is unminable then show the split minabilities as determined for the
            'individual splits (don't show Spl1 = U, Spl2 = U, Spl3 = U, Spl4 = U, etc.)

            'If hole is "forced" minable then show
            'Spl1 = M, Spl2 = U, Spl3 = U, Spl4 = U, Spl5 = U, Spl6 = U, etc.)

            If TextFileLevel = "Splits" Then
                With aSsSplitReview
                    For RowIdx = 1 To .MaxRows
                        .Row = RowIdx

                        'In aSsSplitReview:
                        '1   HoleLocation  (Description)
                        '2   SplitNumber
                        '16  Split bottom
                        '4  Minable calc'd
                        '5  Minable oride

                        With aSsSplitReview
                            .Row = RowIdx
                            .Col = 1
                            ThisHoleLocation = .Text
                            .Col = 2
                            ThisSplit = .Value
                            .Col = 16
                            ThisSplitBottom = .Value
                            .Col = 4
                            ThisSplitMinableCalcd = .Text
                            .Col = 5
                            ThisSplitMinableOride = .Text

                            If ThisSplit = 1 Then
                                .Col = 190
                                If .Text = "MF" Then
                                    ThisHoleForcedMinable = True
                                Else
                                    ThisHoleForcedMinable = False
                                End If
                            End If

                            'Need to know at this point if the hole has been forced minable.
                            'If it has been forced minable then if it is Split #1 then
                            'ThisSplitMinableStatus = "M" and if it is not Split #1 then
                            'ThisSplitMinableStatus = "U"

                            'Determine this split's minability.
                            If ThisHoleForcedMinable Then
                                If ThisSplit = 1 Then
                                    ThisSplitMinableStatus = "M"
                                Else
                                    ThisSplitMinableStatus = "U"
                                End If
                            Else
                                'Currently in CreateAndSaveSurvCaddTextFile
                                '01/28/2010, lss  Changed the following:
                                'Was If ThisSplitMinableCalcd = "M" Or ThisSplitMinableOride = "M" Or
                                ThisSplitMinableCalcd = "MF"
                                If (ThisSplitMinableCalcd = "M" And ThisSplitMinableOride <> "U") Or
                                    ThisSplitMinableOride = "M" Or
                                    ThisSplitMinableCalcd = "MF" Then
                                    ThisSplitMinableStatus = "M"
                                Else
                                    If ThisSplitMinableCalcd = "U" Or ThisSplitMinableOride = "U" Then
                                        ThisSplitMinableStatus = "U"
                                    Else
                                        ThisSplitMinableStatus = "?"
                                    End If
                                End If
                            End If
                            'Determine if this is the first split in the hole.  If it is we
                            'will be writing an extra "Floor" line.
                            LastSplitInHole = False
                            If RowIdx = .MaxRows Then
                                LastSplitInHole = True

                                'GetCompTfileStrSurvCadd will automatically assign:
                                'AssignedClassCode = "FLR"
                                'AssignedBedCode = "Z"
                            Else
                                .Row = RowIdx + 1
                                .Col = 1
                                NextHoleLocation = .Text

                                If NextHoleLocation <> ThisHoleLocation Then
                                    LastSplitInHole = True

                                    'GetCompTfileStrSurvCadd will automatically assign:
                                    'AssignedClassCode = "FLR"
                                    'AssignedBedCode = "Z"
                                End If
                            End If

                            .Row = RowIdx
                        End With

                        'Determine if this is the first split in the hole.  If it is we
                        'will be writing an extra "Waste" line.
                        If ThisHoleLocation <> PrevHoleLocation Then
                            FirstSplitInHole = True

                            'GetCompTfileStrSurvCadd will automatically assign:
                            'AssignedClassCode = "OVB"
                            'AssignedBedCode = "A"

                            'We are starting a new hole.
                            MinableSplitFound = False
                            CurrentBedCodeInt = 1
                        Else
                            FirstSplitInHole = False
                        End If

                        If ThisSplitMinableStatus = "M" Then
                            MinableSplitFound = True
                        End If

                        'Need to determine AssignedClassCode for the "Normal" row.
                        If ThisSplitMinableStatus = "M" Then
                            AssignedClassCode = "MTX"
                        Else
                            If ThisSplitMinableStatus = "U" Then
                                If MinableSplitFound = False Then
                                    AssignedClassCode = "OVB"
                                Else
                                    If LastSplitInHole Then
                                        AssignedClassCode = "FLR"
                                    Else
                                        AssignedClassCode = "INB"
                                    End If
                                End If

                                'Was:
                                'If FirstSplitInHole = True Then
                                '    AssignedClassCode = "OVB"
                                'Else
                                '    AssignedClassCode = "INB"
                                'End If
                            Else
                                'Have not determined a valid minability!
                                AssignedClassCode = ""
                            End If
                        End If

                        'Need to determine BED code.
                        'If the split is unminable and the previous split is minable then increment the
                        'BED code for this split (unless a minable split has not yet been found then
                        'the BED code is still "A").  If the split is unminable and the rest of the
                        'splits in the hole are unminable then the BED code = "Z".

                        If MinableSplitFound = False Or FirstSplitInHole = True Then
                            AssignedBedCode = "A"
                        Else
                            AllTheRestUnMinable = True

                            For RowIdx2 = RowIdx To .MaxRows
                                .Row = RowIdx2
                                .Col = 1    'Hole location
                                If .Text <> ThisHoleLocation Then
                                    Exit For
                                End If

                                .Col = 4
                                ThisSplitMinableCalcd2 = .Text
                                .Col = 5
                                ThisSplitMinableOride2 = .Text

                                'Currently in CreateAndSaveSurvCaddTextFile
                                '01/28/2010, lss  Changed the following:
                                If (ThisSplitMinableCalcd2 = "M" And ThisSplitMinableOride2 <> "U") Or
                                    ThisSplitMinableOride2 = "M" Or
                                    ThisSplitMinableCalcd2 = "MF" Then
                                    ThisSplitMinableStatus2 = "M"
                                Else
                                    If ThisSplitMinableCalcd2 = "U" Or ThisSplitMinableOride2 = "U" Then
                                        ThisSplitMinableStatus2 = "U"
                                    Else
                                        ThisSplitMinableStatus2 = "?"
                                    End If
                                End If

                                If ThisSplitMinableStatus2 = "M" Then
                                    AllTheRestUnMinable = False
                                    Exit For
                                End If
                            Next RowIdx2

                            .Row = RowIdx

                            If ThisSplitMinableStatus = "U" And AllTheRestUnMinable = True Then
                                AssignedClassCode = "FLR"
                                AssignedBedCode = "Z"
                            Else
                                If ThisSplitMinableStatus = "U" And PrevSplitMinableStatus = "M" Then
                                    'Increment the assigned bed code.
                                    CurrentBedCodeInt = CurrentBedCodeInt + 1
                                    AssignedBedCode = Mid(BedCodeList, CurrentBedCodeInt, 1)
                                End If
                            End If
                        End If

                        '---------------
                        'OVERBURDEN ROW
                        'If first split in hole then -- need "Waste" type row.
                        'CLASS will always be "OVB" and BED will always be "A".

                        '---------------
                        'NORMAL ROW
                        'For each split -- need "MATRIX" type row with the split lab data.
                        'CLASS = OVB, MTX or INB.  BED will be "A" to "Y".
                        'If a minable split has not been found yet in the hole then CLASS = OVB.
                        'Otherwise if the split is minable then Class = "MTX" else the split is
                        'unminable and Class = "INB" except if the split is unminable and all of the
                        'splits past this split to the bottom of the hole are unminable then
                        'CLASS = "FLR".

                        'Need to determine the BED code for this row.  BED codes start at "A" and
                        'go to "Y" for "Matrix" type rows and hopefully that is enough!
                        'If the split is unminable and the previous split is minable then increment the
                        'BED code for this split.  If the split is unminable and the rest of the
                        'splits in the hole are unminable then the BED code = "Z".

                        '---------------
                        'FLOOR ROW
                        'If last split in hole then -- need "Floor" type row.
                        'CLASS will always be "FLR" and BED will always be "Z".

                        '3rd Parameter passed to GetCompTfileStrSurvCadd
                        'LineIdx = 1  --  Add "Waste" type row  CLASS = "OVB"
                        'LineIdx = 2  --  Add "Normal" type row CLASS = "MTX", "INB" or "OVB"
                        'LineIdx = 3  --  Add "Floor" type row  CLASS = "FLR"
                        Dim SplitData As gRawProspSplRdctnType
                        If FirstSplitInHole Then
                            'This is the first split in the hole so need to create a
                            '"Waste" type row.  The CLASS code for this split will always be "OVB".
                            'The BED code for this split will always be "A".
                            SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                            TfileStr = GetCompTfileStrSurvCadd(SplitData,
                                                               1,
                                                               DataType,
                                                               aMineHasOffSpecPbPlt,
                                                               aUserUnmineableOride,
                                                               aUserUnmineableOrideOvbThk,
                                                               aSetPbToMgPlt,
                                                               "Split",
                                                               AssignedClassCode,
                                                               AssignedBedCode,
                                                               0,
                                                               ThisHoleForcedMinable,
                                                               aMineHasDoloflotPlt,
                                                               aUseFeAdjust)
                            gOutputLines.Add(TfileStr)
                        End If

                        'Need to put a "Matrix" type row for every split.

                        SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                        TfileStr = GetCompTfileStrSurvCadd(SplitData,
                                                           2,
                                                           DataType,
                                                           aMineHasOffSpecPbPlt,
                                                           aUserUnmineableOride,
                                                           aUserUnmineableOrideOvbThk,
                                                           aSetPbToMgPlt,
                                                           "Split",
                                                           AssignedClassCode,
                                                           AssignedBedCode,
                                                           0,
                                                           ThisHoleForcedMinable,
                                                           aMineHasDoloflotPlt,
                                                           aUseFeAdjust)
                        gOutputLines.Add(TfileStr)
                        If LastSplitInHole Then
                            'This is the last split in the hole so need to create a
                            '"FLOOR" type row.  The CLASS code for this split will always be "OVB".
                            'The BED code for this split will always be "Z".
                            SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                            TfileStr = GetCompTfileStrSurvCadd(SplitData,
                                                               3,
                                                               DataType,
                                                               aMineHasOffSpecPbPlt,
                                                               aUserUnmineableOride,
                                                               aUserUnmineableOrideOvbThk,
                                                               aSetPbToMgPlt,
                                                               "Split",
                                                               AssignedClassCode,
                                                               AssignedBedCode,
                                                               ThisSplitBottom,
                                                               ThisHoleForcedMinable,
                                                               aMineHasDoloflotPlt,
                                                               aUseFeAdjust)
                            gOutputLines.Add(TfileStr)
                        End If

                        PrevSplitMinableStatus = ThisSplitMinableStatus
                        PrevHoleLocation = ThisHoleLocation
                    Next RowIdx
                End With

            End If

            If TextFileLevel = "Combined" Then
                'Don't have this available yet!!!!
            End If

            ResultValue = True

            Return ResultValue


        Catch ex As Exception
            MessageBox.Show("Error creating SurvCadd transfer text file." & vbCrLf &
                           ex.Message, "SurvCadd Transfer Text File Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return ResultValue

        End Try

    End Function

    Public Function CreateAndSaveSurvCaddTextFile2(ByVal aProspDatasetTextFileName As String,
                                                  ByVal aInclSplits As Boolean,
                                                  ByVal aInclComposites As Boolean,
                                                  ByVal aInclBoth As Boolean,
                                                  ByVal Holes As List(Of Hole),
                                                  ByVal a100Pct As Integer,
                                                  ByVal aProdCoeff As Integer,
                                                  ByVal aMineHasOffSpecPbPlt As Boolean,
                                                  ByVal aUserUnmineableOride As Boolean,
                                                  ByVal aUserUnmineableOrideOvbThk As Single,
                                                  ByVal aNoReview As Boolean,
                                                  ByVal aHoleCnt As Long,
                                                  ByVal aSetPbToMgPlt As Boolean,
                                                  ByVal aMineHasDoloflotPlt As Boolean,
                                                  ByVal aUseFeAdjust As Boolean) As Boolean


        Dim ResultValue As Boolean = False

        Try
            Dim TextFileLevel As String = String.Empty
            Dim DataType As String = String.Empty
            Dim RowIdx As Integer
            Dim RowIdx2 As Integer
            Dim LineIdx As Integer
            Dim TfileStr As String = String.Empty
            Dim ThisHoleLocation As String = String.Empty
            Dim PrevHoleLocation As String = String.Empty
            Dim PrevSplitMinableStatus As String = String.Empty
            Dim ThisSplit As Integer
            Dim ThisSplitMinableCalcd As String = String.Empty
            Dim ThisSplitMinableOride As String = String.Empty
            Dim ThisSplitMinableStatus As String = String.Empty
            Dim LastSplitInHole As Boolean
            Dim NextHoleLocation As String = String.Empty
            Dim MinableSplitFound As Boolean
            Dim FirstSplitInHole As Boolean
            Dim AssignedBedCode As String = String.Empty
            Dim AssignedClassCode As String = String.Empty
            Dim CurrentBedCodeInt As Integer
            Dim BedCodeList As String = String.Empty
            Dim AllTheRestUnMinable As Boolean
            Dim ThisSplitBottom As Single
            Dim ThisSplitMinableCalcd2 As String = String.Empty
            Dim ThisSplitMinableOride2 As String = String.Empty
            Dim ThisSplitMinableStatus2 As String = String.Empty
            Dim ThisHoleForcedMinable As Boolean = False
            Dim HdrRow As String = String.Empty

            PrevHoleLocation = ""
            NextHoleLocation = ""
            MinableSplitFound = False
            FirstSplitInHole = False
            LastSplitInHole = False
            AssignedBedCode = ""
            AssignedClassCode = ""
            BedCodeList = "ABCDEFGHIJKLMNOPQRSTUVWXY"
            CurrentBedCodeInt = 1
            AllTheRestUnMinable = False
            ThisSplitBottom = 0
            ThisHoleForcedMinable = False

            'Three types of text files can be created:
            '1) Split-level     Uses aSsSplitReview                    **Available**
            '2) Hole-level      Uses aSsCompReview                     **Available**
            '3) Combined        Uses aSsSplitReview & aSsCompReview    **Not Available**

            'For now will only create 1 textfile per access of this procedure.
            If aInclBoth = True Then
                TextFileLevel = "Combined"
            Else
                If aInclSplits = True Then
                    TextFileLevel = "Splits"
                End If
                If aInclComposites = True Then
                    TextFileLevel = "Holes"
                End If
            End If

            If aProdCoeff = 1 Then
                DataType = "ProdCoeff"
            Else
                DataType = "100%"
            End If

            'Check comma-delimited text file name
            If Trim(aProspDatasetTextFileName) = "" Or
                Mid(aProspDatasetTextFileName,
                    Len(aProspDatasetTextFileName)) = "\" Then

                MsgBox("You must enter a text file name." +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")

                ResultValue = False
                Return ResultValue
            End If

            'Check to see if user has generated any data.
            If Holes.Count = 0 Then
                MsgBox("You have not generated any reduced prospect data!" +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")
                Return False
            End If

            'Add the header row first.  The header row will be the same for
            'Holes, Splits or Combined.
            If aHoleCnt = 1 Then
                HdrRow = GetTextFileHeaderSurvCadd()
                gOutputLines.Add(HdrRow)
            End If

            If TextFileLevel = "Holes" Then

                For Each Hole In Holes
                    If Hole.Data.MineableHole = "MF" Then ThisHoleForcedMinable = True
                    For LineIdx = 1 To 3
                        TfileStr = GetCompTfileStrSurvCadd(Hole.Data,
                                                        LineIdx,
                                                        DataType,
                                                        aMineHasOffSpecPbPlt,
                                                        aUserUnmineableOride,
                                                        aUserUnmineableOrideOvbThk,
                                                        aSetPbToMgPlt,
                                                        "Hole",
                                                        "",
                                                        "",
                                                        0,
                                                        ThisHoleForcedMinable,
                                                        aMineHasDoloflotPlt,
                                                        aUseFeAdjust)
                        gOutputLines.Add(TfileStr)
                    Next LineIdx
                Next
            End If

            'Splits  Splits  Splits
            'Splits  Splits  Splits
            'Splits  Splits  Splits

            'If hole is unminable then show the split minabilities as determined for the
            'individual splits (don't show Spl1 = U, Spl2 = U, Spl3 = U, Spl4 = U, etc.)

            'If hole is "forced" minable then show
            'Spl1 = M, Spl2 = U, Spl3 = U, Spl4 = U, Spl5 = U, Spl6 = U, etc.)

            If TextFileLevel = "Splits" Then
                For Each Hole In Holes
                    For Each Split As gRawProspSplRdctnType In Hole.Splits
                        ThisHoleLocation = Split.HoleDesc
                        ThisSplit = Split.SplitNumber
                        ThisSplitBottom = Split.SplitDepthBot
                        ThisSplitMinableCalcd = Split.MineableCalcd
                        ThisSplitMinableOride = Split.Override
                        If ThisSplit = 1 Then
                            If Split.MineableOride = "MF" Then
                                ThisHoleForcedMinable = True
                            Else
                                ThisHoleForcedMinable = False
                            End If
                        End If
                        'Determine this split's minability.
                        If ThisHoleForcedMinable Then
                            If ThisSplit = 1 Then
                                ThisSplitMinableStatus = "M"
                            Else
                                ThisSplitMinableStatus = "U"
                            End If
                        Else
                            'Currently in CreateAndSaveSurvCaddTextFile
                            '01/28/2010, lss  Changed the following:
                            'Was If ThisSplitMinableCalcd = "M" Or ThisSplitMinableOride = "M" Or
                            ThisSplitMinableCalcd = "MF"
                            If (ThisSplitMinableCalcd = "M" And ThisSplitMinableOride <> "U") Or
                                ThisSplitMinableOride = "M" Or
                                ThisSplitMinableCalcd = "MF" Then
                                ThisSplitMinableStatus = "M"
                            Else
                                If ThisSplitMinableCalcd = "U" Or ThisSplitMinableOride = "U" Then
                                    ThisSplitMinableStatus = "U"
                                Else
                                    ThisSplitMinableStatus = "?"
                                End If
                            End If
                        End If
                        'Determine if this is the last split in the hole.  If it is we
                        'will be writing an extra "Floor" line.
                        LastSplitInHole = False
                        If Split.Equals(Hole.Splits.Last()) Then
                            LastSplitInHole = True
                            'GetCompTfileStrSurvCadd will automatically assign:
                            'AssignedClassCode = "FLR"
                            'AssignedBedCode = "Z"
                        End If
                        'Determine if this is the first split in the hole.  If it is we
                        'will be writing an extra "Waste" line.
                        If Split.Equals(Hole.Splits.First()) Then
                            FirstSplitInHole = True

                            'GetCompTfileStrSurvCadd will automatically assign:
                            'AssignedClassCode = "OVB"
                            'AssignedBedCode = "A"

                            'We are starting a new hole.
                            MinableSplitFound = False
                            CurrentBedCodeInt = 1
                        Else
                            FirstSplitInHole = False
                        End If
                        'Need to determine AssignedClassCode for the "Normal" row.
                        If ThisSplitMinableStatus = "M" Then
                            AssignedClassCode = "MTX"
                        Else
                            If ThisSplitMinableStatus = "U" Then
                                If MinableSplitFound = False Then
                                    AssignedClassCode = "OVB"
                                Else
                                    If LastSplitInHole Then
                                        AssignedClassCode = "FLR"
                                    Else
                                        AssignedClassCode = "INB"
                                    End If
                                End If

                                'Was:
                                'If FirstSplitInHole = True Then
                                '    AssignedClassCode = "OVB"
                                'Else
                                '    AssignedClassCode = "INB"
                                'End If
                            Else
                                'Have not determined a valid minability!
                                AssignedClassCode = ""
                            End If
                        End If
                        'Need to determine BED code.
                        'If the split is unminable and the previous split is minable then increment the
                        'BED code for this split (unless a minable split has not yet been found then
                        'the BED code is still "A").  If the split is unminable and the rest of the
                        'splits in the hole are unminable then the BED code = "Z".

                        If Not MinableSplitFound Or FirstSplitInHole Then
                            AssignedBedCode = "A"
                            'Else
                            '    AllTheRestUnMinable = True

                            '    For RowIdx2 = RowIdx To .MaxRows
                            '        .Row = RowIdx2
                            '        .Col = 1    'Hole location
                            '        If .Text <> ThisHoleLocation Then
                            '            Exit For
                            '        End If

                            '        .Col = 4
                            '        ThisSplitMinableCalcd2 = .Text
                            '        .Col = 5
                            '        ThisSplitMinableOride2 = .Text

                            '        'Currently in CreateAndSaveSurvCaddTextFile
                            '        '01/28/2010, lss  Changed the following:
                            '        If (ThisSplitMinableCalcd2 = "M" And ThisSplitMinableOride2 <> "U") Or
                            '            ThisSplitMinableOride2 = "M" Or
                            '            ThisSplitMinableCalcd2 = "MF" Then
                            '            ThisSplitMinableStatus2 = "M"
                            '        Else
                            '            If ThisSplitMinableCalcd2 = "U" Or ThisSplitMinableOride2 = "U" Then
                            '                ThisSplitMinableStatus2 = "U"
                            '            Else
                            '                ThisSplitMinableStatus2 = "?"
                            '            End If
                            '        End If

                            '        If ThisSplitMinableStatus2 = "M" Then
                            '            AllTheRestUnMinable = False
                            '            Exit For
                            '        End If
                            '    Next RowIdx2

                            '    .Row = RowIdx

                            '    If ThisSplitMinableStatus = "U" And AllTheRestUnMinable = True Then
                            '        AssignedClassCode = "FLR"
                            '        AssignedBedCode = "Z"
                            '    Else
                            '        If ThisSplitMinableStatus = "U" And PrevSplitMinableStatus = "M" Then
                            '            'Increment the assigned bed code.
                            '            CurrentBedCodeInt = CurrentBedCodeInt + 1
                            '            AssignedBedCode = Mid(BedCodeList, CurrentBedCodeInt, 1)
                            '        End If
                            '    End If
                        End If




                    Next
                Next


                'With aSsSplitReview
                '    For RowIdx = 1 To .MaxRows
                '        .Row = RowIdx

                '        'In aSsSplitReview:
                '        '1   HoleLocation  (Description)
                '        '2   SplitNumber
                '        '16  Split bottom
                '        '4  Minable calc'd
                '        '5  Minable oride

                '        With aSsSplitReview
                '            .Row = RowIdx
                '            .Col = 1
                '            ThisHoleLocation = .Text
                '            .Col = 2
                '            ThisSplit = .Value
                '            .Col = 16
                '            ThisSplitBottom = .Value
                '            .Col = 4
                '            ThisSplitMinableCalcd = .Text
                '            .Col = 5
                '            ThisSplitMinableOride = .Text

                '            If ThisSplit = 1 Then
                '                .Col = 190
                '                If .Text = "MF" Then
                '                    ThisHoleForcedMinable = True
                '                Else
                '                    ThisHoleForcedMinable = False
                '                End If
                '            End If

                '            'Need to know at this point if the hole has been forced minable.
                '            'If it has been forced minable then if it is Split #1 then
                '            'ThisSplitMinableStatus = "M" and if it is not Split #1 then
                '            'ThisSplitMinableStatus = "U"

                '            'Determine this split's minability.
                '            If ThisHoleForcedMinable Then
                '                If ThisSplit = 1 Then
                '                    ThisSplitMinableStatus = "M"
                '                Else
                '                    ThisSplitMinableStatus = "U"
                '                End If
                '            Else
                '                'Currently in CreateAndSaveSurvCaddTextFile
                '                '01/28/2010, lss  Changed the following:
                '                'Was If ThisSplitMinableCalcd = "M" Or ThisSplitMinableOride = "M" Or
                '                ThisSplitMinableCalcd = "MF"
                '                If (ThisSplitMinableCalcd = "M" And ThisSplitMinableOride <> "U") Or
                '                    ThisSplitMinableOride = "M" Or
                '                    ThisSplitMinableCalcd = "MF" Then
                '                    ThisSplitMinableStatus = "M"
                '                Else
                '                    If ThisSplitMinableCalcd = "U" Or ThisSplitMinableOride = "U" Then
                '                        ThisSplitMinableStatus = "U"
                '                    Else
                '                        ThisSplitMinableStatus = "?"
                '                    End If
                '                End If
                '            End If
                '            'Determine if this is the first split in the hole.  If it is we
                '            'will be writing an extra "Floor" line.
                '            LastSplitInHole = False
                '            If RowIdx = .MaxRows Then
                '                LastSplitInHole = True

                '                'GetCompTfileStrSurvCadd will automatically assign:
                '                'AssignedClassCode = "FLR"
                '                'AssignedBedCode = "Z"
                '            Else
                '                .Row = RowIdx + 1
                '                .Col = 1
                '                NextHoleLocation = .Text

                '                If NextHoleLocation <> ThisHoleLocation Then
                '                    LastSplitInHole = True

                '                    'GetCompTfileStrSurvCadd will automatically assign:
                '                    'AssignedClassCode = "FLR"
                '                    'AssignedBedCode = "Z"
                '                End If
                '            End If

                '            .Row = RowIdx
                '        End With

                '        'Determine if this is the first split in the hole.  If it is we
                '        'will be writing an extra "Waste" line.
                '        If ThisHoleLocation <> PrevHoleLocation Then
                '            FirstSplitInHole = True

                '            'GetCompTfileStrSurvCadd will automatically assign:
                '            'AssignedClassCode = "OVB"
                '            'AssignedBedCode = "A"

                '            'We are starting a new hole.
                '            MinableSplitFound = False
                '            CurrentBedCodeInt = 1
                '        Else
                '            FirstSplitInHole = False
                '        End If

                '        If ThisSplitMinableStatus = "M" Then
                '            MinableSplitFound = True
                '        End If

                '        'Need to determine AssignedClassCode for the "Normal" row.
                '        If ThisSplitMinableStatus = "M" Then
                '            AssignedClassCode = "MTX"
                '        Else
                '            If ThisSplitMinableStatus = "U" Then
                '                If MinableSplitFound = False Then
                '                    AssignedClassCode = "OVB"
                '                Else
                '                    If LastSplitInHole Then
                '                        AssignedClassCode = "FLR"
                '                    Else
                '                        AssignedClassCode = "INB"
                '                    End If
                '                End If

                '                'Was:
                '                'If FirstSplitInHole = True Then
                '                '    AssignedClassCode = "OVB"
                '                'Else
                '                '    AssignedClassCode = "INB"
                '                'End If
                '            Else
                '                'Have not determined a valid minability!
                '                AssignedClassCode = ""
                '            End If
                '        End If

                '        'Need to determine BED code.
                '        'If the split is unminable and the previous split is minable then increment the
                '        'BED code for this split (unless a minable split has not yet been found then
                '        'the BED code is still "A").  If the split is unminable and the rest of the
                '        'splits in the hole are unminable then the BED code = "Z".

                '        If MinableSplitFound = False Or FirstSplitInHole = True Then
                '            AssignedBedCode = "A"
                '        Else
                '            AllTheRestUnMinable = True

                '            For RowIdx2 = RowIdx To .MaxRows
                '                .Row = RowIdx2
                '                .Col = 1    'Hole location
                '                If .Text <> ThisHoleLocation Then
                '                    Exit For
                '                End If

                '                .Col = 4
                '                ThisSplitMinableCalcd2 = .Text
                '                .Col = 5
                '                ThisSplitMinableOride2 = .Text

                '                'Currently in CreateAndSaveSurvCaddTextFile
                '                '01/28/2010, lss  Changed the following:
                '                If (ThisSplitMinableCalcd2 = "M" And ThisSplitMinableOride2 <> "U") Or
                '                    ThisSplitMinableOride2 = "M" Or
                '                    ThisSplitMinableCalcd2 = "MF" Then
                '                    ThisSplitMinableStatus2 = "M"
                '                Else
                '                    If ThisSplitMinableCalcd2 = "U" Or ThisSplitMinableOride2 = "U" Then
                '                        ThisSplitMinableStatus2 = "U"
                '                    Else
                '                        ThisSplitMinableStatus2 = "?"
                '                    End If
                '                End If

                '                If ThisSplitMinableStatus2 = "M" Then
                '                    AllTheRestUnMinable = False
                '                    Exit For
                '                End If
                '            Next RowIdx2

                '            .Row = RowIdx

                '            If ThisSplitMinableStatus = "U" And AllTheRestUnMinable = True Then
                '                AssignedClassCode = "FLR"
                '                AssignedBedCode = "Z"
                '            Else
                '                If ThisSplitMinableStatus = "U" And PrevSplitMinableStatus = "M" Then
                '                    'Increment the assigned bed code.
                '                    CurrentBedCodeInt = CurrentBedCodeInt + 1
                '                    AssignedBedCode = Mid(BedCodeList, CurrentBedCodeInt, 1)
                '                End If
                '            End If
                '        End If

                '        '---------------
                '        'OVERBURDEN ROW
                '        'If first split in hole then -- need "Waste" type row.
                '        'CLASS will always be "OVB" and BED will always be "A".

                '        '---------------
                '        'NORMAL ROW
                '        'For each split -- need "MATRIX" type row with the split lab data.
                '        'CLASS = OVB, MTX or INB.  BED will be "A" to "Y".
                '        'If a minable split has not been found yet in the hole then CLASS = OVB.
                '        'Otherwise if the split is minable then Class = "MTX" else the split is
                '        'unminable and Class = "INB" except if the split is unminable and all of the
                '        'splits past this split to the bottom of the hole are unminable then
                '        'CLASS = "FLR".

                '        'Need to determine the BED code for this row.  BED codes start at "A" and
                '        'go to "Y" for "Matrix" type rows and hopefully that is enough!
                '        'If the split is unminable and the previous split is minable then increment the
                '        'BED code for this split.  If the split is unminable and the rest of the
                '        'splits in the hole are unminable then the BED code = "Z".

                '        '---------------
                '        'FLOOR ROW
                '        'If last split in hole then -- need "Floor" type row.
                '        'CLASS will always be "FLR" and BED will always be "Z".

                '        '3rd Parameter passed to GetCompTfileStrSurvCadd
                '        'LineIdx = 1  --  Add "Waste" type row  CLASS = "OVB"
                '        'LineIdx = 2  --  Add "Normal" type row CLASS = "MTX", "INB" or "OVB"
                '        'LineIdx = 3  --  Add "Floor" type row  CLASS = "FLR"
                '        Dim SplitData As gRawProspSplRdctnType
                '        If FirstSplitInHole Then
                '            'This is the first split in the hole so need to create a
                '            '"Waste" type row.  The CLASS code for this split will always be "OVB".
                '            'The BED code for this split will always be "A".
                '            SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                '            TfileStr = GetCompTfileStrSurvCadd(SplitData,
                '                                               1,
                '                                               DataType,
                '                                               aMineHasOffSpecPbPlt,
                '                                               aUserUnmineableOride,
                '                                               aUserUnmineableOrideOvbThk,
                '                                               aSetPbToMgPlt,
                '                                               "Split",
                '                                               AssignedClassCode,
                '                                               AssignedBedCode,
                '                                               0,
                '                                               ThisHoleForcedMinable,
                '                                               aMineHasDoloflotPlt,
                '                                               aUseFeAdjust)
                '            gOutputLines.Add(TfileStr)
                '        End If

                '        'Need to put a "Matrix" type row for every split.

                '        SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                '        TfileStr = GetCompTfileStrSurvCadd(SplitData,
                '                                           2,
                '                                           DataType,
                '                                           aMineHasOffSpecPbPlt,
                '                                           aUserUnmineableOride,
                '                                           aUserUnmineableOrideOvbThk,
                '                                           aSetPbToMgPlt,
                '                                           "Split",
                '                                           AssignedClassCode,
                '                                           AssignedBedCode,
                '                                           0,
                '                                           ThisHoleForcedMinable,
                '                                           aMineHasDoloflotPlt,
                '                                           aUseFeAdjust)
                '        gOutputLines.Add(TfileStr)
                '        If LastSplitInHole Then
                '            'This is the last split in the hole so need to create a
                '            '"FLOOR" type row.  The CLASS code for this split will always be "OVB".
                '            'The BED code for this split will always be "Z".
                '            SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)
                '            TfileStr = GetCompTfileStrSurvCadd(SplitData,
                '                                               3,
                '                                               DataType,
                '                                               aMineHasOffSpecPbPlt,
                '                                               aUserUnmineableOride,
                '                                               aUserUnmineableOrideOvbThk,
                '                                               aSetPbToMgPlt,
                '                                               "Split",
                '                                               AssignedClassCode,
                '                                               AssignedBedCode,
                '                                               ThisSplitBottom,
                '                                               ThisHoleForcedMinable,
                '                                               aMineHasDoloflotPlt,
                '                                               aUseFeAdjust)
                '            gOutputLines.Add(TfileStr)
                '        End If

                '        PrevSplitMinableStatus = ThisSplitMinableStatus
                '        PrevHoleLocation = ThisHoleLocation
                '    Next RowIdx
                'End With

            End If

            If TextFileLevel = "Combined" Then
                'Don't have this available yet!!!!
            End If

            ResultValue = True

            Return ResultValue


        Catch ex As Exception
            MessageBox.Show("Error creating SurvCadd transfer text file." & vbCrLf &
                           ex.Message, "SurvCadd Transfer Text File Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Return ResultValue

        End Try

    End Function


    Public Function GetCompTfileStrSurvCadd(ByVal ReducedProspectData As gRawProspSplRdctnType,
                                            ByVal aLineIdx As Integer,
                                            ByVal aDataType As String,
                                            ByVal aMineHasOffSpecPbPlt As Boolean,
                                            ByVal aUserUnmineableOride As Boolean,
                                            ByVal aUserUnmineableOrideOvbThk As Single,
                                            ByVal aSetPbToMgPlt As Boolean,
                                            ByVal aMode As String,
                                            ByVal aAssignedClassCode As String,
                                            ByVal aAssignedBedCode As String,
                                            ByVal aFloorDepth As Single,
                                            ByVal aHoleForcedMinable As Boolean,
                                            ByVal aMineHasDoloflotPlt As Boolean,
                                            ByVal aUseFeAdjust As Boolean) As String

        'Dim HoleData As gRawProspSplRdctnType
        Dim ThisStr As String
        Dim NumVal As Single
        Dim StrVal As String

        Dim OsCpr As Single
        Dim CpbCpr As Single
        Dim FpbCpr As Single
        Dim TpbCpr As Single
        Dim IpCpr As Single
        Dim CcnCpr As Single
        Dim FcnCpr As Single
        Dim TcnCpr As Single
        Dim TprCpr As Single
        '-----
        Dim MpiCpr As Single
        Dim MprCpr As Single
        Dim MppCpr As Single
        Dim MpTcnCpr As Single
        '-----
        Dim DfCpr As Single
        Dim DiCpr As Single
        Dim DtCpr As Single
        Dim DpCpr As Single
        Dim PrCpr As Single
        '-----
        Dim TpaVal As Single
        Dim WtPctVal As Single
        Dim BplVal As Single
        Dim InsVal As Single
        Dim IaVal As Single
        Dim FeVal As Single
        Dim FeAdjVal As Single
        Dim AlVal As Single
        Dim MgVal As Single
        Dim CaVal As Single
        '-----
        Dim Minability As String
        'Dim TempDate As String

        '12/06/2007, lss
        'Updated this per Gary Gavie.
        '02/11/2008, lss
        'Updated this per Gary Gavie.

        'These are the items in the text file that needs to be created:
        '  1) HOLEID     Drill hole ID (Twp + Rng + Sec + Hole)
        '  2) XCOORD
        '  3) YCOORD
        '  4) DATE       Drill date (Prospect date)
        '  5) OWN        Ownership code
        '  6) MINOUT     Mined out indicator (0 = Not mined out, 1 = Mined out)
        '  7) TYPE       Drill hole type (0 = Auger, 1 = Rotary)
        '  8) EXPAND     Expanded lab assay (E = expanded, otherwise blank)
        '  9) ELEV       Collar elevation
        ' 10) TDD        Total drilling depth
        ' 11) TWP
        ' 12) RNG
        ' 13) SEC
        ' 14) FTY
        ' 15) HOLE       Hole number (Alpha-numeric)
        ' 16) SPLNO
        ' 17) FROM       Top of split
        ' 18) TO         Bottom of split
        ' 19) SPLTK
        ' 20) MINE       Split minability (M = minable, U = unminable)
        ' 21) ORIDE      Manual override indicator (Y = Yes, N = No)  Was (A = Automatic, M = Manual)
        ' 22) ORID       Manual override user ID (MOIS Login ID)
        ' 23) ORDATE     Manual override date stamp (YYYYMMDD)
        ' 24) KEY        1 = Key (minable MTX) / 0 = Non-key (everything else)
        ' 25) CLASS      Hole-Level: WST, MTX, FLR
        ' 26) BED
        ' 27) LEVEL      Data category (S = Split-Level, H = Hole-Level)
        ' 28) HZCODE     Horizon codes
        '-----
        ' 29) MYPT_ST    Matrix "X" Onspec
        ' 30) TYPT_ST    Total "X"  Onspec
        ' 31) MYPT_AT    Matrix "X" All
        ' 32) TYPT_AT    Total "X"  All
        '-----
        ' 33) HD_TPA     (Was MT_TPA)
        ' 34) HD_BPL     (Was HD_BPL)
        ' 35) HD_DEN     (Was HD_DEN)
        '-----
        'Doloflot plant pebble input -- New 07/07/2010
        ' 36) DF_TPA
        ' 37) DF_PCT
        ' 38) DF_BPL
        ' 39) DF_INS
        ' 40) DF_IA
        ' 41) DF_FEO
        ' 42) DF_FEOA
        ' 43) DF_ALO
        ' 44) DF_MGO
        ' 45) DF_CPR
        '-----
        'Doloflot plant IP input -- New 07/07/2010
        ' 46) DI_TPA
        ' 47) DI_PCT
        ' 48) DI_BPL
        ' 49) DI_INS
        ' 50) DI_IA
        ' 51) DI_FEO
        ' 52) DI_FEOA
        ' 53) DI_ALO
        ' 54) DI_MGO
        ' 55) DI_CPR
        '-----
        'Doloflot plant total input -- New 07/07/2010
        ' 56) DT_TPA
        ' 57) DT_PCT
        ' 58) DT_BPL
        ' 59) DT_INS
        ' 60) DT_IA
        ' 61) DT_FEO
        ' 62) DT_FEOA
        ' 63) DT_ALO
        ' 64) DT_MGO
        ' 65) DT_CPR
        '-----
        'Doloflot plant product input -- New 07/07/2010
        ' 66) DP_TPA
        ' 67) DP_PCT
        ' 68) DP_BPL
        ' 69) DP_INS
        ' 70) DP_IA
        ' 71) DP_FEO
        ' 72) DP_FEOA
        ' 73) DP_ALO
        ' 74) DP_MGO
        ' 75) DP_CPR
        '-----
        'Off-spec pebble MgO plant input
        ' 76) MI_TPA
        ' 77) MI_PCT
        ' 78) MI_BPL
        ' 79) MI_INS
        ' 80) MI_IA
        ' 81) MI_FEO
        ' 82) MI_FEOA   New -- 07/29/2009, lss  (1)
        ' 83) MI_ALO
        ' 84) MI_MGO
        ' 85) MI_CPR
        '-----
        'Off-spec pebble MgO plant reject
        ' 86) MR_TPA
        ' 87) MR_PCT
        ' 88) MR_BPL
        ' 89) MR_INS
        ' 90) MR_IA
        ' 91) MR_FEO
        ' 92) MR_FEOA   New -- 07/29/2009, lss  (2)
        ' 93) MR_ALO
        ' 94) MR_MGO
        ' 95) MR_CPR
        '-----
        'Off-spec pebble MgO plant product
        ' 96) MP_TPA
        ' 97) MP_PCT
        ' 98) MP_BPL
        ' 99) MP_INS
        '100) MP_IA
        '101) MP_FEO
        '102) MP_FEOA   New -- 07/29/2009, lss  (3)
        '103) MP_ALO
        '104) MP_MGO
        '105) MP_CPR
        '-----
        '106) OS_TPA
        '107) OS_PCT
        '108) OS_BPL
        '109) OS_INS
        '110) OS_IA
        '111) OS_FEO
        '112) OS_FEOA   New -- 07/29/2009, lss  (4)
        '113) OS_ALO
        '114) OS_MGO
        '115) OS_CPR
        '-----
        'Coarse pebble reject -- New 07/07/2010
        '116) PR_TPA
        '117) PR_PCT
        '118) PR_BPL
        '119) PR_INS
        '120) PR_IA
        '121) PR_FEO
        '122) PR_FEOA
        '123) PR_ALO
        '124) PR_MGO
        '125) PR_CPR
        '-----
        '126) PC_TPA    was PB_TPA
        '127) PC_PCT    was PB_PCT
        '128) PC_BPL    was PB_BPL
        '129) PC_INS    was PB_INS
        '130) PC_IA     was PB_IA
        '131) PC_FEO    was PB_FE
        '132) PC_FEOA   New -- 07/29/2009, lss  (5)
        '133) PC_ALO    was PB_AL
        '134) PC_MGO    was PB_MG
        '135) PC_CPR    was PB_CPR
        '-----
        '136) PF_TPA
        '137) PF_PCT
        '138) PF_BPL
        '139) PF_INS
        '140) PF_IA
        '141) PF_FEO
        '142) PF_FEOA   New -- 07/29/2009, lss  (6)
        '143) PF_ALO
        '144) PF_MGO
        '145) PF_CPR
        '-----
        '146) PT_TPA
        '147) PT_PCT
        '148) PT_BPL
        '149) PT_INS
        '150) PT_IA
        '151) PT_FEO
        '152) PT_FEOA   New -- 07/29/2009, lss  (7)
        '153) PT_ALO
        '154) PT_MGO
        '155) PT_CPR
        '-----
        '156) IP_TPA
        '157) IP_PCT
        '158) IP_BPL
        '159) IP_INS
        '160) IP_IA
        '161) IP_FEO
        '162) IP_FEOA   New -- 07/29/2009, lss  (8)
        '163) IP_ALO
        '164) IP_MGO
        '165) IP_CPR
        '-----
        '166) CN_TPA
        '167) CN_PCT
        '168) CN_BPL
        '169) CN_INS
        '170) CN_IA
        '171) CN_FEO
        '172) CN_FEOA   New -- 07/29/2009, lss  (9)
        '173) CN_ALO
        '174) CN_MGO
        '175) CN_CPR
        '-----
        '176) FC_TPA
        '177) FC_PCT
        '178) FC_BPL
        '-----
        '179) FF_TPA
        '180) FF_PCT
        '181) FF_BPL
        '-----
        '182) FT_TPA
        '183) FT_PCT
        '184) FT_BPL
        '-----
        '185) WC_TPA
        '186) WC_PCT
        '187) WC_BPL
        '-----
        '188) MTXCLR
        '189) CONS
        '190) DIG
        '191) PUMP
        '192) LITH
        '193) PHOSCLR
        '-----
        '194) HP_FROM
        '195) HP_TO
        '196) HP_TK
        '197) HP_HARD

        'Hole text file  SurvCADD
        'Hole text file  SurvCADD
        'Hole text file  SurvCADD

        'LineIdx = 1   Waste
        'LineIdx = 2   Matrix
        'LineIdx = 3   Floor

        'DataType will be "100%" or "ProdCoeff"
        'aMode will be "Hole" or "Split"

        'If this is a special case where the user "made the hole unmineable" then
        'we need to do something special here!
        If aUserUnmineableOride Then
            gSetOverrideZeros(ReducedProspectData, aUserUnmineableOrideOvbThk)
        End If

        'The hole mineability is in HoleData.MineableHole or
        'HoleData.MineableHole100 (they will be the same).

        ThisStr = ""

        With ReducedProspectData
            If aDataType = "ProdCoeff" Then
                'Set special MgO plant pebble fill-in values if necessary
                'If this hole has MgO plant product or reject and the normal on-spec total
                'pebble BPL is not zero then we will set the coarse, fine and total
                'pebble analytes (BPL, Fe, Al, Mg, Ca, Ins) to the weighted average of the
                'MgO plant input and MgO plant reject pebble analyte values.
                'The TPA for the on-spec pebble will still be zero.  This gives the mine
                'planners values for the pebble that would otherwise be zeros -- they need
                'this in SurvCADD for some reason.
                If aSetPbToMgPlt = True Then
                    If (.MgPltInp.Tpa <> 0 Or .MgPltRej.Tpa <> 0) And .Tpb.Bpl = 0 Then
                        If .Cpb.Bpl = 0 Then
                            .Cpb.Bpl = gGetTotalValue2(.MgPltInp.Bpl, .MgPltInp.Tpa,
                                                       .MgPltRej.Bpl, .MgPltRej.Tpa, 1)
                        End If
                        If .Cpb.Fe = 0 Then
                            .Cpb.Fe = gGetTotalValue2(.MgPltInp.Fe, .MgPltInp.Tpa,
                                                      .MgPltRej.Fe, .MgPltRej.Tpa, 2)
                        End If
                        If .Cpb.FeAdj = 0 Then
                            .Cpb.FeAdj = gGetTotalValue2(.MgPltInp.FeAdj, .MgPltInp.Tpa,
                                                         .MgPltRej.FeAdj, .MgPltRej.Tpa, 2)
                        End If
                        If .Cpb.Al = 0 Then
                            .Cpb.Al = gGetTotalValue2(.MgPltInp.Al, .MgPltInp.Tpa,
                                                      .MgPltRej.Al, .MgPltRej.Tpa, 2)
                        End If
                        If .Cpb.Mg = 0 Then
                            .Cpb.Mg = gGetTotalValue2(.MgPltInp.Mg, .MgPltInp.Tpa,
                                                      .MgPltRej.Mg, .MgPltRej.Tpa, 2)
                        End If
                        If .Cpb.Ca = 0 Then
                            .Cpb.Ca = gGetTotalValue2(.MgPltInp.Ca, .MgPltInp.Tpa,
                                                      .MgPltRej.Ca, .MgPltRej.Tpa, 1)
                        End If
                        If .Cpb.Ins = 0 Then
                            .Cpb.Ins = gGetTotalValue2(.MgPltInp.Ins, .MgPltInp.Tpa,
                                                       .MgPltRej.Ins, .MgPltRej.Tpa, 1)
                        End If
                        .Cpb.Ia = .Cpb.Fe + .Cpb.Al
                        '-----
                        If .Fpb.Bpl = 0 Then
                            .Fpb.Bpl = gGetTotalValue2(.MgPltInp.Bpl, .MgPltInp.Tpa,
                                                       .MgPltRej.Bpl, .MgPltRej.Tpa, 1)
                        End If
                        If .Fpb.Fe = 0 Then
                            .Fpb.Fe = gGetTotalValue2(.MgPltInp.Fe, .MgPltInp.Tpa,
                                                      .MgPltRej.Fe, .MgPltRej.Tpa, 2)
                        End If
                        If .Fpb.FeAdj = 0 Then
                            .Fpb.FeAdj = gGetTotalValue2(.MgPltInp.FeAdj, .MgPltInp.Tpa,
                                                         .MgPltRej.FeAdj, .MgPltRej.Tpa, 2)
                        End If
                        If .Fpb.Al = 0 Then
                            .Fpb.Al = gGetTotalValue2(.MgPltInp.Al, .MgPltInp.Tpa,
                                                      .MgPltRej.Al, .MgPltRej.Tpa, 2)
                        End If
                        If .Fpb.Mg = 0 Then
                            .Fpb.Mg = gGetTotalValue2(.MgPltInp.Mg, .MgPltInp.Tpa,
                                                      .MgPltRej.Mg, .MgPltRej.Tpa, 2)
                        End If
                        If .Fpb.Ca = 0 Then
                            .Fpb.Ca = gGetTotalValue2(.MgPltInp.Ca, .MgPltInp.Tpa,
                                                      .MgPltRej.Ca, .MgPltRej.Tpa, 1)
                        End If
                        If .Fpb.Ins = 0 Then
                            .Fpb.Ins = gGetTotalValue2(.MgPltInp.Ins, .MgPltInp.Tpa,
                                                       .MgPltRej.Ins, .MgPltRej.Tpa, 1)
                        End If
                        .Fpb.Ia = .Fpb.Fe + .Fpb.Al
                        '-----
                        If .Tpb.Bpl = 0 Then
                            .Tpb.Bpl = gGetTotalValue2(.MgPltInp.Bpl, .MgPltInp.Tpa,
                                                       .MgPltRej.Bpl, .MgPltRej.Tpa, 1)
                        End If
                        If .Tpb.Fe = 0 Then
                            .Tpb.Fe = gGetTotalValue2(.MgPltInp.Fe, .MgPltInp.Tpa,
                                                      .MgPltRej.Fe, .MgPltRej.Tpa, 2)
                        End If
                        If .Tpb.FeAdj = 0 Then
                            .Tpb.FeAdj = gGetTotalValue2(.MgPltInp.FeAdj, .MgPltInp.Tpa,
                                                         .MgPltRej.FeAdj, .MgPltRej.Tpa, 2)
                        End If
                        If .Tpb.Al = 0 Then
                            .Tpb.Al = gGetTotalValue2(.MgPltInp.Al, .MgPltInp.Tpa,
                                                      .MgPltRej.Al, .MgPltRej.Tpa, 2)
                        End If
                        If .Tpb.Mg = 0 Then
                            .Tpb.Mg = gGetTotalValue2(.MgPltInp.Mg, .MgPltInp.Tpa,
                                                      .MgPltRej.Mg, .MgPltRej.Tpa, 2)
                        End If
                        If .Tpb.Ca = 0 Then
                            .Tpb.Ca = gGetTotalValue2(.MgPltInp.Ca, .MgPltInp.Tpa,
                                                      .MgPltRej.Ca, .MgPltRej.Tpa, 1)
                        End If
                        If .Tpb.Ins = 0 Then
                            .Tpb.Ins = gGetTotalValue2(.MgPltInp.Ins, .MgPltInp.Tpa,
                                                       .MgPltRej.Ins, .MgPltRej.Tpa, 1)
                        End If
                        .Tpb.Ia = .Tpb.Fe + .Tpb.Al
                    End If
                End If

                OsCpr = gGetCaP2O5(.Os.Ca, .Os.Bpl, 2)
                CpbCpr = gGetCaP2O5(.Cpb.Ca, .Cpb.Bpl, 2)
                FpbCpr = gGetCaP2O5(.Fpb.Ca, .Fpb.Bpl, 2)
                TpbCpr = gGetCaP2O5(.Tpb.Ca, .Tpb.Bpl, 2)
                IpCpr = gGetCaP2O5(.Ip.Ca, .Ip.Bpl, 2)
                CcnCpr = gGetCaP2O5(.Ccn.Ca, .Ccn.Bpl, 2)
                FcnCpr = gGetCaP2O5(.Fcn.Ca, .Fcn.Bpl, 2)
                TcnCpr = gGetCaP2O5(.Tcn.Ca, .Tcn.Bpl, 2)
                TprCpr = gGetCaP2O5(.Tpr.Ca, .Tpr.Bpl, 2)
                '-----
                MpiCpr = gGetCaP2O5(.MgPltInp.Ca, .MgPltInp.Bpl, 2)
                MprCpr = gGetCaP2O5(.MgPltRej.Ca, .MgPltRej.Bpl, 2)
                MppCpr = gGetCaP2O5(.MgPltProd.Ca, .MgPltProd.Bpl, 2)
                MpTcnCpr = gGetCaP2O5(.MgPltTcn.Ca, .MgPltTcn.Bpl, 2)
                '-----
                'Doloflot fine pebble input
                DfCpr = gGetCaP2O5(.DfFpbInp.Ca, .DfFpbInp.Bpl, 2)
                'Doloflot IP input
                DiCpr = gGetCaP2O5(.DfIpInp.Ca, .DfIpInp.Bpl, 2)
                'Doloflot total input (fine pebble + IP)
                CaVal = gGetTotalValue2(.DfIpInp.Ca, .DfIpInp.Tpa,
                                        .DfFpbInp.Ca, .DfFpbInp.Tpa, 1)
                BplVal = gGetTotalValue2(.DfIpInp.Bpl, .DfIpInp.Tpa,
                                         .DfFpbInp.Bpl, .DfFpbInp.Tpa, 1)
                DtCpr = gGetCaP2O5(CaVal, BplVal, 2)
                'Doloflot total product (fine pebble + IP)
                CaVal = gGetTotalValue2(.DfIpProd.Ca, .DfIpProd.Tpa,
                                        .DfFpbProd.Ca, .DfFpbProd.Tpa, 1)
                BplVal = gGetTotalValue2(.DfIpProd.Bpl, .DfIpProd.Tpa,
                                         .DfFpbProd.Bpl, .DfFpbProd.Tpa, 1)
                DpCpr = gGetCaP2O5(CaVal, BplVal, 2)
                'Coarse pebble reject
                PrCpr = gGetCaP2O5(.CpbRej.Ca, .CpbRej.Bpl, 2)
            Else    '100%
                'Set special MgO plant pebble fill-in values if necessary
                'If this hole has MgO plant product or reject and the normal on-spec total
                'pebble BPL is not zero then we will set the coarse, fine and total
                'pebble analytes (BPL, Fe, Al, Mg, Ca, Ins) to the weighted average of the
                'MgO plant input and MgO plant reject pebble analyte values.
                'The TPA for the on-spec pebble will still be zero.  This gives the mine
                'planners values for the pebble that would otherwise be zeros -- they need
                'this in SurvCADD for some reason.
                If aSetPbToMgPlt = True Then
                    If (.MgPltInp100.Tpa <> 0 Or .MgPltRej100.Tpa <> 0) And .Tpb100.Bpl = 0 Then
                        If .Cpb100.Bpl = 0 Then
                            .Cpb100.Bpl = gGetTotalValue2(.MgPltInp100.Bpl, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Bpl, .MgPltRej100.Tpa, 1)
                        End If
                        If .Cpb100.Fe = 0 Then
                            .Cpb100.Fe = gGetTotalValue2(.MgPltInp100.Fe, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Fe, .MgPltRej100.Tpa, 2)
                        End If
                        If .Cpb100.FeAdj = 0 Then
                            .Cpb100.FeAdj = gGetTotalValue2(.MgPltInp100.FeAdj, .MgPltInp100.Tpa,
                                                            .MgPltRej100.FeAdj, .MgPltRej100.Tpa, 2)
                        End If
                        If .Cpb100.Al = 0 Then
                            .Cpb100.Al = gGetTotalValue2(.MgPltInp100.Al, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Al, .MgPltRej100.Tpa, 2)
                        End If
                        If .Cpb100.Mg = 0 Then
                            .Cpb100.Mg = gGetTotalValue2(.MgPltInp100.Mg, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Mg, .MgPltRej100.Tpa, 2)
                        End If
                        If .Cpb100.Ca = 0 Then
                            .Cpb100.Ca = gGetTotalValue2(.MgPltInp100.Ca, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Ca, .MgPltRej100.Tpa, 1)
                        End If
                        If .Cpb100.Ins = 0 Then
                            .Cpb100.Ins = gGetTotalValue2(.MgPltInp100.Ins, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Ins, .MgPltRej100.Tpa, 1)
                        End If
                        .Cpb100.Ia = .Cpb100.Fe + .Cpb100.Al
                        '-----
                        If .Fpb100.Bpl = 0 Then
                            .Fpb100.Bpl = gGetTotalValue2(.MgPltInp100.Bpl, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Bpl, .MgPltRej100.Tpa, 1)
                        End If
                        If .Fpb100.Fe = 0 Then
                            .Fpb100.Fe = gGetTotalValue2(.MgPltInp100.Fe, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Fe, .MgPltRej100.Tpa, 2)
                        End If
                        If .Fpb100.FeAdj = 0 Then
                            .Fpb100.FeAdj = gGetTotalValue2(.MgPltInp100.FeAdj, .MgPltInp100.Tpa,
                                                            .MgPltRej100.FeAdj, .MgPltRej100.Tpa, 2)
                        End If
                        If .Fpb100.Al = 0 Then
                            .Fpb100.Al = gGetTotalValue2(.MgPltInp100.Al, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Al, .MgPltRej100.Tpa, 2)
                        End If
                        If .Fpb100.Mg = 0 Then
                            .Fpb100.Mg = gGetTotalValue2(.MgPltInp100.Mg, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Mg, .MgPltRej100.Tpa, 2)
                        End If
                        If .Fpb100.Ca = 0 Then
                            .Fpb100.Ca = gGetTotalValue2(.MgPltInp100.Ca, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Ca, .MgPltRej100.Tpa, 1)
                        End If
                        If .Fpb100.Ins = 0 Then
                            .Fpb100.Ins = gGetTotalValue2(.MgPltInp100.Ins, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Ins, .MgPltRej100.Tpa, 1)
                        End If
                        .Fpb100.Ia = .Fpb100.Fe + .Fpb100.Al
                        '-----
                        If .Tpb100.Bpl = 0 Then
                            .Tpb100.Bpl = gGetTotalValue2(.MgPltInp100.Bpl, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Bpl, .MgPltRej100.Tpa, 1)
                        End If
                        If .Tpb100.Fe = 0 Then
                            .Tpb100.Fe = gGetTotalValue2(.MgPltInp100.Fe, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Fe, .MgPltRej100.Tpa, 2)
                        End If
                        If .Tpb100.FeAdj = 0 Then
                            .Tpb100.FeAdj = gGetTotalValue2(.MgPltInp100.FeAdj, .MgPltInp100.Tpa,
                                                            .MgPltRej100.FeAdj, .MgPltRej100.Tpa, 2)
                        End If
                        If .Tpb100.Al = 0 Then
                            .Tpb100.Al = gGetTotalValue2(.MgPltInp100.Al, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Al, .MgPltRej100.Tpa, 2)
                        End If
                        If .Tpb100.Mg = 0 Then
                            .Tpb100.Mg = gGetTotalValue2(.MgPltInp100.Mg, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Mg, .MgPltRej100.Tpa, 2)
                        End If
                        If .Tpb100.Ca = 0 Then
                            .Tpb100.Ca = gGetTotalValue2(.MgPltInp100.Ca, .MgPltInp100.Tpa,
                                                         .MgPltRej100.Ca, .MgPltRej100.Tpa, 1)
                        End If
                        If .Tpb100.Ins = 0 Then
                            .Tpb100.Ins = gGetTotalValue2(.MgPltInp100.Ins, .MgPltInp100.Tpa,
                                                          .MgPltRej100.Ins, .MgPltRej100.Tpa, 1)
                        End If
                        .Tpb100.Ia = .Tpb100.Fe + .Tpb100.Al
                    End If
                End If

                OsCpr = gGetCaP2O5(.Os100.Ca, .Os100.Bpl, 2)
                CpbCpr = gGetCaP2O5(.Cpb100.Ca, .Cpb100.Bpl, 2)
                FpbCpr = gGetCaP2O5(.Fpb100.Ca, .Fpb100.Bpl, 2)
                TpbCpr = gGetCaP2O5(.Tpb100.Ca, .Tpb100.Bpl, 2)
                IpCpr = gGetCaP2O5(.Ip100.Ca, .Ip100.Bpl, 2)
                CcnCpr = gGetCaP2O5(.Ccn100.Ca, .Ccn100.Bpl, 2)
                FcnCpr = gGetCaP2O5(.Fcn100.Ca, .Fcn100.Bpl, 2)
                TcnCpr = gGetCaP2O5(.Tcn100.Ca, .Tcn100.Bpl, 2)
                TprCpr = gGetCaP2O5(.Tpr100.Ca, .Tpr100.Bpl, 2)
                '-----
                MpiCpr = gGetCaP2O5(.MgPltInp100.Ca, .MgPltInp100.Bpl, 2)
                MprCpr = gGetCaP2O5(.MgPltRej100.Ca, .MgPltRej100.Bpl, 2)
                MppCpr = gGetCaP2O5(.MgPltProd100.Ca, .MgPltProd100.Bpl, 2)
                MpTcnCpr = gGetCaP2O5(.MgPltTcn100.Ca, .MgPltTcn100.Bpl, 2)
                '-----
                'Doloflot fine pebble input
                DfCpr = gGetCaP2O5(.DfFpbInp100.Ca, .DfFpbInp100.Bpl, 2)
                'Doloflot IP input
                DiCpr = gGetCaP2O5(.DfIpInp100.Ca, .DfIpInp100.Bpl, 2)
                'Doloflot total input (fine pebble + IP)
                CaVal = gGetTotalValue2(.DfIpInp100.Ca, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Ca, .DfFpbInp100.Tpa, 1)
                BplVal = gGetTotalValue2(.DfIpInp100.Bpl, .DfIpInp100.Tpa,
                                         .DfFpbInp100.Bpl, .DfFpbInp100.Tpa, 1)
                DtCpr = gGetCaP2O5(CaVal, BplVal, 2)
                'Doloflot total product (fine pebble + IP)
                CaVal = gGetTotalValue2(.DfIpProd100.Ca, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Ca, .DfFpbProd100.Tpa, 1)
                BplVal = gGetTotalValue2(.DfIpProd100.Bpl, .DfIpProd100.Tpa,
                                         .DfFpbProd100.Bpl, .DfFpbProd100.Tpa, 1)
                DpCpr = gGetCaP2O5(CaVal, BplVal, 2)
                'Coarse pebble reject
                PrCpr = gGetCaP2O5(.CpbRej100.Ca, .CpbRej100.Bpl, 2)
            End If

            ThisStr = .SurvCaddHoleId & ","                            '1   HOLEID
            ThisStr = ThisStr & CStr(.Xcoord) & ","                    '2   XCOORD
            ThisStr = ThisStr & CStr(.Ycoord) & ","                    '3   YCOORD

            Dim testDate As Date? '4   DATE
            If Mosaic.Mining.Common.DateHelper.IsParseFullDate(.ProspDate, testDate, True) Then
                ThisStr = ThisStr & testDate.Value.Month.ToString.PadLeft(2, "0") & testDate.Value.Year.ToString.Substring(2) & ","
            Else
                ThisStr = ThisStr & " ,"
            End If

            ThisStr = ThisStr & .Ownership & ","                       '5   OWN

            'Mined out   0 = No, 1 = Yes
            If .MinedOutStatus = "Yes" Then
                NumVal = 1
            Else
                NumVal = 0
            End If
            ThisStr = ThisStr & CStr(NumVal) & ","                     '6   MINOUT

            'Hole type   0 = Auger, 1 = Rotary
            NumVal = 1
            If .HoleType = "Rotary" Then
                NumVal = 1
            End If
            If .HoleType = "Auger" Then
                NumVal = 0
            End If
            ThisStr = ThisStr & CStr(NumVal) & ","                     '7   TYPE

            'Expanded   E = Expanded else blank
            If .ExpDrill = "Yes" Then
                StrVal = "E"
            Else
                StrVal = " "
            End If
            ThisStr = ThisStr & StrVal & ","                           '8   EXPAND

            ThisStr = ThisStr & CStr(.Elevation) & ","                 '9   ELEV
            ThisStr = ThisStr & CStr(.TotDepth) & ","                  '10  TDD
            ThisStr = ThisStr & CStr(.Township) & ","                  '11  TWP
            ThisStr = ThisStr & CStr(.Range) & ","                     '12  RNG
            ThisStr = ThisStr & CStr(.Section) & ","                   '13  SEC
            ThisStr = ThisStr & CStr(.Forty) & ","                     '14  FTY
            ThisStr = ThisStr & .HoleLocation & ","                    '15  HOLE

            'Waste, Matrix, Floor lines are the same up to here.

            Select Case aLineIdx
                Case Is = 1     'Waste line
                    'Waste  Waste  Waste  Waste  Waste  Waste
                    'Waste  Waste  Waste  Waste  Waste  Waste
                    'Waste  Waste  Waste  Waste  Waste  Waste

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & CStr(97) & ","                 '16  SPLNO
                        ThisStr = ThisStr & CStr(0) & ","                  '17  FROM   Assign a zero
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk) & ","  '18  TO     Ovb + Itb thick
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk) & ","  '19  SPLTK  Ovb + Itb thick
                    Else    'Must be "Split"
                        ThisStr = ThisStr & CStr(0) & ","                  '16  SPLNO
                        ThisStr = ThisStr & CStr(0) & ","                  '17  FROM   Assign a zero

                        'ThisStr = ThisStr & CStr(.OvbThk) & ","           '18  TO     Ovb thick
                        'ThisStr = ThisStr & CStr(.OvbThk) & ","           '19  SPLTK  Ovb thick
                        '01/12/2010, lss
                        'Will need to use .SplitDepthTop here!
                        '.OvbThk is just zero and does not give us what we need.
                        ThisStr = ThisStr & CStr(0) & ","                  '18  TO     Ovb thick
                        ThisStr = ThisStr & CStr(.SplitDepthTop) & ","     '19  SPLTK  Ovb thick
                    End If


                    ThisStr = ThisStr & " " & ","                      '20  MINE

                    'Override   Y = Yes, N = No was A = Automatic, M = Manual
                    'There is no override for holes right now.
                    ThisStr = ThisStr & "N" & ","                      '21  ORIDE
                    ThisStr = ThisStr & " " & ","                      '22  ORID   Manual override user ID
                    ThisStr = ThisStr & CStr(0) & ","                  '23  ORIDE  Manual override date stamp

                    ThisStr = ThisStr & CStr(0) & ","                  '24  KEY

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & "WST" & ","                '25  CLASS
                        ThisStr = ThisStr & "ABC" & ","                '26  BED
                        ThisStr = ThisStr & "H" & ","                  '27  LEVEL
                    Else    'Must be "Split"
                        ThisStr = ThisStr & "OVB" & ","                '25  CLASS
                        ThisStr = ThisStr & "A" & ","                  '26  BED
                        ThisStr = ThisStr & "S" & ","                  '27  LEVEL
                    End If

                    ThisStr = ThisStr & " " & ","                      '28  HZCODE

                    'All fields are blank from here -- for the Waste line.
                    'Changes 10/19/2011,lss
                    'Holes  -- Need hardpan stuff -- 194 to 197
                    'Splits -- Need hardpan stuff -- 194 to 197
                    '-----
                    ThisStr = ThisStr & " " & ","                      '29  MYPT_ST
                    ThisStr = ThisStr & " " & ","                      '30  TYPT_ST
                    ThisStr = ThisStr & " " & ","                      '31  MYAPT_AT
                    ThisStr = ThisStr & " " & ","                      '32  TYPT_AT
                    ThisStr = ThisStr & " " & ","                      '33  HD_TPA
                    ThisStr = ThisStr & " " & ","                      '34  HD_BPL
                    ThisStr = ThisStr & " " & ","                      '35  HD_DEN
                    '-----
                    ThisStr = ThisStr & " " & ","                      '36  DF_TPA
                    ThisStr = ThisStr & " " & ","                      '37  DF_PCT
                    ThisStr = ThisStr & " " & ","                      '38  DF_BPL
                    ThisStr = ThisStr & " " & ","                      '39  DF_INS
                    ThisStr = ThisStr & " " & ","                      '40  DF_IA
                    ThisStr = ThisStr & " " & ","                      '41  DF_FEO
                    ThisStr = ThisStr & " " & ","                      '42  DF_FEOA
                    ThisStr = ThisStr & " " & ","                      '43  DF_ALO
                    ThisStr = ThisStr & " " & ","                      '44  DF_MGO
                    ThisStr = ThisStr & " " & ","                      '45  DF_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '46  DI_TPA
                    ThisStr = ThisStr & " " & ","                      '47  DI_PCT
                    ThisStr = ThisStr & " " & ","                      '48  DI_BPL
                    ThisStr = ThisStr & " " & ","                      '49  DI_INS
                    ThisStr = ThisStr & " " & ","                      '50  DI_IA
                    ThisStr = ThisStr & " " & ","                      '51  DI_FEO
                    ThisStr = ThisStr & " " & ","                      '52  DI_FEOA
                    ThisStr = ThisStr & " " & ","                      '53  DI_ALO
                    ThisStr = ThisStr & " " & ","                      '54  DI_MGO
                    ThisStr = ThisStr & " " & ","                      '55  DI_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '56  DT_TPA
                    ThisStr = ThisStr & " " & ","                      '57  DT_PCT
                    ThisStr = ThisStr & " " & ","                      '58  DT_BPL
                    ThisStr = ThisStr & " " & ","                      '59  DT_INS
                    ThisStr = ThisStr & " " & ","                      '60  DT_IA
                    ThisStr = ThisStr & " " & ","                      '61  DT_FEO
                    ThisStr = ThisStr & " " & ","                      '62  DT_FEOA
                    ThisStr = ThisStr & " " & ","                      '63  DT_ALO
                    ThisStr = ThisStr & " " & ","                      '64  DT_MGO
                    ThisStr = ThisStr & " " & ","                      '65  DT_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '66  DP_TPA
                    ThisStr = ThisStr & " " & ","                      '67  DP_PCT
                    ThisStr = ThisStr & " " & ","                      '68  DP_BPL
                    ThisStr = ThisStr & " " & ","                      '69  DP_INS
                    ThisStr = ThisStr & " " & ","                      '70  DP_IA
                    ThisStr = ThisStr & " " & ","                      '71  DP_FEO
                    ThisStr = ThisStr & " " & ","                      '72  DP_FEOA
                    ThisStr = ThisStr & " " & ","                      '73  DP_ALO
                    ThisStr = ThisStr & " " & ","                      '74  DP_MGO
                    ThisStr = ThisStr & " " & ","                      '75  DP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '76  MI_TPA
                    ThisStr = ThisStr & " " & ","                      '77  MI_PCT
                    ThisStr = ThisStr & " " & ","                      '78  MI_BPL
                    ThisStr = ThisStr & " " & ","                      '79  MI_INS
                    ThisStr = ThisStr & " " & ","                      '80  MI_IA
                    ThisStr = ThisStr & " " & ","                      '81  MI_FEO
                    ThisStr = ThisStr & " " & ","                      '82  MI_FEOA
                    ThisStr = ThisStr & " " & ","                      '83  MI_ALO
                    ThisStr = ThisStr & " " & ","                      '84  MI_MGO
                    ThisStr = ThisStr & " " & ","                      '85  MI_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '86  MR_TPA
                    ThisStr = ThisStr & " " & ","                      '87  MR_PCT
                    ThisStr = ThisStr & " " & ","                      '88  MR_BPL
                    ThisStr = ThisStr & " " & ","                      '89  MR_INS
                    ThisStr = ThisStr & " " & ","                      '90  MR_IA
                    ThisStr = ThisStr & " " & ","                      '91  MR_FEO
                    ThisStr = ThisStr & " " & ","                      '92  MR_FEOA
                    ThisStr = ThisStr & " " & ","                      '93  MR_ALO
                    ThisStr = ThisStr & " " & ","                      '94  MR_MGO
                    ThisStr = ThisStr & " " & ","                      '95  MR_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '96  MP_TPA
                    ThisStr = ThisStr & " " & ","                      '97  MP_PCT
                    ThisStr = ThisStr & " " & ","                      '98  MP_BPL
                    ThisStr = ThisStr & " " & ","                      '99  MP_INS
                    ThisStr = ThisStr & " " & ","                      '100 MP_IA
                    ThisStr = ThisStr & " " & ","                      '101 MP_FEO
                    ThisStr = ThisStr & " " & ","                      '102 MP_FEOA
                    ThisStr = ThisStr & " " & ","                      '103 MP_ALO
                    ThisStr = ThisStr & " " & ","                      '104 MP_MGO
                    ThisStr = ThisStr & " " & ","                      '105 MP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '106 OS_TPA
                    ThisStr = ThisStr & " " & ","                      '107 OS_PCT
                    ThisStr = ThisStr & " " & ","                      '108 OS_BPL
                    ThisStr = ThisStr & " " & ","                      '109 OS_INS
                    ThisStr = ThisStr & " " & ","                      '110 OS_IA
                    ThisStr = ThisStr & " " & ","                      '111 OS_FEO
                    ThisStr = ThisStr & " " & ","                      '112 OS_FEOA
                    ThisStr = ThisStr & " " & ","                      '113 OS_ALO
                    ThisStr = ThisStr & " " & ","                      '114 OS_MGO
                    ThisStr = ThisStr & " " & ","                      '115 OS_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '116 PR_TPA
                    ThisStr = ThisStr & " " & ","                      '117 PR_PCT
                    ThisStr = ThisStr & " " & ","                      '118 PR_BPL
                    ThisStr = ThisStr & " " & ","                      '119 PR_INS
                    ThisStr = ThisStr & " " & ","                      '120 PR_IA
                    ThisStr = ThisStr & " " & ","                      '121 PR_FEO
                    ThisStr = ThisStr & " " & ","                      '122 PR_FEOA
                    ThisStr = ThisStr & " " & ","                      '123 PR_ALO
                    ThisStr = ThisStr & " " & ","                      '124 PR_MGO
                    ThisStr = ThisStr & " " & ","                      '125 PR_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '126  PC_TPA
                    ThisStr = ThisStr & " " & ","                      '127  PC_PCT
                    ThisStr = ThisStr & " " & ","                      '128  PC_BPL
                    ThisStr = ThisStr & " " & ","                      '129  PC_INS
                    ThisStr = ThisStr & " " & ","                      '130  PC_IA
                    ThisStr = ThisStr & " " & ","                      '131  PC_FEO
                    ThisStr = ThisStr & " " & ","                      '132  PC_FEOA
                    ThisStr = ThisStr & " " & ","                      '133  PC_ALO
                    ThisStr = ThisStr & " " & ","                      '134  PC_MGO
                    ThisStr = ThisStr & " " & ","                      '135  PC_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '136  PF_TPA
                    ThisStr = ThisStr & " " & ","                      '137  PF_PCT
                    ThisStr = ThisStr & " " & ","                      '138  PF_BPL
                    ThisStr = ThisStr & " " & ","                      '139  PF_INS
                    ThisStr = ThisStr & " " & ","                      '140  PF_IA
                    ThisStr = ThisStr & " " & ","                      '141  PF_FEO
                    ThisStr = ThisStr & " " & ","                      '142  PF_FEOA
                    ThisStr = ThisStr & " " & ","                      '143  PF_ALO
                    ThisStr = ThisStr & " " & ","                      '144  PF_MGO
                    ThisStr = ThisStr & " " & ","                      '145  PF_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '146  PT_TPA
                    ThisStr = ThisStr & " " & ","                      '147  PT_PCT
                    ThisStr = ThisStr & " " & ","                      '148  PT_BPL
                    ThisStr = ThisStr & " " & ","                      '149  PT_INS
                    ThisStr = ThisStr & " " & ","                      '150 PT_IA
                    ThisStr = ThisStr & " " & ","                      '151 PT_FEO
                    ThisStr = ThisStr & " " & ","                      '152 PT_FEOA
                    ThisStr = ThisStr & " " & ","                      '153 PT_ALO
                    ThisStr = ThisStr & " " & ","                      '154 PT_MGO
                    ThisStr = ThisStr & " " & ","                      '155 PT_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '156 IP_TPA
                    ThisStr = ThisStr & " " & ","                      '157 IP_PCT
                    ThisStr = ThisStr & " " & ","                      '158 IP_BPL
                    ThisStr = ThisStr & " " & ","                      '159 IP_INS
                    ThisStr = ThisStr & " " & ","                      '160 IP_IA
                    ThisStr = ThisStr & " " & ","                      '161 IP_FEO
                    ThisStr = ThisStr & " " & ","                      '162 IP_FEOA
                    ThisStr = ThisStr & " " & ","                      '163 IP_ALO
                    ThisStr = ThisStr & " " & ","                      '164 IP_MGO
                    ThisStr = ThisStr & " " & ","                      '165 IP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '166 CN_TPA
                    ThisStr = ThisStr & " " & ","                      '167 CN_PCT
                    ThisStr = ThisStr & " " & ","                      '168 CN_BPL
                    ThisStr = ThisStr & " " & ","                      '169 CN_INS
                    ThisStr = ThisStr & " " & ","                      '170 CN_IA
                    ThisStr = ThisStr & " " & ","                      '171 CN_FEO
                    ThisStr = ThisStr & " " & ","                      '172 CN_FEOA
                    ThisStr = ThisStr & " " & ","                      '173 CN_ALO
                    ThisStr = ThisStr & " " & ","                      '174 CN_MGO
                    ThisStr = ThisStr & " " & ","                      '175 CN_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '176 FC_TPA
                    ThisStr = ThisStr & " " & ","                      '177 FC_PCT
                    ThisStr = ThisStr & " " & ","                      '178 FC_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '179 FF_TPA
                    ThisStr = ThisStr & " " & ","                      '180 FF_PCT
                    ThisStr = ThisStr & " " & ","                      '181 FF_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '182 FT_TPA
                    ThisStr = ThisStr & " " & ","                      '183 FT_PCT
                    ThisStr = ThisStr & " " & ","                      '184 FT_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '185 WC_TPA
                    ThisStr = ThisStr & " " & ","                      '186 WC_PCT
                    ThisStr = ThisStr & " " & ","                      '187 WC_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '188 MTXCLR
                    ThisStr = ThisStr & " " & ","                      '189 CONS
                    ThisStr = ThisStr & " " & ","                      '190 DIG
                    ThisStr = ThisStr & " " & ","                      '191 PUMP
                    ThisStr = ThisStr & " " & ","                      '192 LITH
                    ThisStr = ThisStr & " " & ","                      '193 PHOSCLR
                    '-----
                    'Changes 10/19/2011, lss
                    ThisStr = ThisStr & CStr(.HardpanFrom) & ","       '194 HP_FROM
                    ThisStr = ThisStr & CStr(.HardpanTo) & ","         '195 HP_TO
                    ThisStr = ThisStr & CStr(.HardpanThck) & ","       '196 HP_TK
                    ThisStr = ThisStr & .HardpanCode & ","             '197 HP_HARD

                Case Is = 2     'Matrix
                    'Matrix  Matrix  Matrix  Matrix  Matrix
                    'Matrix  Matrix  Matrix  Matrix  Matrix
                    'Matrix  Matrix  Matrix  Matrix  Matrix

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & CStr(98) & ","                 '16  SPLNO
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk) & ","  '17  FROM
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk +
                                                 .MtxThk) & ","            '18  TO
                        ThisStr = ThisStr & CStr(.MtxThk) & ","            '19  SPLTK
                    Else
                        ThisStr = ThisStr & CStr(.SplitNumber) & ","       '16  SPLNO
                        ThisStr = ThisStr & CStr(.SplitDepthTop) & ","     '17  FROM
                        ThisStr = ThisStr & CStr(.SplitDepthBot) & ","     '18  TO
                        ThisStr = ThisStr & CStr(.SplitThck) & ","         '19  SPLTK
                    End If

                    'Currently in GetCompTfileStrSurvCadd
                    '01/28/2010, lss  Changed the following:
                    If (.MineableCalcd = "M" And .MineableOride <> "U") Or
                        .MineableOride = "M" Or
                        .MineableCalcd = "MF" Then
                        Minability = "M"
                    Else
                        Minability = "U"
                    End If

                    'If this hole has been forced minable and we are creating a split text file
                    'then if Spl#1 = 1 Then minable else unminable.
                    If aMode = "Split" And aHoleForcedMinable = True Then
                        If .SplitNumber = 1 Then
                            Minability = "M"
                        Else
                            Minability = "U"
                        End If
                    End If

                    ThisStr = ThisStr & Minability & ","               '20  MINE

                    'Override   Y = Yes, N = No was A = Automatic, M = Manual
                    'There is no override for holes right now.
                    If aMode = "Hole" Then
                        ThisStr = ThisStr & "N" & ","                      '21  ORIDE
                        ThisStr = ThisStr & " " & ","                      '22  ORID    Manual override user ID
                        ThisStr = ThisStr & CStr(0) & ","                  '23  ORDATE  Manual override date stamp
                    Else  'Must be "Split"
                        '01/28/2010, lss -- Added this stuff
                        If .MineableCalcd <> .MineableOride Then
                            ThisStr = ThisStr & "Y" & ","                  '21  ORIDE
                        Else
                            ThisStr = ThisStr & "N" & ","                  '21  ORIDE
                        End If
                        '01/29/2010, lss -- not sure what to do here yet!
                        ThisStr = ThisStr & " " & ","                      '22  ORID    Manual override user ID
                        ThisStr = ThisStr & CStr(0) & ","                  '23  ORDATE  Manual override date stamp
                    End If

                    If aMode = "Hole" Then
                        'If hole is minable Key = 1 else Key = 0
                        If .MineableHole = "M" Or .MineableHole = "MF" Then
                            ThisStr = ThisStr & CStr(1) & ","              '24  KEY
                        Else
                            ThisStr = ThisStr & CStr(0) & ","              '24  KEY
                        End If
                    Else    'Must be "Split
                        'If hole is minable Key = 1 else Key = 0
                        '02/01/2010, lss
                        'Changed the following line.
                        'If .MineableHole = "M" Or .MineableHole = "MF" Then
                        If Minability = "M" Then
                            ThisStr = ThisStr & CStr(1) & ","              '24  KEY
                        Else
                            ThisStr = ThisStr & CStr(0) & ","              '24  KEY
                        End If
                    End If

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & "MTX" & ","                '25  CLASS
                        ThisStr = ThisStr & "ABC" & ","                '26  BED
                        ThisStr = ThisStr & "H" & ","                  '27  LEVEL
                    Else    'Must be "Split"
                        ThisStr = ThisStr & aAssignedClassCode & ","   '25  CLASS
                        ThisStr = ThisStr & aAssignedBedCode & ","     '26  BED
                        ThisStr = ThisStr & "S" & ","                  '27  LEVEL
                    End If

                    ThisStr = ThisStr & " " & ","                      '28  HZCODE

                    If aDataType = "ProdCoeff" Then
                        'ProdCoeff  ProdCoeff  ProdCoeff     Matrix
                        'ProdCoeff  ProdCoeff  ProdCoeff     Matrix
                        'ProdCoeff  ProdCoeff  ProdCoeff     Matrix
                        'All fields are blank from here -- for the Waste line and the
                        'Floor line but not the Matrix line.

                        If aMode = "Hole" Then
                            ThisStr = ThisStr & CStr(.MtxxOnSpecPcHole) & ","   '29  MYPT_ST
                            ThisStr = ThisStr & CStr(.TotxOnSpecPcHole) & ","   '30  TYPT_ST
                            ThisStr = ThisStr & CStr(.MtxxAllPcHole) & ","      '31  MYAPT_AT
                            ThisStr = ThisStr & CStr(.TotxAllPcHole) & ","      '32  TYPT_AT
                        Else    'Must be Split
                            ThisStr = ThisStr & CStr(.MtxxOnSpec) & ","   '29  MYPT_ST
                            ThisStr = ThisStr & CStr(.TotxOnSpec) & ","   '30  TYPT_ST
                            ThisStr = ThisStr & CStr(.MtxxAll) & ","      '31  MYAPT_AT
                            ThisStr = ThisStr & CStr(.TotxAll) & ","      '32  TYPT_AT
                        End If

                        ThisStr = ThisStr & CStr(.MtxTpaPc) & ","           '33  HD_TPA

                        If .MtxBPL <> 0 Then
                            ThisStr = ThisStr & CStr(.MtxBPL) & ","         '34  HD_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If

                        ThisStr = ThisStr & CStr(.MtxDensity) & ","         '35  HD_DEN
                        '-----

                        'If the mine does not have a Doloflot plant then
                        'there will be zeros for all of the Doloflot plant
                        'stuff -- I am assuming that this is OK!

                        If .DfFpbInp.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Tpa) & ","    '36  DF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.WtPct) & ","  '37  DF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Bpl) & ","    '38  DF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Ins) & ","    '39  DF_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Ia) & ","     '40  DF_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Fe) & ","     '41  DF_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.FeAdj) & ","  '42  DF_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Al) & ","     '43  DF_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp.Mg) & ","     '44  DF_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DfCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DfCpr) & ","            '45  DF_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .DfIpInp.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Tpa) & ","     '46  DI_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.WtPct) & ","   '47  DI_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Bpl) & ","     '48  DI_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Ins) & ","     '49  DI_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Ia) & ","      '50  DI_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Fe) & ","      '51  DI_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.FeAdj) & ","   '52  DI_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Al) & ","      '53  DI_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp.Mg) & ","      '54  DI_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DiCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DiCpr) & ","            '55  DI_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        TpaVal = .DfIpInp.Tpa + .DfFpbInp.Tpa
                        WtPctVal = .DfIpInp.WtPct + .DfFpbInp.WtPct
                        BplVal = gGetTotalValue2(.DfIpInp.Bpl, .DfIpInp.Tpa,
                                                 .DfFpbInp.Bpl, .DfFpbInp.Tpa, 1)
                        InsVal = gGetTotalValue2(.DfIpInp.Ins, .DfIpInp.Tpa,
                                                 .DfFpbInp.Ins, .DfFpbInp.Tpa, 1)
                        FeVal = gGetTotalValue2(.DfIpInp.Fe, .DfIpInp.Tpa,
                                                .DfFpbInp.Fe, .DfFpbInp.Tpa, 2)
                        FeAdjVal = gGetTotalValue2(.DfIpInp.FeAdj, .DfIpInp.Tpa,
                                                   .DfFpbInp.FeAdj, .DfFpbInp.Tpa, 2)
                        AlVal = gGetTotalValue2(.DfIpInp.Al, .DfIpInp.Tpa,
                                                .DfFpbInp.Al, .DfFpbInp.Tpa, 2)
                        MgVal = gGetTotalValue2(.DfIpInp.Mg, .DfIpInp.Tpa,
                                                .DfFpbInp.Mg, .DfFpbInp.Tpa, 2)

                        If aUseFeAdjust = True Then
                            IaVal = FeAdjVal + AlVal
                        Else
                            IaVal = FeVal + AlVal
                        End If

                        If TpaVal <> 0 Then
                            ThisStr = ThisStr & CStr(TpaVal) & ","     '56  DT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If WtPctVal <> 0 Then
                            ThisStr = ThisStr & CStr(WtPctVal) & ","   '57  DT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If BplVal <> 0 Then
                            ThisStr = ThisStr & CStr(BplVal) & ","     '58  DT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If InsVal <> 0 Then
                            ThisStr = ThisStr & CStr(InsVal) & ","     '59  DT_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IaVal <> 0 Then
                            ThisStr = ThisStr & CStr(IaVal) & ","      '60  DT_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeVal) & ","      '61  DT_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeAdjVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeAdjVal) & ","   '62  DT_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If AlVal <> 0 Then
                            ThisStr = ThisStr & CStr(AlVal) & ","      '63  DT_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MgVal <> 0 Then
                            ThisStr = ThisStr & CStr(MgVal) & ","      '64  DT_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DtCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DtCpr) & ","      '65  DT_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        TpaVal = .DfIpProd.Tpa + .DfFpbProd.Tpa
                        WtPctVal = .DfIpProd.WtPct + .DfFpbProd.WtPct
                        BplVal = gGetTotalValue2(.DfIpProd.Bpl, .DfIpProd.Tpa,
                                                 .DfFpbProd.Bpl, .DfFpbProd.Tpa, 1)
                        InsVal = gGetTotalValue2(.DfIpProd.Ins, .DfIpProd.Tpa,
                                                 .DfFpbProd.Ins, .DfFpbProd.Tpa, 1)
                        FeVal = gGetTotalValue2(.DfIpProd.Fe, .DfIpProd.Tpa,
                                                .DfFpbProd.Fe, .DfFpbProd.Tpa, 2)
                        FeAdjVal = gGetTotalValue2(.DfIpProd.FeAdj, .DfIpProd.Tpa,
                                                   .DfFpbProd.FeAdj, .DfFpbProd.Tpa, 2)
                        AlVal = gGetTotalValue2(.DfIpProd.Al, .DfIpProd.Tpa,
                                                .DfFpbProd.Al, .DfFpbProd.Tpa, 2)
                        MgVal = gGetTotalValue2(.DfIpProd.Mg, .DfIpProd.Tpa,
                                                .DfFpbProd.Mg, .DfFpbProd.Tpa, 2)

                        If aUseFeAdjust = True Then
                            IaVal = FeAdjVal + AlVal
                        Else
                            IaVal = FeVal + AlVal
                        End If

                        If TpaVal <> 0 Then
                            ThisStr = ThisStr & CStr(TpaVal) & ","     '66  DP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If WtPctVal <> 0 Then
                            ThisStr = ThisStr & CStr(WtPctVal) & ","   '67  DP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If BplVal <> 0 Then
                            ThisStr = ThisStr & CStr(BplVal) & ","     '68  DP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If InsVal <> 0 Then
                            ThisStr = ThisStr & CStr(InsVal) & ","     '69  DP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IaVal <> 0 Then
                            ThisStr = ThisStr & CStr(IaVal) & ","      '70  DP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeVal) & ","      '71  DP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeAdjVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeAdjVal) & ","   '72  DP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If AlVal <> 0 Then
                            ThisStr = ThisStr & CStr(AlVal) & ","      '73  DP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MgVal <> 0 Then
                            ThisStr = ThisStr & CStr(MgVal) & ","      '74  DP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DpCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DpCpr) & ","      '75  DP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        'If the mine does not have an Off-spec pebble MgO plant then
                        'there will be zeros for all of the Off-spec pebble MgO plant
                        'stuff -- I am assuming that this is OK!

                        If .MgPltInp.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Tpa) & ","   '76  MI_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.WtPct) & "," '77  MI_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Bpl) & ","   '78  MI_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Ins) & ","   '79  MI_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Ia) & ","    '80  MI_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Fe) & ","    '81  MI_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.FeAdj) & "," '82  MI_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Al) & ","    '83  MI_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp.Mg) & ","    '84  MI_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MpiCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MpiCpr) & ","          '85  MI_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .MgPltRej.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Tpa) & ","   '86  MR_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.WtPct) & "," '87  MR_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Bpl) & ","   '88  MR_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Ins) & ","   '89  MR_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Ia) & ","    '90  MR_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Fe) & ","    '91  MR_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.FeAdj) & "," '92  MR_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Al) & ","    '93  MR_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej.Mg) & ","    '94  MR_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MprCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MprCpr) & ","          '95  MR_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .MgPltProd.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Tpa) & ","  '96  MP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.WtPct) & "," '97  MP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Bpl) & ","  '98  MP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Ins) & ","  '99  MP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Ia) & ","   '100  MP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Fe) & ","   '101  MP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.FeAdj) & ","   '102  MP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Al) & ","   '103  MP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd.Mg) & ","   '104  MP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MppCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MppCpr) & ","          '105  MP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Os.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Tpa) & ","         '106  OS_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.WtPct) & ","       '107  OS_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Bpl) & ","         '108  OS_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Ins) & ","         '109  OS_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Ia) & ","          '110  OS_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Fe) & ","          '111  OS_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.FeAdj) & ","       '112  OS_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Al) & ","          '113  OS_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Os.Mg) & ","          '114  OS_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If OsCpr <> 0 Then
                            ThisStr = ThisStr & CStr(OsCpr) & ","           '115  OS_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .CpbRej.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Tpa) & ","     '116  PR_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.WtPct) & ","   '117  PR_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Bpl) & ","     '118  PR_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Ins) & ","     '119  PR_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Ia) & ","      '120  PR_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Fe) & ","      '121  PR_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.FeAdj) & ","   '122  PR_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Al) & ","      '123  PR_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej.Mg) & ","      '124  PR_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If PrCpr <> 0 Then
                            ThisStr = ThisStr & CStr(PrCpr) & ","           '125  PR_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Cpb.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Tpa) & ","        '126  PC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.WtPct) & ","      '127  PC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Bpl) & ","        '128  PC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Ins) & ","        '129  PC_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Ia) & ","         '130  PC_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Fe) & ","         '131  PC_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.FeAdj) & ","      '132  PC_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Al) & ","         '133  PC_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb.Mg) & ","         '134  PC_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If CpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(CpbCpr) & ","          '135  PC_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Fpb.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Tpa) & ","        '136  PF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.WtPct) & ","      '137  PF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Bpl) & ","        '138  PF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Ins) & ","        '139  PF_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Ia) & ","         '140  PF_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Fe) & ","         '141  PF_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.FeAdj) & ","      '142  PF_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Al) & ","         '143  PF_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb.Mg) & ","         '144  PF_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(FpbCpr) & ","          '145  PF_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Tpb.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Tpa) & ","        '146  PT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.WtPct) & ","      '147  PT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Bpl) & ","        '148  PT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Ins) & ","        '149  PT_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Ia) & ","         '150 PT_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Fe) & ","         '151 PT_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.FeAdj) & ","      '152 PT_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Al) & ","         '153 PT_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb.Mg) & ","         '154 PT_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If TpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(TpbCpr) & ","          '155 PT_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Ip.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Tpa) & ","         '156 IP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.WtPct) & ","       '157 IP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Bpl) & ","         '158 IP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Ins) & ","         '159 IP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Ia) & ","          '160 IP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Fe) & ","          '161 IP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.FeAdj) & ","       '162 IP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Al) & ","          '163 IP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip.Mg) & ","          '164 IP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IpCpr <> 0 Then
                            ThisStr = ThisStr & CStr(IpCpr) & ","           '165 IP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If Not aMineHasOffSpecPbPlt Then
                            If .Tcn.Tpa <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Tpa) & ","    '166 CN_TPA
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.WtPct <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.WtPct) & ","  '167 CN_PCT
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Bpl <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Bpl) & ","    '168 CN_BPL
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Ins <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Ins) & ","    '169 CN_INS
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Ia <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Ia) & ","     '170 CN_IA
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Fe <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Fe) & ","     '171 CN_FEO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.FeAdj <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.FeAdj) & ","  '172 CN_FEOA
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Al <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Al) & ","     '173 CN_ALO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn.Mg <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn.Mg) & ","     '174 CN_MGO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If TcnCpr <> 0 Then
                                ThisStr = ThisStr & CStr(TcnCpr) & ","      '175 CN_CPR
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                        Else
                            ThisStr = ThisStr & CStr(.MgPltTcn.Tpa) & ","   '166 CN_TPA
                            ThisStr = ThisStr & CStr(.MgPltTcn.WtPct) & "," '167 CN_PCT
                            ThisStr = ThisStr & CStr(.MgPltTcn.Bpl) & ","   '168 CN_BPL
                            ThisStr = ThisStr & CStr(.MgPltTcn.Ins) & ","   '169 CN_INS
                            ThisStr = ThisStr & CStr(.MgPltTcn.Ia) & ","    '170 CN_IA
                            ThisStr = ThisStr & CStr(.MgPltTcn.Fe) & ","    '171 CN_FEO
                            ThisStr = ThisStr & CStr(.MgPltTcn.FeAdj) & "," '172 CN_FEOA
                            ThisStr = ThisStr & CStr(.MgPltTcn.Al) & ","    '173 CN_ALO
                            ThisStr = ThisStr & CStr(.MgPltTcn.Mg) & ","    '174 CN_MGO
                            ThisStr = ThisStr & CStr(MpTcnCpr) & ","        '175 CN_CPR
                        End If
                        '-----
                        If .Cfd.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd.Tpa) & ","        '176 FC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cfd.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd.WtPct) & ","      '177 FC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cfd.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd.Bpl) & ","        '178 FC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Ffd.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd.Tpa) & ","        '179 FF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ffd.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd.WtPct) & ","      '180 FF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ffd.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd.Bpl) & ","        '181 FF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Tfd.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd.Tpa) & ","        '182 FT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tfd.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd.WtPct) & ","      '183 FT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tfd.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd.Bpl) & ","        '184 FT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Wcl.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl.Tpa) & ","        '185 WC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Wcl.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl.WtPct) & ","      '186 WC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Wcl.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl.Bpl) & ","        '187 WC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                    Else
                        '100%  100%  100%    Matrix
                        '100%  100%  100%    Matrix
                        '100%  100%  100%    Matrix
                        'All fields are blank from here -- for the Waste line and the
                        'Floor line but not the Matrix line.                        .

                        If aMode = "Hole" Then
                            ThisStr = ThisStr & CStr(.MtxxOnSpec100Hole) & ","  '29  MYPT_ST
                            ThisStr = ThisStr & CStr(.TotxOnSpec100Hole) & ","  '30  TYPT_ST
                            ThisStr = ThisStr & CStr(.MtxxAll100Hole) & ","     '31  MYAPT_AT
                            ThisStr = ThisStr & CStr(.TotxAll100Hole) & ","     '32  TYPT_AT
                        Else    'Must be Split
                            ThisStr = ThisStr & CStr(.MtxxOnSpec100) & ","  '29  MYPT_ST
                            ThisStr = ThisStr & CStr(.TotxOnSpec100) & ","  '30  TYPT_ST
                            ThisStr = ThisStr & CStr(.MtxxAll100) & ","     '31  MYAPT_AT
                            ThisStr = ThisStr & CStr(.TotxAll100) & ","     '32  TYPT_AT
                        End If

                        ThisStr = ThisStr & CStr(.MtxTPA) & ","             '33  HD_TPA

                        If .MtxBPL <> 0 Then
                            ThisStr = ThisStr & CStr(.MtxBPL) & ","         '34  HD_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If

                        ThisStr = ThisStr & CStr(.MtxDensity) & ","         '35  HD_DEN
                        '-----
                        '-----
                        'If the mine does not have a Doloflot plant then
                        'there will be zeros for all of the Doloflot plant
                        'stuff -- I am assuming that this is OK!

                        If .DfFpbInp100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Tpa) & ","    '36  DF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.WtPct) & ","  '37  DF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Bpl) & ","    '38  DF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Ins) & ","    '39  DF_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Ia) & ","     '40  DF_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Fe) & ","     '41  DF_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.FeAdj) & ","  '42  DF_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Al) & ","     '43  DF_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfFpbInp100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.DfFpbInp100.Mg) & ","     '44  DF_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DfCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DfCpr) & ","               '45  DF_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .DfIpInp100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Tpa) & ","     '46  DI_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.WtPct) & ","   '47  DI_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Bpl) & ","     '48  DI_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Ins) & ","     '49  DI_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Ia) & ","      '50  DI_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Fe) & ","      '51  DI_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.FeAdj) & ","   '52  DI_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Al) & ","      '53  DI_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .DfIpInp100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.DfIpInp100.Mg) & ","      '54  DI_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DiCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DiCpr) & ","               '55  DI_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        TpaVal = .DfIpInp100.Tpa + .DfFpbInp100.Tpa
                        WtPctVal = .DfIpInp100.WtPct + .DfFpbInp100.WtPct
                        BplVal = gGetTotalValue2(.DfIpInp100.Bpl, .DfIpInp100.Tpa,
                                                 .DfFpbInp100.Bpl, .DfFpbInp100.Tpa, 1)
                        InsVal = gGetTotalValue2(.DfIpInp100.Ins, .DfIpInp100.Tpa,
                                                 .DfFpbInp100.Ins, .DfFpbInp100.Tpa, 1)
                        FeVal = gGetTotalValue2(.DfIpInp100.Fe, .DfIpInp100.Tpa,
                                                .DfFpbInp100.Fe, .DfFpbInp100.Tpa, 2)
                        FeAdjVal = gGetTotalValue2(.DfIpInp100.FeAdj, .DfIpInp100.Tpa,
                                                   .DfFpbInp100.FeAdj, .DfFpbInp100.Tpa, 2)
                        AlVal = gGetTotalValue2(.DfIpInp100.Al, .DfIpInp100.Tpa,
                                                .DfFpbInp100.Al, .DfFpbInp100.Tpa, 2)
                        MgVal = gGetTotalValue2(.DfIpInp100.Mg, .DfIpInp100.Tpa,
                                                .DfFpbInp100.Mg, .DfFpbInp100.Tpa, 2)

                        If aUseFeAdjust = True Then
                            IaVal = FeAdjVal + AlVal
                        Else
                            IaVal = FeVal + AlVal
                        End If

                        If TpaVal <> 0 Then
                            ThisStr = ThisStr & CStr(TpaVal) & ","     '56  DT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If WtPctVal <> 0 Then
                            ThisStr = ThisStr & CStr(WtPctVal) & ","   '57  DT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If BplVal <> 0 Then
                            ThisStr = ThisStr & CStr(BplVal) & ","     '58  DT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If InsVal <> 0 Then
                            ThisStr = ThisStr & CStr(InsVal) & ","     '59  DT_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IaVal <> 0 Then
                            ThisStr = ThisStr & CStr(IaVal) & ","      '60  DT_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeVal) & ","      '61  DT_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeAdjVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeAdjVal) & ","   '62  DT_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If AlVal <> 0 Then
                            ThisStr = ThisStr & CStr(AlVal) & ","      '63  DT_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MgVal <> 0 Then
                            ThisStr = ThisStr & CStr(MgVal) & ","      '64  DT_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DtCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DtCpr) & ","      '65  DT_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        TpaVal = .DfIpProd100.Tpa + .DfFpbProd100.Tpa
                        WtPctVal = .DfIpProd100.WtPct + .DfFpbProd100.WtPct
                        BplVal = gGetTotalValue2(.DfIpProd100.Bpl, .DfIpProd100.Tpa,
                                                 .DfFpbProd100.Bpl, .DfFpbProd100.Tpa, 1)
                        InsVal = gGetTotalValue2(.DfIpProd100.Ins, .DfIpProd100.Tpa,
                                                 .DfFpbProd100.Ins, .DfFpbProd100.Tpa, 1)
                        FeVal = gGetTotalValue2(.DfIpProd100.Fe, .DfIpProd100.Tpa,
                                                .DfFpbProd100.Fe, .DfFpbProd100.Tpa, 2)
                        FeAdjVal = gGetTotalValue2(.DfIpProd100.FeAdj, .DfIpProd100.Tpa,
                                                   .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa, 2)
                        AlVal = gGetTotalValue2(.DfIpProd100.Al, .DfIpProd100.Tpa,
                                                .DfFpbProd100.Al, .DfFpbProd100.Tpa, 2)
                        MgVal = gGetTotalValue2(.DfIpProd100.Mg, .DfIpProd100.Tpa,
                                                .DfFpbProd100.Mg, .DfFpbProd100.Tpa, 2)

                        If aUseFeAdjust = True Then
                            IaVal = FeAdjVal + AlVal
                        Else
                            IaVal = FeVal + AlVal
                        End If

                        If TpaVal <> 0 Then
                            ThisStr = ThisStr & CStr(TpaVal) & ","     '66  DP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If WtPctVal <> 0 Then
                            ThisStr = ThisStr & CStr(WtPctVal) & ","   '67  DP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If BplVal <> 0 Then
                            ThisStr = ThisStr & CStr(BplVal) & ","     '68  DP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If InsVal <> 0 Then
                            ThisStr = ThisStr & CStr(InsVal) & ","     '69  DP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IaVal <> 0 Then
                            ThisStr = ThisStr & CStr(IaVal) & ","      '70  DP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeVal) & ","      '71  DP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FeAdjVal <> 0 Then
                            ThisStr = ThisStr & CStr(FeAdjVal) & ","   '72  DP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If AlVal <> 0 Then
                            ThisStr = ThisStr & CStr(AlVal) & ","      '73  DP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MgVal <> 0 Then
                            ThisStr = ThisStr & CStr(MgVal) & ","      '74  DP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If DpCpr <> 0 Then
                            ThisStr = ThisStr & CStr(DpCpr) & ","      '75  DP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        'If the mine does not have an Off-spec pebble MgO plant then
                        'there will be zeros for all of the Off-spec pebble MgO plant
                        'stuff -- I am assuming that this is OK!

                        If .MgPltInp100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Tpa) & ","    '76  MI_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.WtPct) & ","  '77  MI_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Bpl) & ","    '78  MI_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Ins) & ","    '79  MI_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Ia) & ","     '80  MI_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Fe) & ","     '81  MI_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.FeAdj) & ","  '82  MI_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Al) & ","     '83  MI_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltInp100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltInp100.Mg) & ","     '84  MI_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MpiCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MpiCpr) & ","              '85  MI_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .MgPltRej100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Tpa) & ","    '86  MR_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.WtPct) & ","  '87  MR_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Bpl) & ","    '88  MR_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Ins) & ","    '89  MR_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Ia) & ","     '90  MR_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Fe) & ","     '91  MR_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.FeAdj) & ","  '92  MR_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Al) & ","     '93  MR_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltRej100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltRej100.Mg) & ","     '94  MR_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MprCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MprCpr) & ","              '95  MR_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .MgPltProd100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Tpa) & ","   '96  MP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.WtPct) & "," '97  MP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Bpl) & ","   '98  MP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Ins) & ","   '99  MP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Ia) & ","    '100  MP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Fe) & ","    '101  MP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.FeAdj) & "," '102  MP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Al) & ","    '103  MP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .MgPltProd100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.MgPltProd100.Mg) & ","    '104  MP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If MppCpr <> 0 Then
                            ThisStr = ThisStr & CStr(MppCpr) & ","              '105  MP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Os100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Tpa) & ","          '106  OS_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.WtPct) & ","        '107  OS_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Bpl) & ","          '108  OS_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Ins) & ","          '109  OS_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Ia) & ","           '110  OS_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Fe) & ","           '111  OS_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.FeAdj) & ","        '112  OS_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Al) & ","           '113  OS_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Os100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Os100.Mg) & ","           '114  OS_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If OsCpr <> 0 Then
                            ThisStr = ThisStr & CStr(OsCpr) & ","               '115  OS_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .CpbRej100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Tpa) & ","      '116  PR_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.WtPct) & ","    '117  PR_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Bpl) & ","      '118  PR_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Ins) & ","      '119  PR_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Ia) & ","       '120  PR_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Fe) & ","       '121  PR_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.FeAdj) & ","    '122  PR_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Al) & ","       '123  PR_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .CpbRej100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.CpbRej100.Mg) & ","       '124  PR_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If PrCpr <> 0 Then
                            ThisStr = ThisStr & CStr(PrCpr) & ","               '125  PR_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Cpb100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Tpa) & ","         '126  PC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.WtPct) & ","       '127  PC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Bpl) & ","         '128  PC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Ins) & ","         '129  PC_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Ia) & ","          '130  PC_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Fe) & ","          '131  PC_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.FeAdj) & ","       '132  PC_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Al) & ","          '133  PC_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cpb100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Cpb100.Mg) & ","          '134  PC_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If CpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(CpbCpr) & ","              '135  PC_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Fpb100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Tpa) & ","         '136  PF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.WtPct) & ","       '137  PF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Bpl) & ","         '138  PF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Ins) & ","         '139  PF_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Ia) & ","          '140  PF_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Fe) & ","          '141  PF_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.FeAdj) & ","       '142  PF_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Al) & ","          '143  PF_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Fpb100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Fpb100.Mg) & ","          '144  PF_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If FpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(FpbCpr) & ","              '145  PF_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Tpb100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Tpa) & ","         '146  PT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.WtPct) & ","       '147  PT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Bpl) & ","         '148  PT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Ins) & ","         '149  PT_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Ia) & ","          '150 PT_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Fe) & ","          '151 PT_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.FeAdj) & ","       '152 PT_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Al) & ","          '153 PT_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tpb100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Tpb100.Mg) & ","          '154 PT_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If TpbCpr <> 0 Then
                            ThisStr = ThisStr & CStr(TpbCpr) & ","              '155 PT_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Ip100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Tpa) & ","          '156 IP_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.WtPct) & ","        '157 IP_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Bpl) & ","          '158 IP_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Ins <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Ins) & ","          '159 IP_INS
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Ia <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Ia) & ","           '160 IP_IA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Fe <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Fe) & ","           '161 IP_FEO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.FeAdj <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.FeAdj) & ","        '162 IP_FEOA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Al <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Al) & ","           '163 IP_ALO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ip100.Mg <> 0 Then
                            ThisStr = ThisStr & CStr(.Ip100.Mg) & ","           '164 IP_MGO
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If IpCpr <> 0 Then
                            ThisStr = ThisStr & CStr(IpCpr) & ","               '165 IP_CPR
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If aMineHasOffSpecPbPlt = False Then
                            If .Tcn100.Tpa <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Tpa) & ","     '166 CN_TPA
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.WtPct <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.WtPct) & ","   '167 CN_PCT
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Bpl <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Bpl) & ","     '168 CN_BPL
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Ins <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Ins) & ","     '169 CN_INS
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Ia <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Ia) & ","      '170 CN_IA
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Fe <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Fe) & ","      '171 CN_FEO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.FeAdj <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.FeAdj) & ","   '172 CN_FEO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Al <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Al) & ","      '173 CN_ALO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If .Tcn100.Mg <> 0 Then
                                ThisStr = ThisStr & CStr(.Tcn100.Mg) & ","      '174 CN_MGO
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                            If TcnCpr <> 0 Then
                                ThisStr = ThisStr & CStr(TcnCpr) & ","          '175 CN_CPR
                            Else
                                ThisStr = ThisStr & " " & ","
                            End If
                        Else
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Tpa) & ","    '166 CN_TPA
                            ThisStr = ThisStr & CStr(.MgPltTcn100.WtPct) & ","  '167 CN_PCT
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Bpl) & ","    '168 CN_BPL
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Ins) & ","    '169 CN_INS
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Ia) & ","     '170 CN_IA
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Fe) & ","     '171 CN_FEO
                            ThisStr = ThisStr & CStr(.MgPltTcn100.FeAdj) & ","  '172 CN_FEOA
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Al) & ","     '173 CN_ALO
                            ThisStr = ThisStr & CStr(.MgPltTcn100.Mg) & ","     '174 CN_MGO
                            ThisStr = ThisStr & CStr(MpTcnCpr) & ","            '175 CN_CPR
                        End If
                        '-----
                        If .Cfd100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd100.Tpa) & ","         '176 FC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cfd100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd100.WtPct) & ","       '177 FC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Cfd100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Cfd100.Bpl) & ","         '178 FC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Ffd100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd100.Tpa) & ","         '179 FF_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ffd100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd100.WtPct) & ","       '180 FF_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Ffd100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Ffd100.Bpl) & ","         '181 FF_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Tfd100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd100.Tpa) & ","         '182 FT_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tfd100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd100.WtPct) & ","       '183 FT_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Tfd100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Tfd100.Bpl) & ","         '184 FT_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        '-----
                        If .Wcl100.Tpa <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl100.Tpa) & ","         '185 WC_TPA
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Wcl100.WtPct <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl100.WtPct) & ","       '186 WC_PCT
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                        If .Wcl100.Bpl <> 0 Then
                            ThisStr = ThisStr & CStr(.Wcl100.Bpl) & ","         '187 WC_BPL
                        Else
                            ThisStr = ThisStr & " " & ","
                        End If
                    End If
                    '-----
                    'Will assume that Matrix color codes are numeric!
                    If IsNumeric(.MtxColor) Then
                        ThisStr = ThisStr & CStr(.MtxColor) & ","               '188 MTXCLR
                    Else
                        ThisStr = ThisStr & " " & ","                           '188 MTXCLR
                    End If

                    'Will assume that Degree of consolidation codes are numeric!
                    If IsNumeric(.DegConsol) Then
                        ThisStr = ThisStr & CStr(.DegConsol) & ","              '189 CONS
                    Else
                        ThisStr = ThisStr & " " & ","                           '189 CONS
                    End If

                    'Will assume that Digging characteristic codes are numeric!
                    If IsNumeric(.DigChar) Then
                        ThisStr = ThisStr & CStr(.DigChar) & ","                '190 DIG
                    Else
                        ThisStr = ThisStr & " " & ","                           '190 DIG
                    End If

                    'Will assume that Pumping characteristic codes are numeric!
                    If IsNumeric(.PumpChar) Then
                        ThisStr = ThisStr & CStr(.PumpChar) & ","               '191 PUMP
                    Else
                        ThisStr = ThisStr & " " & ","                           '191 PUMP
                    End If

                    'Will assume that Lithology codes are numeric!
                    If IsNumeric(.Lithology) Then
                        ThisStr = ThisStr & CStr(.Lithology) & ","              '192 LITH
                    Else
                        ThisStr = ThisStr & " " & ","                           '192 LITH
                    End If

                    'Will assume that Phosphate color codes are numeric!
                    If IsNumeric(.PhosphColor) Then
                        ThisStr = ThisStr & CStr(.PhosphColor) & ","            '193 PHOSCLR
                    Else
                        ThisStr = ThisStr & " " & ","                           '193 PHOSCLR
                    End If

                    'Changes 10/19/2011, lss
                    ThisStr = ThisStr & " " & ","    '194  HP_FROM
                    ThisStr = ThisStr & " " & ","    '195  HP_TO
                    ThisStr = ThisStr & " " & ","    '196  HP_TK
                    ThisStr = ThisStr & " " & ","    '197  HP_HARD

                Case Is = 3     'Floor
                    'Floor  Floor  Floor  Floor  Floor  Floor
                    'Floor  Floor  Floor  Floor  Floor  Floor
                    'Floor  Floor  Floor  Floor  Floor  Floor

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & CStr(99) & ","                 '16  SPLNO
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk +
                                                 .MtxThk) & ","            '17  FROM
                        ThisStr = ThisStr & CStr(.OvbThk + .ItbThk +
                                                 .MtxThk + 1) & ","        '18  TO
                        ThisStr = ThisStr & CStr(1) & ","                  '19  SPLTK    Assign a value of 1
                    Else    'Must be "Split"
                        ThisStr = ThisStr & CStr(99) & ","                 '16  SPLNO
                        ThisStr = ThisStr & CStr(aFloorDepth) & ","        '17  FROM
                        ThisStr = ThisStr & CStr(aFloorDepth + 1) & ","    '18  TO
                        ThisStr = ThisStr & CStr(1) & ","                  '19  SPLTK    Assign a value of 1

                    End If

                    ThisStr = ThisStr & "U" & ","                      '20  MINE

                    'Override   Y = Yes, N = No was A = Automatic, M = Manual
                    'There is no override for holes.
                    ThisStr = ThisStr & "N" & ","                      '21  ORIDE
                    ThisStr = ThisStr & " " & ","                      '22  ORID   Manual override user ID
                    ThisStr = ThisStr & CStr(0) & ","                  '23  ORIDE  Manual override date stamp

                    ThisStr = ThisStr & CStr(0) & ","                  '24  KEY

                    If aMode = "Hole" Then
                        ThisStr = ThisStr & "FLR" & ","                '25  CLASS
                        ThisStr = ThisStr & "Z" & ","                  '26  BED
                        ThisStr = ThisStr & "H" & ","                  '27  LEVEL
                    Else    'Must be "Split"
                        ThisStr = ThisStr & "FLR" & ","                '25  CLASS
                        ThisStr = ThisStr & "Z" & ","                  '26  BED
                        ThisStr = ThisStr & "S" & ","                  '27  LEVEL
                    End If

                    ThisStr = ThisStr & " " & ","                      '28  HZCODE

                    'All fields are blank from here -- for the Floor line.
                    ThisStr = ThisStr & " " & ","                      '29  MYPT_ST
                    ThisStr = ThisStr & " " & ","                      '30  TYPT_ST
                    ThisStr = ThisStr & " " & ","                      '31  MYAPT_AT
                    ThisStr = ThisStr & " " & ","                      '32  TYPT_AT
                    ThisStr = ThisStr & " " & ","                      '33  MT_TPA
                    ThisStr = ThisStr & " " & ","                      '34  MT_BPL
                    ThisStr = ThisStr & " " & ","                      '35  MT_DEN
                    '-----
                    ThisStr = ThisStr & " " & ","                      '36  DF_TPA
                    ThisStr = ThisStr & " " & ","                      '37  DF_PCT
                    ThisStr = ThisStr & " " & ","                      '38  DF_BPL
                    ThisStr = ThisStr & " " & ","                      '39  DF_INS
                    ThisStr = ThisStr & " " & ","                      '40  DF_IA
                    ThisStr = ThisStr & " " & ","                      '41  DF_FEO
                    ThisStr = ThisStr & " " & ","                      '42  DF_FEOA
                    ThisStr = ThisStr & " " & ","                      '43  DF_ALO
                    ThisStr = ThisStr & " " & ","                      '44  DF_MGO
                    ThisStr = ThisStr & " " & ","                      '45  DF_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '46  DI_TPA
                    ThisStr = ThisStr & " " & ","                      '47  DI_PCT
                    ThisStr = ThisStr & " " & ","                      '48  DI_BPL
                    ThisStr = ThisStr & " " & ","                      '49  DI_INS
                    ThisStr = ThisStr & " " & ","                      '50  DI_IA
                    ThisStr = ThisStr & " " & ","                      '51  DI_FEO
                    ThisStr = ThisStr & " " & ","                      '52  DI_FEOA
                    ThisStr = ThisStr & " " & ","                      '53  DI_ALO
                    ThisStr = ThisStr & " " & ","                      '54  DI_MGO
                    ThisStr = ThisStr & " " & ","                      '55  DI_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '56  DT_TPA
                    ThisStr = ThisStr & " " & ","                      '57  DT_PCT
                    ThisStr = ThisStr & " " & ","                      '58  DT_BPL
                    ThisStr = ThisStr & " " & ","                      '59  DT_INS
                    ThisStr = ThisStr & " " & ","                      '60  DT_IA
                    ThisStr = ThisStr & " " & ","                      '61  DT_FEO
                    ThisStr = ThisStr & " " & ","                      '62  DT_FEOA
                    ThisStr = ThisStr & " " & ","                      '63  DT_ALO
                    ThisStr = ThisStr & " " & ","                      '64  DT_MGO
                    ThisStr = ThisStr & " " & ","                      '65  DT_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '66  DP_TPA
                    ThisStr = ThisStr & " " & ","                      '67  DP_PCT
                    ThisStr = ThisStr & " " & ","                      '68  DP_BPL
                    ThisStr = ThisStr & " " & ","                      '69  DP_INS
                    ThisStr = ThisStr & " " & ","                      '70  DP_IA
                    ThisStr = ThisStr & " " & ","                      '71  DP_FEO
                    ThisStr = ThisStr & " " & ","                      '72  DP_FEOA
                    ThisStr = ThisStr & " " & ","                      '73  DP_ALO
                    ThisStr = ThisStr & " " & ","                      '74  DP_MGO
                    ThisStr = ThisStr & " " & ","                      '75  DP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '76  MI_TPA
                    ThisStr = ThisStr & " " & ","                      '77  MI_PCT
                    ThisStr = ThisStr & " " & ","                      '78  MI_BPL
                    ThisStr = ThisStr & " " & ","                      '79  MI_INS
                    ThisStr = ThisStr & " " & ","                      '80  MI_IA
                    ThisStr = ThisStr & " " & ","                      '81  MI_FEO
                    ThisStr = ThisStr & " " & ","                      '82  MI_FEOA
                    ThisStr = ThisStr & " " & ","                      '83  MI_ALO
                    ThisStr = ThisStr & " " & ","                      '84  MI_MGO
                    ThisStr = ThisStr & " " & ","                      '85  MI_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '86  MR_TPA
                    ThisStr = ThisStr & " " & ","                      '87  MR_PCT
                    ThisStr = ThisStr & " " & ","                      '88  MR_BPL
                    ThisStr = ThisStr & " " & ","                      '89  MR_INS
                    ThisStr = ThisStr & " " & ","                      '90  MR_IA
                    ThisStr = ThisStr & " " & ","                      '91  MR_FEO
                    ThisStr = ThisStr & " " & ","                      '92  MR_FEOA
                    ThisStr = ThisStr & " " & ","                      '93  MR_ALO
                    ThisStr = ThisStr & " " & ","                      '94  MR_MGO
                    ThisStr = ThisStr & " " & ","                      '95  MR_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '96  MP_TPA
                    ThisStr = ThisStr & " " & ","                      '97  MP_PCT
                    ThisStr = ThisStr & " " & ","                      '98  MP_BPL
                    ThisStr = ThisStr & " " & ","                      '99  MP_INS
                    ThisStr = ThisStr & " " & ","                      '100 MP_IA
                    ThisStr = ThisStr & " " & ","                      '101 MP_FEO
                    ThisStr = ThisStr & " " & ","                      '102 MP_FEOA
                    ThisStr = ThisStr & " " & ","                      '103 MP_ALO
                    ThisStr = ThisStr & " " & ","                      '104 MP_MGO
                    ThisStr = ThisStr & " " & ","                      '105 MP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '106  OS_TPA
                    ThisStr = ThisStr & " " & ","                      '107  OS_PCT
                    ThisStr = ThisStr & " " & ","                      '108  OS_BPL
                    ThisStr = ThisStr & " " & ","                      '109  OS_INS
                    ThisStr = ThisStr & " " & ","                      '110  OS_IA
                    ThisStr = ThisStr & " " & ","                      '111  OS_FEO
                    ThisStr = ThisStr & " " & ","                      '112  OS_FEOA
                    ThisStr = ThisStr & " " & ","                      '113  OS_ALO
                    ThisStr = ThisStr & " " & ","                      '114  OS_MGO
                    ThisStr = ThisStr & " " & ","                      '115  OS_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '116  PR_TPA
                    ThisStr = ThisStr & " " & ","                      '117  PR_PCT
                    ThisStr = ThisStr & " " & ","                      '118  PR_BPL
                    ThisStr = ThisStr & " " & ","                      '119  PR_INS
                    ThisStr = ThisStr & " " & ","                      '120  PR_IA
                    ThisStr = ThisStr & " " & ","                      '121  PR_FEO
                    ThisStr = ThisStr & " " & ","                      '122  PR_FEOA
                    ThisStr = ThisStr & " " & ","                      '123  PR_ALO
                    ThisStr = ThisStr & " " & ","                      '124  PR_MGO
                    ThisStr = ThisStr & " " & ","                      '125  PR_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '126  PC_TPA
                    ThisStr = ThisStr & " " & ","                      '127  PC_PCT
                    ThisStr = ThisStr & " " & ","                      '128  PC_BPL
                    ThisStr = ThisStr & " " & ","                      '129  PC_INS
                    ThisStr = ThisStr & " " & ","                      '130  PC_IA
                    ThisStr = ThisStr & " " & ","                      '131  PC_FEO
                    ThisStr = ThisStr & " " & ","                      '132  PC_FEOA
                    ThisStr = ThisStr & " " & ","                      '133  PC_ALO
                    ThisStr = ThisStr & " " & ","                      '134  PC_MGO
                    ThisStr = ThisStr & " " & ","                      '135  PC_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '136  PF_TPA
                    ThisStr = ThisStr & " " & ","                      '137  PF_PCT
                    ThisStr = ThisStr & " " & ","                      '138  PF_BPL
                    ThisStr = ThisStr & " " & ","                      '139  PF_INS
                    ThisStr = ThisStr & " " & ","                      '140  PF_IA
                    ThisStr = ThisStr & " " & ","                      '141  PF_FEO
                    ThisStr = ThisStr & " " & ","                      '142  PF_FEOA
                    ThisStr = ThisStr & " " & ","                      '143  PF_ALO
                    ThisStr = ThisStr & " " & ","                      '144  PF_MGO
                    ThisStr = ThisStr & " " & ","                      '145  PF_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '146  PT_TPA
                    ThisStr = ThisStr & " " & ","                      '147  PT_PCT
                    ThisStr = ThisStr & " " & ","                      '148  PT_BPL
                    ThisStr = ThisStr & " " & ","                      '149  PT_INS
                    ThisStr = ThisStr & " " & ","                      '150 PT_IA
                    ThisStr = ThisStr & " " & ","                      '151 PT_FEO
                    ThisStr = ThisStr & " " & ","                      '152 PT_FEOA
                    ThisStr = ThisStr & " " & ","                      '153 PT_ALO
                    ThisStr = ThisStr & " " & ","                      '154 PT_MGO
                    ThisStr = ThisStr & " " & ","                      '155 PT_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '156 IP_TPA
                    ThisStr = ThisStr & " " & ","                      '157 IP_PCT
                    ThisStr = ThisStr & " " & ","                      '158 IP_BPL
                    ThisStr = ThisStr & " " & ","                      '159 IP_INS
                    ThisStr = ThisStr & " " & ","                      '160 IP_IA
                    ThisStr = ThisStr & " " & ","                      '161 IP_FEO
                    ThisStr = ThisStr & " " & ","                      '162 IP_FEOA
                    ThisStr = ThisStr & " " & ","                      '163 IP_ALO
                    ThisStr = ThisStr & " " & ","                      '164 IP_MGO
                    ThisStr = ThisStr & " " & ","                      '165 IP_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '166 CN_TPA
                    ThisStr = ThisStr & " " & ","                      '167 CN_PCT
                    ThisStr = ThisStr & " " & ","                      '168 CN_BPL
                    ThisStr = ThisStr & " " & ","                      '169 CN_INS
                    ThisStr = ThisStr & " " & ","                      '170 CN_IA
                    ThisStr = ThisStr & " " & ","                      '171 CN_FEO
                    ThisStr = ThisStr & " " & ","                      '172 CN_FEOA
                    ThisStr = ThisStr & " " & ","                      '173 CN_ALO
                    ThisStr = ThisStr & " " & ","                      '174 CN_MGO
                    ThisStr = ThisStr & " " & ","                      '175 CN_CPR
                    '-----
                    ThisStr = ThisStr & " " & ","                      '176 FC_TPA
                    ThisStr = ThisStr & " " & ","                      '177 FC_PCT
                    ThisStr = ThisStr & " " & ","                      '178 FC_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '179 FF_TPA
                    ThisStr = ThisStr & " " & ","                      '180 FF_PCT
                    ThisStr = ThisStr & " " & ","                      '181 FF_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '182 FF_TPA
                    ThisStr = ThisStr & " " & ","                      '183 FF_PCT
                    ThisStr = ThisStr & " " & ","                      '184 FF_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '185 WC_TPA
                    ThisStr = ThisStr & " " & ","                      '186 WC_PCT
                    ThisStr = ThisStr & " " & ","                      '187 WC_BPL
                    '-----
                    ThisStr = ThisStr & " " & ","                      '188 MTXCLR
                    ThisStr = ThisStr & " " & ","                      '189 CONS
                    ThisStr = ThisStr & " " & ","                      '190 DIG
                    ThisStr = ThisStr & " " & ","                      '191 PUMP
                    ThisStr = ThisStr & " " & ","                      '192 LITH
                    ThisStr = ThisStr & " " & ","                      '193 PHOSCLR
                    '-----
                    'Changes 10/19/2011, lss
                    ThisStr = ThisStr & " " & ","                      '194 HP_FROM
                    ThisStr = ThisStr & " " & ","                      '195 HP_TO
                    ThisStr = ThisStr & " " & ","                      '196 HP_THCK
                    ThisStr = ThisStr & " " & ","                      '197 HP_HARD
            End Select
        End With

        Return ThisStr
    End Function

    Public Function gGetDataFromReviewSprd(ByVal aSsReview As AxvaSpread,
                                      ByVal aRowIdx As Long) As gRawProspSplRdctnType

        Try

            Dim aProspData As New gRawProspSplRdctnType()

            '"Get data back" for a row in either ssSplitReview or ssCompReview
            'and place the data in aProspData (this represents either split or
            'hole data.

            'aDataType will be "Hole" or "Split".  This is here for debugging purposes.

            '1   HoleLocation  (Description)
            '2   SplitNumber
            '3   ProspDate
            '4   MineableCalcd
            '5   MineableOride
            '6   Forty
            '7   Xcoord
            '8   Ycoord
            '9   Elevation
            '10  Ownership
            '11  MinedOutStatus
            '12  HoleType
            '13  ExpDrill
            '14  TotDepth
            '15  SplitDepthTop
            '16  SplitDepthBot
            '17  SplitThck
            '18  Override
            '19  Key
            '20  Class
            '21  Bed
            '22  Level
            '23  Horizon
            '-----
            '24  MtxxOnSpec PC
            '25  TotxOnSpec PC
            '26  MtxxAll    PC
            '27  TotxAll    PC
            '-----
            '28  MtxTpa     100%
            '29  MtxBpl
            '30  MtxDensity 100%
            '-----
            '31  OsTpa      PC
            '32  OsWtPct    PC
            '33  OsBpl      PC
            '34  OsIns      PC
            '35  OsIa       PC
            '36  OsFe       PC
            '37  OsAl       PC
            '38  OsMg       PC
            '39  OsCa       PC
            '40  OsMer      PC
            '41  OsCpr      PC
            '-----
            '42  TpbTpa     PC
            '43  TpbWtPct   PC
            '44  TpbBpl     PC
            '45  TpbIns     PC
            '46  TpbIa      PC
            '47  TpbFe      PC
            '48  TpbAl      PC
            '49  TpbMg      PC
            '50  TpbCa      PC
            '51  TpbMer     PC
            '52  TpbCpr     PC
            '-----
            '53  IpTpa      PC
            '54  IpWtPct    PC
            '55  IpBpl      PC
            '56  IpIns      PC
            '57  IpIa       PC
            '58  IpFe       PC
            '59  IpAl       PC
            '60  IpMg       PC
            '61  IpCa       PC
            '62  IpMer      PC
            '63  IpCpr      PC
            '-----
            '64  TcnTpa     PC
            '65  TcnWtPct   PC
            '66  TcnBpl     PC
            '67  TcnIns     PC
            '68  TcnIa      PC
            '69  TcnFe      PC
            '70  TcnAl      PC
            '71  TcnMg      PC
            '72  TcnCa      PC
            '73  TcnMer     PC
            '74  TcnCpr     PC
            '-----
            '75  CfdTpa     PC
            '76  CfdWtPct   PC
            '77  CfdBpl     PC
            '-----
            '78  FfdTpa     PC
            '79  FfdWtPct   PC
            '80  FfdBpl     PC
            '-----
            '81  WclTpa     PC
            '82  WclWtPct   PC
            '83  WclBpl     PC
            '-----
            '84  MtxColor
            '85  DegConsol
            '86  DigChar 1
            '87  PumpChar
            '88  Lithology
            '89  PhosphColor
            '-----
            '90  SurvCaddHoleId
            '-----
            '91  CpbTpa     PC
            '92  CpbWtPct   PC
            '93  CpbBpl     PC
            '94  CpbIns     PC
            '95  CpbIa      PC
            '96  CpbFe      PC
            '97  CpbAl      PC
            '98  CpbMg      PC
            '99  CpbCa      PC
            '100 CpbMer     PC
            '101 CpbCpr     PC
            '-----
            '102 FpbTpa     PC
            '103 FpbWtPct   PC
            '104 FpbBpl     PC
            '105 FpbIns     PC
            '106 FpbIa      PC
            '107 FpbFe      PC
            '108 FpbAl      PC
            '109 FpbMg      PC
            '110 FpbCa      PC
            '111 FpbMer     PC
            '112 FpbCpr     PC
            '-----
            '113 Barren split
            '-----
            '114 TlTpa      PC
            '115 TlWtPct    PC
            '116 TlBpl      PC
            '-----
            '117 TfdTpa     PC
            '118 TfdWtPct   PC
            '119 TfdBpl     PC
            '-----
            '120 TprTpa     PC
            '121 TprWtPct   PC
            '122 TprBpl     PC
            '123 TprIns     PC
            '124 TprIa      PC
            '125 TprFe      PC
            '126 TprAl      PC
            '127 TprMg      PC
            '128 TprCa      PC
            '129 TprMer     PC
            '130 TprCpr     PC
            '-----
            '131 OvbThk     The same for PC & 100%
            '132 ItbThk     The same for PC & 100%
            '133 MtxThk     The same for PC & 100%
            '-----
            '134 CcnTpa     PC
            '135 CcnWtPct   PC
            '136 CcnBpl     PC
            '137 CcnIns     PC
            '138 CcnIa      PC
            '139 CcnFe      PC
            '140 CcnAl      PC
            '141 CcnMg      PC
            '142 CcnCa      PC
            '143 CcnMer     PC
            '144 CcnCpr     PC
            '-----
            '145 FcnTpa     PC
            '146 FcnWtPct   PC
            '147 FcnBpl     PC
            '148 FcnIns     PC
            '149 FcnIa      PC
            '150 FcnFe      PC
            '151 FcnAl      PC
            '152 FcnMg      PC
            '153 FcnCa      PC
            '154 FcnMer     PC
            '155 FcnCpr     PC
            '-----
            '156 Sample ID
            '-----
            '157 Hardpan From
            '158 Hardpan To
            '159 Hardpan Thck
            '160 Hardpan Code
            '161 Not used
            '162 Not used
            '163 Not used
            '164 Not used
            '165 Not used
            '166 Not used
            '167 Not used
            '168 Not used
            '169 Not used
            '170 Not used
            '-----
            '171 Not used
            '172 Not used
            '173 Not used
            '174 Not used
            '175 Not used
            '176 Not used
            '177 Not used
            '178 Not used
            '179 Not used
            '180 Not used
            '181 Not used
            '182 Not used
            '183 Not used
            '184 Not used
            '185 Not used
            '186 Not used
            '187 Not used
            '188 Not used
            '189 Not used
            '-----
            '190 MineableHole     PC
            '-----
            '191 CpbMin Split     PC
            '192 FpbMin Split     PC
            '193 TpbMin Split     PC
            '194 CcnMin Split     PC
            '195 FcnMin Split     PC
            '196 TcnMin Split     PC
            '197 OsMin Split      PC
            '198 IpMin Split      PC
            '-----
            '199 Cpb100Tpa        100%
            '200 Cpb100WtPct      100%
            '201 Cpb100Bpl        100%
            '202 Cpb100Ins        100%
            '203 Cpb100Ia         100%
            '204 Cpb100Fe         100%
            '205 Cpb100Al         100%
            '206 Cpb100Mg         100%
            '207 Cpb100Ca         100%
            '208 Cpb100Mer        100%
            '209 Cpb100Cpr        100%
            '-----
            '210 Fpb100Tpa        100%
            '211 Fpb100WtPct      100%
            '212 Fpb100Bpl        100%
            '213 Fpb100Ins        100%
            '214 Fpb100Ia         100%
            '215 Fpb100Fe         100%
            '216 Fpb100Al         100%
            '217 Fpb100Mg         100%
            '218 Fpb100Ca         100%
            '219 Fpb100Mer        100%
            '220 Fpb100Cpr        100%
            '-----
            '221 Tl100Tpa         100%
            '222 Tl100WtPct       100%
            '223 Tl100Bpl         100%
            '-----
            '224 Tfd100Tpa        100%
            '225 Tfd100WtPct      100%
            '226 Tfd100Bpl        100%
            '-----
            '227 Tpr100Tpa        100%
            '228 Tpr100WtPct      100%
            '229 Tpr100Bpl        100%
            '230 Tpr100Ins        100%
            '231 Tpr100Ia         100%
            '232 Tpr100Fe         100%
            '233 Tpr100Al         100%
            '234 Tpr100Mg         100%
            '235 Tpr100Ca         100%
            '236 Tpr100Mer        100%
            '237 Tpr100Cpr        100%
            '-----
            '238 Ccn100Tpa        100%
            '239 Ccn100WtPct      100%
            '240 Ccn100Bpl        100%
            '241 Ccn100Ins        100%
            '242 Ccn100Ia         100%
            '243 Ccn100Fe         100%
            '244 Ccn100Al         100%
            '245 Ccn100Mg         100%
            '246 Ccn100Ca         100%
            '247 Ccn100Mer        100%
            '248 Ccn100Cpr        100%
            '-----
            '249 Fcn100Tpa        100%
            '250 Fcn100WtPct      100%
            '251 Fcn100Bpl        100%
            '252 Fcn100Ins        100%
            '253 Fcn100Ia         100%
            '254 Fcn100Fe         100%
            '255 Fcn100Al         100%
            '256 Fcn100Mg         100%
            '257 Fcn100Ca         100%
            '258 Fcn100Mer        100%
            '259 Fcn100Cpr        100%
            '-----
            '260 Os100Tpa         100%
            '261 Os100WtPct       100%
            '262 Os100Bpl         100%
            '263 Os100Ins         100%
            '264 Os100Ia          100%
            '265 Os100Fe          100%
            '266 Os100Al          100%
            '267 Os100Mg          100%
            '268 Os100Ca          100%
            '269 Os100Mer         100%
            '270 Os100Cpr         100%
            '-----
            '271 Tpb100Tpa        100%
            '272 Tpb100WtPct      100%
            '273 Tpb100Bpl        100%
            '274 Tpb100Ins        100%
            '275 Tpb100Ia         100%
            '276 Tpb100Fe         100%
            '277 Tpb100Al         100%
            '278 Tpb100Mg         100%
            '279 Tpb100Ca         100%
            '280 Tpb100Mer        100%
            '281 Tpb100Cpr        100%
            '-----
            '282 Ip100Tpa         100%
            '283 Ip100WtPct       100%
            '284 Ip100Bpl         100%
            '285 Ip100Ins         100%
            '286 Ip100Ia          100%
            '287 Ip100Fe          100%
            '288 Ip100Al          100%
            '289 Ip100Mg          100%
            '290 Ip100Ca          100%
            '291 Ip100Mer         100%
            '292 Ip100Cpr         100%
            '-----
            '293 Tcn100Tpa        100%
            '294 Tcn100WtPct      100%
            '295 Tcn100Bpl        100%
            '296 Tcn100Ins        100%
            '297 Tcn100Ia         100%
            '298 Tcn100Fe         100%
            '299 Tcn100Al         100%
            '300 Tcn100Mg         100%
            '301 Tcn100Ca         100%
            '302 Tcn100Mer        100%
            '303 Tcn100Cpr        100%
            '-----
            '304 Cfd100Tpa        100%
            '305 Cfd100WtPct      100%
            '306 Cfd100Bpl        100%
            '-----
            '307 Ffd100Tpa        100%
            '308 Ffd100WtPct      100%
            '309 Ffd100Bpl        100%
            '-----
            '310 Wcl100Tpa        100%
            '311 Wcl100WtPct      100%
            '312 Wcl100Bpl        100%
            '-----
            '313 MineableHole100  100%
            '314 MtxTpaPc         PC
            '-----
            '315 MtxxOnSpec100     100%  Split
            '316 TotxOnSpec100     100%  Split
            '317 MtxxAll100        100%  Split
            '318 TotxAll100        100%  Split
            '-----
            '319 CpbMinHole        PC  Hole
            '320 FpbMinHole        PC  Hole
            '321 TpbMinHole        PC  Hole
            '322 CcnMinHole        PC  Hole
            '323 FcnMinHole        PC  Hole
            '324 TcnMinHole        PC  Hole
            '325 OsMinHole         PC  Hole
            '326 IpMinHole         PC  Hole
            '-----
            '327 MtxxOnSpecPcHole  PC  Hole
            '328 TotxOnSpecPcHole  PC  Hole
            '329 MtxxAllPcHole     PC  Hole
            '330 TotxAllPcHole     PC  Hole
            '-----
            '331 MtxxOnSpec100Hole PC  Hole
            '332 TotxOnSpec100Hole PC  Hole
            '333 MtxxAll100Hole    PC  Hole
            '334 TotxAll100Hole    PC  Hole
            '-----
            '335 Mtx%Mois
            '336 Mtx%Sol
            '-----
            '337 Blank
            '338 Blank
            '339 Blank
            '340 Blank
            '341 Blank
            '342 Blank
            '343 Blank
            '344 Blank
            '345 Blank
            '346 Blank
            '-----
            '347 MpInp PC TPA
            '348 MpInp PC Wt%
            '349 MpInp PC BPL
            '350 MpInp PC Insol
            '351 MpInp PC I&A
            '352 MpInp PC Fe2O3
            '353 MpInp PC Al2O3
            '354 MpInp PC MgO
            '355 MpInp PC CaO
            '356 MpInp PC MER
            '357 MpInp PC CPR
            '-----
            '358 MpRej PC TPA
            '359 MpRej PC Wt%
            '360 MpRej PC BPL
            '361 MpRej PC Insol
            '362 MpRej PC I&A
            '363 MpRej PC Fe2O3
            '364 MpRej PC Al2O3
            '365 MpRej PC MgO
            '366 MpRej PC CaO
            '367 MpRej PC MER
            '368 MpRej PC CPR
            '-----
            '369 MpProd PC TPA
            '370 MpProd PC Wt%
            '371 MpProd PC BPL
            '372 MpProd PC Insol
            '373 MpProd PC I&A
            '374 MpProd PC Fe2O3
            '375 MpProd PC Al2O3
            '376 MpProd PC MgO
            '377 MpProd PC CaO
            '378 MpProd PC MER
            '379 MpProd PC CPR
            '-----
            '380 MpInp 100 TPA
            '381 MpInp 100 Wt%
            '382 MpInp 100 BPL
            '383 MpInp 100 Insol
            '384 MpInp 100 I&A
            '385 MpInp 100 Fe2O3
            '386 MpInp 100 Al2O3
            '387 MpInp 100 MgO
            '388 MpInp 100 CaO
            '389 MpInp 100 MER
            '390 MpInp 100 CPR
            '-----
            '391 MpRej 100 TPA
            '392 MpRej 100 Wt%
            '393 MpRej 100 BPL
            '394 MpRej 100 Insol
            '395 MpRej 100 I&A
            '396 MpRej 100 Fe2O3
            '397 MpRej 100 Al2O3
            '398 MpRej 100 MgO
            '399 MpRej 100 CaO
            '400 MpRej 100 MER
            '401 MpRej 100 CPR
            '-----
            '402 MpProd 100 TPA
            '403 MpProd 100 Wt%
            '404 MpProd 100 BPL
            '405 MpProd 100 Insol
            '406 MpProd 100 I&A
            '407 MpProd 100 Fe2O3
            '408 MpProd 100 Al2O3
            '409 MpProd 100 MgO
            '410 MpProd 100 CaO
            '411 MpProd 100 MER
            '412 MpProd 100 CPR
            '-----
            '413 MpTcn PC TPA
            '414 MpTcn PC Wt%
            '415 MpTcn PC BPL
            '416 MpTcn PC Insol
            '417 MpTcn PC I&A
            '418 MpTcn PC Fe2O3
            '419 MpTcn PC Al2O3
            '420 MpTcn PC MgO
            '421 MpTcn PC CaO
            '422 MpTcn PC MER
            '423 MpTcn PC CPR
            '-----
            '424 MpTpr PC TPA
            '425 MpTpr PC Wt%
            '426 MpTpr PC BPL
            '427 MpTpr PC Insol
            '428 MpTpr PC I&A
            '429 MpTpr PC Fe2O3
            '430 MpTpr PC Al2O3
            '431 MpTpr PC MgO
            '432 MpTpr PC CaO
            '433 MpTpr PC MER
            '434 MpTpr PC CPR
            '-----
            '435 MpTcn 100 TPA
            '436 MpTcn 100 Wt%
            '437 MpTcn 100 BPL
            '438 MpTcn 100 Insol
            '439 MpTcn 100 I&A
            '440 MpTcn 100 Fe2O3
            '441 MpTcn 100 Al2O3
            '442 MpTcn 100 MgO
            '443 MpTcn 100 CaO
            '444 MpTcn 100 MER
            '445 MpTcn 100 CPR
            '-----
            '446 MpTpr 100 TPA
            '447 MpTpr 100 Wt%
            '448 MpTpr 100 BPL
            '449 MpTpr 100 Insol
            '450 MpTpr 100 I&A
            '451 MpTpr 100 Fe2O3
            '452 MpTpr 100 Al2O3
            '453 MpTpr 100 MgO
            '454 MpTpr 100 CaO
            '455 MpTpr 100 MER
            '456 MpTpr 100 CPR
            '-----
            '457 TpbRejTpa     PC
            '458 TpbRejBpl     PC
            '459 TpbRejIns     PC
            '460 TpbRejIa      PC
            '461 TpbRejFe      PC
            '462 TpbRejAl      PC
            '463 TpbRejMg      PC
            '464 TpbRejCa      PC
            '-----
            '465 TpbRejTpa 100 %100
            '466 TpbRejBpl 100 %100
            '467 TpbRejIns 100 %100
            '468 TpbRejIa  100 %100
            '469 TpbRejFe  100 %100
            '470 TpbRejAl  100 %100
            '471 TpbRejMg  100 %100
            '472 TpbRejCa  100 %100
            '-----
            '473 OsFeAdj         PC
            '474 OsIaAdj         PC
            '475 OsMerAdj        PC
            '476 CpbFeAdj        PC
            '477 CpbIaAdj        PC
            '478 CpbMerAdj       PC
            '479 FpbFeAdj        PC
            '480 FpbIaAdj        PC
            '481 FpbMerAdj       PC
            '482 TpbFeAdj        PC
            '483 TpbIaAdj        PC
            '484 TpbMerAdj       PC
            '485 IpFeAdj         PC
            '486 IpIaAdj         PC
            '487 IpMerAdj        PC
            '488 CcnFeAdj        PC
            '489 CcnIaAdj        PC
            '490 CcnMerAdj       PC
            '491 FcnFeAdj        PC
            '492 FcnIaAdj        PC
            '493 FcnMerAdj       PC
            '494 TcnFeAdj        PC
            '495 TcnIaAdj        PC
            '496 TcnMerAdj       PC
            '497 TprFeAdj        PC
            '498 TprIaAdj        PC
            '499 TprMerAdj       PC
            '500 TpbRejFeAdj     PC
            '501 TpbRejIaAdj     PC
            '-----
            '502 Os100FeAdj      %100
            '503 Os100IaAdj      %100
            '504 Os100MerAdj     %100
            '505 Cpb100FeAdj     %100
            '506 Cpb100IaAdj     %100
            '507 Cpb100MerAdj    %100
            '508 Fpb100FeAdj     %100
            '509 Fpb100IaAdj     %100
            '510 Fpb100MerAdj    %100
            '511 Tpb100FeAdj     %100
            '512 Tpb100IaAdj     %100
            '513 Tpb100MerAdj    %100
            '514 Ip100FeAdj      %100
            '515 Ip100IaAdj      %100
            '516 Ip100MerAdj     %100
            '517 Ccn100FeAdj     %100
            '518 Ccn100IaAdj     %100
            '519 Ccn100MerAdj    %100
            '520 Fcn100FeAdj     %100
            '521 Fcn100IaAdj     %100
            '522 Fcn100MerAdj    %100
            '523 Tcn100FeAdj     %100
            '524 Tcn100IaAdj     %100
            '525 Tcn100MerAdj    %100
            '526 Tpr100FeAdj     %100
            '527 Tpr100IaAdj     %100
            '528 Tpr100MerAdj    %100
            '529 Tpb100RejFeAdj  %100
            '530 Tpb100RejIaAdj  %100
            '-----
            '09/11/2009, lss -- added 531 to 550
            '531 TcnRejTpa     PC
            '532 TcnRejBpl     PC
            '533 TcnRejIns     PC
            '534 TcnRejIa      PC
            '535 TcnRejFe      PC
            '536 TcnRejAl      PC
            '537 TcnRejMg      PC
            '538 TcnRejCa      PC
            '-----
            '539 TcnRejTpa 100 %100
            '540 TcnRejBpl 100 %100
            '541 TcnRejIns 100 %100
            '542 TcnRejIa  100 %100
            '543 TcnRejFe  100 %100
            '544 TcnRejAl  100 %100
            '545 TcnRejMg  100 %100
            '546 TcnRejCa  100 %100
            '-----
            '547 TcnRejFeAdj     PC
            '548 TcnRejIaAdj     PC
            '549 Tcn100RejFeAdj  %100
            '550 Tcn100RejIaAdj  %100
            '----------
            '06/15/2010, lss -- Added 551 to 776
            'DOLOFLOT STUFF
            '551 DfFpbInp PC TPA
            '552 DfFpbInp PC Wt%
            '553 DfFpbInp PC BPL
            '554 DfFpbInp PC Insol
            '555 DfFpbInp PC I&A
            '556 DfFpbInp PC Fe2O3
            '557 DfFpbInp PC Al2O3
            '558 DfFpbInp PC MgO
            '559 DfFpbInp PC CaO
            '560 DfFpbInp PC MER
            '561 DfFpbInp PC CPR
            '562 DfFpbInp PC Fe2O3 Adj
            '563 DfFpbInp PC I&A Adj
            '564 DfFpbInp PC MER Adj
            '-----
            '565 DfFpbRej PC TPA        Not needed!
            '566 DfFpbRej PC Wt%        Not needed!
            '567 DfFpbRej PC BPL        Not needed!
            '568 DfFpbRej PC Insol      Not needed!
            '569 DfFpbRej PC I&A        Not needed!
            '570 DfFpbRej PC Fe2O3      Not needed!
            '571 DfFpbRej PC Al2O3      Not needed!
            '572 DfFpbRej PC MgO        Not needed!
            '573 DfFpbRej PC CaO        Not needed!
            '574 DfFpbRej PC MER        Not needed!
            '575 DfFpbRej PC CPR        Not needed!
            '576 DfFpbRej PC Fe2O3 Adj  Not needed!
            '577 DfFpbRej PC I&A Adj    Not needed!
            '578 DfFpbRej PC MER Adj    Not needed!
            '-----
            '579 DfFpbProd PC TPA
            '580 DfFpbProd PC Wt%
            '581 DfFpbProd PC BPL
            '582 DfFpbProd PC Insol
            '583 DfFpbProd PC I&A
            '584 DfFpbProd PC Fe2O3
            '585 DfFpbProd PC Al2O3
            '586 DfFpbProd PC MgO
            '587 DfFpbProd PC CaO
            '588 DfFpbProd PC MER
            '589 DfFpbProd PC CPR
            '590 DfFpbProd PC Fe2O3 Adj
            '591 DfFpbProd PC I&A Adj
            '592 DfFpbProd PC MER Adj
            '-----
            '593 DfIpInp PC TPA
            '594 DfIpInp PC Wt%
            '595 DfIpInp PC BPL
            '596 DfIpInp PC Insol
            '597 DfIpInp PC I&A
            '598 DfIpInp PC Fe2O3
            '599 DfIpInp PC Al2O3
            '600 DfIpInp PC MgO
            '601 DfIpInp PC CaO
            '602 DfIpInp PC MER
            '603 DfIpInp PC CPR
            '604 DfIpInp PC Fe2O3 Adj
            '605 DfIpInp PC I&A Adj
            '606 DfIpInp PC MER Adj
            '-----
            '607 DfIpRej PC TPA          Not needed!
            '608 DfIpRej PC Wt%          Not needed!
            '609 DfIpRej PC BPL          Not needed!
            '610 DfIpRej PC Insol        Not needed!
            '611 DfIpRej PC I&A          Not needed!
            '612 DfIpRej PC Fe2O3        Not needed!
            '613 DfIpRej PC Al2O3        Not needed!
            '614 DfIpRej PC MgO          Not needed!
            '615 DfIpRej PC CaO          Not needed!
            '616 DfIpRej PC MER          Not needed!
            '617 DfIpRej PC CPR          Not needed!
            '618 DfIpRej PC Fe2O3 Adj    Not needed!
            '619 DfIpRej PC I&A Adj      Not needed!
            '620 DfIpRej PC MER Adj      Not needed!
            '-----
            '621 DfIpProd PC TPA
            '622 DfIpProd PC Wt%
            '623 DfIpProd PC BPL
            '624 DfIpProd PC Insol
            '625 DfIpProd PC I&A
            '626 DfIpProd PC Fe2O3
            '627 DfIpProd PC Al2O3
            '628 DfIpProd PC MgO
            '629 DfIpProd PC CaO
            '630 DfIpProd PC MER
            '631 DfIpProd PC CPR
            '632 DfIpProd PC Fe2O3 Adj
            '633 DfIpProd PC I&A Adj
            '634 DfIpProd PC MER Adj
            '-----
            '635 DfFpbInp 100 TPA
            '636 DfFpbInp 100 Wt%
            '637 DfFpbInp 100 BPL
            '638 DfFpbInp 100 Insol
            '639 DfFpbInp 100 I&A
            '640 DfFpbInp 100 Fe2O3
            '641 DfFpbInp 100 Al2O3
            '642 DfFpbInp 100 MgO
            '643 DfFpbInp 100 CaO
            '644 DfFpbInp 100 MER
            '645 DfFpbInp 100 CPR
            '646 DfFpbInp 100 Fe2O3 Adj
            '647 DfFpbInp 100 I&A Adj
            '648 DfFpbInp 100 MER Adj
            '-----
            '649 DfFpbRej 100 TPA         Not needed!
            '650 DfFpbRej 100 Wt%         Not needed!
            '651 DfFpbRej 100 BPL         Not needed!
            '652 DfFpbRej 100 Insol       Not needed!
            '653 DfFpbRej 100 I&A         Not needed!
            '654 DfFpbRej 100 Fe2O3       Not needed!
            '655 DfFpbRej 100 Al2O3       Not needed!
            '656 DfFpbRej 100 MgO         Not needed!
            '657 DfFpbRej 100 CaO         Not needed!
            '658 DfFpbRej 100 MER         Not needed!
            '659 DfFpbRej 100 CPR         Not needed!
            '660 DfFpbRej 100 Fe2O3 Adj   Not needed!
            '661 DfFpbRej 100 I&A Adj     Not needed!
            '662 DfFpbRej 100 MER Adj     Not needed!
            '-----
            '663 DfFpbProd 100 TPA
            '664 DfFpbProd 100 Wt%
            '665 DfFpbProd 100 BPL
            '666 DfFpbProd 100 Insol
            '667 DfFpbProd 100 I&A
            '668 DfFpbProd 100 Fe2O3
            '669 DfFpbProd 100 Al2O3
            '670 DfFpbProd 100 MgO
            '671 DfFpbProd 100 CaO
            '672 DfFpbProd 100 MER
            '673 DfFpbProd 100 CPR
            '674 DfFpbProd 100 Fe2O3 Adj
            '675 DfFpbProd 100 I&A Adj
            '676 DfFpbProd 100 MER Adj
            '-----
            '677 DfIpInp 100 TPA
            '678 DfIpInp 100 Wt%
            '679 DfIpInp 100 BPL
            '680 DfIpInp 100 Insol
            '681 DfIpInp 100 I&A
            '682 DfIpInp 100 Fe2O3
            '683 DfIpInp 100 Al2O3
            '684 DfIpInp 100 MgO
            '685 DfIpInp 100 CaO
            '686 DfIpInp 100 MER
            '687 DfIpInp 100 CPR
            '688 DfIpInp 100 Fe2O3 Adj
            '689 DfIpInp 100 I&A Adj
            '690 DfIpInp 100 MER Adj
            '-----
            '691 DfIpRej 100 TPA         Not needed!
            '692 DfIpRej 100 Wt%         Not needed!
            '693 DfIpRej 100 BPL         Not needed!
            '694 DfIpRej 100 Insol       Not needed!
            '695 DfIpRej 100 I&A         Not needed!
            '696 DfIpRej 100 Fe2O3       Not needed!
            '697 DfIpRej 100 Al2O3       Not needed!
            '698 DfIpRej 100 MgO         Not needed!
            '699 DfIpRej 100 CaO         Not needed!
            '700 DfIpRej 100 MER         Not needed!
            '701 DfIpRej 100 CPR         Not needed!
            '702 DfIpRej 100 Fe2O3 Adj   Not needed!
            '703 DfIpRej 100 I&A Adj     Not needed!
            '704 DfIpRej 100 MER Adj     Not needed!
            '-----
            '705 DfIpProd 100 TPA
            '706 DfIpProd 100 Wt%
            '707 DfIpProd 100 BPL
            '708 DfIpProd 100 Insol
            '709 DfIpProd 100 I&A
            '710 DfIpProd 100 Fe2O3
            '711 DfIpProd 100 Al2O3
            '712 DfIpProd 100 MgO
            '713 DfIpProd 100 CaO
            '714 DfIpProd 100 MER
            '715 DfIpProd 100 CPR
            '716 DfIpProd 100 Fe2O3 Adj
            '717 DfIpProd 100 I&A Adj
            '718 DfIpProd 100 MER Adj
            '-----
            '719 DfTcn PC TPA
            '720 DfTcn PC Wt%
            '721 DfTcn PC BPL
            '722 DfTcn PC Insol
            '723 DfTcn PC I&A
            '724 DfTcn PC Fe2O3
            '725 DfTcn PC Al2O3
            '726 DfTcn PC MgO
            '727 DfTcn PC CaO
            '728 DfTcn PC MER
            '729 DfTcn PC CPR
            '730 DfTcn PC Fe2O3 Adj
            '731 DfTcn PC I&A Adj
            '732 DfTcn PC MER Adj
            '-----
            '733 DfTpr PC TPA
            '734 DfTpr PC Wt%
            '735 DfTpr PC BPL
            '736 DfTpr PC Insol
            '737 DfTpr PC I&A
            '738 DfTpr PC Fe2O3
            '739 DfTpr PC Al2O3
            '740 DfTpr PC MgO
            '741 DfTpr PC CaO
            '742 DfTpr PC MER
            '743 DfTpr PC CPR
            '744 DfTpr PC Fe2O3 Adj
            '745 DfTpr PC I&A Adj
            '746 DfTpr PC MER Adj
            '-----
            '747 DfTcn 100 TPA
            '748 DfTcn 100 Wt%
            '749 DfTcn 100 BPL
            '750 DfTcn 100 Insol
            '751 DfTcn 100 I&A
            '752 DfTcn 100 Fe2O3
            '753 DfTcn 100 Al2O3
            '754 DfTcn 100 MgO
            '755 DfTcn 100 CaO
            '756 DfTcn 100 MER
            '757 DfTcn 100 CPR
            '758 DfTcn 100 Fe2O3 Adj
            '759 DfTcn 100 I&A Adj
            '760 DfTcn 100 MER Adj
            '-----
            '761 DfTpr 100 TPA
            '762 DfTpr 100 Wt%
            '763 DfTpr 100 BPL
            '764 DfTpr 100 Insol
            '765 DfTpr 100 I&A
            '766 DfTpr 100 Fe2O3
            '767 DfTpr 100 Al2O3
            '768 DfTpr 100 MgO
            '769 DfTpr 100 CaO
            '770 DfTpr 100 MER
            '771 DfTpr 100 CPR
            '772 DfTpr 100 Fe2O3 Adj
            '773 DfTpr 100 I&A Adj
            '774 DfTpr 100 MER Adj
            '-----
            '775 FpbMgoOffSpec   Split  PC
            '776 IpMgoOffSpec    Split  PC
            '-----
            '777 CpbRejTpa     PC
            '778 CpbRejWtPct   PC
            '779 CpbRejBpl     PC
            '780 CpbRejIns     PC
            '781 CpbRejIa      PC
            '782 CpbRejFe      PC
            '783 CpbRejAl      PC
            '784 CpbRejMg      PC
            '785 CpbRejCa      PC
            '786 CpbRejMer     PC
            '787 CpbRejCpr     PC
            '788 CpbRejFeAdj   PC
            '789 CpbRejIaAdj   PC
            '790 CpbRejMerAdj  PC
            '-----
            '791 CpbRejTpa     100%
            '792 CpbRejWtPct   100%
            '793 CpbRejBpl     100%
            '794 CpbRejIns     100%
            '795 CpbRejIa      100%
            '796 CpbRejFe      100%
            '797 CpbRejAl      100%
            '798 CpbRejMg      100%
            '799 CpbRejCa      100%
            '800 CpbRejMer     100%
            '801 CpbRejCpr     100%
            '802 CpbRejFeAdj   100%
            '803 CpbRejIaAdj   100%
            '804 CpbRejMerAdj  100%
            '-----
            '805 MpInp PC Fe2O3 Adj
            '806 MpInp PC I&A Adj
            '807 MpRej PC Fe2O3 Adj
            '808 MpRej PC I&A Adj
            '809 MpProd PC Fe2O3 Adj
            '810 MpProd PC I&A Adj
            '811 MpTcn PC Fe2O3 Adj
            '812 MpTcn PC I&A Adj
            '813 MpTpr PC Fe2O3 Adj
            '814 MpTpr PC I&A Adj
            '-----
            '815 MpInp 100 Fe2O3 Adj
            '816 MpInp 100 I&A Adj
            '817 MpRej 100 Fe2O3 Adj
            '818 MpRej 100 I&A Adj
            '819 MpProd 100 Fe2O3 Adj
            '820 MpProd 100 I&A Adj
            '821 MpTcn 100 Fe2O3 Adj
            '822 MpTcn 100 I&A Adj
            '823 MpTpr 100 Fe2O3 Adj
            '824 MpTpr 100 I&A Adj

            Dim ThisSec As Integer
            Dim ThisTwp As Integer
            Dim ThisRge As Integer
            Dim ThisHole As String
            Dim ThisHoleId As String

            With aSsReview
                .Row = aRowIdx
                .Col = 1
                aProspData.HoleDesc = .Text     'TT-RR-SS HHHH
                ThisTwp = Val(Mid(.Text, 1, 2))
                ThisRge = Val(Mid(.Text, 4, 2))
                ThisSec = Val(Mid(.Text, 7, 2))
                ThisHole = Mid(.Text, 10)
                ThisHoleId = Mid(.Text, 4, 2) & Mid(.Text, 7, 2) & Mid(.Text, 1, 2) &
                             Mid(.Text, 10)
                aProspData.SurvCaddHoleId = ThisHoleId
                aProspData.Section = ThisSec
                aProspData.Township = ThisTwp
                aProspData.Range = ThisRge
                aProspData.HoleLocation = ThisHole

                .Col = 2    'Split#
                aProspData.SplitNumber = Val(.Value)
                .Col = 3    'Prospect date
                aProspData.ProspDate = .Text
                .Col = 4    'Mineability calculated ("M" = Mineable, "U" = Unmineable)
                aProspData.MineableCalcd = .Text
                .Col = 5    'Mineability override ("M" = Mineable, "U" = Unmineable)
                aProspData.MineableOride = .Text
                .Col = 6    'Forty
                aProspData.Forty = Val(.Value)
                .Col = 7    'Xcoord
                aProspData.Xcoord = Val(.Value)
                .Col = 8    'Ycoord
                aProspData.Ycoord = Val(.Value)
                .Col = 9    'Elevation
                aProspData.Elevation = Val(.Value)
                .Col = 10   'Ownership
                aProspData.Ownership = .Text
                .Col = 11   'Minedout status (0 = Not mined, 1 = Mined)
                aProspData.MinedOutStatus = Val(.Value)
                .Col = 12   'Hole type (0 = Auger, 1 = Rotary)
                aProspData.HoleType = .Text
                .Col = 13   'Expanded prospect hole  ("E" = Expanded otherwise blank)
                aProspData.ExpDrill = .Text
                .Col = 14   'Total hole depth
                aProspData.TotDepth = Val(.Value)
                .Col = 15   'Depth to split top
                aProspData.SplitDepthTop = Val(.Value)
                .Col = 16   'Depth to split bottom
                aProspData.SplitDepthBot = Val(.Value)
                .Col = 17   'Split thickness
                aProspData.SplitThck = Val(.Value)
                .Col = 18   'Override  ("A" = Automatic, "M" = Manual)
                aProspData.Override = .Text
                .Col = 19   'Key  (1 = Key, 0 = Non-Key
                aProspData.Key = Val(.Value)
                .Col = 20   'Class
                aProspData.cClass = .Text
                .Col = 21   'Bed
                aProspData.Bed = .Text
                .Col = 22   'Level
                aProspData.Level = .Text
                .Col = 23   'Horizon
                aProspData.Horizon = .Text
                .Col = 24   'Mtx "X" based on On-Spec tons    PC
                aProspData.MtxxOnSpec = Val(.Value)
                .Col = 25   'Tot "X" based on On-Spec tons    PC
                aProspData.TotxOnSpec = Val(.Value)
                .Col = 26   'Mtx "X" based on all tons        PC
                aProspData.MtxxAll = Val(.Value)
                .Col = 27   'Tot "X" based on all tons        PC
                aProspData.TotxAll = Val(.Value)
                .Col = 28   'Mtx TPA                          100%
                aProspData.MtxTPA = Val(.Value)
                .Col = 29   'Mtx BPL
                aProspData.MtxBPL = Val(.Value)
                .Col = 30   'Mtx density
                aProspData.MtxDensity = Val(.Value)
                '-----
                .Col = 31   'Oversize TPA    PC
                aProspData.Os.Tpa = Val(.Value)
                .Col = 32   'Oversize Wt%    PC
                aProspData.Os.WtPct = Val(.Value)
                .Col = 33   'Oversize BPL    PC
                aProspData.Os.Bpl = Val(.Value)
                .Col = 34   'Oversize Insol  PC
                aProspData.Os.Ins = Val(.Value)
                .Col = 35   'Oversize I&A    PC
                aProspData.Os.Ia = Val(.Value)
                .Col = 36   'Oversize Fe2O3  PC
                aProspData.Os.Fe = Val(.Value)
                .Col = 37   'Oversize Al2O3  PC
                aProspData.Os.Al = Val(.Value)
                .Col = 38   'Oversize MgO    PC
                aProspData.Os.Mg = Val(.Value)
                .Col = 39   'Oversize CaO    PC
                aProspData.Os.Ca = Val(.Value)
                .Col = 40   'Oversize MER    PC
                'Don't need to get this.
                .Col = 41   'Oversize CPR    PC
                'Don't need to get this.
                '-----
                .Col = 42   'Tpb TPA    PC
                aProspData.Tpb.Tpa = Val(.Value)
                .Col = 43   'Tpb Wt%    PC
                aProspData.Tpb.WtPct = Val(.Value)
                .Col = 44   'Tpb BPL    PC
                aProspData.Tpb.Bpl = Val(.Value)
                .Col = 45   'Tpb Insol  PC
                aProspData.Tpb.Ins = Val(.Value)
                .Col = 46   'Tpb I&A    PC
                aProspData.Tpb.Ia = Val(.Value)
                .Col = 47   'Tpb Fe2O3  PC
                aProspData.Tpb.Fe = Val(.Value)
                .Col = 48   'Tpb Al2O3  PC
                aProspData.Tpb.Al = Val(.Value)
                .Col = 49   'Tpb MgO    PC
                aProspData.Tpb.Mg = Val(.Value)
                .Col = 50   'Tpb CaO    PC
                aProspData.Tpb.Ca = Val(.Value)
                .Col = 51   'Tpb MER    PC
                'Don't need to get this.
                .Col = 52   'Tpb CPR    PC
                'Don't need to get this.
                '-----
                .Col = 53   'IP TPA     PC
                aProspData.Ip.Tpa = Val(.Value)
                .Col = 54   'IP Wt%     PC
                aProspData.Ip.WtPct = Val(.Value)
                .Col = 55   'IP BPL     PC
                aProspData.Ip.Bpl = Val(.Value)
                .Col = 56   'IP Insol   PC
                aProspData.Ip.Ins = Val(.Value)
                .Col = 57   'IP I&A     PC
                aProspData.Ip.Ia = Val(.Value)
                .Col = 58   'IP Fe2O3   PC
                aProspData.Ip.Fe = Val(.Value)
                .Col = 59   'IP Al2O3   PC
                aProspData.Ip.Al = Val(.Value)
                .Col = 60   'IP MgO     PC
                aProspData.Ip.Mg = Val(.Value)
                .Col = 61   'IP CaO     PC
                aProspData.Ip.Ca = Val(.Value)
                .Col = 62   'IP MER     PC
                'Don't need to get this.
                .Col = 63   'IP CPR     PC
                'Don't need to get this.
                '-----
                .Col = 64   'Tcn TPA    PC
                aProspData.Tcn.Tpa = Val(.Value)
                .Col = 65   'Tcn Wt%    PC
                aProspData.Tcn.WtPct = Val(.Value)
                .Col = 66   'Tcn BPL    PC
                aProspData.Tcn.Bpl = Val(.Value)
                .Col = 67   'Tcn Insol  PC
                aProspData.Tcn.Ins = Val(.Value)
                .Col = 68   'Tcn I&A    PC
                aProspData.Tcn.Ia = Val(.Value)
                .Col = 69   'Tcn Fe2O3  PC
                aProspData.Tcn.Fe = Val(.Value)
                .Col = 70   'Tcn Al2O3  PC
                aProspData.Tcn.Al = Val(.Value)
                .Col = 71   'Tcn MgO    PC
                aProspData.Tcn.Mg = Val(.Value)
                .Col = 72   'Tcn CaO    PC
                aProspData.Tcn.Ca = Val(.Value)
                .Col = 73   'Tcn MER    PC
                'Don't need to get this.
                .Col = 74   'Tcn CPR    PC
                'Don't need to get this.
                '-----
                .Col = 75   'CrsFd      PC
                aProspData.Cfd.Tpa = Val(.Value)
                .Col = 76   'CrsFd      PC
                aProspData.Cfd.WtPct = Val(.Value)
                .Col = 77   'CrsFd      PC
                aProspData.Cfd.Bpl = Val(.Value)
                '-----
                .Col = 78   'FneFd      PC
                aProspData.Ffd.Tpa = Val(.Value)
                .Col = 79   'FneFd      PC
                aProspData.Ffd.WtPct = Val(.Value)
                .Col = 80   'FneFd      PC
                aProspData.Ffd.Bpl = Val(.Value)
                '-----
                .Col = 81   'WCly       PC
                aProspData.Wcl.Tpa = Val(.Value)
                .Col = 82   'WCly       PC
                aProspData.Wcl.WtPct = Val(.Value)
                .Col = 83   'WCly       PC
                aProspData.Wcl.Bpl = Val(.Value)
                '-----
                .Col = 84   'Mtx color
                aProspData.MtxColor = .Text
                .Col = 85   'Deg consol
                aProspData.DegConsol = .Text
                .Col = 86   'Dig char
                aProspData.DigChar = .Text
                .Col = 87   'Pump char
                aProspData.PumpChar = .Text
                .Col = 88   'Lithology
                aProspData.Lithology = .Text
                .Col = 89   'Phosph color
                aProspData.PhosphColor = .Text
                '-----
                .Col = 90   'SurvCADD Hole ID
                aProspData.SurvCaddHoleId = .Text
                '-----
                .Col = 91   'Cpb TPA    PC
                aProspData.Cpb.Tpa = Val(.Value)
                .Col = 92   'Cpb Wt%    PC
                aProspData.Cpb.WtPct = Val(.Value)
                .Col = 93   'Cpb BPL    PC
                aProspData.Cpb.Bpl = Val(.Value)
                .Col = 94   'Cpb Insol  PC
                aProspData.Cpb.Ins = Val(.Value)
                .Col = 95   'Cpb I&A    PC
                aProspData.Cpb.Ia = Val(.Value)
                .Col = 96   'Cpb Fe2O3  PC
                aProspData.Cpb.Fe = Val(.Value)
                .Col = 97   'Cpb Al2O3  PC
                aProspData.Cpb.Al = Val(.Value)
                .Col = 98   'Cpb MgO    PC
                aProspData.Cpb.Mg = Val(.Value)
                .Col = 99   'Cpb CaO    PC
                aProspData.Cpb.Ca = Val(.Value)
                .Col = 100  'Cpb MER    PC
                'Don't need to get this.
                .Col = 101  'Cpb CPR    PC
                'Don't need to get this.
                '-----
                .Col = 102  'Fpb TPA    PC
                aProspData.Fpb.Tpa = Val(.Value)
                .Col = 103  'Fpb Wt%    PC
                aProspData.Fpb.WtPct = Val(.Value)
                .Col = 104  'Fpb BPL    PC
                aProspData.Fpb.Bpl = Val(.Value)
                .Col = 105  'Fpb Insol  PC
                aProspData.Fpb.Ins = Val(.Value)
                .Col = 106  'Fpb I&A    PC
                aProspData.Fpb.Ia = Val(.Value)
                .Col = 107  'Fpb Fe2O3  PC
                aProspData.Fpb.Fe = Val(.Value)
                .Col = 108  'Fpb Al2O3  PC
                aProspData.Fpb.Al = Val(.Value)
                .Col = 109  'Fpb MgO    PC
                aProspData.Fpb.Mg = Val(.Value)
                .Col = 110  'Fpb CaO    PC
                aProspData.Fpb.Ca = Val(.Value)
                .Col = 111  'Fpb MER    PC
                'Don't need to get this.
                .Col = 112  'Fpb CPR    PC
                'Don't need to get this.
                '-----
                .Col = 113  'Barren split
                aProspData.SplitBarren = Val(.Value)
                '-----
                .Col = 114  'Ttl Wt%    PC
                aProspData.Ttl.Tpa = Val(.Value)
                .Col = 115  'Ttl TPA    PC
                aProspData.Ttl.WtPct = Val(.Value)
                .Col = 116  'Ttl BPL    PC
                aProspData.Ttl.Bpl = Val(.Value)
                '-----
                .Col = 117  'Tfd TPA    PC
                aProspData.Tfd.Tpa = Val(.Value)
                .Col = 118  'Tfd Wt%    PC
                aProspData.Tfd.WtPct = Val(.Value)
                .Col = 119  'Tfd BPL    PC
                aProspData.Tfd.Bpl = Val(.Value)
                '-----
                .Col = 120  'Tpr TPA    PC
                aProspData.Tpr.Tpa = Val(.Value)
                .Col = 121  'Tpr Wt%    PC
                aProspData.Tpr.WtPct = Val(.Value)
                .Col = 122  'Tpr BPL    PC
                aProspData.Tpr.Bpl = Val(.Value)
                .Col = 123  'Tpr Insol  PC
                aProspData.Tpr.Ins = Val(.Value)
                .Col = 124  'Tpr I&A    PC
                aProspData.Tpr.Ia = Val(.Value)
                .Col = 125  'Tpr Fe2O3  PC
                aProspData.Tpr.Fe = Val(.Value)
                .Col = 126  'Tpr Al2O3  PC
                aProspData.Tpr.Al = Val(.Value)
                .Col = 127  'Tpr MgO    PC
                aProspData.Tpr.Mg = Val(.Value)
                .Col = 128  'Tpr CaO    PC
                aProspData.Tpr.Ca = Val(.Value)
                .Col = 129  'Tpr MER    PC
                'Don't need to get this.
                .Col = 130  'Tpr CPR    PC
                'Don't need to get this.
                '-----
                .Col = 131
                aProspData.OvbThk = Val(.Value)   'Same for both PC & 100%
                .Col = 132
                aProspData.ItbThk = Val(.Value)   'Same for both PC & 100%
                aProspData.WstThk = Val(.Value)   'Same for both PC & 100%
                .Col = 133
                aProspData.MtxThk = Val(.Value)   'Same for both PC & 100%
                '-----
                .Col = 134  'Ccn TPA    PC
                aProspData.Ccn.Tpa = Val(.Value)
                .Col = 135  'Ccn Wt%    PC
                aProspData.Ccn.WtPct = Val(.Value)
                .Col = 136  'Ccn BPL    PC
                aProspData.Ccn.Bpl = Val(.Value)
                .Col = 137  'Ccn Insol  PC
                aProspData.Ccn.Ins = Val(.Value)
                .Col = 138  'Ccn I&A    PC
                aProspData.Ccn.Ia = Val(.Value)
                .Col = 139  'Ccn Fe2O3  PC
                aProspData.Ccn.Fe = Val(.Value)
                .Col = 140  'Ccn Al2O3  PC
                aProspData.Ccn.Al = Val(.Value)
                .Col = 141  'Ccn MgO    PC
                aProspData.Ccn.Mg = Val(.Value)
                .Col = 142  'Ccn CaO    PC
                aProspData.Ccn.Ca = Val(.Value)
                .Col = 143  'Ccn MER    PC
                'Don't need to get this.
                .Col = 144  'Ccn CPR    PC
                'Don't need to get this.
                '-----
                .Col = 145  'Fcn TPA    PC
                aProspData.Fcn.Tpa = Val(.Value)
                .Col = 146  'Fcn Wt%    PC
                aProspData.Fcn.WtPct = Val(.Value)
                .Col = 147  'Fcn BPL    PC
                aProspData.Fcn.Bpl = Val(.Value)
                .Col = 148  'Fcn Insol  PC
                aProspData.Fcn.Ins = Val(.Value)
                .Col = 149  'Fcn I&A    PC
                aProspData.Fcn.Ia = Val(.Value)
                .Col = 150  'Fcn Fe2O3  PC
                aProspData.Fcn.Fe = Val(.Value)
                .Col = 151  'Fcn Al2O3  PC
                aProspData.Fcn.Al = Val(.Value)
                .Col = 152  'Fcn MgO    PC
                aProspData.Fcn.Mg = Val(.Value)
                .Col = 153  'Fcn CaO    PC
                aProspData.Fcn.Ca = Val(.Value)
                .Col = 154  'Fcn MER    PC
                'Don't need to get this.
                .Col = 155  'Fcn CPR    PC
                'Don't need to get this.
                '-----
                .Col = 156  'Sample ID
                aProspData.SampleId = .Text
                '-----
                'Changes 10/19/2011, lss
                .Col = 157
                aProspData.HardpanFrom = .Value
                .Col = 158
                aProspData.HardpanTo = .Value
                .Col = 159
                aProspData.HardpanThck = .Value
                .Col = 160
                aProspData.HardpanCode = .Text
                '-----
                'Col = 161 to Col = 170  Not used
                'Col = 171 to Col = 189  Not used
                '-----
                .Col = 190  'Mineable hole  PC
                aProspData.MineableHole = .Text
                '-----
                .Col = 191  'Cpb mineable split (Based on PC data)
                aProspData.CpbOnSpec = .Text    'Yes, No, ND
                .Col = 192  'Fpb mineable split (Based on PC data)
                aProspData.FpbOnSpec = .Text    'Yes, No, ND
                .Col = 193  'Tpb mineable split (Based on PC data)
                aProspData.TpbOnSpec = .Text    'Yes, No, ND
                .Col = 194  'Ccn mineable split (Based on PC data)
                aProspData.CcnOnSpec = .Text    'Yes, No, ND
                .Col = 195  'Fcn mineable split (Based on PC data)
                aProspData.FcnOnSpec = .Text    'Yes, No, ND
                .Col = 196  'Tcn mineable split (Based on PC data)
                aProspData.TcnOnSpec = .Text    'Yes, No, ND
                .Col = 197  'Os mineable split  (Based on PC data)
                aProspData.OsOnSpec = .Text     'Yes, No, ND
                .Col = 198  'IP mineable split  (Based on PC data)
                aProspData.IpOnSpec = .Text     'Yes, No, ND
                '-----
                .Col = 199  'Cpb TPA    100%
                aProspData.Cpb100.Tpa = Val(.Value)
                .Col = 200  'Cpb Wt%    100%
                aProspData.Cpb100.WtPct = Val(.Value)
                .Col = 201  'Cpb BPL    100%
                aProspData.Cpb100.Bpl = Val(.Value)
                .Col = 202  'Cpb Insol  100%
                aProspData.Cpb100.Ins = Val(.Value)
                .Col = 203  'Cpb I&A    100%
                aProspData.Cpb100.Ia = Val(.Value)
                .Col = 204  'Cpb Fe2O3  100%
                aProspData.Cpb100.Fe = Val(.Value)
                .Col = 205  'Cpb Al2O3  100%
                aProspData.Cpb100.Al = Val(.Value)
                .Col = 206  'Cpb MgO    100%
                aProspData.Cpb100.Mg = Val(.Value)
                .Col = 207  'Cpb CaO    100%
                aProspData.Cpb100.Ca = Val(.Value)
                .Col = 208  'Cpb MER    100%
                'Don't need to get this.
                .Col = 209  'Cpb CPR    100%
                'Don't need to get this.
                '-----
                .Col = 210  'Fpb TPA    100%
                aProspData.Fpb100.Tpa = Val(.Value)
                .Col = 211  'Fpb Wt%    100%
                aProspData.Fpb100.WtPct = Val(.Value)
                .Col = 212  'Fpb BPL    100%
                aProspData.Fpb100.Bpl = Val(.Value)
                .Col = 213  'Fpb Insol  100%
                aProspData.Fpb100.Ins = Val(.Value)
                .Col = 214  'Fpb I&A    100%
                aProspData.Fpb100.Ia = Val(.Value)
                .Col = 215  'Fpb Fe2O3  100%
                aProspData.Fpb100.Fe = Val(.Value)
                .Col = 216  'Fpb Al2O3  100%
                aProspData.Fpb100.Al = Val(.Value)
                .Col = 217  'Fpb MgO    100%
                aProspData.Fpb100.Mg = Val(.Value)
                .Col = 218  'Fpb CaO    100%
                aProspData.Fpb100.Ca = Val(.Value)
                .Col = 219  'Fpb MER    100%
                'Don't need to get this.
                .Col = 220  'Fpb CPR    100%
                'Don't need to get this.
                '-----
                .Col = 221  'Ttl Wt%    100%
                aProspData.Ttl100.Tpa = Val(.Value)
                .Col = 222  'Ttl TPA    100%
                aProspData.Ttl100.WtPct = Val(.Value)
                .Col = 223  'Ttl BPL    100%
                aProspData.Ttl100.Bpl = Val(.Value)
                '-----
                .Col = 224  'Tfd TPA    100%
                aProspData.Tfd100.Tpa = Val(.Value)
                .Col = 225  'Tfd Wt%    100%
                aProspData.Tfd100.WtPct = Val(.Value)
                .Col = 226  'Tfd BPL    100%
                aProspData.Tfd100.Bpl = Val(.Value)
                '-----
                .Col = 227  'Tpr TPA    100%
                aProspData.Tpr100.Tpa = Val(.Value)
                .Col = 228  'Tpr Wt%    100%
                aProspData.Tpr100.WtPct = Val(.Value)
                .Col = 229  'Tpr BPL    100%
                aProspData.Tpr100.Bpl = Val(.Value)
                .Col = 230  'Tpr Insol  100%
                aProspData.Tpr100.Ins = Val(.Value)
                .Col = 231  'Tpr I&A    100%
                aProspData.Tpr100.Ia = Val(.Value)
                .Col = 232  'Tpr Fe2O3  100%
                aProspData.Tpr100.Fe = Val(.Value)
                .Col = 233  'Tpr Al2O3  100%
                aProspData.Tpr100.Al = Val(.Value)
                .Col = 234  'Tpr MgO    100%
                aProspData.Tpr100.Mg = Val(.Value)
                .Col = 235  'Tpr CaO    100%
                aProspData.Tpr100.Ca = Val(.Value)
                .Col = 236  'Tpr MER    100%
                'Don't need to get this.
                .Col = 237  'Tpr CPR    100%
                'Don't need to get this.
                '-----
                .Col = 238  'Ccn TPA    100%
                aProspData.Ccn100.Tpa = Val(.Value)
                .Col = 239  'Ccn Wt%    100%
                aProspData.Ccn100.WtPct = Val(.Value)
                .Col = 240  'Ccn BPL    100%
                aProspData.Ccn100.Bpl = Val(.Value)
                .Col = 241  'Ccn Insol  100%
                aProspData.Ccn100.Ins = Val(.Value)
                .Col = 242  'Ccn I&A    100%
                aProspData.Ccn100.Ia = Val(.Value)
                .Col = 243  'Ccn Fe2O3  100%
                aProspData.Ccn100.Fe = Val(.Value)
                .Col = 244  'Ccn Al2O3  100%
                aProspData.Ccn100.Al = Val(.Value)
                .Col = 245  'Ccn MgO    100%
                aProspData.Ccn100.Mg = Val(.Value)
                .Col = 246  'Ccn CaO    100%
                aProspData.Ccn100.Ca = Val(.Value)
                .Col = 247  'Ccn MER    100%
                'Don't need to get this.
                .Col = 248  'Ccn CPR    100%
                'Don't need to get this.
                '-----
                .Col = 249  'Fcn TPA    100%
                aProspData.Fcn100.Tpa = Val(.Value)
                .Col = 250  'Fcn Wt%    100%
                aProspData.Fcn100.WtPct = Val(.Value)
                .Col = 251  'Fcn BPL    100%
                aProspData.Fcn100.Bpl = Val(.Value)
                .Col = 252  'Fcn Insol  100%
                aProspData.Fcn100.Ins = Val(.Value)
                .Col = 253  'Fcn I&A    100%
                aProspData.Fcn100.Ia = Val(.Value)
                .Col = 254  'Fcn Fe2O3  100%
                aProspData.Fcn100.Fe = Val(.Value)
                .Col = 255  'Fcn Al2O3  100%
                aProspData.Fcn100.Al = Val(.Value)
                .Col = 256  'Fcn MgO    100%
                aProspData.Fcn100.Mg = Val(.Value)
                .Col = 257  'Fcn CaO    100%
                aProspData.Fcn100.Ca = Val(.Value)
                .Col = 258  'Fcn MER    100%
                'Don't need to get this.
                .Col = 259  'Fcn CPR    100%
                'Don't need to get this.
                '-----
                .Col = 260  'Os TPA     100%
                aProspData.Os100.Tpa = Val(.Value)
                .Col = 261  'Os Wt%     100%
                aProspData.Os100.WtPct = Val(.Value)
                .Col = 262  'Os BPL     100%
                aProspData.Os100.Bpl = Val(.Value)
                .Col = 263  'Os Insol   100%
                aProspData.Os100.Ins = Val(.Value)
                .Col = 264  'Os I&A     100%
                aProspData.Os100.Ia = Val(.Value)
                .Col = 265  'Os Fe2O3   100%
                aProspData.Os100.Fe = Val(.Value)
                .Col = 266  'Os Al2O3   100%
                aProspData.Os100.Al = Val(.Value)
                .Col = 267  'Os MgO     100%
                aProspData.Os100.Mg = Val(.Value)
                .Col = 268  'Os CaO     100%
                aProspData.Os100.Ca = Val(.Value)
                .Col = 269  'Os MER     100%
                'Don't need to get this.
                .Col = 270  'Os CPR     100%
                'Don't need to get this.
                '-----
                .Col = 271  'Tpb TPA    100%
                aProspData.Tpb100.Tpa = Val(.Value)
                .Col = 272  'Tpb Wt%    100%
                aProspData.Tpb100.WtPct = Val(.Value)
                .Col = 273  'Tpb BPL    100%
                aProspData.Tpb100.Bpl = Val(.Value)
                .Col = 274  'Tpb Insol  100%
                aProspData.Tpb100.Ins = Val(.Value)
                .Col = 275  'Tpb I&A    100%
                aProspData.Tpb100.Ia = Val(.Value)
                .Col = 276  'Tpb Fe2O3  100%
                aProspData.Tpb100.Fe = Val(.Value)
                .Col = 277  'Tpb Al2O3  100%
                aProspData.Tpb100.Al = Val(.Value)
                .Col = 278  'Tpb MgO    100%
                aProspData.Tpb100.Mg = Val(.Value)
                .Col = 279  'Tpb CaO    100%
                aProspData.Tpb100.Ca = Val(.Value)
                .Col = 280  'Tpb MER    100%
                'Don't need to get this.
                .Col = 281  'Tpb CPR    100%
                'Don't need to get this.
                '-----
                .Col = 282  'IP TPA     100%
                aProspData.Ip100.Tpa = Val(.Value)
                .Col = 283  'IP Wt%     100%
                aProspData.Ip100.WtPct = Val(.Value)
                .Col = 284  'IP BPL     100%
                aProspData.Ip100.Bpl = Val(.Value)
                .Col = 285  'IP Insol   100%
                aProspData.Ip100.Ins = Val(.Value)
                .Col = 286  'IP I&A     100%
                aProspData.Ip100.Ia = Val(.Value)
                .Col = 287  'IP Fe2O3   100%
                aProspData.Ip100.Fe = Val(.Value)
                .Col = 288  'IP Al2O3   100%
                aProspData.Ip100.Al = Val(.Value)
                .Col = 289  'IP MgO     100%
                aProspData.Ip100.Mg = Val(.Value)
                .Col = 290  'IP CaO     100%
                aProspData.Ip100.Ca = Val(.Value)
                .Col = 291  'IP MER     100%
                'Don't need to get this.
                .Col = 292  'IP CPR     100%
                'Don't need to get this.
                '-----
                .Col = 293  'Tcn TPA    100%
                aProspData.Tcn100.Tpa = Val(.Value)
                .Col = 294  'Tcn Wt%    100%
                aProspData.Tcn100.WtPct = Val(.Value)
                .Col = 295  'Tcn BPL    100%
                aProspData.Tcn100.Bpl = Val(.Value)
                .Col = 296  'Tcn Insol  100%
                aProspData.Tcn100.Ins = Val(.Value)
                .Col = 297  'Tcn I&A    100%
                aProspData.Tcn100.Ia = Val(.Value)
                .Col = 298  'Tcn Fe2O3  100%
                aProspData.Tcn100.Fe = Val(.Value)
                .Col = 299  'Tcn Al2O3  100%
                aProspData.Tcn100.Al = Val(.Value)
                .Col = 300  'Tcn MgO    100%
                aProspData.Tcn100.Mg = Val(.Value)
                .Col = 301  'Tcn CaO    100%
                aProspData.Tcn100.Ca = Val(.Value)
                .Col = 302  'Tcn MER    100%
                'Don't need to get this.
                .Col = 303  'Tcn CPR    100%
                'Don't need to get this.
                '-----
                .Col = 304  'CrsFd      100%
                aProspData.Cfd100.Tpa = Val(.Value)
                .Col = 305  'CrsFd      100%
                aProspData.Cfd100.WtPct = Val(.Value)
                .Col = 306  'CrsFd      100%
                aProspData.Cfd100.Bpl = Val(.Value)
                '-----
                .Col = 307  'FneFd      100%
                aProspData.Ffd100.Tpa = Val(.Value)
                .Col = 308  'FneFd      100%
                aProspData.Ffd100.WtPct = Val(.Value)
                .Col = 309  'FneFd      100%
                aProspData.Ffd100.Bpl = Val(.Value)
                '-----
                .Col = 310  'WCly       100%
                aProspData.Wcl100.Tpa = Val(.Value)
                .Col = 311  'WCly       100%
                aProspData.Wcl100.WtPct = Val(.Value)
                .Col = 312  'WCly       100%
                aProspData.Wcl100.Bpl = Val(.Value)
                '-----
                .Col = 313  'HoleMineable100  100%
                aProspData.MineableHole100 = .Text
                .Col = 314  'Mtx TPA          PC
                aProspData.MtxTpaPc = Val(.Value)
                '-----
                .Col = 315   'Mtx "X" based on On-Spec tons    100%
                aProspData.MtxxOnSpec100 = Val(.Value)
                .Col = 316   'Tot "X" based on On-Spec tons    100%
                aProspData.TotxOnSpec100 = Val(.Value)
                .Col = 317   'Mtx "X" based on all tons        100%
                aProspData.MtxxAll100 = Val(.Value)
                .Col = 318   'Tot "X" based on all tons        100%
                aProspData.TotxAll100 = Val(.Value)
                '-----
                .Col = 319  'Cpb mineable hole (Based on PC data)
                aProspData.CpbMinHole = .Text    'Yes, No, ND
                .Col = 320  'Fpb mineable hole (Based on PC data)
                aProspData.FpbMinHole = .Text    'Yes, No, ND
                .Col = 321  'Tpb mineable hole (Based on PC data)
                aProspData.TpbMinHole = .Text    'Yes, No, ND
                .Col = 322  'Ccn mineable hole (Based on PC data)
                aProspData.CcnMinHole = .Text    'Yes, No, ND
                .Col = 323  'Fcn mineable hole (Based on PC data)
                aProspData.FcnMinHole = .Text    'Yes, No, ND
                .Col = 324  'Tcn mineable hole (Based on PC data)
                aProspData.TcnMinHole = .Text    'Yes, No, ND
                .Col = 325  'Os mineable hole  (Based on PC data)
                aProspData.OsMinHole = .Text     'Yes, No, ND
                .Col = 326  'IP mineable hole  (Based on PC data)
                aProspData.IpMinHole = .Text     'Yes, No, ND
                '-----
                .Col = 327
                aProspData.MtxxOnSpecPcHole = Val(.Value)
                .Col = 328
                aProspData.TotxOnSpecPcHole = Val(.Value)
                .Col = 329
                aProspData.MtxxAllPcHole = Val(.Value)
                .Col = 330
                aProspData.TotxAllPcHole = Val(.Value)
                '-----
                .Col = 331
                aProspData.MtxxOnSpec100Hole = Val(.Value)
                .Col = 332
                aProspData.TotxOnSpec100Hole = Val(.Value)
                .Col = 333
                aProspData.MtxxAll100Hole = Val(.Value)
                .Col = 334
                aProspData.TotxAll100Hole = Val(.Value)
                '-----
                .Col = 335
                aProspData.MtxPctMoist = Val(.Value)
                .Col = 336
                aProspData.MtxPctSol = Val(.Value)
                '-----
                .Col = 347  'MpInp TPA    PC
                aProspData.MgPltInp.Tpa = Val(.Value)
                .Col = 348  'MpInp Wt%    PC
                aProspData.MgPltInp.WtPct = Val(.Value)
                .Col = 349  'MpInp BPL    PC
                aProspData.MgPltInp.Bpl = Val(.Value)
                .Col = 350  'MpInp Insol  PC
                aProspData.MgPltInp.Ins = Val(.Value)
                .Col = 351  'MpInp I&A    PC
                aProspData.MgPltInp.Ia = Val(.Value)
                .Col = 352  'MpInp Fe2O3  PC
                aProspData.MgPltInp.Fe = Val(.Value)
                .Col = 353  'MpInp Al2O3  PC
                aProspData.MgPltInp.Al = Val(.Value)
                .Col = 354  'MpInp MgO    PC
                aProspData.MgPltInp.Mg = Val(.Value)
                .Col = 355  'MpInp CaO    PC
                aProspData.MgPltInp.Ca = Val(.Value)
                .Col = 356  'MpInp MER    PC
                'Don't need to get this.
                .Col = 357  'MpInp CPR    PC
                'Don't need to get this.
                '----
                .Col = 358  'MpRej TPA    PC
                aProspData.MgPltRej.Tpa = Val(.Value)
                .Col = 359  'MpRej Wt%    PC
                aProspData.MgPltRej.WtPct = Val(.Value)
                .Col = 360  'MpRej BPL    PC
                aProspData.MgPltRej.Bpl = Val(.Value)
                .Col = 361  'MpRej Insol  PC
                aProspData.MgPltRej.Ins = Val(.Value)
                .Col = 362  'MpRej I&A    PC
                aProspData.MgPltRej.Ia = Val(.Value)
                .Col = 363  'MpRej Fe2O3  PC
                aProspData.MgPltRej.Fe = Val(.Value)
                .Col = 364  'MpRej Al2O3  PC
                aProspData.MgPltRej.Al = Val(.Value)
                .Col = 365  'MpRej MgO    PC
                aProspData.MgPltRej.Mg = Val(.Value)
                .Col = 366  'MpRej CaO    PC
                aProspData.MgPltRej.Ca = Val(.Value)
                .Col = 367  'MpRej MER    PC
                'Don't need to get this.
                .Col = 368  'MpRej CPR    PC
                'Don't need to get this.
                '-----
                .Col = 369  'MpProd TPA    PC
                aProspData.MgPltProd.Tpa = Val(.Value)
                .Col = 370  'MpProd Wt%    PC
                aProspData.MgPltProd.WtPct = Val(.Value)
                .Col = 371  'MpProd BPL    PC
                aProspData.MgPltProd.Bpl = Val(.Value)
                .Col = 372  'MpProd Insol  PC
                aProspData.MgPltProd.Ins = Val(.Value)
                .Col = 373  'MpProd I&A    PC
                aProspData.MgPltProd.Ia = Val(.Value)
                .Col = 374  'MpProd Fe2O3  PC
                aProspData.MgPltProd.Fe = Val(.Value)
                .Col = 375  'MpProd Al2O3  PC
                aProspData.MgPltProd.Al = Val(.Value)
                .Col = 376  'MpProd MgO    PC
                aProspData.MgPltProd.Mg = Val(.Value)
                .Col = 377  'MpProd CaO    PC
                aProspData.MgPltProd.Ca = Val(.Value)
                .Col = 378  'MpProd MER    PC
                'Don't need to get this.
                .Col = 379  'MpProd CPR    PC
                'Don't need to get this.
                '----
                .Col = 380  'MpInp TPA    100
                aProspData.MgPltInp100.Tpa = Val(.Value)
                .Col = 381  'MpInp Wt%    100
                aProspData.MgPltInp100.WtPct = Val(.Value)
                .Col = 382  'MpInp BPL    100
                aProspData.MgPltInp100.Bpl = Val(.Value)
                .Col = 383  'MpInp Insol  100
                aProspData.MgPltInp100.Ins = Val(.Value)
                .Col = 384  'MpInp I&A    100
                aProspData.MgPltInp100.Ia = Val(.Value)
                .Col = 385  'MpInp Fe2O3  100
                aProspData.MgPltInp100.Fe = Val(.Value)
                .Col = 386  'MpInp Al2O3  100
                aProspData.MgPltInp100.Al = Val(.Value)
                .Col = 387  'MpInp MgO    100
                aProspData.MgPltInp100.Mg = Val(.Value)
                .Col = 388  'MpInp CaO    100
                aProspData.MgPltInp100.Ca = Val(.Value)
                .Col = 389  'MpInp MER    100
                'Don't need to get this.
                .Col = 390  'MpInp CPR    100
                'Don't need to get this.
                '----
                .Col = 391  'MpRej TPA    100
                aProspData.MgPltRej100.Tpa = Val(.Value)
                .Col = 392  'MpRej Wt%    100
                aProspData.MgPltRej100.WtPct = Val(.Value)
                .Col = 393  'MpRej BPL    100
                aProspData.MgPltRej100.Bpl = Val(.Value)
                .Col = 394  'MpRej Insol  100
                aProspData.MgPltRej100.Ins = Val(.Value)
                .Col = 395  'MpRej I&A    100
                aProspData.MgPltRej100.Ia = Val(.Value)
                .Col = 396  'MpRej Fe2O3  100
                aProspData.MgPltRej100.Fe = Val(.Value)
                .Col = 397  'MpRej Al2O3  100
                aProspData.MgPltRej100.Al = Val(.Value)
                .Col = 398  'MpRej MgO    100
                aProspData.MgPltRej100.Mg = Val(.Value)
                .Col = 399  'MpRej CaO    100
                aProspData.MgPltRej100.Ca = Val(.Value)
                .Col = 400  'MpRej MER    100
                'Don't need to get this.
                .Col = 401  'MpRej CPR    100
                'Don't need to get this.
                '-----
                .Col = 402  'MpProd TPA    100
                aProspData.MgPltProd100.Tpa = Val(.Value)
                .Col = 403  'MpProd Wt%    100
                aProspData.MgPltProd100.WtPct = Val(.Value)
                .Col = 404  'MpProd BPL    100
                aProspData.MgPltProd100.Bpl = Val(.Value)
                .Col = 405  'MpProd Insol  100
                aProspData.MgPltProd100.Ins = Val(.Value)
                .Col = 406  'MpProd I&A    100
                aProspData.MgPltProd100.Ia = Val(.Value)
                .Col = 407  'MpProd Fe2O3  100
                aProspData.MgPltProd100.Fe = Val(.Value)
                .Col = 408  'MpProd Al2O3  100
                aProspData.MgPltProd100.Al = Val(.Value)
                .Col = 409  'MpProd MgO    100
                aProspData.MgPltProd100.Mg = Val(.Value)
                .Col = 410  'MpProd CaO    100
                aProspData.MgPltProd100.Ca = Val(.Value)
                .Col = 411  'MpProd MER    100
                'Don't need to get this.
                .Col = 412  'MpProd CPR    100
                'Don't need to get this.
                '----
                .Col = 413  'MpTcn TPA     PC
                aProspData.MgPltTcn.Tpa = Val(.Value)
                .Col = 414  'MpTcn Wt%     PC
                aProspData.MgPltTcn.WtPct = Val(.Value)
                .Col = 415  'MpTcn BPL     PC
                aProspData.MgPltTcn.Bpl = Val(.Value)
                .Col = 416  'MpTcn Insol   PC
                aProspData.MgPltTcn.Ins = Val(.Value)
                .Col = 417  'MpTcn I&A     PC
                aProspData.MgPltTcn.Ia = Val(.Value)
                .Col = 418  'MpTcn Fe2O3   PC
                aProspData.MgPltTcn.Fe = Val(.Value)
                .Col = 419  'MpTcn Al2O3   PC
                aProspData.MgPltTcn.Al = Val(.Value)
                .Col = 420  'MpTcn MgO     PC
                aProspData.MgPltTcn.Mg = Val(.Value)
                .Col = 421  'MpTcn CaO     PC
                aProspData.MgPltTcn.Ca = Val(.Value)
                .Col = 422  'MpTcn MER     PC
                'Don't need to get this.
                .Col = 423  'MpTcn CPR     PC
                'Don't need to get this.
                '-----
                .Col = 424  'MpTpr TPA     PC
                aProspData.MgPltTpr.Tpa = Val(.Value)
                .Col = 425  'MpTpr Wt%     PC
                aProspData.MgPltTpr.WtPct = Val(.Value)
                .Col = 426  'MpTpr BPL     PC
                aProspData.MgPltTpr.Bpl = Val(.Value)
                .Col = 427  'MpTpr Insol   PC
                aProspData.MgPltTpr.Ins = Val(.Value)
                .Col = 428  'MpTpr I&A     PC
                aProspData.MgPltTpr.Ia = Val(.Value)
                .Col = 429  'MpTpr Fe2O3   PC
                aProspData.MgPltTpr.Fe = Val(.Value)
                .Col = 430  'MpTpr Al2O3   PC
                aProspData.MgPltTpr.Al = Val(.Value)
                .Col = 431  'MpTpr MgO     PC
                aProspData.MgPltTpr.Mg = Val(.Value)
                .Col = 432  'MpTpr CaO     PC
                aProspData.MgPltTpr.Ca = Val(.Value)
                .Col = 433  'MpTpr MER     PC
                'Don't need to get this.
                .Col = 434  'MpTpr CPR     PC
                'Don't need to get this.
                '-----
                .Col = 435  'MpTcn TPA     100
                aProspData.MgPltTcn100.Tpa = Val(.Value)
                .Col = 436  'MpTcn Wt%     100
                aProspData.MgPltTcn100.WtPct = Val(.Value)
                .Col = 437  'MpTcn BPL     100
                aProspData.MgPltTcn100.Bpl = Val(.Value)
                .Col = 438  'MpTcn Insol   100
                aProspData.MgPltTcn100.Ins = Val(.Value)
                .Col = 439  'MpTcn I&A     100
                aProspData.MgPltTcn100.Ia = Val(.Value)
                .Col = 440  'MpTcn Fe2O3   100
                aProspData.MgPltTcn100.Fe = Val(.Value)
                .Col = 441  'MpTcn Al2O3   100
                aProspData.MgPltTcn100.Al = Val(.Value)
                .Col = 442  'MpTcn MgO     100
                aProspData.MgPltTcn100.Mg = Val(.Value)
                .Col = 443  'MpTcn CaO     100
                aProspData.MgPltTcn100.Ca = Val(.Value)
                .Col = 444  'MpTcn MER     100
                'Don't need to get this.
                .Col = 445  'MpTcn CPR     100
                'Don't need to get this.
                '-----
                .Col = 446  'MpTpr TPA     100
                aProspData.MgPltTpr100.Tpa = Val(.Value)
                .Col = 447  'MpTpr Wt%     100
                aProspData.MgPltTpr100.WtPct = Val(.Value)
                .Col = 448  'MpTpr BPL     100
                aProspData.MgPltTpr100.Bpl = Val(.Value)
                .Col = 449  'MpTpr Insol   100
                aProspData.MgPltTpr100.Ins = Val(.Value)
                .Col = 450  'MpTpr I&A     100
                aProspData.MgPltTpr100.Ia = Val(.Value)
                .Col = 451  'MpTpr Fe2O3   100
                aProspData.MgPltTpr100.Fe = Val(.Value)
                .Col = 452  'MpTpr Al2O3   100
                aProspData.MgPltTpr100.Al = Val(.Value)
                .Col = 453  'MpTpr MgO     100
                aProspData.MgPltTpr100.Mg = Val(.Value)
                .Col = 454  'MpTpr CaO     100
                aProspData.MgPltTpr100.Ca = Val(.Value)
                .Col = 455  'MpTpr MER     100
                'Don't need to get this.
                .Col = 456  'MpTpr CPR     100
                'Don't need to get this.
                '-----
                'Currently in Sub gGetDataFromReviewSprd
                .Col = 457   'TpbRej TPA    PC
                aProspData.TpbRej.Tpa = Val(.Value)
                .Col = 458   'TpbRej BPL    PC
                aProspData.TpbRej.Bpl = Val(.Value)
                .Col = 459   'TpbRej Insol  PC
                aProspData.TpbRej.Ins = Val(.Value)
                .Col = 460   'TpbRej I&A    PC
                aProspData.TpbRej.Ia = Val(.Value)
                .Col = 461   'TpbRej Fe2O3  PC
                aProspData.TpbRej.Fe = Val(.Value)
                .Col = 462   'TpbRej Al2O3  PC
                aProspData.TpbRej.Al = Val(.Value)
                .Col = 463   'TpbRej MgO    PC
                aProspData.TpbRej.Mg = Val(.Value)
                .Col = 464   'TpbRej CaO    PC
                aProspData.TpbRej.Ca = Val(.Value)
                '-----
                .Col = 465   'TpbRej TPA    100
                aProspData.TpbRej100.Tpa = Val(.Value)
                .Col = 466   'TpbRej BPL    100
                aProspData.TpbRej100.Bpl = Val(.Value)
                .Col = 467   'TpbRej Insol  100
                aProspData.TpbRej100.Ins = Val(.Value)
                .Col = 468   'TpbRej I&A    100
                aProspData.TpbRej100.Ia = Val(.Value)
                .Col = 469   'TpbRej Fe2O3  100
                aProspData.TpbRej100.Fe = Val(.Value)
                .Col = 470   'TpbRej Al2O3  100
                aProspData.TpbRej100.Al = Val(.Value)
                .Col = 471   'TpbRej MgO    100
                aProspData.TpbRej100.Mg = Val(.Value)
                .Col = 472   'TpbRej CaO    100
                aProspData.TpbRej100.Ca = Val(.Value)
                '-----
                .Col = 473   'Oversize Fe2O3 Adj  PC
                aProspData.Os.FeAdj = Val(.Value)
                .Col = 474   'Oversize I&A Adj  PC
                aProspData.Os.IaAdj = Val(.Value)
                .Col = 475   'Oversize MER Adj  PC

                'Don't need to get this.
                .Col = 476   'Cpb Fe2O3 Adj  PC
                aProspData.Cpb.FeAdj = Val(.Value)
                .Col = 477   'Cpb I&A Adj  PC
                aProspData.Cpb.IaAdj = Val(.Value)
                .Col = 478   'Cpb MER Adj  PC
                'Don't need to get this.

                .Col = 479   'Fpb Fe2O3 Adj  PC
                aProspData.Fpb.FeAdj = Val(.Value)
                .Col = 480   'Fpb I&A Adj  PC
                aProspData.Fpb.IaAdj = Val(.Value)
                .Col = 481   'Fpb MER Adj  PC
                'Don't need to get this.

                .Col = 482   'Tpb Fe2O3 Adj  PC
                aProspData.Tpb.FeAdj = Val(.Value)
                .Col = 483   'Tpb I&A Adj  PC
                aProspData.Tpb.IaAdj = Val(.Value)
                .Col = 484   'Tpb MER Adj  PC
                'Don't need to get this.

                .Col = 485   'IP Fe2O3 Adj  PC
                aProspData.Ip.FeAdj = Val(.Value)
                .Col = 486   'IP I&A Adj  PC
                aProspData.Ip.IaAdj = Val(.Value)
                .Col = 487   'IP MER Adj  PC
                'Don't need to get this.

                .Col = 488   'Ccn Fe2O3 Adj  PC
                aProspData.Ccn.FeAdj = Val(.Value)
                .Col = 489   'Ccn I&A Adj  PC
                aProspData.Ccn.IaAdj = Val(.Value)
                .Col = 490   'Ccn MER Adj  PC
                'Don't need to get this.

                .Col = 491   'Fcn Fe2O3 Adj  PC
                aProspData.Fcn.FeAdj = Val(.Value)
                .Col = 492   'Fcn I&A Adj  PC
                aProspData.Fcn.IaAdj = Val(.Value)
                .Col = 493   'Fcn MER Adj  PC
                'Don't need to get this.

                .Col = 494   'Tcn Fe2O3 Adj  PC
                aProspData.Tcn.FeAdj = Val(.Value)
                .Col = 495   'Tcn I&A Adj  PC
                aProspData.Tcn.IaAdj = Val(.Value)
                .Col = 496   'Tcn MER Adj  PC
                'Don't need to get this.

                .Col = 497   'Tpr Fe2O3 Adj  PC
                aProspData.Tpr.FeAdj = Val(.Value)
                .Col = 498   'Tpr I&A Adj  PC
                aProspData.Tpr.IaAdj = Val(.Value)
                .Col = 499   'Tpr MER Adj  PC
                'Don't need to get this.

                .Col = 500   'Tpb Rej Fe2O3 Adj  PC
                aProspData.TpbRej.FeAdj = Val(.Value)
                .Col = 501   'Tpb Rej I&A Adj  PC
                aProspData.TpbRej.IaAdj = Val(.Value)
                '-----
                .Col = 502   'Oversize Fe2O3 Adj  100
                aProspData.Os100.FeAdj = Val(.Value)
                .Col = 503   'Oversize I&A Adj  100
                aProspData.Os100.IaAdj = Val(.Value)
                .Col = 504   'Oversize MER Adj  100
                'Don't need to get this.

                .Col = 505   'Cpb Fe2O3 Adj  100
                aProspData.Cpb100.FeAdj = Val(.Value)
                .Col = 506   'Cpb I&A Adj  100
                aProspData.Cpb100.IaAdj = Val(.Value)
                .Col = 507   'Cpb MER Adj  100
                'Don't need to get this.

                .Col = 508   'Fpb Fe2O3 Adj  100
                aProspData.Fpb100.FeAdj = Val(.Value)
                .Col = 509   'Fpb I&A Adj  100
                aProspData.Fpb100.IaAdj = Val(.Value)
                .Col = 510   'Fpb MER Adj  100
                'Don't need to get this.

                .Col = 511   'Tpb Fe2O3 Adj  100
                aProspData.Tpb100.FeAdj = Val(.Value)
                .Col = 512   'Tpb I&A Adj  100
                aProspData.Tpb100.IaAdj = Val(.Value)
                .Col = 513   'Tpb MER Adj  100
                'Don't need to get this.

                .Col = 514   'IP Fe2O3 Adj  100
                aProspData.Ip100.FeAdj = Val(.Value)
                .Col = 515   'IP I&A Adj  100
                aProspData.Ip100.IaAdj = Val(.Value)
                .Col = 516   'IP MER Adj  100
                'Don't need to get this.

                .Col = 517   'Ccn Fe2O3 Adj  100
                aProspData.Ccn100.FeAdj = Val(.Value)
                .Col = 518   'Ccn I&A Adj  100
                aProspData.Ccn100.IaAdj = Val(.Value)
                .Col = 519   'Ccn MER Adj  100
                'Don't need to get this.

                .Col = 520   'Fcn Fe2O3 Adj  100
                aProspData.Fcn100.FeAdj = Val(.Value)
                .Col = 521   'Fcn I&A Adj  100
                aProspData.Fcn100.IaAdj = Val(.Value)
                .Col = 522   'Fcn MER Adj  100
                'Don't need to get this.

                .Col = 523   'Tcn Fe2O3 Adj  100
                aProspData.Tcn100.FeAdj = Val(.Value)
                .Col = 524   'Tcn I&A Adj  100
                aProspData.Tcn100.IaAdj = Val(.Value)
                .Col = 525   'Tcn MER Adj  100
                'Don't need to get this.

                .Col = 526   'Tpr Fe2O3 Adj  100
                aProspData.Tpr100.FeAdj = Val(.Value)
                .Col = 527   'Tpr I&A Adj  100
                aProspData.Tpr100.IaAdj = Val(.Value)
                .Col = 528   'Tpr MER Adj  100
                'Don't need to get this.

                .Col = 529   'Tpb Rej Fe2O3 Adj  100
                aProspData.TpbRej100.FeAdj = Val(.Value)
                .Col = 530   'Tpb Rej Ia Adj  100
                aProspData.TpbRej100.IaAdj = Val(.Value)

                'New stuff 09/09/2009, lss
                'Currently in Sub gGetDataFromReviewSprd
                .Col = 531   'TcnRej TPA    PC
                aProspData.TcnRej.Tpa = Val(.Value)
                .Col = 532   'TcnRej BPL    PC
                aProspData.TcnRej.Bpl = Val(.Value)
                .Col = 533   'TcnRej Insol  PC
                aProspData.TcnRej.Ins = Val(.Value)
                .Col = 534   'TcnRej I&A    PC
                aProspData.TcnRej.Ia = Val(.Value)
                .Col = 535   'TcnRej Fe2O3  PC
                aProspData.TcnRej.Fe = Val(.Value)
                .Col = 536   'TcnRej Al2O3  PC
                aProspData.TcnRej.Al = Val(.Value)
                .Col = 537   'TcnRej MgO    PC
                aProspData.TcnRej.Mg = Val(.Value)
                .Col = 538   'TcnRej CaO    PC
                aProspData.TcnRej.Ca = Val(.Value)
                '-----
                .Col = 539   'TcnRej TPA    100
                aProspData.TcnRej100.Tpa = Val(.Value)
                .Col = 540   'TcnRej BPL    100
                aProspData.TcnRej100.Bpl = Val(.Value)
                .Col = 541   'TcnRej Insol  100
                aProspData.TcnRej100.Ins = Val(.Value)
                .Col = 542   'TcnRej I&A    100
                aProspData.TcnRej100.Ia = Val(.Value)
                .Col = 543   'TcnRej Fe2O3  100
                aProspData.TcnRej100.Fe = Val(.Value)
                .Col = 544   'TcnRej Al2O3  100
                aProspData.TcnRej100.Al = Val(.Value)
                .Col = 545   'TcnRej MgO    100
                aProspData.TcnRej100.Mg = Val(.Value)
                .Col = 546   'TcnRej CaO    100
                aProspData.TcnRej100.Ca = Val(.Value)
                '-----
                .Col = 547   'Tcn Rej Fe2O3 Adj  PC
                aProspData.TcnRej.FeAdj = Val(.Value)
                .Col = 548   'Tcn Rej I&A Adj  PC
                aProspData.TcnRej.IaAdj = Val(.Value)
                '-----
                .Col = 549   'Tcn Rej Fe2O3 Adj  100
                aProspData.TcnRej100.FeAdj = Val(.Value)
                .Col = 550   'Tcn Rej Ia Adj  100
                aProspData.TcnRej100.IaAdj = Val(.Value)
                '-----
                '09/11/2009, lss -- Added the following
                'Currently in Sub gGetDataFromReviewSprd
                .Col = 531   'TcnRej TPA    PC
                aProspData.TcnRej.Tpa = Val(.Value)
                .Col = 532   'TcnRej BPL    PC
                aProspData.TcnRej.Bpl = Val(.Value)
                .Col = 533   'TcnRej Insol  PC
                aProspData.TcnRej.Ins = Val(.Value)
                .Col = 534   'TcnRej I&A    PC
                aProspData.TcnRej.Ia = Val(.Value)
                .Col = 535   'TcnRej Fe2O3  PC
                aProspData.TcnRej.Fe = Val(.Value)
                .Col = 536   'TcnRej Al2O3  PC
                aProspData.TcnRej.Al = Val(.Value)
                .Col = 537   'TcnRej MgO    PC
                aProspData.TcnRej.Mg = Val(.Value)
                .Col = 538   'TcnRej CaO    PC
                aProspData.TcnRej.Ca = Val(.Value)
                '-----
                .Col = 539   'TcnRej TPA    100
                aProspData.TcnRej100.Tpa = Val(.Value)
                .Col = 540   'TcnRej BPL    100
                aProspData.TcnRej100.Bpl = Val(.Value)
                .Col = 541   'TcnRej Insol  100
                aProspData.TcnRej100.Ins = Val(.Value)
                .Col = 542   'TcnRej I&A    100
                aProspData.TcnRej100.Ia = Val(.Value)
                .Col = 543   'TcnRej Fe2O3  100
                aProspData.TcnRej100.Fe = Val(.Value)
                .Col = 544   'TcnRej Al2O3  100
                aProspData.TcnRej100.Al = Val(.Value)
                .Col = 545   'TcnRej MgO    100
                aProspData.TcnRej100.Mg = Val(.Value)
                .Col = 546   'TcnRej CaO    100
                aProspData.TcnRej100.Ca = Val(.Value)
                '-----
                .Col = 547   'Tcn Rej Fe2O3 Adj  PC
                aProspData.TcnRej.FeAdj = Val(.Value)
                .Col = 548   'Tcn Rej I&A Adj  PC
                aProspData.TcnRej.IaAdj = Val(.Value)
                '-----
                .Col = 549   'Tcn Rej Fe2O3 Adj  100
                aProspData.TcnRej100.FeAdj = Val(.Value)
                .Col = 550   'Tcn Rej Ia Adj  100
                aProspData.TcnRej100.IaAdj = Val(.Value)
                '-----
                'DOLOFLOT STUFF
                .Col = 551  'DfFpbInp TPA        PC
                aProspData.DfFpbInp.Tpa = Val(.Value)
                .Col = 552  'DfFpbInp Wt%        PC
                aProspData.DfFpbInp.WtPct = Val(.Value)
                .Col = 553  'DfFpbInp BPL        PC
                aProspData.DfFpbInp.Bpl = Val(.Value)
                .Col = 554  'DfFpbInp Insol      PC
                aProspData.DfFpbInp.Ins = Val(.Value)
                .Col = 555  'DfFpbInp I&A        PC
                aProspData.DfFpbInp.Ia = Val(.Value)
                .Col = 556  'DfFpbInp Fe2O3      PC
                aProspData.DfFpbInp.Fe = Val(.Value)
                .Col = 557  'DfFpbInp Al2O3      PC
                aProspData.DfFpbInp.Al = Val(.Value)
                .Col = 558  'DfFpbInp MgO        PC
                aProspData.DfFpbInp.Mg = Val(.Value)
                .Col = 559  'DfFpbInp CaO        PC
                aProspData.DfFpbInp.Ca = Val(.Value)
                .Col = 560  'DfFpbInp MER        PC
                'Don't need to get this.
                .Col = 561  'DfFpbInp CPR        PC
                'Don't need to get this.
                .Col = 562  'DfFpbInp Fe2O3 Adj  PC
                aProspData.DfFpbInp.FeAdj = Val(.Value)
                .Col = 563  'DfFpbInp I&A Adj    PC
                aProspData.DfFpbInp.IaAdj = Val(.Value)
                .Col = 564  'DfFpbInp MER Adj    PC
                'Don't need to get this.
                '-----
                'Col = 565 to 578 not used
                '-----
                .Col = 579  'DfFpbProd TPA        PC
                aProspData.DfFpbProd.Tpa = Val(.Value)
                .Col = 580  'DfFpbProd Wt%        PC
                aProspData.DfFpbProd.WtPct = Val(.Value)
                .Col = 581  'DfFpbProd BPL        PC
                aProspData.DfFpbProd.Bpl = Val(.Value)
                .Col = 582  'DfFpbProd Insol      PC
                aProspData.DfFpbProd.Ins = Val(.Value)
                .Col = 583  'DfFpbProd I&A        PC
                aProspData.DfFpbProd.Ia = Val(.Value)
                .Col = 584  'DfFpbProd Fe2O3      PC
                aProspData.DfFpbProd.Fe = Val(.Value)
                .Col = 585  'DfFpbProd Al2O3      PC
                aProspData.DfFpbProd.Al = Val(.Value)
                .Col = 586  'DfFpbProd MgO        PC
                aProspData.DfFpbProd.Mg = Val(.Value)
                .Col = 587  'DfFpbProd CaO        PC
                aProspData.DfFpbProd.Ca = Val(.Value)
                .Col = 588  'DfFpbProd MER        PC
                'Don't need to get this.
                .Col = 589  'DfFpbProd CPR        PC
                'Don't need to get this.
                .Col = 590  'DfFpbProd Fe2O3 Adj  PC
                aProspData.DfFpbProd.FeAdj = Val(.Value)
                .Col = 591  'DfFpbProd I&A Adj    PC
                aProspData.DfFpbProd.IaAdj = Val(.Value)
                .Col = 592  'DfFpbProd MER Adj    PC
                'Don't need to get this.
                '-----
                .Col = 593  'DfIpInp TPA        PC
                aProspData.DfIpInp.Tpa = Val(.Value)
                .Col = 594  'DfIpInp Wt%        PC
                aProspData.DfIpInp.WtPct = Val(.Value)
                .Col = 595  'DfIpInp BPL        PC
                aProspData.DfIpInp.Bpl = Val(.Value)
                .Col = 596  'DfIpInp Insol      PC
                aProspData.DfIpInp.Ins = Val(.Value)
                .Col = 597  'DfIpInp I&A        PC
                aProspData.DfIpInp.Ia = Val(.Value)
                .Col = 598  'DfIpInp Fe2O3      PC
                aProspData.DfIpInp.Fe = Val(.Value)
                .Col = 599  'DfIpInp Al2O3      PC
                aProspData.DfIpInp.Al = Val(.Value)
                .Col = 600  'DfIpInp MgO        PC
                aProspData.DfIpInp.Mg = Val(.Value)
                .Col = 601  'DfIpInp CaO        PC
                aProspData.DfIpInp.Ca = Val(.Value)
                .Col = 602  'DfIpInp MER        PC
                'Don't need to get this.
                .Col = 603  'DfIpInp CPR        PC
                'Don't need to get this.
                .Col = 604  'DfIpInp Fe2O3 Adj  PC
                aProspData.DfIpInp.FeAdj = Val(.Value)
                .Col = 605  'DfIpInp I&A Adj    PC
                aProspData.DfIpInp.IaAdj = Val(.Value)
                .Col = 606  'DfIpInp MER Adj    PC
                'Don't need to get this.
                '-----
                'Col = 607 to 620 not used.
                '-----
                .Col = 621  'DfIpProd TPA        PC
                aProspData.DfIpProd.Tpa = Val(.Value)
                .Col = 622  'DfIpProd Wt%        PC
                aProspData.DfIpProd.WtPct = Val(.Value)
                .Col = 623  'DfIpProd BPL        PC
                aProspData.DfIpProd.Bpl = Val(.Value)
                .Col = 624  'DfIpProd Insol      PC
                aProspData.DfIpProd.Ins = Val(.Value)
                .Col = 625  'DfIpProd I&A        PC
                aProspData.DfIpProd.Ia = Val(.Value)
                .Col = 626  'DfIpProd Fe2O3      PC
                aProspData.DfIpProd.Fe = Val(.Value)
                .Col = 627  'DfIpProd Al2O3      PC
                aProspData.DfIpProd.Al = Val(.Value)
                .Col = 628  'DfIpProd MgO        PC
                aProspData.DfIpProd.Mg = Val(.Value)
                .Col = 629  'DfIpProd CaO        PC
                aProspData.DfIpProd.Ca = Val(.Value)
                .Col = 630  'DfIpProd MER        PC
                'Don't need to get this.
                .Col = 631  'DfIpProd CPR        PC
                'Don't need to get this.
                .Col = 632  'DfIpProd Fe2O3 Adj  PC
                aProspData.DfIpProd.FeAdj = Val(.Value)
                .Col = 633  'DfIpProd I&A Adj    PC
                aProspData.DfIpProd.IaAdj = Val(.Value)
                .Col = 634  'DfIpProd MER Adj    PC
                'Don't need to get this.
                '-----
                .Col = 635  'DfFpbInp TPA        100
                aProspData.DfFpbInp100.Tpa = Val(.Value)
                .Col = 636  'DfFpbInp Wt%        100
                aProspData.DfFpbInp100.WtPct = Val(.Value)
                .Col = 637  'DfFpbInp BPL        100
                aProspData.DfFpbInp100.Bpl = Val(.Value)
                .Col = 638  'DfFpbInp Insol      100
                aProspData.DfFpbInp100.Ins = Val(.Value)
                .Col = 639  'DfFpbInp I&A        100
                aProspData.DfFpbInp100.Ia = Val(.Value)
                .Col = 640  'DfFpbInp Fe2O3      100
                aProspData.DfFpbInp100.Fe = Val(.Value)
                .Col = 641  'DfFpbInp Al2O3      100
                aProspData.DfFpbInp100.Al = Val(.Value)
                .Col = 642  'DfFpbInp MgO        100
                aProspData.DfFpbInp100.Mg = Val(.Value)
                .Col = 643  'DfFpbInp CaO        100
                aProspData.DfFpbInp100.Ca = Val(.Value)
                .Col = 644  'DfFpbInp MER        100
                'Don't need to get this.
                .Col = 645  'DfFpbInp CPR        100
                'Don't need to get this.
                .Col = 646  'DfFpbInp Fe2O3 Adj  100
                aProspData.DfFpbInp100.FeAdj = Val(.Value)
                .Col = 647  'DfFpbInp I&A Adj    100
                aProspData.DfFpbInp100.IaAdj = Val(.Value)
                .Col = 648  'DfFpbInp MER Adj    100
                'Don't need to get this.
                '-----
                'Col = 649 to 662 not used.
                '-----
                .Col = 663  'DfFpbProd TPA        100
                aProspData.DfFpbProd100.Tpa = Val(.Value)
                .Col = 664  'DfFpbProd Wt%        100
                aProspData.DfFpbProd100.WtPct = Val(.Value)
                .Col = 665  'DfFpbProd BPL        100
                aProspData.DfFpbProd100.Bpl = Val(.Value)
                .Col = 666  'DfFpbProd Insol      100
                aProspData.DfFpbProd100.Ins = Val(.Value)
                .Col = 667  'DfFpbProd I&A        100
                aProspData.DfFpbProd100.Ia = Val(.Value)
                .Col = 668  'DfFpbProd Fe2O3      100
                aProspData.DfFpbProd100.Fe = Val(.Value)
                .Col = 669  'DfFpbProd Al2O3      100
                aProspData.DfFpbProd100.Al = Val(.Value)
                .Col = 670  'DfFpbProd MgO        100
                aProspData.DfFpbProd100.Mg = Val(.Value)
                .Col = 671  'DfFpbProd CaO        100
                aProspData.DfFpbProd100.Ca = Val(.Value)
                .Col = 672  'DfFpbProd MER        100
                'Don't need to get this.
                .Col = 673  'DfFpbProd CPR        100
                'Don't need to get this.
                .Col = 674  'DfFpbProd Fe2O3 Adj  100
                aProspData.DfFpbProd100.FeAdj = Val(.Value)
                .Col = 675  'DfFpbProd I&A Adj    100
                aProspData.DfFpbProd100.IaAdj = Val(.Value)
                .Col = 676  'DfFpbProd MER Adj    100
                'Don't need to get this.
                '-----
                .Col = 677  'DfIpInp TPA        100
                aProspData.DfIpInp100.Tpa = Val(.Value)
                .Col = 678  'DfIpInp Wt%        100
                aProspData.DfIpInp100.WtPct = Val(.Value)
                .Col = 679  'DfIpInp BPL        100
                aProspData.DfIpInp100.Bpl = Val(.Value)
                .Col = 680  'DfIpInp Insol      100
                aProspData.DfIpInp100.Ins = Val(.Value)
                .Col = 681  'DfIpInp I&A        100
                aProspData.DfIpInp100.Ia = Val(.Value)
                .Col = 682  'DfIpInp Fe2O3      100
                aProspData.DfIpInp100.Fe = Val(.Value)
                .Col = 683  'DfIpInp Al2O3      100
                aProspData.DfIpInp100.Al = Val(.Value)
                .Col = 684  'DfIpInp MgO        100
                aProspData.DfIpInp100.Mg = Val(.Value)
                .Col = 685  'DfIpInp CaO        100
                aProspData.DfIpInp100.Ca = Val(.Value)
                .Col = 686  'DfIpInp MER        100
                'Don't need to get this.
                .Col = 687  'DfIpInp CPR        100
                'Don't need to get this.
                .Col = 688  'DfIpInp Fe2O3 Adj  100
                aProspData.DfIpInp100.FeAdj = Val(.Value)
                .Col = 689  'DfIpInp I&A Adj    100
                aProspData.DfIpInp100.IaAdj = Val(.Value)
                .Col = 690  'DfIpInp MER Adj    100
                'Don't need to get this.
                '-----
                'Col = 691 to 704 not used.
                '-----
                .Col = 705  'DfIpProd TPA        100
                aProspData.DfIpProd100.Tpa = Val(.Value)
                .Col = 706  'DfIpProd Wt%        100
                aProspData.DfIpProd100.WtPct = Val(.Value)
                .Col = 707  'DfIpProd BPL        100
                aProspData.DfIpProd100.Bpl = Val(.Value)
                .Col = 708  'DfIpProd Insol      100
                aProspData.DfIpProd100.Ins = Val(.Value)
                .Col = 709  'DfIpProd I&A        100
                aProspData.DfIpProd100.Ia = Val(.Value)
                .Col = 710  'DfIpProd Fe2O3      100
                aProspData.DfIpProd100.Fe = Val(.Value)
                .Col = 711  'DfIpProd Al2O3      100
                aProspData.DfIpProd100.Al = Val(.Value)
                .Col = 712  'DfIpProd MgO        100
                aProspData.DfIpProd100.Mg = Val(.Value)
                .Col = 713  'DfIpProd CaO        100
                aProspData.DfIpProd100.Ca = Val(.Value)
                .Col = 714  'DfIpProd MER        100
                'Don't need to get this.
                .Col = 715  'DfIpProd CPR        100
                'Don't need to get this.
                .Col = 716  'DfIpProd Fe2O3 Adj  100
                aProspData.DfIpProd100.FeAdj = Val(.Value)
                .Col = 717  'DfIpProd I&A Adj    100
                aProspData.DfIpProd100.IaAdj = Val(.Value)
                .Col = 718  'DfIpProd MER Adj    100
                'Don't need to get this.
                '-----
                .Col = 719  'DfTcn TPA        PC
                aProspData.DfTcn.Tpa = Val(.Value)
                .Col = 720  'DfTcn Wt%        PC
                aProspData.DfTcn.WtPct = Val(.Value)
                .Col = 721  'DfTcn BPL        PC
                aProspData.DfTcn.Bpl = Val(.Value)
                .Col = 722  'DfTcn Insol      PC
                aProspData.DfTcn.Ins = Val(.Value)
                .Col = 723  'DfTcn I&A        PC
                aProspData.DfTcn.Ia = Val(.Value)
                .Col = 724  'DfTcn Fe2O3      PC
                aProspData.DfTcn.Fe = Val(.Value)
                .Col = 725  'DfTcn Al2O3      PC
                aProspData.DfTcn.Al = Val(.Value)
                .Col = 726  'DfTcn MgO        PC
                aProspData.DfTcn.Mg = Val(.Value)
                .Col = 727  'DfTcn CaO        PC
                aProspData.DfTcn.Ca = Val(.Value)
                .Col = 728  'DfTcn MER        PC
                'Don't need to get this.
                .Col = 729  'DfTcn CPR        PC
                'Don't need to get this.
                .Col = 730  'DfTcn Fe2O3 Adj  PC
                aProspData.DfTcn.FeAdj = Val(.Value)
                .Col = 731  'DfTcn I&A Adj    PC
                aProspData.DfTcn.IaAdj = Val(.Value)
                .Col = 732  'DfTcn MER Adj    PC
                'Don't need to get this.
                '-----
                .Col = 733  'DfTpr TPA        PC
                aProspData.DfTpr.Tpa = Val(.Value)
                .Col = 734  'DfTpr Wt%        PC
                aProspData.DfTpr.WtPct = Val(.Value)
                .Col = 735  'DfTpr BPL        PC
                aProspData.DfTpr.Bpl = Val(.Value)
                .Col = 736  'DfTpr Insol      PC
                aProspData.DfTpr.Ins = Val(.Value)
                .Col = 737  'DfTpr I&A        PC
                aProspData.DfTpr.Ia = Val(.Value)
                .Col = 738  'DfTpr Fe2O3      PC
                aProspData.DfTpr.Fe = Val(.Value)
                .Col = 739  'DfTpr Al2O3      PC
                aProspData.DfTpr.Al = Val(.Value)
                .Col = 740  'DfTpr MgO        PC
                aProspData.DfTpr.Mg = Val(.Value)
                .Col = 741  'DfTpr CaO        PC
                aProspData.DfTpr.Ca = Val(.Value)
                .Col = 742  'DfTpr MER        PC
                'Don't need to get this.
                .Col = 743  'DfTpr CPR        PC
                'Don't need to get this.
                .Col = 744  'DfTpr Fe2O3 Adj  PC
                aProspData.DfTpr.FeAdj = Val(.Value)
                .Col = 745  'DfTpr I&A Adj    PC
                aProspData.DfTpr.IaAdj = Val(.Value)
                .Col = 746  'DfTpr MER Adj    PC
                'Don't need to get this.
                '-----
                .Col = 747  'DfTcn TPA        100
                aProspData.DfTcn100.Tpa = Val(.Value)
                .Col = 748  'DfTcn Wt%        100
                aProspData.DfTcn100.WtPct = Val(.Value)
                .Col = 749  'DfTcn BPL        100
                aProspData.DfTcn100.Bpl = Val(.Value)
                .Col = 750  'DfTcn Insol      100
                aProspData.DfTcn100.Ins = Val(.Value)
                .Col = 751  'DfTcn I&A        100
                aProspData.DfTcn100.Ia = Val(.Value)
                .Col = 752  'DfTcn Fe2O3      100
                aProspData.DfTcn100.Fe = Val(.Value)
                .Col = 753  'DfTcn Al2O3      100
                aProspData.DfTcn100.Al = Val(.Value)
                .Col = 754  'DfTcn MgO        100
                aProspData.DfTcn100.Mg = Val(.Value)
                .Col = 755  'DfTcn CaO        100
                aProspData.DfTcn100.Ca = Val(.Value)
                .Col = 756  'DfTcn MER        100
                'Don't need to get this.
                .Col = 757  'DfTcn CPR        100
                'Don't need to get this.
                .Col = 758  'DfTcn Fe2O3 Adj  100
                aProspData.DfTcn100.FeAdj = Val(.Value)
                .Col = 759  'DfTcn I&A Adj    100
                aProspData.DfTcn100.IaAdj = Val(.Value)
                .Col = 760  'DfTcn MER Adj    100
                'Don't need to get this.
                '-----
                .Col = 761  'DfTpr TPA        100
                aProspData.DfTpr100.Tpa = Val(.Value)
                .Col = 762  'DfTpr Wt%        100
                aProspData.DfTpr100.WtPct = Val(.Value)
                .Col = 763  'DfTpr BPL        100
                aProspData.DfTpr100.Bpl = Val(.Value)
                .Col = 764  'DfTpr Insol      100
                aProspData.DfTpr100.Ins = Val(.Value)
                .Col = 765  'DfTpr I&A        100
                aProspData.DfTpr100.Ia = Val(.Value)
                .Col = 766  'DfTpr Fe2O3      100
                aProspData.DfTpr100.Fe = Val(.Value)
                .Col = 767  'DfTpr Al2O3      100
                aProspData.DfTpr100.Al = Val(.Value)
                .Col = 768  'DfTpr MgO        100
                aProspData.DfTpr100.Mg = Val(.Value)
                .Col = 769  'DfTpr CaO        100
                aProspData.DfTpr100.Ca = Val(.Value)
                .Col = 770  'DfTpr MER        100
                'Don't need to get this.
                .Col = 771  'DfTpr CPR        100
                'Don't need to get this.
                .Col = 772  'DfTpr Fe2O3 Adj  100
                aProspData.DfTpr100.FeAdj = Val(.Value)
                .Col = 773  'DfTpr I&A Adj    100
                aProspData.DfTpr100.IaAdj = Val(.Value)
                .Col = 774  'DfTpr MER Adj    100
                'Don't need to get this.
                '-----
                .Col = 775  '(Based on PC data)
                aProspData.FpbMgoOffSpec = .Text   'Yes, No, ND
                .Col = 776  '(Based on PC data)
                aProspData.IpMgoOffSpec = .Text    'Yes, No, ND
                '-----
                .Col = 777  'CpbRej TPA    PC
                aProspData.CpbRej.Tpa = Val(.Value)
                .Col = 778  'CpbRej Wt%    PC
                aProspData.CpbRej.WtPct = Val(.Value)
                .Col = 779  'CpbRej BPL    PC
                aProspData.CpbRej.Bpl = Val(.Value)
                .Col = 780  'CpbRej Insol  PC
                aProspData.CpbRej.Ins = Val(.Value)
                .Col = 781  'CpbRej I&A    PC
                aProspData.CpbRej.Ia = Val(.Value)
                .Col = 782  'CpbRej Fe2O3  PC
                aProspData.CpbRej.Fe = Val(.Value)
                .Col = 783  'CpbRej Al2O3  PC
                aProspData.CpbRej.Al = Val(.Value)
                .Col = 784  'CpbRej MgO    PC
                aProspData.CpbRej.Mg = Val(.Value)
                .Col = 785  'CpbRej CaO    PC
                aProspData.CpbRej.Ca = Val(.Value)
                .Col = 786  'CpbRej MER    PC
                'Don't need to get this.
                .Col = 787  'CpbRej CPR    PC
                'Don't need to get this.
                .Col = 788  'CpbRej Fe2O3 Adj  PC
                aProspData.CpbRej.FeAdj = Val(.Value)
                .Col = 789   'CpbRej I&A Adj  PC
                aProspData.CpbRej.IaAdj = Val(.Value)
                .Col = 790   'CpbRej MER Adj  PC
                'Don't need to get this.
                '-----
                .Col = 791  'CpbRej100 TPA    100
                aProspData.CpbRej100.Tpa = Val(.Value)
                .Col = 792  'CpbRej100 Wt%    100
                aProspData.CpbRej100.WtPct = Val(.Value)
                .Col = 793  'CpbRej100 BPL    100
                aProspData.CpbRej100.Bpl = Val(.Value)
                .Col = 794  'CpbRej100 Insol  100
                aProspData.CpbRej100.Ins = Val(.Value)
                .Col = 795  'CpbRej100 I&A    100
                aProspData.CpbRej100.Ia = Val(.Value)
                .Col = 796  'CpbRej100 Fe2O3  100
                aProspData.CpbRej100.Fe = Val(.Value)
                .Col = 797  'CpbRej100 Al2O3  100
                aProspData.CpbRej100.Al = Val(.Value)
                .Col = 798  'CpbRej100 MgO    100
                aProspData.CpbRej100.Mg = Val(.Value)
                .Col = 799  'CpbRej100 CaO    100
                aProspData.CpbRej100.Ca = Val(.Value)
                .Col = 800  'CpbRej100 MER    100
                'Don't need to get this.
                .Col = 801  'CpbRej100 CPR    100
                'Don't need to get this.
                .Col = 802  'CpbRej100 Fe2O3 Adj  100
                aProspData.CpbRej100.FeAdj = Val(.Value)
                .Col = 803  'CpbRej100 I&A Adj    100
                aProspData.CpbRej100.IaAdj = Val(.Value)
                .Col = 804  'CpbRej100 MER Adj    100
                'Don't need to get this.

                '03/24/2011**, lss New
                .Col = 805  'MpInp Fe2O3 Adj PC
                aProspData.MgPltInp.FeAdj = Val(.Value)
                .Col = 806  'MpInp I&A Adj PC
                aProspData.MgPltInp.IaAdj = Val(.Value)
                .Col = 807  'MpRej Fe2O3 Adj PC
                aProspData.MgPltRej.FeAdj = Val(.Value)
                .Col = 808  'MpRej I&A Adj PC
                aProspData.MgPltRej.IaAdj = Val(.Value)
                .Col = 809  'MpProd Fe2O3 Adj PC
                aProspData.MgPltProd.FeAdj = Val(.Value)
                .Col = 810  'MpProd I&A Adj PC
                aProspData.MgPltProd.IaAdj = Val(.Value)
                .Col = 811  'MpTcn Fe2O3 Adj PC
                aProspData.MgPltTcn.FeAdj = Val(.Value)
                .Col = 812  'MpTcn I&A Adj PC
                aProspData.MgPltTcn.IaAdj = Val(.Value)
                .Col = 813  'MpTpr Fe2O3 Adj PC
                aProspData.MgPltTpr.FeAdj = Val(.Value)
                .Col = 814  'MpTpr I&A Adj PC
                aProspData.MgPltTpr.IaAdj = Val(.Value)

                .Col = 815  'MpInp Fe2O3 Adj 100
                aProspData.MgPltInp100.FeAdj = Val(.Value)
                .Col = 816  'MpInp I&A Adj 100
                aProspData.MgPltInp100.IaAdj = Val(.Value)
                .Col = 817  'MpRej Fe2O3 Adj 100
                aProspData.MgPltRej100.FeAdj = Val(.Value)
                .Col = 818  'MpRej I&A Adj 100
                aProspData.MgPltRej100.IaAdj = Val(.Value)
                .Col = 819  'MpProd Fe2O3 Adj 100
                aProspData.MgPltProd100.FeAdj = Val(.Value)
                .Col = 820  'MpProd I&A Adj 100
                aProspData.MgPltProd100.IaAdj = Val(.Value)
                .Col = 821  'MpTcn Fe2O3 Adj 100
                aProspData.MgPltTcn100.FeAdj = Val(.Value)
                .Col = 822  'MpTcn I&A Adj 100
                aProspData.MgPltTcn100.IaAdj = Val(.Value)
                .Col = 823  'MpTpr Fe2O3 Adj 100
                aProspData.MgPltTpr100.FeAdj = Val(.Value)
                .Col = 824  'MpTpr I&A Adj 100
                aProspData.MgPltTpr100.IaAdj = Val(.Value)
            End With

            Return aProspData

        Catch ex As Exception
            MsgBox("Error getting data from review spread." & vbCrLf &
                   ex.Message, vbOKOnly + vbExclamation, "Data Process Error")
            Throw ex
        End Try

    End Function

    Public Function GetProcessThisSplit(ByVal aTwp As Integer,
                                        ByVal aRge As Integer,
                                        ByVal aSec As Integer,
                                        ByVal aHole As String,
                                        ByVal aOwnership As String,
                                        ByVal aProspDate As Date,
                                        ByVal aMinedOutStatus As Integer,
                                        ByVal aExpDrill As Integer,
                                        ByVal aAreaDefnData As ViewModels.ProspectAreaDefinition) As Boolean

        Dim HoleTypeVal As Integer

        'Need to determine:
        '1) Is drill date in selected date range?
        '2) Is the hole ownership what we want?
        '3) Is the mined-out status what we want?
        '4) Is the hole type what we want (Expanded vs Regular)?
        '5) If we have defined an area by the TRS Corner method
        '   then is this section needed?

        'Check the prospect/drill date  12/31/8888 = no date selected
        If aAreaDefnData.BeginningDrillDate <> #12/31/8888# Or
            aAreaDefnData.EndDrillDate <> #12/31/8888# Then
            'Need to check this date
            If aProspDate < aAreaDefnData.BeginningDrillDate Or
                aProspDate > aAreaDefnData.EndDrillDate Then
                Return False
            End If
        End If

        'Check the ownership
        If aAreaDefnData.Ownership <> "Don't care" AndAlso Not String.IsNullOrEmpty(aAreaDefnData.Ownership) Then
            'Need to check ownership
            If aOwnership <> aAreaDefnData.Ownership Then
                Return False
            End If
        End If

        'Check the mined-out status -- skip mined out holes??
        'aAreaDefnData.MinedStatus will be "Don't care", "Yes", or "No"
        If aAreaDefnData.MinedStatus = "Yes" Then
            'aMinedOutStatus will be 1 = "Yes" (Hole has been mined out.)
            '                        0 = "No"  (Hole has not been mined out.)
            If aMinedOutStatus = 1 Then
                'Hole with this split has been mined out -- skip this split.
                Return False
            End If
        End If

        'Check hole type (Expanded vs Regular)
        If aAreaDefnData.HoleMetLabProcessType <> "Don't care" AndAlso Not String.IsNullOrEmpty(aAreaDefnData.HoleMetLabProcessType) Then
            'Need to check hole type
            If aAreaDefnData.HoleMetLabProcessType = "Expanded" Then
                HoleTypeVal = 1
            Else
                HoleTypeVal = 0
            End If
            If HoleTypeVal <> aExpDrill Then
                Return False
            End If
        End If

        If aAreaDefnData.AreaMethod = "TRS Corner" Then
            'Need to check if we need this split based on the
            'Township, Range, and Section
            If SectionInRange(aTwp,
                              aRge,
                              aSec,
                              aAreaDefnData.TRSCorners.ToList()) = False Then
                Return False
            End If
        End If

        Return True

    End Function

    Public Function SectionInRange(ByVal aTwpTarg As Integer,
                                   ByVal aRgeTarg As Integer,
                                   ByVal aSecTarg As Integer,
                                   ByVal aSsAreaTrsCorner As List(Of ViewModels.ProspectAreaTRSCorner)) As Boolean

        Dim Ne As mSecCornerType
        Dim Sw As mSecCornerType
        Dim NeXY As mSecCoordType
        Dim SwXY As mSecCoordType
        Dim TargXY As mSecCoordType
        Dim Xok As Boolean
        Dim Yok As Boolean

        'Have to check if this section is any of the defined areas
        'in aSsAreaTrsCorner.
        SectionInRange = False

        For Each item In aSsAreaTrsCorner
            Sw.Twp = item.SW_Township
            Sw.Rge = item.SW_Range
            Sw.Sec = item.SW_Section
            Ne.Twp = item.NE_Township
            Ne.Rge = item.NE_Range
            Ne.Sec = item.NE_Section
            If Sw.Twp <> 0 And Sw.Rge <> 0 And Sw.Sec <> 0 And
                Ne.Twp <> 0 And Ne.Rge <> 0 And Ne.Sec <> 0 Then
                NeXY = GetSecXY(Ne.Twp, Ne.Rge, Ne.Sec)
                SwXY = GetSecXY(Sw.Twp, Sw.Rge, Sw.Sec)
                TargXY = GetSecXY(aTwpTarg, aRgeTarg, aSecTarg)
                If TargXY.X >= SwXY.X And TargXY.X <= NeXY.X Then
                    Xok = True
                Else
                    Xok = False
                End If
                If TargXY.Y >= NeXY.Y And TargXY.Y <= SwXY.Y Then
                    Yok = True
                Else
                    Yok = False
                End If
                If Xok = True And Yok = True Then
                    SectionInRange = True
                    Exit Function
                End If
            End If
        Next
    End Function

    Public Function GetSecXY(ByVal aTwp As Integer,
                         ByVal aRge As Integer,
                         ByVal aSec As Integer) As mSecCoordType

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim X As Integer
        Dim Y As Integer

        X = 0
        Y = 0

        'Need X and Y semi-coordinates for this section

        'Determine Y values
        If aSec >= 1 And aSec <= 6 Then
            Y = 1
        End If
        If aSec >= 7 And aSec <= 12 Then
            Y = 2
        End If
        If aSec >= 13 And aSec <= 18 Then
            Y = 3
        End If
        If aSec >= 19 And aSec <= 24 Then
            Y = 4
        End If
        If aSec >= 25 And aSec <= 30 Then
            Y = 5
        End If
        If aSec >= 31 And aSec <= 36 Then
            Y = 6
        End If

        'Determine X values!
        If aSec = 6 Or aSec = 7 Or aSec = 18 Or aSec = 19 Or
        aSec = 30 Or aSec = 31 Then
            X = 1
        End If
        If aSec = 5 Or aSec = 8 Or aSec = 17 Or aSec = 20 Or
        aSec = 29 Or aSec = 32 Then
            X = 2
        End If
        If aSec = 4 Or aSec = 9 Or aSec = 16 Or aSec = 21 Or
        aSec = 28 Or aSec = 33 Then
            X = 3
        End If
        If aSec = 3 Or aSec = 10 Or aSec = 15 Or aSec = 22 Or
        aSec = 27 Or aSec = 34 Then
            X = 4
        End If
        If aSec = 2 Or aSec = 11 Or aSec = 14 Or aSec = 23 Or
        aSec = 26 Or aSec = 35 Then
            X = 5
        End If
        If aSec = 1 Or aSec = 12 Or aSec = 13 Or aSec = 24 Or
        aSec = 25 Or aSec = 36 Then
            X = 6
        End If

        GetSecXY.X = aRge + X / 10    'Rge.X
        GetSecXY.Y = aTwp + Y / 10    'Twp.Y
    End Function

    Public Sub ZeroRdctnSumData(ByRef aProspSumData As gRawProspSplRdctnSumType)

        With aProspSumData
            .OvbThk = 0
            .ItbThk = 0
            .MtxThk = 0
            .WstThk = 0
            '-----
            .MtxTPA = 0
            .MtxTpa100 = 0
            '-----
            .Os.Tpa = 0
            .Os.TwBpl = 0
            .Os.BplTons = 0
            .Os.TwIns = 0
            .Os.InsTons = 0
            .Os.TwIa = 0
            .Os.IaTons = 0
            .Os.TwFe = 0
            .Os.FeTons = 0
            .Os.TwAl = 0
            .Os.AlTons = 0
            .Os.TwMg = 0
            .Os.MgTons = 0
            .Os.TwCa = 0
            .Os.CaTons = 0

            .Os.TwFeAdj = 0     '03/24/2011**, lss
            .Os.TwIaAdj = 0     '03/24/2011**, lss
            .Os.FeAdjTons = 0   '03/24/2011**, lss
            .Os.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Cpb.Tpa = 0
            .Cpb.TwBpl = 0
            .Cpb.BplTons = 0
            .Cpb.TwIns = 0
            .Cpb.InsTons = 0
            .Cpb.TwIa = 0
            .Cpb.IaTons = 0
            .Cpb.TwFe = 0
            .Cpb.FeTons = 0
            .Cpb.TwAl = 0
            .Cpb.AlTons = 0
            .Cpb.TwMg = 0
            .Cpb.MgTons = 0
            .Cpb.TwCa = 0
            .Cpb.CaTons = 0

            .Cpb.TwFeAdj = 0     '03/24/2011**, lss
            .Cpb.TwIaAdj = 0     '03/24/2011**, lss
            .Cpb.FeAdjTons = 0   '03/24/2011**, lss
            .Cpb.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .CpbRej.Tpa = 0
            .CpbRej.TwBpl = 0
            .CpbRej.BplTons = 0
            .CpbRej.TwIns = 0
            .CpbRej.InsTons = 0
            .CpbRej.TwIa = 0
            .CpbRej.IaTons = 0
            .CpbRej.TwFe = 0
            .CpbRej.FeTons = 0
            .CpbRej.TwAl = 0
            .CpbRej.AlTons = 0
            .CpbRej.TwMg = 0
            .CpbRej.MgTons = 0
            .CpbRej.TwCa = 0
            .CpbRej.CaTons = 0

            .CpbRej.TwFeAdj = 0     '03/24/2011**, lss
            .CpbRej.TwIaAdj = 0     '03/24/2011**, lss
            .CpbRej.FeAdjTons = 0   '03/24/2011**, lss
            .CpbRej.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Fpb.Tpa = 0
            .Fpb.TwBpl = 0
            .Fpb.BplTons = 0
            .Fpb.TwIns = 0
            .Fpb.InsTons = 0
            .Fpb.TwIa = 0
            .Fpb.IaTons = 0
            .Fpb.TwFe = 0
            .Fpb.FeTons = 0
            .Fpb.TwAl = 0
            .Fpb.AlTons = 0
            .Fpb.TwMg = 0
            .Fpb.MgTons = 0
            .Fpb.TwCa = 0
            .Fpb.CaTons = 0

            .Fpb.TwFeAdj = 0     '03/24/2011**, lss
            .Fpb.TwIaAdj = 0     '03/24/2011**, lss
            .Fpb.FeAdjTons = 0   '03/24/2011**, lss
            .Fpb.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Ip.Tpa = 0
            .Ip.TwBpl = 0
            .Ip.BplTons = 0
            .Ip.TwIns = 0
            .Ip.InsTons = 0
            .Ip.TwIa = 0
            .Ip.IaTons = 0
            .Ip.TwFe = 0
            .Ip.FeTons = 0
            .Ip.TwAl = 0
            .Ip.AlTons = 0
            .Ip.TwMg = 0
            .Ip.MgTons = 0
            .Ip.TwCa = 0
            .Ip.CaTons = 0

            .Ip.TwFeAdj = 0     '03/24/2011**, lss
            .Ip.TwIaAdj = 0     '03/24/2011**, lss
            .Ip.FeAdjTons = 0   '03/24/2011**, lss
            .Ip.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Ccn.Tpa = 0
            .Ccn.TwBpl = 0
            .Ccn.BplTons = 0
            .Ccn.TwIns = 0
            .Ccn.InsTons = 0
            .Ccn.TwIa = 0
            .Ccn.IaTons = 0
            .Ccn.TwFe = 0
            .Ccn.FeTons = 0
            .Ccn.TwAl = 0
            .Ccn.AlTons = 0
            .Ccn.TwMg = 0
            .Ccn.MgTons = 0
            .Ccn.TwCa = 0
            .Ccn.CaTons = 0

            .Ccn.TwFeAdj = 0     '03/24/2011**, lss
            .Ccn.TwIaAdj = 0     '03/24/2011**, lss
            .Ccn.FeAdjTons = 0   '03/24/2011**, lss
            .Ccn.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Fcn.Tpa = 0
            .Fcn.TwBpl = 0
            .Fcn.BplTons = 0
            .Fcn.TwIns = 0
            .Fcn.InsTons = 0
            .Fcn.TwIa = 0
            .Fcn.IaTons = 0
            .Fcn.TwFe = 0
            .Fcn.FeTons = 0
            .Fcn.TwAl = 0
            .Fcn.AlTons = 0
            .Fcn.TwMg = 0
            .Fcn.MgTons = 0
            .Fcn.TwCa = 0
            .Fcn.CaTons = 0

            .Fcn.TwFeAdj = 0     '03/24/2011**, lss
            .Fcn.TwIaAdj = 0     '03/24/2011**, lss
            .Fcn.FeAdjTons = 0   '03/24/2011**, lss
            .Fcn.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Wcl.Tpa = 0
            .Wcl.TwBpl = 0
            .Wcl.BplTons = 0
            '-----
            .Cfd.Tpa = 0
            .Cfd.TwBpl = 0
            .Cfd.BplTons = 0
            '-----
            .Ffd.Tpa = 0
            .Ffd.TwBpl = 0
            .Ffd.BplTons = 0
            '-----
            .Tfd.Tpa = 0
            .Tfd.TwBpl = 0
            .Tfd.BplTons = 0
            '-----
            .Ttl.Tpa = 0
            .Ttl.TwBpl = 0
            .Ttl.BplTons = 0
            '-----
            .Tpr.Tpa = 0
            .Tpr.TwBpl = 0
            .Tpr.BplTons = 0
            .Tpr.TwIns = 0
            .Tpr.InsTons = 0
            .Tpr.TwIa = 0
            .Tpr.IaTons = 0
            .Tpr.TwFe = 0
            .Tpr.FeTons = 0
            .Tpr.TwAl = 0
            .Tpr.AlTons = 0
            .Tpr.TwMg = 0
            .Tpr.MgTons = 0
            .Tpr.TwCa = 0
            .Tpr.CaTons = 0

            .Tpr.TwFeAdj = 0     '03/24/2011**, lss
            .Tpr.TwIaAdj = 0     '03/24/2011**, lss
            .Tpr.FeAdjTons = 0   '03/24/2011**, lss
            .Tpr.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Tpb.Tpa = 0
            .Tpb.TwBpl = 0
            .Tpb.BplTons = 0
            .Tpb.TwIns = 0
            .Tpb.InsTons = 0
            .Tpb.TwIa = 0
            .Tpb.IaTons = 0
            .Tpb.TwFe = 0
            .Tpb.FeTons = 0
            .Tpb.TwAl = 0
            .Tpb.AlTons = 0
            .Tpb.TwMg = 0
            .Tpb.MgTons = 0
            .Tpb.TwCa = 0
            .Tpb.CaTons = 0

            .Tpb.TwFeAdj = 0     '03/24/2011**, lss
            .Tpb.TwIaAdj = 0     '03/24/2011**, lss
            .Tpb.FeAdjTons = 0   '03/24/2011**, lss
            .Tpb.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Os100.Tpa = 0
            .Os100.TwBpl = 0
            .Os100.BplTons = 0
            .Os100.TwIns = 0
            .Os100.InsTons = 0
            .Os100.TwIa = 0
            .Os100.IaTons = 0
            .Os100.TwFe = 0
            .Os100.FeTons = 0
            .Os100.TwAl = 0
            .Os100.AlTons = 0
            .Os100.TwMg = 0
            .Os100.MgTons = 0
            .Os100.TwCa = 0
            .Os100.CaTons = 0

            .Os100.TwFeAdj = 0     '03/24/2011**, lss
            .Os100.TwIaAdj = 0     '03/24/2011**, lss
            .Os100.FeAdjTons = 0   '03/24/2011**, lss
            .Os100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Cpb100.Tpa = 0
            .Cpb100.TwBpl = 0
            .Cpb100.BplTons = 0
            .Cpb100.TwIns = 0
            .Cpb100.InsTons = 0
            .Cpb100.TwIa = 0
            .Cpb100.IaTons = 0
            .Cpb100.TwFe = 0
            .Cpb100.FeTons = 0
            .Cpb100.TwAl = 0
            .Cpb100.AlTons = 0
            .Cpb100.TwMg = 0
            .Cpb100.MgTons = 0
            .Cpb100.TwCa = 0
            .Cpb100.CaTons = 0

            .Cpb100.TwFeAdj = 0     '03/24/2011**, lss
            .Cpb100.TwIaAdj = 0     '03/24/2011**, lss
            .Cpb100.FeAdjTons = 0   '03/24/2011**, lss
            .Cpb100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .CpbRej100.Tpa = 0
            .CpbRej100.TwBpl = 0
            .CpbRej100.BplTons = 0
            .CpbRej100.TwIns = 0
            .CpbRej100.InsTons = 0
            .CpbRej100.TwIa = 0
            .CpbRej100.IaTons = 0
            .CpbRej100.TwFe = 0
            .CpbRej100.FeTons = 0
            .CpbRej100.TwAl = 0
            .CpbRej100.AlTons = 0
            .CpbRej100.TwMg = 0
            .CpbRej100.MgTons = 0
            .CpbRej100.TwCa = 0
            .CpbRej100.CaTons = 0

            .CpbRej100.TwFeAdj = 0     '03/24/2011**, lss
            .CpbRej100.TwIaAdj = 0     '03/24/2011**, lss
            .CpbRej100.FeAdjTons = 0   '03/24/2011**, lss
            .CpbRej100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Fpb100.Tpa = 0
            .Fpb100.TwBpl = 0
            .Fpb100.BplTons = 0
            .Fpb100.TwIns = 0
            .Fpb100.InsTons = 0
            .Fpb100.TwIa = 0
            .Fpb100.IaTons = 0
            .Fpb100.TwFe = 0
            .Fpb100.FeTons = 0
            .Fpb100.TwAl = 0
            .Fpb100.AlTons = 0
            .Fpb100.TwMg = 0
            .Fpb100.MgTons = 0
            .Fpb100.TwCa = 0
            .Fpb100.CaTons = 0

            .Fpb100.TwFeAdj = 0     '03/24/2011**, lss
            .Fpb100.TwIaAdj = 0     '03/24/2011**, lss
            .Fpb100.FeAdjTons = 0   '03/24/2011**, lss
            .Fpb100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Ip100.Tpa = 0
            .Ip100.TwBpl = 0
            .Ip100.BplTons = 0
            .Ip100.TwIns = 0
            .Ip100.InsTons = 0
            .Ip100.TwIa = 0
            .Ip100.IaTons = 0
            .Ip100.TwFe = 0
            .Ip100.FeTons = 0
            .Ip100.TwAl = 0
            .Ip100.AlTons = 0
            .Ip100.TwMg = 0
            .Ip100.MgTons = 0
            .Ip100.TwCa = 0
            .Ip100.CaTons = 0

            .Ip100.TwFeAdj = 0     '03/24/2011**, lss
            .Ip100.TwIaAdj = 0     '03/24/2011**, lss
            .Ip100.FeAdjTons = 0   '03/24/2011**, lss
            .Ip100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Ccn100.Tpa = 0
            .Ccn100.TwBpl = 0
            .Ccn100.BplTons = 0
            .Ccn100.TwIns = 0
            .Ccn100.InsTons = 0
            .Ccn100.TwIa = 0
            .Ccn100.IaTons = 0
            .Ccn100.TwFe = 0
            .Ccn100.FeTons = 0
            .Ccn100.TwAl = 0
            .Ccn100.AlTons = 0
            .Ccn100.TwMg = 0
            .Ccn100.MgTons = 0
            .Ccn100.TwCa = 0
            .Ccn100.CaTons = 0

            .Ccn100.TwFeAdj = 0     '03/24/2011**, lss
            .Ccn100.TwIaAdj = 0     '03/24/2011**, lss
            .Ccn100.FeAdjTons = 0   '03/24/2011**, lss
            .Ccn100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Fcn100.Tpa = 0
            .Fcn100.TwBpl = 0
            .Fcn100.BplTons = 0
            .Fcn100.TwIns = 0
            .Fcn100.InsTons = 0
            .Fcn100.TwIa = 0
            .Fcn100.IaTons = 0
            .Fcn100.TwFe = 0
            .Fcn100.FeTons = 0
            .Fcn100.TwAl = 0
            .Fcn100.AlTons = 0
            .Fcn100.TwMg = 0
            .Fcn100.MgTons = 0
            .Fcn100.TwCa = 0
            .Fcn100.CaTons = 0

            .Fcn100.TwFeAdj = 0     '03/24/2011**, lss
            .Fcn100.TwIaAdj = 0     '03/24/2011**, lss
            .Fcn100.FeAdjTons = 0   '03/24/2011**, lss
            .Fcn100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Tpr100.Tpa = 0
            .Tpr100.TwBpl = 0
            .Tpr100.BplTons = 0
            .Tpr100.TwIns = 0
            .Tpr100.InsTons = 0
            .Tpr100.TwIa = 0
            .Tpr100.IaTons = 0
            .Tpr100.TwFe = 0
            .Tpr100.FeTons = 0
            .Tpr100.TwAl = 0
            .Tpr100.AlTons = 0
            .Tpr100.TwMg = 0
            .Tpr100.MgTons = 0
            .Tpr100.TwCa = 0
            .Tpr100.CaTons = 0

            .Tpr100.TwFeAdj = 0     '03/24/2011**, lss
            .Tpr100.TwIaAdj = 0     '03/24/2011**, lss
            .Tpr100.FeAdjTons = 0   '03/24/2011**, lss
            .Tpr100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Tpb100.Tpa = 0
            .Tpb100.TwBpl = 0
            .Tpb100.BplTons = 0
            .Tpb100.TwIns = 0
            .Tpb100.InsTons = 0
            .Tpb100.TwIa = 0
            .Tpb100.IaTons = 0
            .Tpb100.TwFe = 0
            .Tpb100.FeTons = 0
            .Tpb100.TwAl = 0
            .Tpb100.AlTons = 0
            .Tpb100.TwMg = 0
            .Tpb100.MgTons = 0
            .Tpb100.TwCa = 0
            .Tpb100.CaTons = 0

            .Tpb100.TwFeAdj = 0     '03/24/2011**, lss
            .Tpb100.TwIaAdj = 0     '03/24/2011**, lss
            .Tpb100.FeAdjTons = 0   '03/24/2011**, lss
            .Tpb100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .Wcl100.Tpa = 0
            .Wcl100.TwBpl = 0
            .Wcl100.BplTons = 0
            '-----
            .Cfd100.Tpa = 0
            .Cfd100.TwBpl = 0
            .Cfd100.BplTons = 0
            '-----
            .Ffd100.Tpa = 0
            .Ffd100.TwBpl = 0
            .Ffd100.BplTons = 0
            '-----
            .Ttl100.Tpa = 0
            .Ttl100.TwBpl = 0
            .Ttl100.BplTons = 0
            '-----
            .MtxDensityFt = 0
            .MtxFt = 0
            .NumMineableSplits = 0
            .NumMineableSplitsForced = 0
            .MtxTpaWet = 0
            '-----
            .MgPltInp.Tpa = 0
            .MgPltInp.TwBpl = 0
            .MgPltInp.BplTons = 0
            .MgPltInp.TwIns = 0
            .MgPltInp.InsTons = 0
            .MgPltInp.TwIa = 0
            .MgPltInp.IaTons = 0
            .MgPltInp.TwFe = 0
            .MgPltInp.FeTons = 0
            .MgPltInp.TwAl = 0
            .MgPltInp.AlTons = 0
            .MgPltInp.TwMg = 0
            .MgPltInp.MgTons = 0
            .MgPltInp.TwCa = 0
            .MgPltInp.CaTons = 0

            .MgPltInp.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltInp.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltInp.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltInp.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltInp100.Tpa = 0
            .MgPltInp100.TwBpl = 0
            .MgPltInp100.BplTons = 0
            .MgPltInp100.TwIns = 0
            .MgPltInp100.InsTons = 0
            .MgPltInp100.TwIa = 0
            .MgPltInp100.IaTons = 0
            .MgPltInp100.TwFe = 0
            .MgPltInp100.FeTons = 0
            .MgPltInp100.TwAl = 0
            .MgPltInp100.AlTons = 0
            .MgPltInp100.TwMg = 0
            .MgPltInp100.MgTons = 0
            .MgPltInp100.TwCa = 0
            .MgPltInp100.CaTons = 0

            .MgPltInp100.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltInp100.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltInp100.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltInp100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltRej.Tpa = 0
            .MgPltRej.TwBpl = 0
            .MgPltRej.BplTons = 0
            .MgPltRej.TwIns = 0
            .MgPltRej.InsTons = 0
            .MgPltRej.TwIa = 0
            .MgPltRej.IaTons = 0
            .MgPltRej.TwFe = 0
            .MgPltRej.FeTons = 0
            .MgPltRej.TwAl = 0
            .MgPltRej.AlTons = 0
            .MgPltRej.TwMg = 0
            .MgPltRej.MgTons = 0
            .MgPltRej.TwCa = 0
            .MgPltRej.CaTons = 0

            .MgPltRej.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltRej.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltRej.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltRej.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltRej100.Tpa = 0
            .MgPltRej100.TwBpl = 0
            .MgPltRej100.BplTons = 0
            .MgPltRej100.TwIns = 0
            .MgPltRej100.InsTons = 0
            .MgPltRej100.TwIa = 0
            .MgPltRej100.IaTons = 0
            .MgPltRej100.TwFe = 0
            .MgPltRej100.FeTons = 0
            .MgPltRej100.TwAl = 0
            .MgPltRej100.AlTons = 0
            .MgPltRej100.TwMg = 0
            .MgPltRej100.MgTons = 0
            .MgPltRej100.TwCa = 0
            .MgPltRej100.CaTons = 0

            .MgPltRej100.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltRej100.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltRej100.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltRej100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltProd.Tpa = 0
            .MgPltProd.TwBpl = 0
            .MgPltProd.BplTons = 0
            .MgPltProd.TwIns = 0
            .MgPltProd.InsTons = 0
            .MgPltProd.TwIa = 0
            .MgPltProd.IaTons = 0
            .MgPltProd.TwFe = 0
            .MgPltProd.FeTons = 0
            .MgPltProd.TwAl = 0
            .MgPltProd.AlTons = 0
            .MgPltProd.TwMg = 0
            .MgPltProd.MgTons = 0
            .MgPltProd.TwCa = 0
            .MgPltProd.CaTons = 0

            .MgPltProd.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltProd.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltProd.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltProd.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltProd100.Tpa = 0
            .MgPltProd100.TwBpl = 0
            .MgPltProd100.BplTons = 0
            .MgPltProd100.TwIns = 0
            .MgPltProd100.InsTons = 0
            .MgPltProd100.TwIa = 0
            .MgPltProd100.IaTons = 0
            .MgPltProd100.TwFe = 0
            .MgPltProd100.FeTons = 0
            .MgPltProd100.TwAl = 0
            .MgPltProd100.AlTons = 0
            .MgPltProd100.TwMg = 0
            .MgPltProd100.MgTons = 0
            .MgPltProd100.TwCa = 0
            .MgPltProd100.CaTons = 0

            .MgPltProd100.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltProd100.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltProd100.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltProd100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .TpbRej.Tpa = 0
            .TpbRej.TwBpl = 0
            .TpbRej.BplTons = 0
            .TpbRej.TwIns = 0
            .TpbRej.InsTons = 0
            .TpbRej.TwIa = 0
            .TpbRej.IaTons = 0
            .TpbRej.TwFe = 0
            .TpbRej.FeTons = 0
            .TpbRej.TwAl = 0
            .TpbRej.AlTons = 0
            .TpbRej.TwMg = 0
            .TpbRej.MgTons = 0
            .TpbRej.TwCa = 0
            .TpbRej.CaTons = 0

            .TpbRej.TwFeAdj = 0     '03/24/2011**, lss
            .TpbRej.TwIaAdj = 0     '03/24/2011**, lss
            .TpbRej.FeAdjTons = 0   '03/24/2011**, lss
            .TpbRej.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .TpbRej100.Tpa = 0
            .TpbRej100.TwBpl = 0
            .TpbRej100.BplTons = 0
            .TpbRej100.TwIns = 0
            .TpbRej100.InsTons = 0
            .TpbRej100.TwIa = 0
            .TpbRej100.IaTons = 0
            .TpbRej100.TwFe = 0
            .TpbRej100.FeTons = 0
            .TpbRej100.TwAl = 0
            .TpbRej100.AlTons = 0
            .TpbRej100.TwMg = 0
            .TpbRej100.MgTons = 0
            .TpbRej100.TwCa = 0
            .TpbRej100.CaTons = 0

            .TpbRej100.TwFeAdj = 0     '03/24/2011**, lss
            .TpbRej100.TwIaAdj = 0     '03/24/2011**, lss
            .TpbRej100.FeAdjTons = 0   '03/24/2011**, lss
            .TpbRej100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltTpr.Tpa = 0
            .MgPltTpr.TwBpl = 0
            .MgPltTpr.BplTons = 0
            .MgPltTpr.TwIns = 0
            .MgPltTpr.InsTons = 0
            .MgPltTpr.TwIa = 0
            .MgPltTpr.IaTons = 0
            .MgPltTpr.TwFe = 0
            .MgPltTpr.FeTons = 0
            .MgPltTpr.TwAl = 0
            .MgPltTpr.AlTons = 0
            .MgPltTpr.TwMg = 0
            .MgPltTpr.MgTons = 0
            .MgPltTpr.TwCa = 0
            .MgPltTpr.CaTons = 0

            .MgPltTpr.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltTpr.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltTpr.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltTpr.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltTpr100.Tpa = 0
            .MgPltTpr100.TwBpl = 0
            .MgPltTpr100.BplTons = 0
            .MgPltTpr100.TwIns = 0
            .MgPltTpr100.InsTons = 0
            .MgPltTpr100.TwIa = 0
            .MgPltTpr100.IaTons = 0
            .MgPltTpr100.TwFe = 0
            .MgPltTpr100.FeTons = 0
            .MgPltTpr100.TwAl = 0
            .MgPltTpr100.AlTons = 0
            .MgPltTpr100.TwMg = 0
            .MgPltTpr100.MgTons = 0
            .MgPltTpr100.TwCa = 0
            .MgPltTpr100.CaTons = 0

            .MgPltTpr100.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltTpr100.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltTpr100.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltTpr100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltTcn.Tpa = 0
            .MgPltTcn.TwBpl = 0
            .MgPltTcn.BplTons = 0
            .MgPltTcn.TwIns = 0
            .MgPltTcn.InsTons = 0
            .MgPltTcn.TwIa = 0
            .MgPltTcn.IaTons = 0
            .MgPltTcn.TwFe = 0
            .MgPltTcn.FeTons = 0
            .MgPltTcn.TwAl = 0
            .MgPltTcn.AlTons = 0
            .MgPltTcn.TwMg = 0
            .MgPltTcn.MgTons = 0
            .MgPltTcn.TwCa = 0
            .MgPltTcn.CaTons = 0

            .MgPltTcn.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltTcn.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltTcn.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltTcn.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .MgPltTcn100.Tpa = 0
            .MgPltTcn100.TwBpl = 0
            .MgPltTcn100.BplTons = 0
            .MgPltTcn100.TwIns = 0
            .MgPltTcn100.InsTons = 0
            .MgPltTcn100.TwIa = 0
            .MgPltTcn100.IaTons = 0
            .MgPltTcn100.TwFe = 0
            .MgPltTcn100.FeTons = 0
            .MgPltTcn100.TwAl = 0
            .MgPltTcn100.AlTons = 0
            .MgPltTcn100.TwMg = 0
            .MgPltTcn100.MgTons = 0
            .MgPltTcn100.TwCa = 0
            .MgPltTcn100.CaTons = 0

            .MgPltTcn100.TwFeAdj = 0     '03/24/2011**, lss
            .MgPltTcn100.TwIaAdj = 0     '03/24/2011**, lss
            .MgPltTcn100.FeAdjTons = 0   '03/24/2011**, lss
            .MgPltTcn100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            '09/11/2009 -- Added the following
            'Currently in Sub ZeroRdctnSumData
            .TcnRej.Tpa = 0
            .TcnRej.TwBpl = 0
            .TcnRej.BplTons = 0
            .TcnRej.TwIns = 0
            .TcnRej.InsTons = 0
            .TcnRej.TwIa = 0
            .TcnRej.IaTons = 0
            .TcnRej.TwFe = 0
            .TcnRej.FeTons = 0
            .TcnRej.TwAl = 0
            .TcnRej.AlTons = 0
            .TcnRej.TwMg = 0
            .TcnRej.MgTons = 0
            .TcnRej.TwCa = 0
            .TcnRej.CaTons = 0

            .TcnRej.TwFeAdj = 0     '03/24/2011**, lss
            .TcnRej.TwIaAdj = 0     '03/24/2011**, lss
            .TcnRej.FeAdjTons = 0   '03/24/2011**, lss
            .TcnRej.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .TcnRej100.Tpa = 0
            .TcnRej100.TwBpl = 0
            .TcnRej100.BplTons = 0
            .TcnRej100.TwIns = 0
            .TcnRej100.InsTons = 0
            .TcnRej100.TwIa = 0
            .TcnRej100.IaTons = 0
            .TcnRej100.TwFe = 0
            .TcnRej100.FeTons = 0
            .TcnRej100.TwAl = 0
            .TcnRej100.AlTons = 0
            .TcnRej100.TwMg = 0
            .TcnRej100.MgTons = 0
            .TcnRej100.TwCa = 0
            .TcnRej100.CaTons = 0

            .TcnRej100.TwFeAdj = 0     '03/24/2011**, lss
            .TcnRej100.TwIaAdj = 0     '03/24/2011**, lss
            .TcnRej100.FeAdjTons = 0   '03/24/2011**, lss
            .TcnRej100.IaAdjTons = 0   '03/24/2011**, lss

            '06/16/2010 -- Added the following
            'Currently in Sub ZeroRdctnSumData
            .DfFpbInp.Tpa = 0
            .DfFpbInp.TwBpl = 0
            .DfFpbInp.BplTons = 0
            .DfFpbInp.TwIns = 0
            .DfFpbInp.InsTons = 0
            .DfFpbInp.TwIa = 0
            .DfFpbInp.IaTons = 0
            .DfFpbInp.TwFe = 0
            .DfFpbInp.FeTons = 0
            .DfFpbInp.TwAl = 0
            .DfFpbInp.AlTons = 0
            .DfFpbInp.TwMg = 0
            .DfFpbInp.MgTons = 0
            .DfFpbInp.TwCa = 0
            .DfFpbInp.CaTons = 0

            .DfFpbInp.TwFeAdj = 0     '03/24/2011**, lss
            .DfFpbInp.TwIaAdj = 0     '03/24/2011**, lss
            .DfFpbInp.FeAdjTons = 0   '03/24/2011**, lss
            .DfFpbInp.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfFpbProd.Tpa = 0
            .DfFpbProd.TwBpl = 0
            .DfFpbProd.BplTons = 0
            .DfFpbProd.TwIns = 0
            .DfFpbProd.InsTons = 0
            .DfFpbProd.TwIa = 0
            .DfFpbProd.IaTons = 0
            .DfFpbProd.TwFe = 0
            .DfFpbProd.FeTons = 0
            .DfFpbProd.TwAl = 0
            .DfFpbProd.AlTons = 0
            .DfFpbProd.TwMg = 0
            .DfFpbProd.MgTons = 0
            .DfFpbProd.TwCa = 0
            .DfFpbProd.CaTons = 0

            .DfFpbProd.TwFeAdj = 0     '03/24/2011**, lss
            .DfFpbProd.TwIaAdj = 0     '03/24/2011**, lss
            .DfFpbProd.FeAdjTons = 0   '03/24/2011**, lss
            .DfFpbProd.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfFpbInp100.Tpa = 0
            .DfFpbInp100.TwBpl = 0
            .DfFpbInp100.BplTons = 0
            .DfFpbInp100.TwIns = 0
            .DfFpbInp100.InsTons = 0
            .DfFpbInp100.TwIa = 0
            .DfFpbInp100.IaTons = 0
            .DfFpbInp100.TwFe = 0
            .DfFpbInp100.FeTons = 0
            .DfFpbInp100.TwAl = 0
            .DfFpbInp100.AlTons = 0
            .DfFpbInp100.TwMg = 0
            .DfFpbInp100.MgTons = 0
            .DfFpbInp100.TwCa = 0
            .DfFpbInp100.CaTons = 0

            .DfFpbInp100.TwFeAdj = 0     '03/24/2011**, lss
            .DfFpbInp100.TwIaAdj = 0     '03/24/2011**, lss
            .DfFpbInp100.FeAdjTons = 0   '03/24/2011**, lss
            .DfFpbInp100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfFpbProd100.Tpa = 0
            .DfFpbProd100.TwBpl = 0
            .DfFpbProd100.BplTons = 0
            .DfFpbProd100.TwIns = 0
            .DfFpbProd100.InsTons = 0
            .DfFpbProd100.TwIa = 0
            .DfFpbProd100.IaTons = 0
            .DfFpbProd100.TwFe = 0
            .DfFpbProd100.FeTons = 0
            .DfFpbProd100.TwAl = 0
            .DfFpbProd100.AlTons = 0
            .DfFpbProd100.TwMg = 0
            .DfFpbProd100.MgTons = 0
            .DfFpbProd100.TwCa = 0
            .DfFpbProd100.CaTons = 0

            .DfFpbProd100.TwFeAdj = 0     '03/24/2011**, lss
            .DfFpbProd100.TwIaAdj = 0     '03/24/2011**, lss
            .DfFpbProd100.FeAdjTons = 0   '03/24/2011**, lss
            .DfFpbProd100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfIpInp.Tpa = 0
            .DfIpInp.TwBpl = 0
            .DfIpInp.BplTons = 0
            .DfIpInp.TwIns = 0
            .DfIpInp.InsTons = 0
            .DfIpInp.TwIa = 0
            .DfIpInp.IaTons = 0
            .DfIpInp.TwFe = 0
            .DfIpInp.FeTons = 0
            .DfIpInp.TwAl = 0
            .DfIpInp.AlTons = 0
            .DfIpInp.TwMg = 0
            .DfIpInp.MgTons = 0
            .DfIpInp.TwCa = 0
            .DfIpInp.CaTons = 0

            .DfIpInp.TwFeAdj = 0     '03/24/2011**, lss
            .DfIpInp.TwIaAdj = 0     '03/24/2011**, lss
            .DfIpInp.FeAdjTons = 0   '03/24/2011**, lss
            .DfIpInp.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfIpProd.Tpa = 0
            .DfIpProd.TwBpl = 0
            .DfIpProd.BplTons = 0
            .DfIpProd.TwIns = 0
            .DfIpProd.InsTons = 0
            .DfIpProd.TwIa = 0
            .DfIpProd.IaTons = 0
            .DfIpProd.TwFe = 0
            .DfIpProd.FeTons = 0
            .DfIpProd.TwAl = 0
            .DfIpProd.AlTons = 0
            .DfIpProd.TwMg = 0
            .DfIpProd.MgTons = 0
            .DfIpProd.TwCa = 0
            .DfIpProd.CaTons = 0

            .DfIpProd.TwFeAdj = 0     '03/24/2011**, lss
            .DfIpProd.TwIaAdj = 0     '03/24/2011**, lss
            .DfIpProd.FeAdjTons = 0   '03/24/2011**, lss
            .DfIpProd.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfIpInp100.Tpa = 0
            .DfIpInp100.TwBpl = 0
            .DfIpInp100.BplTons = 0
            .DfIpInp100.TwIns = 0
            .DfIpInp100.InsTons = 0
            .DfIpInp100.TwIa = 0
            .DfIpInp100.IaTons = 0
            .DfIpInp100.TwFe = 0
            .DfIpInp100.FeTons = 0
            .DfIpInp100.TwAl = 0
            .DfIpInp100.AlTons = 0
            .DfIpInp100.TwMg = 0
            .DfIpInp100.MgTons = 0
            .DfIpInp100.TwCa = 0
            .DfIpInp100.CaTons = 0

            .DfIpInp100.TwFeAdj = 0     '03/24/2011**, lss
            .DfIpInp100.TwIaAdj = 0     '03/24/2011**, lss
            .DfIpInp100.FeAdjTons = 0   '03/24/2011**, lss
            .DfIpInp100.IaAdjTons = 0   '03/24/2011**, lss
            '-----
            .DfIpProd100.Tpa = 0
            .DfIpProd100.TwBpl = 0
            .DfIpProd100.BplTons = 0
            .DfIpProd100.TwIns = 0
            .DfIpProd100.InsTons = 0
            .DfIpProd100.TwIa = 0
            .DfIpProd100.IaTons = 0
            .DfIpProd100.TwFe = 0
            .DfIpProd100.FeTons = 0
            .DfIpProd100.TwAl = 0
            .DfIpProd100.AlTons = 0
            .DfIpProd100.TwMg = 0
            .DfIpProd100.MgTons = 0
            .DfIpProd100.TwCa = 0
            .DfIpProd100.CaTons = 0

            .DfIpProd100.TwFeAdj = 0     '03/24/2011**, lss
            .DfIpProd100.TwIaAdj = 0     '03/24/2011**, lss
            .DfIpProd100.FeAdjTons = 0   '03/24/2011**, lss
            .DfIpProd100.IaAdjTons = 0   '03/24/2011**, lss

            '.DfTpr.Tpa = 0
            '.DfTpr.TwBpl = 0
            '.DfTpr.BplTons = 0
            '.DfTpr.TwIns = 0
            '.DfTpr.InsTons = 0
            '.DfTpr.TwIa = 0
            '.DfTpr.IaTons = 0
            '.DfTpr.TwFe = 0
            '.DfTpr.FeTons = 0
            '.DfTpr.TwAl = 0
            '.DfTpr.AlTons = 0
            '.DfTpr.TwMg = 0
            '.DfTpr.MgTons = 0
            '.DfTpr.TwCa = 0
            '.DfTpr.CaTons = 0
            '-----
            '.DfTpr100.Tpa = 0
            '.DfTpr100.TwBpl = 0
            '.DfTpr100.BplTons = 0
            '.DfTpr100.TwIns = 0
            '.DfTpr100.InsTons = 0
            '.DfTpr100.TwIa = 0
            '.DfTpr100.IaTons = 0
            '.DfTpr100.TwFe = 0
            '.DfTpr100.FeTons = 0
            '.DfTpr100.TwAl = 0
            '.DfTpr100.AlTons = 0
            '.DfTpr100.TwMg = 0
            '.DfTpr100.MgTons = 0
            '.DfTpr100.TwCa = 0
            '.DfTpr100.CaTons = 0
            '-----
            '.DfTcn.Tpa = 0
            '.DfTcn.TwBpl = 0
            '.DfTcn.BplTons = 0
            '.DfTcn.TwIns = 0
            '.DfTcn.InsTons = 0
            '.DfTcn.TwIa = 0
            '.DfTcn.IaTons = 0
            '.DfTcn.TwFe = 0
            '.DfTcn.FeTons = 0
            '.DfTcn.TwAl = 0
            '.DfTcn.AlTons = 0
            '.DfTcn.TwMg = 0
            '.DfTcn.MgTons = 0
            '.DfTcn.TwCa = 0
            '.DfTcn.CaTons = 0
            '-----
            '.DfTcn100.Tpa = 0
            '.DfTcn100.TwBpl = 0
            '.DfTcn100.BplTons = 0
            '.DfTcn100.TwIns = 0
            '.DfTcn100.InsTons = 0
            '.DfTcn100.TwIa = 0
            '.DfTcn100.IaTons = 0
            '.DfTcn100.TwFe = 0
            '.DfTcn100.FeTons = 0
            '.DfTcn100.TwAl = 0
            '.DfTcn100.AlTons = 0
            '.DfTcn100.TwMg = 0
            '.DfTcn100.MgTons = 0
            '.DfTcn100.TwCa = 0
            '.DfTcn100.CaTons = 0
        End With
    End Sub

    Public Sub ZeroSfcSum(ByRef aSfcSum() As mSfcSumDataType)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim RowIdx As Integer

        For RowIdx = 1 To UBound(aSfcSum)
            aSfcSum(RowIdx).WtSumPb = 0
            aSfcSum(RowIdx).WtSumFd = 0
            '-----
            aSfcSum(RowIdx).WtWBpl = 0
            aSfcSum(RowIdx).WtWIns = 0
            aSfcSum(RowIdx).WtWCa = 0
            aSfcSum(RowIdx).WtWFe = 0
            aSfcSum(RowIdx).WtWAl = 0
            aSfcSum(RowIdx).WtWMg = 0
            aSfcSum(RowIdx).WtWIa = 0
            '-----
            aSfcSum(RowIdx).BplWt = 0
            aSfcSum(RowIdx).InsWt = 0
            aSfcSum(RowIdx).CaWt = 0
            aSfcSum(RowIdx).FeWt = 0
            aSfcSum(RowIdx).AlWt = 0
            aSfcSum(RowIdx).MgWt = 0
            aSfcSum(RowIdx).IaWt = 0
        Next RowIdx
    End Sub

    Public Sub ZeroProdSum(ByRef aProdSum() As mProdSumDataType)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim RowIdx As Integer

        For RowIdx = 1 To UBound(aProdSum)
            aProdSum(RowIdx).WtSumPb = 0
            aProdSum(RowIdx).WtSumFd = 0
            '-----
            aProdSum(RowIdx).WtWBpl = 0
            aProdSum(RowIdx).WtWIns = 0
            aProdSum(RowIdx).WtWCa = 0
            aProdSum(RowIdx).WtWFe = 0
            aProdSum(RowIdx).WtWAl = 0
            aProdSum(RowIdx).WtWMg = 0
            aProdSum(RowIdx).WtWIa = 0
            '-----
            aProdSum(RowIdx).BplWt = 0
            aProdSum(RowIdx).InsWt = 0
            aProdSum(RowIdx).CaWt = 0
            aProdSum(RowIdx).FeWt = 0
            aProdSum(RowIdx).AlWt = 0
            aProdSum(RowIdx).MgWt = 0
            aProdSum(RowIdx).IaWt = 0
        Next RowIdx
    End Sub

    Public Function gGetMtxDensityComp2(ByRef aProcData As gProcDataType,
                                    ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                    ByRef aProdAssignData As mProdAssignType,
                                    ByRef aMtxDensityMod As gMtxDensityModType,
                                    ByVal aRcvryParamsData As gDataRdctnParamsType) As Single


        Dim PctMoistCalc As Single
        Dim PctSolidsModel As Single
        Dim UprLimit As Single
        Dim LwrLimit As Single
        Dim HaveCalcDens As Boolean

        HaveCalcDens = True

        'Calculated density (theoretical density):
        'Density factor = (%Clay   * Clay density) +
        '                 (%Pebble * Pebble density) +
        '                 (%Feed   * ((0.183 * Feed BPL) + Sand density))

        'Density          (Void factor * Density factor) /
        '                 (Mtx %solids - ((Mtx %moisture / Mtx %solids) * Density factor / Water density))

        'Clay density   = 131 lbs/ft3
        'Pebble density = 181 lbs/ft3
        'Sand density   = 165 lbs/ft3
        'Water density  = 62.4 lbs/ft3
        'Void factor    = 0.826

        gGetMtxDensityComp2 = 0

        'Calculate theoretical density

        'CalDen1 used to be the calculated density in the IMC world.  At some
        'point they tweaked the data by using:
        'CalDen = Round(0.521341 + (1.063872 * CalDen1), 4) so CalDen is now
        'the "official" calculated "theoretical" density rather than CalDen1.

        With aMtxDensityMod
            .LabMsrdDryDensity = aProcData.DryDensity
            .MtxPctSol = aRdctnCalcData.MtxPctSol
            .MtxPctMoist = aRdctnCalcData.MtxPctMoist
            .PbPctWt = aRdctnCalcData.Tpb.WtPct
            .FdPctWt = aRdctnCalcData.Tfd.WtPct
            .ClPctWt = aRdctnCalcData.Wcl.WtPct
            .FdBpl = aProdAssignData.TfdBpl
            .DenFac = (131 * (.ClPctWt / 100)) +
                  (181 * (.PbPctWt / 100)) +
                  ((.FdPctWt / 100) * ((0.183 * .FdBpl) + 165))

            If .MtxPctMoist <> 0 And .MtxPctSol <> 0 Then
                .CalDen1 = Round((0.826 * .DenFac) /
                       ((.MtxPctSol / 100) + (((.MtxPctMoist / 100) / (.MtxPctSol / 100)) * .DenFac / 62.4)), 4)
            Else
                .CalDen1 = 0
                HaveCalcDens = False
            End If

            'This is some mumbo-jumbo "tweaked" data stuff from Glen Oswald.
            .CalDen = Round(0.521341 + (1.063872 * .CalDen1), 4)
            .LowerLimit = Round(.CalDen * 0.85, 1)
            .UpperLimit = Round(.CalDen * 1.15, 1)

            If .CalDen > .LowerLimit And .CalDen < .UpperLimit Then
                .DensityProblem = False
            Else
                .DensityProblem = True
            End If
        End With

        'Note:  We may not have a calculated density value if there is no
        '       Mtx %Moisture value for the split.

        'Now we need to calculate the density to return:
        'Have aRcvryData.DensCalcMode    ("Measured lab value", "Calculated value",
        '                                 Limit routine")
        '     aRcvryData.DensLrSpecChk
        '     aRcvryData.DensMlvSpecChk
        '     aRcvryData.DensLowerLimit  (designated by the user -- usually 80.0)
        '     aRcvryData.DensUpperLimit  (designated by the user -- usually 112.0)

        Select Case aRcvryParamsData.DensCalcMode
            Case Is = "Measured lab value"
                If aRcvryParamsData.DensMlvSpecChk = True And
                HaveCalcDens = True Then
                    'If variance > +15% use calculate density * 1.15
                    'If variance < -15% use calculated density * 0.85
                    'Otherwise, use measured density.
                    '(aRdctnCalcData.DryDensity is the measured lab density).

                    UprLimit = Round(1.15 * aMtxDensityMod.CalDen1, 1)
                    LwrLimit = Round(0.85 * aMtxDensityMod.CalDen1, 1)
                    If aProcData.DryDensity > UprLimit Then
                        gGetMtxDensityComp2 = UprLimit
                    Else
                        If aProcData.DryDensity < LwrLimit Then
                            gGetMtxDensityComp2 = LwrLimit
                        Else
                            gGetMtxDensityComp2 = aProcData.DryDensity
                        End If
                    End If
                Else
                    'Just return the measured value.
                    gGetMtxDensityComp2 = aProcData.DryDensity
                End If

            Case Is = "Calculated value"
                If HaveCalcDens = True Then
                    gGetMtxDensityComp2 = aMtxDensityMod.CalDen1
                Else
                    'Just return the measured value.
                    gGetMtxDensityComp2 = aProcData.DryDensity
                End If

            Case Is = "Limit routine"
                UprLimit = aRcvryParamsData.DensUpperLimit    'Assigned by user
                LwrLimit = aRcvryParamsData.DensLowerLimit    'Assigned by user

                If aProcData.DryDensity >= LwrLimit And
                aProcData.DryDensity <= UprLimit Then

                    If aRcvryParamsData.DensLrSpecChk = False Then
                        'If measured value falls within specified limits use measured
                        gGetMtxDensityComp2 = aProcData.DryDensity
                    Else
                        'aRcvryData.DensLrSpecChk = False
                        'If variance > +15% use calculate density * 1.15
                        'If variance < -15% use calculated density * 0.85
                        'Otherwise, use measured density.
                        '(aRdctnCalcData.DryDensity is the measured lab density).
                        If HaveCalcDens Then
                            UprLimit = Round(1.15 * aMtxDensityMod.CalDen1, 1)
                            LwrLimit = Round(0.85 * aMtxDensityMod.CalDen1, 1)
                            If aProcData.DryDensity > UprLimit Then
                                'Use the exceeded upper limit.
                                gGetMtxDensityComp2 = UprLimit
                            Else
                                If aProcData.DryDensity < LwrLimit Then
                                    'Use the exceeded lower limit.
                                    gGetMtxDensityComp2 = LwrLimit
                                Else
                                    'Use the measured value.
                                    gGetMtxDensityComp2 = aProcData.DryDensity
                                End If
                            End If
                        Else
                            gGetMtxDensityComp2 = aProcData.DryDensity
                        End If
                    End If
                Else
                    'Measured value does not fall within the limits set by the user.
                    'Set the density equal to limit exceeded by the measured density.
                    'If calculated value falls within specified limits use
                    'calculated values.
                    If HaveCalcDens Then
                        If aMtxDensityMod.CalDen1 >= LwrLimit And
                        aMtxDensityMod.CalDen1 <= UprLimit Then
                            gGetMtxDensityComp2 = aMtxDensityMod.CalDen1
                        Else
                            'If neither falls within limits, set density equal to limit
                            'exceeded by the measured density.
                            If aProcData.DryDensity < LwrLimit Then
                                gGetMtxDensityComp2 = LwrLimit
                            End If
                            If aProcData.DryDensity > UprLimit Then
                                gGetMtxDensityComp2 = UprLimit
                            End If
                        End If
                    Else    'Don't have a calculated density!
                        If aProcData.DryDensity < LwrLimit Then
                            gGetMtxDensityComp2 = LwrLimit
                        End If
                        If aProcData.DryDensity > UprLimit Then
                            gGetMtxDensityComp2 = UprLimit
                        End If
                    End If
                End If
        End Select
    End Function

    Private Function PlaceInSplitSprd(ByRef aSsSplitReview As AxvaSpread,
                                      ByVal aRdctnCalcData As gRawProspSplRdctnType,
                                      ByVal aNoReview As Boolean) As Long

        'Columns in aSsSplitReview

        '1   HoleLocation  (Description)
        '2   SplitNumber
        '3   ProspDate
        '4   MineableCalcd
        '5   MineableOride
        '6   Forty
        '7   Xcoord
        '8   Ycoord
        '9   Elevation
        '10  Ownership
        '11  MinedOutStatus
        '12  HoleType
        '13  ExpDrill
        '14  TotDepth
        '15  SplitDepthTop
        '16  SplitDepthBot
        '17  SplitThck
        '18  Override
        '19  Key
        '20  Class
        '21  Bed
        '22  Level
        '23  Horizon
        '-----
        '24  MtxxOnSpec PC
        '25  TotxOnSpec PC
        '26  MtxxAll    PC
        '27  TotxAll    PC
        '-----
        '28  MtxTpa     100%
        '29  MtxBpl
        '30  MtxDensity 100%
        '-----
        '31  OsTpa      PC
        '32  OsWtPct    PC
        '33  OsBpl      PC
        '34  OsIns      PC
        '35  OsIa       PC
        '36  OsFe       PC
        '37  OsAl       PC
        '38  OsMg       PC
        '39  OsCa       PC
        '40  OsMer      PC
        '41  OsCpr      PC
        '-----
        '42  TpbTpa     PC
        '43  TpbWtPct   PC
        '44  TpbBpl     PC
        '45  TpbIns     PC
        '46  TpbIa      PC
        '47  TpbFe      PC
        '48  TpbAl      PC
        '49  TpbMg      PC
        '50  TpbCa      PC
        '51  TpbMer     PC
        '52  TpbCpr     PC
        '-----
        '53  IpTpa      PC
        '54  IpWtPct    PC
        '55  IpBpl      PC
        '56  IpIns      PC
        '57  IpIa       PC
        '58  IpFe       PC
        '59  IpAl       PC
        '60  IpMg       PC
        '61  IpCa       PC
        '62  IpMer      PC
        '63  IpCpr      PC
        '-----
        '64  TcnTpa     PC
        '65  TcnWtPct   PC
        '66  TcnBpl     PC
        '67  TcnIns     PC
        '68  TcnIa      PC
        '69  TcnFe      PC
        '70  TcnAl      PC
        '71  TcnMg      PC
        '72  TcnCa      PC
        '73  TcnMer     PC
        '74  TcnCpr     PC
        '-----
        '75  CfdTpa     PC
        '76  CfdWtPct   PC
        '77  CfdBpl     PC
        '-----
        '78  FfdTpa     PC
        '79  FfdWtPct   PC
        '80  FfdBpl     PC
        '-----
        '81  WclTpa     PC
        '82  WclWtPct   PC
        '83  WclBpl     PC
        '-----
        '84  MtxColor
        '85  DegConsol
        '86  DigChar 1
        '87  PumpChar
        '88  Lithology
        '89  PhosphColor
        '-----
        '90  SurvCaddHoleId
        '-----
        '91  CpbTpa     PC
        '92  CpbWtPct   PC
        '93  CpbBpl     PC
        '94  CpbIns     PC
        '95  CpbIa      PC
        '96  CpbFe      PC
        '97  CpbAl      PC
        '98  CpbMg      PC
        '99  CpbCa      PC
        '100 CpbMer     PC
        '101 CpbCpr     PC
        '-----
        '102 FpbTpa     PC
        '103 FpbWtPct   PC
        '104 FpbBpl     PC
        '105 FpbIns     PC
        '106 FpbIa      PC
        '107 FpbFe      PC
        '108 FpbAl      PC
        '109 FpbMg      PC
        '110 FpbCa      PC
        '111 FpbMer     PC
        '112 FpbCpr     PC
        '-----
        '113 Barren split
        '-----
        '114 TlTpa      PC
        '115 TlWtPct    PC
        '116 TlBpl      PC
        '-----
        '117 TfdTpa     PC
        '118 TfdWtPct   PC
        '119 TfdBpl     PC
        '-----
        '120 TprTpa     PC
        '121 TprWtPct   PC
        '122 TprBpl     PC
        '123 TprIns     PC
        '124 TprIa      PC
        '125 TprFe      PC
        '126 TprAl      PC
        '127 TprMg      PC
        '128 TprCa      PC
        '129 TprMer     PC
        '130 TprCpr     PC
        '-----
        '131 OvbThk     The same for PC & 100%
        '132 ItbThk     The same for PC & 100%
        '133 MtxThk     The same for PC & 100%
        '-----
        '134 CcnTpa     PC
        '135 CcnWtPct   PC
        '136 CcnBpl     PC
        '137 CcnIns     PC
        '138 CcnIa      PC
        '139 CcnFe      PC
        '140 CcnAl      PC
        '141 CcnMg      PC
        '142 CcnCa      PC
        '143 CcnMer     PC
        '144 CcnCpr     PC
        '-----
        '145 FcnTpa     PC
        '146 FcnWtPct   PC
        '147 FcnBpl     PC
        '148 FcnIns     PC
        '149 FcnIa      PC
        '150 FcnFe      PC
        '151 FcnAl      PC
        '152 FcnMg      PC
        '153 FcnCa      PC
        '154 FcnMer     PC
        '155 FcnCpr     PC
        '-----
        '156 Sample ID
        '-----
        '157 Hardpan From
        '158 Hardpan To
        '159 Hardpan Thck
        '160 Hardpan Code
        '161 Not used
        '162 Not used
        '163 Not used
        '164 Not used
        '165 Not used
        '166 Not used
        '167 Not used
        '168 Not used
        '169 Not used
        '170 Not used
        '-----
        '171 Not used
        '172 Not used
        '173 Not used
        '174 Not used
        '175 Not used
        '176 Not used
        '177 Not used
        '178 Not used
        '179 Not used
        '180 Not used
        '181 Not used
        '182 Not used
        '183 Not used
        '184 Not used
        '185 Not used
        '186 Not used
        '187 Not used
        '188 Not used
        '189 Not used
        '-----
        '190 MineableHole     PC
        '-----
        '191 CpbMin Split     PC
        '192 FpbMin Split     PC
        '193 TpbMin Split     PC
        '194 CcnMin Split     PC
        '195 FcnMin Split     PC
        '196 TcnMin Split     PC
        '197 OsMin Split      PC
        '198 IpMin Split      PC
        '-----
        '199 Cpb100Tpa        100%
        '200 Cpb100WtPct      100%
        '201 Cpb100Bpl        100%
        '202 Cpb100Ins        100%
        '203 Cpb100Ia         100%
        '204 Cpb100Fe         100%
        '205 Cpb100Al         100%
        '206 Cpb100Mg         100%
        '207 Cpb100Ca         100%
        '208 Cpb100Mer        100%
        '209 Cpb100Cpr        100%
        '-----
        '210 Fpb100Tpa        100%
        '211 Fpb100WtPct      100%
        '212 Fpb100Bpl        100%
        '213 Fpb100Ins        100%
        '214 Fpb100Ia         100%
        '215 Fpb100Fe         100%
        '216 Fpb100Al         100%
        '217 Fpb100Mg         100%
        '218 Fpb100Ca         100%
        '219 Fpb100Mer        100%
        '220 Fpb100Cpr        100%
        '-----
        '221 Tl100Tpa         100%
        '222 Tl100WtPct       100%
        '223 Tl100Bpl         100%
        '-----
        '224 Tfd100Tpa        100%
        '225 Tfd100WtPct      100%
        '226 Tfd100Bpl        100%
        '-----
        '227 Tpr100Tpa        100%
        '228 Tpr100WtPct      100%
        '229 Tpr100Bpl        100%
        '230 Tpr100Ins        100%
        '231 Tpr100Ia         100%
        '232 Tpr100Fe         100%
        '233 Tpr100Al         100%
        '234 Tpr100Mg         100%
        '235 Tpr100Ca         100%
        '236 Tpr100Mer        100%
        '237 Tpr100Cpr        100%
        '-----
        '238 Ccn100Tpa        100%
        '239 Ccn100WtPct      100%
        '240 Ccn100Bpl        100%
        '241 Ccn100Ins        100%
        '242 Ccn100Ia         100%
        '243 Ccn100Fe         100%
        '244 Ccn100Al         100%
        '245 Ccn100Mg         100%
        '246 Ccn100Ca         100%
        '247 Ccn100Mer        100%
        '248 Ccn100Cpr        100%
        '-----
        '249 Fcn100Tpa        100%
        '250 Fcn100WtPct      100%
        '251 Fcn100Bpl        100%
        '252 Fcn100Ins        100%
        '253 Fcn100Ia         100%
        '254 Fcn100Fe         100%
        '255 Fcn100Al         100%
        '256 Fcn100Mg         100%
        '257 Fcn100Ca         100%
        '258 Fcn100Mer        100%
        '259 Fcn100Cpr        100%
        '-----
        '260 Os100Tpa         100%
        '261 Os100WtPct       100%
        '262 Os100Bpl         100%
        '263 Os100Ins         100%
        '264 Os100Ia          100%
        '265 Os100Fe          100%
        '266 Os100Al          100%
        '267 Os100Mg          100%
        '268 Os100Ca          100%
        '269 Os100Mer         100%
        '270 Os100Cpr         100%
        '-----
        '271 Tpb100Tpa        100%
        '272 Tpb100WtPct      100%
        '273 Tpb100Bpl        100%
        '274 Tpb100Ins        100%
        '275 Tpb100Ia         100%
        '276 Tpb100Fe         100%
        '277 Tpb100Al         100%
        '278 Tpb100Mg         100%
        '279 Tpb100Ca         100%
        '280 Tpb100Mer        100%
        '281 Tpb100Cpr        100%
        '-----
        '282 Ip100Tpa         100%
        '283 Ip100WtPct       100%
        '284 Ip100Bpl         100%
        '285 Ip100Ins         100%
        '286 Ip100Ia          100%
        '287 Ip100Fe          100%
        '288 Ip100Al          100%
        '289 Ip100Mg          100%
        '290 Ip100Ca          100%
        '291 Ip100Mer         100%
        '292 Ip100Cpr         100%
        '-----
        '293 Tcn100Tpa        100%
        '294 Tcn100WtPct      100%
        '295 Tcn100Bpl        100%
        '296 Tcn100Ins        100%
        '297 Tcn100Ia         100%
        '298 Tcn100Fe         100%
        '299 Tcn100Al         100%
        '300 Tcn100Mg         100%
        '301 Tcn100Ca         100%
        '302 Tcn100Mer        100%
        '303 Tcn100Cpr        100%
        '-----
        '304 Cfd100Tpa        100%
        '305 Cfd100WtPct      100%
        '306 Cfd100Bpl        100%
        '-----
        '307 Ffd100Tpa        100%
        '308 Ffd100WtPct      100%
        '309 Ffd100Bpl        100%
        '-----
        '310 Wcl100Tpa        100%
        '311 Wcl100WtPct      100%
        '312 Wcl100Bpl        100%
        '-----
        '313 MineableHole100  100%
        '314 MtxTpaPc         PC
        '-----
        '315 MtxxOnSpec100     100%  Split
        '316 TotxOnSpec100     100%  Split
        '317 MtxxAll100        100%  Split
        '318 TotxAll100        100%  Split
        '-----
        '319 CpbMinHole        PC  Hole
        '320 FpbMinHole        PC  Hole
        '321 TpbMinHole        PC  Hole
        '322 CcnMinHole        PC  Hole
        '323 FcnMinHole        PC  Hole
        '324 TcnMinHole        PC  Hole
        '325 OsMinHole         PC  Hole
        '326 IpMinHole         PC  Hole
        '-----
        '327 MtxxOnSpecPcHole  PC  Hole
        '328 TotxOnSpecPcHole  PC  Hole
        '329 MtxxAllPcHole     PC  Hole
        '330 TotxAllPcHole     PC  Hole
        '-----
        '331 MtxxOnSpec100Hole PC  Hole
        '332 TotxOnSpec100Hole PC  Hole
        '333 MtxxAll100Hole    PC  Hole
        '334 TotxAll100Hole    PC  Hole
        '-----
        '335 Mtx%Mois
        '336 Mtx%Sol
        '-----
        '337 Blank
        '338 Blank
        '339 Blank
        '340 Blank
        '341 Blank
        '342 Blank
        '343 Blank
        '344 Blank
        '345 Blank
        '346 Blank
        '-----
        '347 MpInp PC TPA
        '348 MpInp PC Wt%
        '349 MpInp PC BPL
        '350 MpInp PC Insol
        '351 MpInp PC I&A
        '352 MpInp PC Fe2O3
        '353 MpInp PC Al2O3
        '354 MpInp PC MgO
        '355 MpInp PC CaO
        '356 MpInp PC MER
        '357 MpInp PC CPR
        '-----
        '358 MpRej PC TPA
        '359 MpRej PC Wt%
        '360 MpRej PC BPL
        '361 MpRej PC Insol
        '362 MpRej PC I&A
        '363 MpRej PC Fe2O3
        '364 MpRej PC Al2O3
        '365 MpRej PC MgO
        '366 MpRej PC CaO
        '367 MpRej PC MER
        '368 MpRej PC CPR
        '-----
        '369 MpProd PC TPA
        '370 MpProd PC Wt%
        '371 MpProd PC BPL
        '372 MpProd PC Insol
        '373 MpProd PC I&A
        '374 MpProd PC Fe2O3
        '375 MpProd PC Al2O3
        '376 MpProd PC MgO
        '377 MpProd PC CaO
        '378 MpProd PC MER
        '379 MpProd PC CPR
        '-----
        '380 MpInp 100 TPA
        '381 MpInp 100 Wt%
        '382 MpInp 100 BPL
        '383 MpInp 100 Insol
        '384 MpInp 100 I&A
        '385 MpInp 100 Fe2O3
        '386 MpInp 100 Al2O3
        '387 MpInp 100 MgO
        '388 MpInp 100 CaO
        '389 MpInp 100 MER
        '390 MpInp 100 CPR
        '-----
        '391 MpRej 100 TPA
        '392 MpRej 100 Wt%
        '393 MpRej 100 BPL
        '394 MpRej 100 Insol
        '395 MpRej 100 I&A
        '396 MpRej 100 Fe2O3
        '397 MpRej 100 Al2O3
        '398 MpRej 100 MgO
        '399 MpRej 100 CaO
        '400 MpRej 100 MER
        '401 MpRej 100 CPR
        '-----
        '402 MpProd 100 TPA
        '403 MpProd 100 Wt%
        '404 MpProd 100 BPL
        '405 MpProd 100 Insol
        '406 MpProd 100 I&A
        '407 MpProd 100 Fe2O3
        '408 MpProd 100 Al2O3
        '409 MpProd 100 MgO
        '410 MpProd 100 CaO
        '411 MpProd 100 MER
        '412 MpProd 100 CPR
        '-----
        '413 MpTcn PC TPA
        '414 MpTcn PC Wt%
        '415 MpTcn PC BPL
        '416 MpTcn PC Insol
        '417 MpTcn PC I&A
        '418 MpTcn PC Fe2O3
        '419 MpTcn PC Al2O3
        '420 MpTcn PC MgO
        '421 MpTcn PC CaO
        '422 MpTcn PC MER
        '423 MpTcn PC CPR
        '-----
        '424 MpTpr PC TPA
        '425 MpTpr PC Wt%
        '426 MpTpr PC BPL
        '427 MpTpr PC Insol
        '428 MpTpr PC I&A
        '429 MpTpr PC Fe2O3
        '430 MpTpr PC Al2O3
        '431 MpTpr PC MgO
        '432 MpTpr PC CaO
        '433 MpTpr PC MER
        '434 MpTpr PC CPR
        '-----
        '435 MpTcn 100 TPA
        '436 MpTcn 100 Wt%
        '437 MpTcn 100 BPL
        '438 MpTcn 100 Insol
        '439 MpTcn 100 I&A
        '440 MpTcn 100 Fe2O3
        '441 MpTcn 100 Al2O3
        '442 MpTcn 100 MgO
        '443 MpTcn 100 CaO
        '444 MpTcn 100 MER
        '445 MpTcn 100 CPR
        '-----
        '446 MpTpr 100 TPA
        '447 MpTpr 100 Wt%
        '448 MpTpr 100 BPL
        '449 MpTpr 100 Insol
        '450 MpTpr 100 I&A
        '451 MpTpr 100 Fe2O3
        '452 MpTpr 100 Al2O3
        '453 MpTpr 100 MgO
        '454 MpTpr 100 CaO
        '455 MpTpr 100 MER
        '456 MpTpr 100 CPR
        '-----
        '457 TpbRejTpa     PC
        '458 TpbRejBpl     PC
        '459 TpbRejIns     PC
        '460 TpbRejIa      PC
        '461 TpbRejFe      PC
        '462 TpbRejAl      PC
        '463 TpbRejMg      PC
        '464 TpbRejCa      PC
        '-----
        '465 TpbRejTpa     %100
        '466 TpbRejBpl     %100
        '467 TpbRejIns     %100
        '468 TpbRejIa      %100
        '469 TpbRejFe      %100
        '470 TpbRejAl      %100
        '471 TpbRejMg      %100
        '472 TpbRejCa      %100
        '-----
        '473 OsFeAdj         PC
        '474 OsIaAdj         PC
        '475 OsMerAdj        PC
        '476 CpbFeAdj        PC
        '477 CpbIaAdj        PC
        '478 CpbMerAdj       PC
        '479 FpbFeAdj        PC
        '480 FpbIaAdj        PC
        '481 FpbMerAdj       PC
        '482 TpbFeAdj        PC
        '483 TpbIaAdj        PC
        '484 TpbMerAdj       PC
        '485 IpFeAdj         PC
        '486 IpIaAdj         PC
        '487 IpMerAdj        PC
        '488 CcnFeAdj        PC
        '489 CcnIaAdj        PC
        '490 CcnMerAdj       PC
        '491 FcnFeAdj        PC
        '492 FcnIaAdj        PC
        '493 FcnMerAdj       PC
        '494 TcnFeAdj        PC
        '495 TcnIaAdj        PC
        '496 TcnMerAdj       PC
        '497 TprFeAdj        PC
        '498 TprIaAdj        PC
        '499 TprMerAdj       PC
        '500 TpbRejFeAdj     PC
        '501 TpbRejIaAdj     PC
        '-----
        '502 Os100FeAdj      %100
        '503 Os100IaAdj      %100
        '504 Os100MerAdj     %100
        '505 Cpb100FeAdj     %100
        '506 Cpb100IaAdj     %100
        '507 Cpb100MerAdj    %100
        '508 Fpb100FeAdj     %100
        '509 Fpb100IaAdj     %100
        '510 Fpb100MerAdj    %100
        '511 Tpb100FeAdj     %100
        '512 Tpb100IaAdj     %100
        '513 Tpb100MerAdj    %100
        '514 Ip100FeAdj      %100
        '515 Ip100IaAdj      %100
        '516 Ip100MerAdj     %100
        '517 Ccn100FeAdj     %100
        '518 Ccn100IaAdj     %100
        '519 Ccn100MerAdj    %100
        '520 Fcn100FeAdj     %100
        '521 Fcn100IaAdj     %100
        '522 Fcn100MerAdj    %100
        '523 Tcn100FeAdj     %100
        '524 Tcn100IaAdj     %100
        '525 Tcn100MerAdj    %100
        '526 Tpr100FeAdj     %100
        '527 Tpr100IaAdj     %100
        '528 Tpr100MerAdj    %100
        '529 Tpb100RejFeAdj  %100
        '530 Tpb100RejIaAdj  %100
        '-----
        '09/11/2009, lss -- added 531 to 550
        '531 TcnRejTpa     PC
        '532 TcnRejBpl     PC
        '533 TcnRejIns     PC
        '534 TcnRejIa      PC
        '535 TcnRejFe      PC
        '536 TcnRejAl      PC
        '537 TcnRejMg      PC
        '538 TcnRejCa      PC
        '-----
        '539 TcnRejTpa 100 %100
        '540 TcnRejBpl 100 %100
        '541 TcnRejIns 100 %100
        '542 TcnRejIa  100 %100
        '543 TcnRejFe  100 %100
        '544 TcnRejAl  100 %100
        '545 TcnRejMg  100 %100
        '546 TcnRejCa  100 %100
        '-----
        '547 TcnRejFeAdj     PC
        '548 TcnRejIaAdj     PC
        '549 Tcn100RejFeAdj  %100
        '550 Tcn100RejIaAdj  %100
        '----------
        '06/15/2010, lss -- Added 551 to 776
        'DOLOFLOT STUFF
        '551 DfFpbInp PC TPA
        '552 DfFpbInp PC Wt%
        '553 DfFpbInp PC BPL
        '554 DfFpbInp PC Insol
        '555 DfFpbInp PC I&A
        '556 DfFpbInp PC Fe2O3
        '557 DfFpbInp PC Al2O3
        '558 DfFpbInp PC MgO
        '559 DfFpbInp PC CaO
        '560 DfFpbInp PC MER
        '561 DfFpbInp PC CPR
        '562 DfFpbInp PC Fe2O3 Adj
        '563 DfFpbInp PC I&A Adj
        '564 DfFpbInp PC MER Adj
        '-----
        '565 DfFpbRej PC TPA         Not needed!
        '566 DfFpbRej PC Wt%         Not needed!
        '567 DfFpbRej PC BPL         Not needed!
        '568 DfFpbRej PC Insol       Not needed!
        '569 DfFpbRej PC I&A         Not needed!
        '570 DfFpbRej PC Fe2O3       Not needed!
        '571 DfFpbRej PC Al2O3       Not needed!
        '572 DfFpbRej PC MgO         Not needed!
        '573 DfFpbRej PC CaO         Not needed!
        '574 DfFpbRej PC MER         Not needed!
        '575 DfFpbRej PC CPR         Not needed!
        '576 DfFpbRej PC Fe2O3 Adj   Not needed!
        '577 DfFpbRej PC I&A Adj     Not needed!
        '578 DfFpbRej PC MER Adj     Not needed!
        '-----
        '579 DfFpbProd PC TPA
        '580 DfFpbProd PC Wt%
        '581 DfFpbProd PC BPL
        '582 DfFpbProd PC Insol
        '583 DfFpbProd PC I&A
        '584 DfFpbProd PC Fe2O3
        '585 DfFpbProd PC Al2O3
        '586 DfFpbProd PC MgO
        '587 DfFpbProd PC CaO
        '588 DfFpbProd PC MER
        '589 DfFpbProd PC CPR
        '590 DfFpbProd PC Fe2O3 Adj
        '591 DfFpbProd PC I&A Adj
        '592 DfFpbProd PC MER Adj
        '-----
        '593 DfIpInp PC TPA
        '594 DfIpInp PC Wt%
        '595 DfIpInp PC BPL
        '596 DfIpInp PC Insol
        '597 DfIpInp PC I&A
        '598 DfIpInp PC Fe2O3
        '599 DfIpInp PC Al2O3
        '600 DfIpInp PC MgO
        '601 DfIpInp PC CaO
        '602 DfIpInp PC MER
        '603 DfIpInp PC CPR
        '604 DfIpInp PC Fe2O3 Adj
        '605 DfIpInp PC I&A Adj
        '606 DfIpInp PC MER Adj
        '-----
        '607 DfIpRej PC TPA          Not needed!
        '608 DfIpRej PC Wt%          Not needed!
        '609 DfIpRej PC BPL          Not needed!
        '610 DfIpRej PC Insol        Not needed!
        '611 DfIpRej PC I&A          Not needed!
        '612 DfIpRej PC Fe2O3        Not needed!
        '613 DfIpRej PC Al2O3        Not needed!
        '614 DfIpRej PC MgO          Not needed!
        '615 DfIpRej PC CaO          Not needed!
        '616 DfIpRej PC MER          Not needed!
        '617 DfIpRej PC CPR          Not needed!
        '618 DfIpRej PC Fe2O3 Adj    Not needed!
        '619 DfIpRej PC I&A Adj      Not needed!
        '620 DfIpRej PC MER Adj      Not needed!
        '-----
        '621 DfIpProd PC TPA
        '622 DfIpProd PC Wt%
        '623 DfIpProd PC BPL
        '624 DfIpProd PC Insol
        '625 DfIpProd PC I&A
        '626 DfIpProd PC Fe2O3
        '627 DfIpProd PC Al2O3
        '628 DfIpProd PC MgO
        '629 DfIpProd PC CaO
        '630 DfIpProd PC MER
        '631 DfIpProd PC CPR
        '632 DfIpProd PC Fe2O3 Adj
        '633 DfIpProd PC I&A Adj
        '634 DfIpProd PC MER Adj
        '-----
        '635 DfFpbInp 100 TPA
        '636 DfFpbInp 100 Wt%
        '637 DfFpbInp 100 BPL
        '638 DfFpbInp 100 Insol
        '639 DfFpbInp 100 I&A
        '640 DfFpbInp 100 Fe2O3
        '641 DfFpbInp 100 Al2O3
        '642 DfFpbInp 100 MgO
        '643 DfFpbInp 100 CaO
        '644 DfFpbInp 100 MER
        '645 DfFpbInp 100 CPR
        '646 DfFpbInp 100 Fe2O3 Adj
        '647 DfFpbInp 100 I&A Adj
        '648 DfFpbInp 100 MER Adj
        '-----
        '649 DfFpbRej 100 TPA          Not needed!
        '650 DfFpbRej 100 Wt%          Not needed!
        '651 DfFpbRej 100 BPL          Not needed!
        '652 DfFpbRej 100 Insol        Not needed!
        '653 DfFpbRej 100 I&A          Not needed!
        '654 DfFpbRej 100 Fe2O3        Not needed!
        '655 DfFpbRej 100 Al2O3        Not needed!
        '656 DfFpbRej 100 MgO          Not needed!
        '657 DfFpbRej 100 CaO          Not needed!
        '658 DfFpbRej 100 MER          Not needed!
        '659 DfFpbRej 100 CPR          Not needed!
        '660 DfFpbRej 100 Fe2O3 Adj    Not needed!
        '661 DfFpbRej 100 I&A Adj      Not needed!
        '662 DfFpbRej 100 MER Adj      Not needed!
        '-----
        '663 DfFpbProd 100 TPA
        '664 DfFpbProd 100 Wt%
        '665 DfFpbProd 100 BPL
        '666 DfFpbProd 100 Insol
        '667 DfFpbProd 100 I&A
        '668 DfFpbProd 100 Fe2O3
        '669 DfFpbProd 100 Al2O3
        '670 DfFpbProd 100 MgO
        '671 DfFpbProd 100 CaO
        '672 DfFpbProd 100 MER
        '673 DfFpbProd 100 CPR
        '674 DfFpbProd 100 Fe2O3 Adj
        '675 DfFpbProd 100 I&A Adj
        '676 DfFpbProd 100 MER Adj
        '-----
        '677 DfIpInp 100 TPA
        '678 DfIpInp 100 Wt%
        '679 DfIpInp 100 BPL
        '680 DfIpInp 100 Insol
        '681 DfIpInp 100 I&A
        '682 DfIpInp 100 Fe2O3
        '683 DfIpInp 100 Al2O3
        '684 DfIpInp 100 MgO
        '685 DfIpInp 100 CaO
        '686 DfIpInp 100 MER
        '687 DfIpInp 100 CPR
        '688 DfIpInp 100 Fe2O3 Adj
        '689 DfIpInp 100 I&A Adj
        '690 DfIpInp 100 MER Adj
        '-----
        '691 DfIpRej 100 TPA          Not needed!
        '692 DfIpRej 100 Wt%          Not needed!
        '693 DfIpRej 100 BPL          Not needed!
        '694 DfIpRej 100 Insol        Not needed!
        '695 DfIpRej 100 I&A          Not needed!
        '696 DfIpRej 100 Fe2O3        Not needed!
        '697 DfIpRej 100 Al2O3        Not needed!
        '698 DfIpRej 100 MgO          Not needed!
        '699 DfIpRej 100 CaO          Not needed!
        '700 DfIpRej 100 MER          Not needed!
        '701 DfIpRej 100 CPR          Not needed!
        '702 DfIpRej 100 Fe2O3 Adj    Not needed!
        '703 DfIpRej 100 I&A Adj      Not needed!
        '704 DfIpRej 100 MER Adj      Not needed!
        '-----
        '705 DfIpProd 100 TPA
        '706 DfIpProd 100 Wt%
        '707 DfIpProd 100 BPL
        '708 DfIpProd 100 Insol
        '709 DfIpProd 100 I&A
        '710 DfIpProd 100 Fe2O3
        '711 DfIpProd 100 Al2O3
        '712 DfIpProd 100 MgO
        '713 DfIpProd 100 CaO
        '714 DfIpProd 100 MER
        '715 DfIpProd 100 CPR
        '716 DfIpProd 100 Fe2O3 Adj
        '717 DfIpProd 100 I&A Adj
        '718 DfIpProd 100 MER Adj
        '-----
        '719 DfTcn PC TPA
        '720 DfTcn PC Wt%
        '721 DfTcn PC BPL
        '722 DfTcn PC Insol
        '723 DfTcn PC I&A
        '724 DfTcn PC Fe2O3
        '725 DfTcn PC Al2O3
        '726 DfTcn PC MgO
        '727 DfTcn PC CaO
        '728 DfTcn PC MER
        '729 DfTcn PC CPR
        '730 DfTcn PC Fe2O3 Adj
        '731 DfTcn PC I&A Adj
        '732 DfTcn PC MER Adj
        '-----
        '733 DfTpr PC TPA
        '734 DfTpr PC Wt%
        '735 DfTpr PC BPL
        '736 DfTpr PC Insol
        '737 DfTpr PC I&A
        '738 DfTpr PC Fe2O3
        '739 DfTpr PC Al2O3
        '740 DfTpr PC MgO
        '741 DfTpr PC CaO
        '742 DfTpr PC MER
        '743 DfTpr PC CPR
        '744 DfTpr PC Fe2O3 Adj
        '745 DfTpr PC I&A Adj
        '746 DfTpr PC MER Adj
        '-----
        '747 DfTcn 100 TPA
        '748 DfTcn 100 Wt%
        '749 DfTcn 100 BPL
        '750 DfTcn 100 Insol
        '751 DfTcn 100 I&A
        '752 DfTcn 100 Fe2O3
        '753 DfTcn 100 Al2O3
        '754 DfTcn 100 MgO
        '755 DfTcn 100 CaO
        '756 DfTcn 100 MER
        '757 DfTcn 100 CPR
        '758 DfTcn 100 Fe2O3 Adj
        '759 DfTcn 100 I&A Adj
        '760 DfTcn 100 MER Adj
        '-----
        '761 DfTpr 100 TPA
        '762 DfTpr 100 Wt%
        '763 DfTpr 100 BPL
        '764 DfTpr 100 Insol
        '765 DfTpr 100 I&A
        '766 DfTpr 100 Fe2O3
        '767 DfTpr 100 Al2O3
        '768 DfTpr 100 MgO
        '769 DfTpr 100 CaO
        '770 DfTpr 100 MER
        '771 DfTpr 100 CPR
        '772 DfTpr 100 Fe2O3 Adj
        '773 DfTpr 100 I&A Adj
        '774 DfTpr 100 MER Adj
        '-----
        '775 FpbMgoOffSpec   Split  PC
        '776 IpMgoOffSpec    Split  PC
        '-----
        '777 CpbRejTpa     PC
        '778 CpbRejWtPct   PC
        '779 CpbRejBpl     PC
        '780 CpbRejIns     PC
        '781 CpbRejIa      PC
        '782 CpbRejFe      PC
        '783 CpbRejAl      PC
        '784 CpbRejMg      PC
        '785 CpbRejCa      PC
        '786 CpbRejMer     PC
        '787 CpbRejCpr     PC
        '788 CpbRejFeAdj   PC
        '789 CpbRejIaAdj   PC
        '790 CpbRejMerAdj  PC
        '-----
        '791 CpbRejTpa     100%
        '792 CpbRejWtPct   100%
        '793 CpbRejBpl     100%
        '794 CpbRejIns     100%
        '795 CpbRejIa      100%
        '796 CpbRejFe      100%
        '797 CpbRejAl      100%
        '798 CpbRejMg      100%
        '799 CpbRejCa      100%
        '800 CpbRejMer     100%
        '801 CpbRejCpr     100%
        '802 CpbRejFeAdj   100%
        '803 CpbRejIaAdj   100%
        '804 CpbRejMerAdj  100%
        '-----
        '805 MpInp PC Fe2O3 Adj
        '806 MpInp PC I&A Adj
        '807 MpRej PC Fe2O3 Adj
        '808 MpRej PC I&A Adj
        '809 MpProd PC Fe2O3 Adj
        '810 MpProd PC I&A Adj
        '811 MpTcn PC Fe2O3 Adj
        '812 MpTcn PC I&A Adj
        '813 MpTpr PC Fe2O3 Adj
        '814 MpTpr PC I&A Adj
        '-----
        '815 MpInp 100 Fe2O3 Adj
        '816 MpInp 100 I&A Adj
        '817 MpRej 100 Fe2O3 Adj
        '818 MpRej 100 I&A Adj
        '819 MpProd 100 Fe2O3 Adj
        '820 MpProd 100 I&A Adj
        '821 MpTcn 100 Fe2O3 Adj
        '822 MpTcn 100 I&A Adj
        '823 MpTpr 100 Fe2O3 Adj
        '824 MpTpr 100 I&A Adj

        'Move all of the split data we have calculated from aRdctnCalcData to
        'ssSplitReview.  This will allow us to accumulate all of the split
        'data for further processing on the hole level.

        PlaceInSplitSprd = 0

        With aSsSplitReview
            .SuspendLayout()
            If aNoReview Then
                .ReDraw = False
            End If
            .MaxRows = .MaxRows + 1
            .Row = .MaxRows
            PlaceInSplitSprd = .Row
            .Col = 1
            .Text = aRdctnCalcData.HoleDesc
            .Col = 2
            .Value = aRdctnCalcData.SplitNumber
            .Col = 3
            If aRdctnCalcData.ProspDate <> "12/31/8888" Then
                .Text = aRdctnCalcData.ProspDate
            Else
                .Text = "None"
            End If

            .Col = 4
            .Text = aRdctnCalcData.MineableCalcd
            .Col = 5
            .Text = aRdctnCalcData.MineableOride    'M, U, C
            .Col = 6
            .Value = aRdctnCalcData.Forty
            .Col = 7
            .Value = aRdctnCalcData.Xcoord
            .Col = 8
            .Value = aRdctnCalcData.Ycoord
            .Col = 9
            .Value = aRdctnCalcData.Elevation
            .Col = 10
            .Text = aRdctnCalcData.Ownership

            .Col = 11
            .Text = aRdctnCalcData.MinedOutStatus   'Yes or No

            .Col = 12          'Hole type  (0 = Auger, 1 = Rotary)
            .Text = "Rotary"  'Will call everything a rotary hole for now!

            .Col = 13
            .Text = aRdctnCalcData.ExpDrill

            .Col = 14
            .Value = aRdctnCalcData.TotDepth
            .Col = 15
            .Value = aRdctnCalcData.SplitDepthTop
            .Col = 16
            .Value = aRdctnCalcData.SplitDepthBot
            .Col = 17
            .Value = aRdctnCalcData.SplitThck
            .Col = 18
            .Text = aRdctnCalcData.Override
            .Col = 19
            .Text = aRdctnCalcData.Key
            .Col = 20
            .Text = aRdctnCalcData.cClass
            .Col = 21
            .Text = aRdctnCalcData.Bed
            .Col = 22
            .Text = aRdctnCalcData.Level
            .Col = 23
            .Text = aRdctnCalcData.Horizon
            .Col = 24
            .Value = aRdctnCalcData.MtxxOnSpec
            .Col = 25
            .Value = aRdctnCalcData.TotxOnSpec
            .Col = 26
            .Value = aRdctnCalcData.MtxxAll
            .Col = 27
            .Value = aRdctnCalcData.TotxAll
            .Col = 28
            .Value = aRdctnCalcData.MtxTPA
            .Col = 29
            .Value = aRdctnCalcData.MtxBPL
            .Col = 30
            .Value = aRdctnCalcData.MtxDensity
            '-----
            .Col = 31
            .Value = aRdctnCalcData.Os.Tpa
            .Col = 32
            .Value = aRdctnCalcData.Os.WtPct
            .Col = 33
            .Value = aRdctnCalcData.Os.Bpl
            .Col = 34
            .Value = aRdctnCalcData.Os.Ins
            .Col = 35
            .Value = aRdctnCalcData.Os.Ia
            .Col = 36
            .Value = aRdctnCalcData.Os.Fe
            .Col = 37
            .Value = aRdctnCalcData.Os.Al
            .Col = 38
            .Value = aRdctnCalcData.Os.Mg
            .Col = 39
            .Value = aRdctnCalcData.Os.Ca
            .Col = 40
            .Value = aRdctnCalcData.Os.Mer
            .Col = 41
            .Value = gGetCaP2O5(aRdctnCalcData.Os.Ca,
                                aRdctnCalcData.Os.Bpl,
                                2)
            '-----
            .Col = 42
            .Value = aRdctnCalcData.Tpb.Tpa
            .Col = 43
            .Value = aRdctnCalcData.Tpb.WtPct
            .Col = 44
            .Value = aRdctnCalcData.Tpb.Bpl
            .Col = 45
            .Value = aRdctnCalcData.Tpb.Ins
            .Col = 46
            .Value = aRdctnCalcData.Tpb.Ia
            .Col = 47
            .Value = aRdctnCalcData.Tpb.Fe
            .Col = 48
            .Value = aRdctnCalcData.Tpb.Al
            .Col = 49
            .Value = aRdctnCalcData.Tpb.Mg
            .Col = 50
            .Value = aRdctnCalcData.Tpb.Ca
            .Col = 51
            .Value = aRdctnCalcData.Tpb.Mer
            .Col = 52
            .Value = gGetCaP2O5(aRdctnCalcData.Tpb.Ca,
                                aRdctnCalcData.Tpb.Bpl,
                                2)
            '-----
            .Col = 53
            .Value = aRdctnCalcData.Ip.Tpa
            .Col = 54
            .Value = aRdctnCalcData.Ip.WtPct
            .Col = 55
            .Value = aRdctnCalcData.Ip.Bpl
            .Col = 56
            .Value = aRdctnCalcData.Ip.Ins
            .Col = 57
            .Value = aRdctnCalcData.Ip.Ia
            .Col = 58
            .Value = aRdctnCalcData.Ip.Fe
            .Col = 59
            .Value = aRdctnCalcData.Ip.Al
            .Col = 60
            .Value = aRdctnCalcData.Ip.Mg
            .Col = 61
            .Value = aRdctnCalcData.Ip.Ca
            .Col = 62
            .Value = aRdctnCalcData.Ip.Mer
            .Col = 63
            .Value = gGetCaP2O5(aRdctnCalcData.Ip.Ca,
                                aRdctnCalcData.Ip.Bpl,
                                2)
            '-----
            .Col = 64
            .Value = aRdctnCalcData.Tcn.Tpa
            .Col = 65
            .Value = aRdctnCalcData.Tcn.WtPct
            .Col = 66
            .Value = aRdctnCalcData.Tcn.Bpl
            .Col = 67
            .Value = aRdctnCalcData.Tcn.Ins
            .Col = 68
            .Value = aRdctnCalcData.Tcn.Ia
            .Col = 69
            .Value = aRdctnCalcData.Tcn.Fe
            .Col = 70
            .Value = aRdctnCalcData.Tcn.Al
            .Col = 71
            .Value = aRdctnCalcData.Tcn.Mg
            .Col = 72
            .Value = aRdctnCalcData.Tcn.Ca
            .Col = 73
            .Value = aRdctnCalcData.Tcn.Mer
            .Col = 74
            .Value = gGetCaP2O5(aRdctnCalcData.Tcn.Ca,
                                aRdctnCalcData.Tcn.Bpl,
                                2)
            '-----
            .Col = 75
            .Value = aRdctnCalcData.Cfd.Tpa
            .Col = 76
            .Value = aRdctnCalcData.Cfd.WtPct
            .Col = 77
            .Value = aRdctnCalcData.Cfd.Bpl
            '-----
            .Col = 78
            .Value = aRdctnCalcData.Ffd.Tpa
            .Col = 79
            .Value = aRdctnCalcData.Ffd.WtPct
            .Col = 80
            .Value = aRdctnCalcData.Ffd.Bpl
            '-----
            .Col = 81
            .Value = aRdctnCalcData.Wcl.Tpa
            .Col = 82
            .Value = aRdctnCalcData.Wcl.WtPct
            .Col = 83
            .Value = aRdctnCalcData.Wcl.Bpl
            '-----
            .Col = 84
            .Text = aRdctnCalcData.MtxColor
            .Col = 85
            .Text = aRdctnCalcData.DegConsol
            .Col = 86
            .Text = aRdctnCalcData.DigChar
            .Col = 87
            .Text = aRdctnCalcData.PumpChar
            .Col = 88
            .Text = aRdctnCalcData.Lithology
            .Col = 89
            .Text = aRdctnCalcData.PhosphColor
            .Col = 90
            .Text = Mid(aRdctnCalcData.HoleDesc, 1, 2) & Mid(aRdctnCalcData.HoleDesc, 4, 2) &
                    Mid(aRdctnCalcData.HoleDesc, 7, 2) & Mid(aRdctnCalcData.HoleDesc, 10)
            '-----
            .Col = 91
            .Value = aRdctnCalcData.Cpb.Tpa
            .Col = 92
            .Value = aRdctnCalcData.Cpb.WtPct
            .Col = 93
            .Value = aRdctnCalcData.Cpb.Bpl
            .Col = 94
            .Value = aRdctnCalcData.Cpb.Ins
            .Col = 95
            .Value = aRdctnCalcData.Cpb.Ia
            .Col = 96
            .Value = aRdctnCalcData.Cpb.Fe
            .Col = 97
            .Value = aRdctnCalcData.Cpb.Al
            .Col = 98
            .Value = aRdctnCalcData.Cpb.Mg
            .Col = 99
            .Value = aRdctnCalcData.Cpb.Ca
            .Col = 100
            .Value = aRdctnCalcData.Cpb.Mer
            .Col = 101
            .Value = gGetCaP2O5(aRdctnCalcData.Cpb.Ca,
                                aRdctnCalcData.Cpb.Bpl,
                                2)
            '-----
            .Col = 102
            .Value = aRdctnCalcData.Fpb.Tpa
            .Col = 103
            .Value = aRdctnCalcData.Fpb.WtPct
            .Col = 104
            .Value = aRdctnCalcData.Fpb.Bpl
            .Col = 105
            .Value = aRdctnCalcData.Fpb.Ins
            .Col = 106
            .Value = aRdctnCalcData.Fpb.Ia
            .Col = 107
            .Value = aRdctnCalcData.Fpb.Fe
            .Col = 108
            .Value = aRdctnCalcData.Fpb.Al
            .Col = 109
            .Value = aRdctnCalcData.Fpb.Mg
            .Col = 110
            .Value = aRdctnCalcData.Fpb.Ca
            .Col = 111
            .Value = aRdctnCalcData.Fpb.Mer
            .Col = 112
            .Value = gGetCaP2O5(aRdctnCalcData.Fpb.Ca,
                                aRdctnCalcData.Fpb.Bpl,
                                2)
            '-----
            .Col = 113
            .Value = aRdctnCalcData.SplitBarren
            '-----
            .Col = 114
            .Value = aRdctnCalcData.Ttl.Tpa
            .Col = 115
            .Value = aRdctnCalcData.Ttl.WtPct
            .Col = 116
            .Value = aRdctnCalcData.Ttl.Bpl
            '-----
            .Col = 117
            .Value = aRdctnCalcData.Tfd.Tpa
            .Col = 118
            .Value = aRdctnCalcData.Tfd.WtPct
            .Col = 119
            .Value = aRdctnCalcData.Tfd.Bpl
            '-----
            .Col = 120
            .Value = aRdctnCalcData.Tpr.Tpa
            .Col = 121
            .Value = aRdctnCalcData.Tpr.WtPct
            .Col = 122
            .Value = aRdctnCalcData.Tpr.Bpl
            .Col = 123
            .Value = aRdctnCalcData.Tpr.Ins
            .Col = 124
            .Value = aRdctnCalcData.Tpr.Ia
            .Col = 125
            .Value = aRdctnCalcData.Tpr.Fe
            .Col = 126
            .Value = aRdctnCalcData.Tpr.Al
            .Col = 127
            .Value = aRdctnCalcData.Tpr.Mg
            .Col = 128
            .Value = aRdctnCalcData.Tpr.Ca
            .Col = 129
            .Value = aRdctnCalcData.Tpr.Mer
            .Col = 130
            .Value = gGetCaP2O5(aRdctnCalcData.Tpr.Ca,
                                aRdctnCalcData.Tpr.Bpl,
                                2)
            '-----
            .Col = 131
            .Value = aRdctnCalcData.OvbThk
            .Col = 132
            .Value = aRdctnCalcData.ItbThk
            .Col = 133
            .Value = aRdctnCalcData.MtxThk
            '-----
            .Col = 134
            .Value = aRdctnCalcData.Ccn.Tpa
            .Col = 135
            .Value = aRdctnCalcData.Ccn.WtPct
            .Col = 136
            .Value = aRdctnCalcData.Ccn.Bpl
            .Col = 137
            .Value = aRdctnCalcData.Ccn.Ins
            .Col = 138
            .Value = aRdctnCalcData.Ccn.Ia
            .Col = 139
            .Value = aRdctnCalcData.Ccn.Fe
            .Col = 140
            .Value = aRdctnCalcData.Ccn.Al
            .Col = 141
            .Value = aRdctnCalcData.Ccn.Mg
            .Col = 142
            .Value = aRdctnCalcData.Ccn.Ca
            .Col = 143
            .Value = aRdctnCalcData.Ccn.Mer
            .Col = 144
            .Value = gGetCaP2O5(aRdctnCalcData.Ccn.Ca,
                                aRdctnCalcData.Ccn.Bpl,
                                2)
            '-----
            .Col = 145
            .Value = aRdctnCalcData.Fcn.Tpa
            .Col = 146
            .Value = aRdctnCalcData.Fcn.WtPct
            .Col = 147
            .Value = aRdctnCalcData.Fcn.Bpl
            .Col = 148
            .Value = aRdctnCalcData.Fcn.Ins
            .Col = 149
            .Value = aRdctnCalcData.Fcn.Ia
            .Col = 150
            .Value = aRdctnCalcData.Fcn.Fe
            .Col = 151
            .Value = aRdctnCalcData.Fcn.Al
            .Col = 152
            .Value = aRdctnCalcData.Fcn.Mg
            .Col = 153
            .Value = aRdctnCalcData.Fcn.Ca
            .Col = 154
            .Value = aRdctnCalcData.Fcn.Mer
            .Col = 155
            .Value = gGetCaP2O5(aRdctnCalcData.Fcn.Ca,
                                aRdctnCalcData.Fcn.Bpl,
                                2)
            '-----
            .Col = 156
            .Text = aRdctnCalcData.SampleId
            '-----
            'Changes 10/19/2011, lss
            .Col = 157
            .Value = aRdctnCalcData.HardpanFrom
            .Col = 158
            .Value = aRdctnCalcData.HardpanTo
            .Col = 159
            .Value = aRdctnCalcData.HardpanThck
            .Col = 160
            .Text = aRdctnCalcData.HardpanCode
            '-----
            'Col = 161 to Col 170  Not used
            'Col = 171 to Col 189  Not used
            '-----
            .Col = 190  'Mineable hole  PC
            .Text = aRdctnCalcData.MineableHole
            '-----
            .Col = 191
            .Text = aRdctnCalcData.CpbOnSpec
            .Col = 192
            .Text = aRdctnCalcData.FpbOnSpec
            .Col = 193
            .Text = aRdctnCalcData.TpbOnSpec
            .Col = 194
            .Text = aRdctnCalcData.CcnOnSpec
            .Col = 195
            .Text = aRdctnCalcData.FcnOnSpec
            .Col = 196
            .Text = aRdctnCalcData.TcnOnSpec
            .Col = 197
            .Text = aRdctnCalcData.OsOnSpec
            .Col = 198
            .Text = aRdctnCalcData.IpOnSpec
            '-----
            .Col = 199
            .Value = aRdctnCalcData.Cpb100.Tpa
            .Col = 200
            .Value = aRdctnCalcData.Cpb100.WtPct
            .Col = 201
            .Value = aRdctnCalcData.Cpb100.Bpl
            .Col = 202
            .Value = aRdctnCalcData.Cpb100.Ins
            .Col = 203
            .Value = aRdctnCalcData.Cpb100.Ia
            .Col = 204
            .Value = aRdctnCalcData.Cpb100.Fe
            .Col = 205
            .Value = aRdctnCalcData.Cpb100.Al
            .Col = 206
            .Value = aRdctnCalcData.Cpb100.Mg
            .Col = 207
            .Value = aRdctnCalcData.Cpb100.Ca
            .Col = 208
            .Value = aRdctnCalcData.Cpb100.Mer
            .Col = 209
            .Value = gGetCaP2O5(aRdctnCalcData.Cpb100.Ca,
                                aRdctnCalcData.Cpb100.Bpl,
                                2)
            '-----
            .Col = 210
            .Value = aRdctnCalcData.Fpb100.Tpa
            .Col = 211
            .Value = aRdctnCalcData.Fpb100.WtPct
            .Col = 212
            .Value = aRdctnCalcData.Fpb100.Bpl
            .Col = 213
            .Value = aRdctnCalcData.Fpb100.Ins
            .Col = 214
            .Value = aRdctnCalcData.Fpb100.Ia
            .Col = 215
            .Value = aRdctnCalcData.Fpb100.Fe
            .Col = 216
            .Value = aRdctnCalcData.Fpb100.Al
            .Col = 217
            .Value = aRdctnCalcData.Fpb100.Mg
            .Col = 218
            .Value = aRdctnCalcData.Fpb100.Ca
            .Col = 219
            .Value = aRdctnCalcData.Fpb100.Mer
            .Col = 220
            .Value = gGetCaP2O5(aRdctnCalcData.Fpb100.Ca,
                                aRdctnCalcData.Fpb100.Bpl,
                                2)
            '-----
            .Col = 221
            .Value = aRdctnCalcData.Ttl100.Tpa
            .Col = 222
            .Value = aRdctnCalcData.Ttl100.WtPct
            .Col = 223
            .Value = aRdctnCalcData.Ttl100.Bpl
            '-----
            .Col = 224
            .Value = aRdctnCalcData.Tfd100.Tpa
            .Col = 225
            .Value = aRdctnCalcData.Tfd100.WtPct
            .Col = 226
            .Value = aRdctnCalcData.Tfd100.Bpl
            '-----
            .Col = 227
            .Value = aRdctnCalcData.Tpr100.Tpa
            .Col = 228
            .Value = aRdctnCalcData.Tpr100.WtPct
            .Col = 229
            .Value = aRdctnCalcData.Tpr100.Bpl
            .Col = 230
            .Value = aRdctnCalcData.Tpr100.Ins
            .Col = 231
            .Value = aRdctnCalcData.Tpr100.Ia
            .Col = 232
            .Value = aRdctnCalcData.Tpr100.Fe
            .Col = 233
            .Value = aRdctnCalcData.Tpr100.Al
            .Col = 234
            .Value = aRdctnCalcData.Tpr100.Mg
            .Col = 235
            .Value = aRdctnCalcData.Tpr100.Ca
            .Col = 236
            .Value = aRdctnCalcData.Tpr100.Mer
            .Col = 237
            .Value = gGetCaP2O5(aRdctnCalcData.Tpr100.Ca,
                                aRdctnCalcData.Tpr100.Bpl,
                                2)
            '-----
            .Col = 238
            .Value = aRdctnCalcData.Ccn100.Tpa
            .Col = 239
            .Value = aRdctnCalcData.Ccn100.WtPct
            .Col = 240
            .Value = aRdctnCalcData.Ccn100.Bpl
            .Col = 241
            .Value = aRdctnCalcData.Ccn100.Ins
            .Col = 242
            .Value = aRdctnCalcData.Ccn100.Ia
            .Col = 243
            .Value = aRdctnCalcData.Ccn100.Fe
            .Col = 244
            .Value = aRdctnCalcData.Ccn100.Al
            .Col = 245
            .Value = aRdctnCalcData.Ccn100.Mg
            .Col = 246
            .Value = aRdctnCalcData.Ccn100.Ca
            .Col = 247
            .Value = aRdctnCalcData.Ccn100.Mer
            .Col = 248
            .Value = gGetCaP2O5(aRdctnCalcData.Ccn100.Ca,
                                aRdctnCalcData.Ccn100.Bpl,
                                2)
            '-----
            .Col = 249
            .Value = aRdctnCalcData.Fcn100.Tpa
            .Col = 250
            .Value = aRdctnCalcData.Fcn100.WtPct
            .Col = 251
            .Value = aRdctnCalcData.Fcn100.Bpl
            .Col = 252
            .Value = aRdctnCalcData.Fcn100.Ins
            .Col = 253
            .Value = aRdctnCalcData.Fcn100.Ia
            .Col = 254
            .Value = aRdctnCalcData.Fcn100.Fe
            .Col = 255
            .Value = aRdctnCalcData.Fcn100.Al
            .Col = 256
            .Value = aRdctnCalcData.Fcn100.Mg
            .Col = 257
            .Value = aRdctnCalcData.Fcn100.Ca
            .Col = 258
            .Value = aRdctnCalcData.Fcn100.Mer
            .Col = 259
            .Value = gGetCaP2O5(aRdctnCalcData.Fcn100.Ca,
                                aRdctnCalcData.Fcn100.Bpl,
                                2)
            '-----
            .Col = 260
            .Value = aRdctnCalcData.Os100.Tpa
            .Col = 261
            .Value = aRdctnCalcData.Os100.WtPct
            .Col = 262
            .Value = aRdctnCalcData.Os100.Bpl
            .Col = 263
            .Value = aRdctnCalcData.Os100.Ins
            .Col = 264
            .Value = aRdctnCalcData.Os100.Ia
            .Col = 265
            .Value = aRdctnCalcData.Os100.Fe
            .Col = 266
            .Value = aRdctnCalcData.Os100.Al
            .Col = 267
            .Value = aRdctnCalcData.Os100.Mg
            .Col = 268
            .Value = aRdctnCalcData.Os100.Ca
            .Col = 269
            .Value = aRdctnCalcData.Os100.Mer
            .Col = 270
            .Value = gGetCaP2O5(aRdctnCalcData.Os100.Ca,
                                aRdctnCalcData.Os100.Bpl,
                                2)
            '-----
            .Col = 271
            .Value = aRdctnCalcData.Tpb100.Tpa
            .Col = 272
            .Value = aRdctnCalcData.Tpb100.WtPct
            .Col = 273
            .Value = aRdctnCalcData.Tpb100.Bpl
            .Col = 274
            .Value = aRdctnCalcData.Tpb100.Ins
            .Col = 275
            .Value = aRdctnCalcData.Tpb100.Ia
            .Col = 276
            .Value = aRdctnCalcData.Tpb100.Fe
            .Col = 277
            .Value = aRdctnCalcData.Tpb100.Al
            .Col = 278
            .Value = aRdctnCalcData.Tpb100.Mg
            .Col = 279
            .Value = aRdctnCalcData.Tpb100.Ca
            .Col = 280
            .Value = aRdctnCalcData.Tpb100.Mer
            .Col = 281
            .Value = gGetCaP2O5(aRdctnCalcData.Tpb100.Ca,
                                aRdctnCalcData.Tpb100.Bpl,
                                2)
            '-----
            .Col = 282
            .Value = aRdctnCalcData.Ip100.Tpa
            .Col = 283
            .Value = aRdctnCalcData.Ip100.WtPct
            .Col = 284
            .Value = aRdctnCalcData.Ip100.Bpl
            .Col = 285
            .Value = aRdctnCalcData.Ip100.Ins
            .Col = 286
            .Value = aRdctnCalcData.Ip100.Ia
            .Col = 287
            .Value = aRdctnCalcData.Ip100.Fe
            .Col = 288
            .Value = aRdctnCalcData.Ip100.Al
            .Col = 289
            .Value = aRdctnCalcData.Ip100.Mg
            .Col = 290
            .Value = aRdctnCalcData.Ip100.Ca
            .Col = 291
            .Value = aRdctnCalcData.Ip100.Mer
            .Col = 292
            .Value = gGetCaP2O5(aRdctnCalcData.Ip100.Ca,
                                aRdctnCalcData.Ip100.Bpl,
                                2)
            '-----
            .Col = 293
            .Value = aRdctnCalcData.Tcn100.Tpa
            .Col = 294
            .Value = aRdctnCalcData.Tcn100.WtPct
            .Col = 295
            .Value = aRdctnCalcData.Tcn100.Bpl
            .Col = 296
            .Value = aRdctnCalcData.Tcn100.Ins
            .Col = 297
            .Value = aRdctnCalcData.Tcn100.Ia
            .Col = 298
            .Value = aRdctnCalcData.Tcn100.Fe
            .Col = 299
            .Value = aRdctnCalcData.Tcn100.Al
            .Col = 300
            .Value = aRdctnCalcData.Tcn100.Mg
            .Col = 301
            .Value = aRdctnCalcData.Tcn100.Ca
            .Col = 302
            .Value = aRdctnCalcData.Tcn100.Mer
            .Col = 303
            .Value = gGetCaP2O5(aRdctnCalcData.Tcn100.Ca,
                                aRdctnCalcData.Tcn100.Bpl,
                                2)
            '-----
            .Col = 304
            .Value = aRdctnCalcData.Cfd100.Tpa
            .Col = 305
            .Value = aRdctnCalcData.Cfd100.WtPct
            .Col = 306
            .Value = aRdctnCalcData.Cfd100.Bpl
            '-----
            .Col = 307
            .Value = aRdctnCalcData.Ffd100.Tpa
            .Col = 308
            .Value = aRdctnCalcData.Ffd100.WtPct
            .Col = 309
            .Value = aRdctnCalcData.Ffd100.Bpl
            '-----
            .Col = 310
            .Value = aRdctnCalcData.Wcl100.Tpa
            .Col = 311
            .Value = aRdctnCalcData.Wcl100.WtPct
            .Col = 312
            .Value = aRdctnCalcData.Wcl100.Bpl
            '-----
            .Col = 313
            .Text = aRdctnCalcData.MineableHole100
            .Col = 314
            .Value = aRdctnCalcData.MtxTpaPc
            '-----
            .Col = 315
            .Value = aRdctnCalcData.MtxxOnSpec100
            .Col = 316
            .Value = aRdctnCalcData.TotxOnSpec100
            .Col = 317
            .Value = aRdctnCalcData.MtxxAll100
            .Col = 318
            .Value = aRdctnCalcData.TotxAll100
            '-----
            .Col = 319
            .Text = aRdctnCalcData.CpbMinHole
            .Col = 320
            .Text = aRdctnCalcData.FpbMinHole
            .Col = 321
            .Text = aRdctnCalcData.TpbMinHole
            .Col = 322
            .Text = aRdctnCalcData.CcnMinHole
            .Col = 323
            .Text = aRdctnCalcData.FcnMinHole
            .Col = 324
            .Text = aRdctnCalcData.TcnMinHole
            .Col = 325
            .Text = aRdctnCalcData.OsMinHole
            .Col = 326
            .Text = aRdctnCalcData.IpMinHole
            '-----
            .Col = 327
            .Value = aRdctnCalcData.MtxxOnSpecPcHole
            .Col = 328
            .Value = aRdctnCalcData.TotxOnSpecPcHole
            .Col = 329
            .Value = aRdctnCalcData.MtxxAllPcHole
            .Col = 330
            .Value = aRdctnCalcData.TotxAllPcHole
            '-----
            .Col = 331
            .Value = aRdctnCalcData.MtxxOnSpec100Hole
            .Col = 332
            .Value = aRdctnCalcData.TotxOnSpec100Hole
            .Col = 333
            .Value = aRdctnCalcData.MtxxAll100Hole
            .Col = 334
            .Value = aRdctnCalcData.TotxAll100Hole
            '-----
            .Col = 335
            .Value = aRdctnCalcData.MtxPctMoist
            .Col = 336
            .Value = aRdctnCalcData.MtxPctSol
            '-----
            '337 to 346 Blank
            '347 to 456 MgO Plant
            '-----
            'Currently in Function PlaceInSplitSprd
            .Col = 457
            .Value = aRdctnCalcData.TpbRej.Tpa
            .Col = 458
            .Value = aRdctnCalcData.TpbRej.Bpl
            .Col = 459
            .Value = aRdctnCalcData.TpbRej.Ins
            .Col = 460
            .Value = aRdctnCalcData.TpbRej.Ia
            .Col = 461
            .Value = aRdctnCalcData.TpbRej.Fe
            .Col = 462
            .Value = aRdctnCalcData.TpbRej.Al
            .Col = 463
            .Value = aRdctnCalcData.TpbRej.Mg
            .Col = 464
            .Value = aRdctnCalcData.TpbRej.Ca
            '-----
            .Col = 465
            .Value = aRdctnCalcData.TpbRej100.Tpa
            .Col = 466
            .Value = aRdctnCalcData.TpbRej100.Bpl
            .Col = 467
            .Value = aRdctnCalcData.TpbRej100.Ins
            .Col = 468
            .Value = aRdctnCalcData.TpbRej100.Ia
            .Col = 468
            .Value = aRdctnCalcData.TpbRej100.Fe
            .Col = 470
            .Value = aRdctnCalcData.TpbRej100.Al
            .Col = 471
            .Value = aRdctnCalcData.TpbRej100.Mg
            .Col = 472
            .Value = aRdctnCalcData.TpbRej100.Ca
            '-----
            .Col = 473
            .Value = aRdctnCalcData.Os.FeAdj
            .Col = 474
            .Value = aRdctnCalcData.Os.IaAdj
            .Col = 475
            .Value = aRdctnCalcData.Os.Mer
            .Col = 476
            .Value = aRdctnCalcData.Cpb.FeAdj
            .Col = 477
            .Value = aRdctnCalcData.Cpb.IaAdj
            .Col = 478
            .Value = aRdctnCalcData.Cpb.Mer
            .Col = 479
            .Value = aRdctnCalcData.Fpb.FeAdj
            .Col = 480
            .Value = aRdctnCalcData.Fpb.IaAdj
            .Col = 481
            .Value = aRdctnCalcData.Fpb.Mer
            .Col = 482
            .Value = aRdctnCalcData.Tpb.FeAdj
            .Col = 483
            .Value = aRdctnCalcData.Tpb.IaAdj
            .Col = 484
            .Value = aRdctnCalcData.Tpb.Mer
            .Col = 485
            .Value = aRdctnCalcData.Ip.FeAdj
            .Col = 486
            .Value = aRdctnCalcData.Ip.IaAdj
            .Col = 487
            .Value = aRdctnCalcData.Ip.Mer
            .Col = 488
            .Value = aRdctnCalcData.Ccn.FeAdj
            .Col = 489
            .Value = aRdctnCalcData.Ccn.IaAdj
            .Col = 490
            .Value = aRdctnCalcData.Ccn.Mer
            .Col = 491
            .Value = aRdctnCalcData.Fcn.FeAdj
            .Col = 492
            .Value = aRdctnCalcData.Fcn.IaAdj
            .Col = 493
            .Value = aRdctnCalcData.Fcn.Mer
            .Col = 494
            .Value = aRdctnCalcData.Tcn.FeAdj
            .Col = 495
            .Value = aRdctnCalcData.Tcn.IaAdj
            .Col = 496
            .Value = aRdctnCalcData.Tcn.Mer
            .Col = 497
            .Value = aRdctnCalcData.Tpr.FeAdj
            .Col = 498
            .Value = aRdctnCalcData.Tpr.IaAdj
            .Col = 499
            .Value = aRdctnCalcData.Tpr.Mer
            .Col = 500
            .Value = aRdctnCalcData.TpbRej.FeAdj
            .Col = 501
            .Value = aRdctnCalcData.TpbRej.IaAdj
            '-----
            .Col = 502
            .Value = aRdctnCalcData.Os100.FeAdj
            .Col = 503
            .Value = aRdctnCalcData.Os100.IaAdj
            .Col = 504
            .Value = aRdctnCalcData.Os100.Mer
            .Col = 505
            .Value = aRdctnCalcData.Cpb100.FeAdj
            .Col = 506
            .Value = aRdctnCalcData.Cpb100.IaAdj
            .Col = 507
            .Value = aRdctnCalcData.Cpb100.Mer
            .Col = 508
            .Value = aRdctnCalcData.Fpb100.FeAdj
            .Col = 509
            .Value = aRdctnCalcData.Fpb100.IaAdj
            .Col = 510
            .Value = aRdctnCalcData.Fpb100.Mer
            .Col = 511
            .Value = aRdctnCalcData.Tpb100.FeAdj
            .Col = 512
            .Value = aRdctnCalcData.Tpb100.IaAdj
            .Col = 513
            .Value = aRdctnCalcData.Tpb100.Mer
            .Col = 514
            .Value = aRdctnCalcData.Ip100.FeAdj
            .Col = 515
            .Value = aRdctnCalcData.Ip100.IaAdj
            .Col = 516
            .Value = aRdctnCalcData.Ip100.Mer
            .Col = 517
            .Value = aRdctnCalcData.Ccn100.FeAdj
            .Col = 518
            .Value = aRdctnCalcData.Ccn100.IaAdj
            .Col = 519
            .Value = aRdctnCalcData.Ccn100.Mer
            .Col = 520
            .Value = aRdctnCalcData.Fcn100.FeAdj
            .Col = 521
            .Value = aRdctnCalcData.Fcn100.IaAdj
            .Col = 522
            .Value = aRdctnCalcData.Fcn100.Mer
            .Col = 523
            .Value = aRdctnCalcData.Tcn100.FeAdj
            .Col = 524
            .Value = aRdctnCalcData.Tcn100.IaAdj
            .Col = 525
            .Value = aRdctnCalcData.Tcn100.Mer
            .Col = 526
            .Value = aRdctnCalcData.Tpr100.FeAdj
            .Col = 527
            .Value = aRdctnCalcData.Tpr100.IaAdj
            .Col = 528
            .Value = aRdctnCalcData.Tpr100.Mer
            .Col = 529
            .Value = aRdctnCalcData.TpbRej100.FeAdj
            .Col = 530
            .Value = aRdctnCalcData.TpbRej100.IaAdj
            '-----
            '531 to 550  Tcn, Tpb Rej
            '551 to 774  Doloflot plant


            If aRdctnCalcData.SplitBarren = 1 Then
                .BlockMode = True
                .Row = .MaxRows
                .Row2 = .MaxRows
                .Col = 1
                .Col2 = .MaxCols
                .BackColor = Color.LightYellow ' &HC0FFFF    'Light yellow
                .BlockMode = False
            End If
            .ResumeLayout()
        End With
    End Function

    Private Sub AdjIns(ByRef aProdAssignData As mProdAssignType,
                       ByRef aRdctnCalcData As gRawProspSplRdctnType,
                       ByVal aMatl As String,
                       ByVal aInsAdj As Single,
                       ByVal aInsAdjMode As String,
                       ByVal aInsAdj100 As Single,
                       ByVal aInsAdjMode100 As String) ', ByVal aFlotRcvryMode As String, ByVal aFlotRcvryCrsCnIns As Single, ByVal aFlotRcvryFneCnIns As Single)


        Dim OrigData As New mProdInfoType()
        Dim AdjData As New mProdInfoType()
        Dim DataIdx As Integer

        Dim InsAdj As Single
        Dim InsAdjMode As String
        'Dim FlotRcvryMode As String
        'Dim FlotRcvryCrsCnIns As Single
        'Dim FlotRcvryFneCnIns As Single

        'TPA's are in aRdctnCalcData, impurities and BPL's are in aProdAssignData.
        'There is no Cn TPA yet at this point.
        'We need to Insol adjust two sets of data that we are tracking -- ProdCoeff
        'and 100%.
        'aMatl will be CrsPb, FnePb, IP, or Cn


        '1) CrsPbInsAdj
        '2) CrsPbInsAdjMode
        '3) CrsPbInsAdj100
        '4) CrsPbInsAdjMode100
        '5) FlotRcvryMode
        '6) FlotRcvryCrsCnIns
        '7) FlotRcvryFneCnIns

        For DataIdx = 1 To 2
            'Dataidx = 1  ProdCoeff
            'DataIdx = 2  100%

            If DataIdx = 1 Then
                InsAdj = aInsAdj
                InsAdjMode = aInsAdjMode
                'FlotRcvryMode = aFlotRcvryMode
                'FlotRcvryCrsCnIns = aFlotRcvryCrsCnIns
                'FlotRcvryFneCnIns = aFlotRcvryFneCnIns
            Else
                InsAdj = aInsAdj100
                InsAdjMode = aInsAdjMode100
                'FlotRcvryMode = ""
                'FlotRcvryCrsCnIns = 0
                'FlotRcvryFneCnIns = 0
            End If

            Select Case aMatl
                Case Is = "CrsPb"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Cpb.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Cpb100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.CpbBpl
                    OrigData.Ins = aProdAssignData.CpbIns
                    OrigData.Fe = aProdAssignData.CpbFe
                    OrigData.FeAdj = aProdAssignData.CpbFeAdj
                    OrigData.Al = aProdAssignData.CpbAl
                    OrigData.Ia = aProdAssignData.CpbIa
                    OrigData.IaAdj = aProdAssignData.CpbIaAdj
                    OrigData.Mg = aProdAssignData.CpbMg
                    OrigData.Ca = aProdAssignData.CpbCa

                Case Is = "FnePb"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Fpb.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Fpb100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.FpbBpl
                    OrigData.Ins = aProdAssignData.FpbIns
                    OrigData.Fe = aProdAssignData.FpbFe
                    OrigData.FeAdj = aProdAssignData.FpbFeAdj
                    OrigData.Al = aProdAssignData.FpbAl
                    OrigData.Ia = aProdAssignData.FpbIA
                    OrigData.IaAdj = aProdAssignData.FpbIaAdj
                    OrigData.Mg = aProdAssignData.FpbMg
                    OrigData.Ca = aProdAssignData.FpbCa

                Case Is = "IP"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Ip.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Ip100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.IpBpl
                    OrigData.Ins = aProdAssignData.IpIns
                    OrigData.Fe = aProdAssignData.IpFe
                    OrigData.FeAdj = aProdAssignData.IpFeAdj
                    OrigData.Al = aProdAssignData.IpAl
                    OrigData.Ia = aProdAssignData.IpIa
                    OrigData.IaAdj = aProdAssignData.IpIaAdj
                    OrigData.Mg = aProdAssignData.IpMg
                    OrigData.Ca = aProdAssignData.IpCa

                Case Is = "Ccn"      'No TPA is available!
                    'Only have analysis (BPL, Insol, etc. for total concentrate).
                    OrigData.Tpa = 0
                    OrigData.Bpl = aProdAssignData.CnBpl
                    OrigData.Ins = aProdAssignData.CnIns
                    OrigData.Fe = aProdAssignData.CnFe
                    OrigData.FeAdj = aProdAssignData.CnFeAdj
                    OrigData.Al = aProdAssignData.CnAl
                    OrigData.Ia = aProdAssignData.CnIa
                    OrigData.IaAdj = aProdAssignData.CnIaAdj
                    OrigData.Mg = aProdAssignData.CnMg
                    OrigData.Ca = aProdAssignData.CnCa

                Case Is = "Fcn"      'No TPA is available!
                    'Only have analysis (BPL, Insol, etc. for total concentrate).
                    OrigData.Tpa = 0
                    OrigData.Bpl = aProdAssignData.CnBpl
                    OrigData.Ins = aProdAssignData.CnIns
                    OrigData.Fe = aProdAssignData.CnFe
                    OrigData.FeAdj = aProdAssignData.CnFeAdj
                    OrigData.Al = aProdAssignData.CnAl
                    OrigData.Ia = aProdAssignData.CnIa
                    OrigData.IaAdj = aProdAssignData.CnIaAdj
                    OrigData.Mg = aProdAssignData.CnMg
                    OrigData.Ca = aProdAssignData.CnCa
            End Select

            'Have the original data -- now adjust it!
            'Insol adjustment modes:
            '1) Minimum     -- adjust lab Insol up to this value, if lab Insol above
            '                  this value then leave alone.
            '2) Direct      -- adjust lab Insol up or down to this value.
            '3) Incremental -- Add this value to the lab Insol.
            '4) In-Situ     -- use the lab Insol.

            'also have:
            'aRcvryParamsData.FlotRcvryMode
            'aRcvryParamsData.FlotRcvryCrsCnIns
            'aRcvryParamsData.FlotRcvryFneCnIns
            'If aRcvryParamsData.FlotRcvryMode = "Hard-wire" then these Insol
            'adjust values override any concentrate Insol adjusts from above.

            '~~~~~~~  This code seems to never ran. Also there is no more Hard-wire Insol value

            ''First check the special case for concentrate.
            'If FlotRcvryMode = "Hard-wire" Then
            '    'Will consider this the same as "Direct".  Will adjust up or
            '    'down to the hard-wired value.
            '    InsAdjMode = "Direct"
            '    'Since we don't have coarse and fine concentrate in the raw
            '    'prospect data we will use the fine concentrate Insol value
            '    InsAdj = FlotRcvryFneCnIns
            'End If

            '~~~~~~~  This code seems to never ran. Also there is no more Hard-wire Insol value

            Select Case InsAdjMode
                Case Is = "Minimum"
                    If OrigData.Ins >= InsAdj Then
                        'Leave it alone!
                        AdjData.Tpa = OrigData.Tpa
                        AdjData.Bpl = OrigData.Bpl
                        AdjData.Fe = OrigData.Fe
                        AdjData.FeAdj = OrigData.FeAdj
                        AdjData.Al = OrigData.Al
                        AdjData.Ia = OrigData.Ia
                        AdjData.IaAdj = OrigData.IaAdj
                        AdjData.Mg = OrigData.Mg
                        AdjData.Ca = OrigData.Ca
                        AdjData.Ins = OrigData.Ins
                    Else    'Need to adjust up to the adjusted Insol value.
                        AdjData.Ins = InsAdj

                        If 100 - InsAdj <> 0 Then
                            AdjData.Tpa = Round(OrigData.Tpa * (100 - OrigData.Ins) / (100 - InsAdj), 0)
                        Else
                            AdjData.Tpa = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Bpl = Round(OrigData.Bpl * (100 - InsAdj) / (100 - OrigData.Ins), 1)
                        Else
                            AdjData.Bpl = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Fe = Round(OrigData.Fe * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Fe = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.FeAdj = Round(OrigData.FeAdj * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.FeAdj = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Al = Round(OrigData.Al * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Al = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Ia = Round(OrigData.Ia * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Ia = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.IaAdj = Round(OrigData.IaAdj * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.IaAdj = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Mg = Round(OrigData.Mg * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Mg = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Ca = Round(OrigData.Ca * (100 - InsAdj) / (100 - OrigData.Ins), 1)
                        Else
                            AdjData.Ca = 0
                        End If
                    End If

                Case Is = "Direct"
                    'Adjust up or down to the adjusted Insol
                    AdjData.Ins = InsAdj

                    If 100 - InsAdj <> 0 Then
                        AdjData.Tpa = Round(OrigData.Tpa * (100 - OrigData.Ins) / (100 - InsAdj), 0)
                    Else
                        AdjData.Tpa = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Bpl = Round(OrigData.Bpl * (100 - InsAdj) / (100 - OrigData.Ins), 1)
                    Else
                        AdjData.Bpl = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Fe = Round(OrigData.Fe * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Fe = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.FeAdj = Round(OrigData.FeAdj * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.FeAdj = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Al = Round(OrigData.Al * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Al = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Ia = Round(OrigData.Ia * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Ia = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.IaAdj = Round(OrigData.IaAdj * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.IaAdj = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Mg = Round(OrigData.Mg * (100 - InsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Mg = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Ca = Round(OrigData.Ca * (100 - InsAdj) / (100 - OrigData.Ins), 1)
                    Else
                        AdjData.Ca = 0
                    End If

                Case Is = "Incremental"
                'Still need to do this!

                Case Is = "In-Situ"         'Don't have to change anything.
                    AdjData.Tpa = OrigData.Tpa
                    AdjData.Bpl = OrigData.Bpl
                    AdjData.Fe = OrigData.Fe
                    AdjData.FeAdj = OrigData.FeAdj
                    AdjData.Al = OrigData.Al
                    AdjData.Ia = OrigData.Ia
                    AdjData.IaAdj = OrigData.IaAdj
                    AdjData.Mg = OrigData.Mg
                    AdjData.Ca = OrigData.Ca
                    AdjData.Ins = OrigData.Ins
            End Select

            'Don't want any negative values -- just to make sure there are none:
            If AdjData.Tpa < 0 Then
                AdjData.Tpa = 0
            End If
            If AdjData.Bpl < 0 Then
                AdjData.Bpl = 0
            End If
            If AdjData.Fe < 0 Then
                AdjData.Fe = 0
            End If
            If AdjData.FeAdj < 0 Then
                AdjData.FeAdj = 0
            End If
            If AdjData.Al < 0 Then
                AdjData.Al = 0
            End If
            If AdjData.Ia < 0 Then
                AdjData.Ia = 0
            End If
            If AdjData.IaAdj < 0 Then
                AdjData.IaAdj = 0
            End If
            If AdjData.Mg < 0 Then
                AdjData.Mg = 0
            End If
            If AdjData.Ca < 0 Then
                AdjData.Ca = 0
            End If

            'Place the results in aRdctnCalcData
            Select Case aMatl
                Case Is = "CrsPb"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Cpb.Tpa = AdjData.Tpa
                        aRdctnCalcData.Cpb.Bpl = AdjData.Bpl
                        aRdctnCalcData.Cpb.Fe = AdjData.Fe
                        aRdctnCalcData.Cpb.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Cpb.Al = AdjData.Al
                        aRdctnCalcData.Cpb.Ia = AdjData.Ia
                        aRdctnCalcData.Cpb.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Cpb.Mg = AdjData.Mg
                        aRdctnCalcData.Cpb.Ca = AdjData.Ca
                        aRdctnCalcData.Cpb.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Cpb100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Cpb100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Cpb100.Fe = AdjData.Fe
                        aRdctnCalcData.Cpb100.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Cpb100.Al = AdjData.Al
                        aRdctnCalcData.Cpb100.Ia = AdjData.Ia
                        aRdctnCalcData.Cpb100.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Cpb100.Mg = AdjData.Mg
                        aRdctnCalcData.Cpb100.Ca = AdjData.Ca
                        aRdctnCalcData.Cpb100.Ins = AdjData.Ins
                    End If

                Case Is = "FnePb"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Fpb.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fpb.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fpb.Fe = AdjData.Fe
                        aRdctnCalcData.Fpb.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Fpb.Al = AdjData.Al
                        aRdctnCalcData.Fpb.Ia = AdjData.Ia
                        aRdctnCalcData.Fpb.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Fpb.Mg = AdjData.Mg
                        aRdctnCalcData.Fpb.Ca = AdjData.Ca
                        aRdctnCalcData.Fpb.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Fpb100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fpb100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fpb100.Fe = AdjData.Fe
                        aRdctnCalcData.Fpb100.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Fpb100.Al = AdjData.Al
                        aRdctnCalcData.Fpb100.Ia = AdjData.Ia
                        aRdctnCalcData.Fpb100.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Fpb100.Mg = AdjData.Mg
                        aRdctnCalcData.Fpb100.Ca = AdjData.Ca
                        aRdctnCalcData.Fpb100.Ins = AdjData.Ins
                    End If

                Case Is = "IP"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Ip.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ip.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ip.Fe = AdjData.Fe
                        aRdctnCalcData.Ip.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Ip.Al = AdjData.Al
                        aRdctnCalcData.Ip.Ia = AdjData.Ia
                        aRdctnCalcData.Ip.Ia = AdjData.IaAdj
                        aRdctnCalcData.Ip.Mg = AdjData.Mg
                        aRdctnCalcData.Ip.Ca = AdjData.Ca
                        aRdctnCalcData.Ip.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Ip100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ip100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ip100.Fe = AdjData.Fe
                        aRdctnCalcData.Ip100.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Ip100.Al = AdjData.Al
                        aRdctnCalcData.Ip100.Ia = AdjData.Ia
                        aRdctnCalcData.Ip100.Ia = AdjData.IaAdj
                        aRdctnCalcData.Ip100.Mg = AdjData.Mg
                        aRdctnCalcData.Ip100.Ca = AdjData.Ca
                        aRdctnCalcData.Ip100.Ins = AdjData.Ins
                    End If

                Case Is = "Ccn"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Ccn.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ccn.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ccn.Fe = AdjData.Fe
                        aRdctnCalcData.Ccn.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Ccn.Al = AdjData.Al
                        aRdctnCalcData.Ccn.Ia = AdjData.Ia
                        aRdctnCalcData.Ccn.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Ccn.Mg = AdjData.Mg
                        aRdctnCalcData.Ccn.Ca = AdjData.Ca
                        aRdctnCalcData.Ccn.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Ccn100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ccn100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ccn100.Fe = AdjData.Fe
                        aRdctnCalcData.Ccn100.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Ccn100.Al = AdjData.Al
                        aRdctnCalcData.Ccn100.Ia = AdjData.Ia
                        aRdctnCalcData.Ccn100.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Ccn100.Mg = AdjData.Mg
                        aRdctnCalcData.Ccn100.Ca = AdjData.Ca
                        aRdctnCalcData.Ccn100.Ins = AdjData.Ins
                    End If

                Case Is = "Fcn"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Fcn.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fcn.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fcn.Fe = AdjData.Fe
                        aRdctnCalcData.Fcn.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Fcn.Al = AdjData.Al
                        aRdctnCalcData.Fcn.Ia = AdjData.Ia
                        aRdctnCalcData.Fcn.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Fcn.Mg = AdjData.Mg
                        aRdctnCalcData.Fcn.Ca = AdjData.Ca
                        aRdctnCalcData.Fcn.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Fcn100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fcn100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fcn100.Fe = AdjData.Fe
                        aRdctnCalcData.Fcn100.FeAdj = AdjData.FeAdj
                        aRdctnCalcData.Fcn100.Al = AdjData.Al
                        aRdctnCalcData.Fcn100.Ia = AdjData.Ia
                        aRdctnCalcData.Fcn100.IaAdj = AdjData.IaAdj
                        aRdctnCalcData.Fcn100.Mg = AdjData.Mg
                        aRdctnCalcData.Fcn100.Ca = AdjData.Ca
                        aRdctnCalcData.Fcn100.Ins = AdjData.Ins
                    End If
            End Select
        Next DataIdx
    End Sub

    Public Function gGetCaP2O5(ByVal aCa As Single, ByVal aBpl As Single, ByVal aRoundVal As Integer) As Single
        Dim P2O5 As Single
        Dim Result As Single = 0
        P2O5 = Round(aBpl / 2.185, 1)
        If P2O5 > 0 Then
            Result = Round(aCa / P2O5, aRoundVal)
        End If
        Return Result
    End Function

    Public Function gGetQualityP2O5(ByVal aQualityElement As Single, ByVal aBpl As Single, ByVal aRoundVal As Integer) As Single
        Dim P2O5 As Single
        Dim Result As Single = 0
        P2O5 = Round(aBpl / 2.185, 1)
        If P2O5 > 0 Then
            Result = Round(aQualityElement / P2O5, aRoundVal)
        End If
        Return Result
    End Function

    Public Function gGetQualityP2O5Times100(ByVal aQualityElement As Single,
                                    ByVal aBpl As Single,
                                    ByVal aRoundVal As Integer) As Single
        Dim P2O5 As Double
        Dim result As Single = 0
        P2O5 = Round(aBpl / 2.185, 1)
        If P2O5 <> 0 Then
            result = Round((aQualityElement / P2O5) * 100, aRoundVal)
        End If
        Return result
    End Function

    Public Function gGetQualityMer(ByVal aBpl As Single,
                            ByVal aFe As Single,
                            ByVal aAl As Single,
                            ByVal aMg As Single,
                            ByVal aRoundVal As Integer) As Single
        Dim P2O5 As Double
        Dim result As Double = 0
        P2O5 = Round(aBpl / 2.185, 1)
        If P2O5 <> 0 Then
            result = Round((aFe + aAl + aMg) / P2O5 * 100, aRoundVal)
        End If
        Return result
    End Function




    Private Sub CalcTotPb(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                      ByVal aWhichToCalc As String)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************
        'heyfri
        'aWhichToCalc will be "ProdCoeff", "100%" or "Both".

        'New DfbFco
        'This Sub used gGetTotalValue which averaged in zeros.
        'Replaced it with gGetTotalValue2 which does not average in zero values.

        With aRdctnCalcData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'ProdCoeff stuff
                .Tpb.Tpa = .Cpb.Tpa + .Fpb.Tpa
                .Tpb.Bpl = gGetTotalValue2(.Cpb.Bpl, .Cpb.Tpa, .Fpb.Bpl, .Fpb.Tpa, 1)
                .Tpb.Ins = gGetTotalValue2(.Cpb.Ins, .Cpb.Tpa, .Fpb.Ins, .Fpb.Tpa, 1)
                .Tpb.Ia = gGetTotalValue2(.Cpb.Ia, .Cpb.Tpa, .Fpb.Ia, .Fpb.Tpa, 2)
                .Tpb.IaAdj = gGetTotalValue2(.Cpb.IaAdj, .Cpb.Tpa, .Fpb.IaAdj, .Fpb.Tpa, 2)
                .Tpb.Ca = gGetTotalValue2(.Cpb.Ca, .Cpb.Tpa, .Fpb.Ca, .Fpb.Tpa, 1)
                .Tpb.Fe = gGetTotalValue2(.Cpb.Fe, .Cpb.Tpa, .Fpb.Fe, .Fpb.Tpa, 2)
                .Tpb.FeAdj = gGetTotalValue2(.Cpb.FeAdj, .Cpb.Tpa, .Fpb.FeAdj, .Fpb.Tpa, 2)
                .Tpb.Al = gGetTotalValue2(.Cpb.Al, .Cpb.Tpa, .Fpb.Al, .Fpb.Tpa, 2)
                .Tpb.Mg = gGetTotalValue2(.Cpb.Mg, .Cpb.Tpa, .Fpb.Mg, .Fpb.Tpa, 2)
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100% stuff
                .Tpb100.Tpa = .Cpb100.Tpa + .Fpb100.Tpa
                .Tpb100.Bpl = gGetTotalValue2(.Cpb100.Bpl, .Cpb100.Tpa,
                          .Fpb100.Bpl, .Fpb100.Tpa, 1)
                .Tpb100.Ins = gGetTotalValue2(.Cpb100.Ins, .Cpb100.Tpa,
                          .Fpb100.Ins, .Fpb100.Tpa, 1)
                .Tpb100.Ia = gGetTotalValue2(.Cpb100.Ia, .Cpb100.Tpa,
                         .Fpb100.Ia, .Fpb100.Tpa, 2)
                .Tpb100.IaAdj = gGetTotalValue2(.Cpb100.IaAdj, .Cpb100.Tpa,
                         .Fpb100.IaAdj, .Fpb100.Tpa, 2)
                .Tpb100.Ca = gGetTotalValue2(.Cpb100.Ca, .Cpb100.Tpa,
                         .Fpb100.Ca, .Fpb100.Tpa, 1)
                .Tpb100.Fe = gGetTotalValue2(.Cpb100.Fe, .Cpb100.Tpa,
                         .Fpb100.Fe, .Fpb100.Tpa, 2)
                .Tpb100.FeAdj = gGetTotalValue2(.Cpb100.FeAdj, .Cpb100.Tpa,
                           .Fpb100.FeAdj, .Fpb100.Tpa, 2)
                .Tpb100.Al = gGetTotalValue2(.Cpb100.Al, .Cpb100.Tpa,
                         .Fpb100.Al, .Fpb100.Tpa, 2)
                .Tpb100.Mg = gGetTotalValue2(.Cpb100.Mg, .Cpb100.Tpa,
                         .Fpb100.Mg, .Fpb100.Tpa, 2)
            End If
        End With
    End Sub

    Private Sub CalcTotCn(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                      ByVal aWhichToCalc As String)


        'aWhichToCalc will be "ProdCoeff", "100%" or "Both".

        'New DfbFco
        'This Sub used gGetTotalValue which averaged in zeros.
        'Replaced it with gGetTotalValue2 which does not average in zero values.

        With aRdctnCalcData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'ProdCoeff stuff
                .Tcn.Tpa = .Ccn.Tpa + .Fcn.Tpa
                .Tcn.Bpl = gGetTotalValue2(.Ccn.Bpl, .Ccn.Tpa, .Fcn.Bpl, .Fcn.Tpa, 1)
                .Tcn.Ins = gGetTotalValue2(.Ccn.Ins, .Ccn.Tpa, .Fcn.Ins, .Fcn.Tpa, 1)
                .Tcn.Ia = gGetTotalValue2(.Ccn.Ia, .Ccn.Tpa, .Fcn.Ia, .Fcn.Tpa, 2)
                .Tcn.IaAdj = gGetTotalValue2(.Ccn.IaAdj, .Ccn.Tpa, .Fcn.IaAdj, .Fcn.Tpa, 2)
                .Tcn.Ca = gGetTotalValue2(.Ccn.Ca, .Ccn.Tpa, .Fcn.Ca, .Fcn.Tpa, 1)
                .Tcn.Fe = gGetTotalValue2(.Ccn.Fe, .Ccn.Tpa, .Fcn.Fe, .Fcn.Tpa, 2)
                .Tcn.FeAdj = gGetTotalValue2(.Ccn.FeAdj, .Ccn.Tpa, .Fcn.FeAdj, .Fcn.Tpa, 2)
                .Tcn.Al = gGetTotalValue2(.Ccn.Al, .Ccn.Tpa, .Fcn.Al, .Fcn.Tpa, 2)
                .Tcn.Mg = gGetTotalValue2(.Ccn.Mg, .Ccn.Tpa, .Fcn.Mg, .Fcn.Tpa, 2)
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100% stuff
                .Tcn100.Tpa = .Ccn100.Tpa + .Fcn100.Tpa
                .Tcn100.Bpl = gGetTotalValue2(.Ccn100.Bpl, .Ccn100.Tpa,
                          .Fcn100.Bpl, .Fcn100.Tpa, 1)
                .Tcn100.Ins = gGetTotalValue2(.Ccn100.Ins, .Ccn100.Tpa,
                          .Fcn100.Ins, .Fcn100.Tpa, 1)
                .Tcn100.Ia = gGetTotalValue2(.Ccn100.Ia, .Ccn100.Tpa,
                         .Fcn100.Ia, .Fcn100.Tpa, 2)
                .Tcn100.IaAdj = gGetTotalValue2(.Ccn100.IaAdj, .Ccn100.Tpa,
                            .Fcn100.IaAdj, .Fcn100.Tpa, 2)
                .Tcn100.Ca = gGetTotalValue2(.Ccn100.Ca, .Ccn100.Tpa,
                         .Fcn100.Ca, .Fcn100.Tpa, 1)
                .Tcn100.Fe = gGetTotalValue2(.Ccn100.Fe, .Ccn100.Tpa,
                         .Fcn100.Fe, .Fcn100.Tpa, 2)
                .Tcn100.FeAdj = gGetTotalValue2(.Ccn100.FeAdj, .Ccn100.Tpa,
                         .Fcn100.FeAdj, .Fcn100.Tpa, 2)
                .Tcn100.Al = gGetTotalValue2(.Ccn100.Al, .Ccn100.Tpa,
                         .Fcn100.Al, .Fcn100.Tpa, 2)
                .Tcn100.Mg = gGetTotalValue2(.Ccn100.Mg, .Ccn100.Tpa,
                         .Fcn100.Mg, .Fcn.Tpa, 2)
            End If
        End With
    End Sub

    Private Sub CalcTotPr(ByRef aHoleData As gRawProspSplRdctnType,
                      ByVal aWhichToCalc As String)


        'aWhichToCalc will be "ProdCoeff", "100%" or "Both".
        'Total value = Oversize + Total pebble + IP + Total concentrate

        With aHoleData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'ProdCoeff stuff
                .Tpr.Tpa = .Os.Tpa + .Ip.Tpa + .Tpb.Tpa + .Tcn.Tpa

                .Tpr.Bpl = gGetTotalValue4(.Os.Bpl, .Os.Tpa,
                                       .Ip.Bpl, .Ip.Tpa,
                                       .Tpb.Bpl, .Tpb.Tpa,
                                       .Tcn.Bpl, .Tcn.Tpa, 1)

                .Tpr.Ins = gGetTotalValue4(.Os.Ins, .Os.Tpa,
                                       .Ip.Ins, .Ip.Tpa,
                                       .Tpb.Ins, .Tpb.Tpa,
                                       .Tcn.Ins, .Tcn.Tpa, 1)

                .Tpr.Ia = gGetTotalValue4(.Os.Ia, .Os.Tpa,
                                      .Ip.Ia, .Ip.Tpa,
                                      .Tpb.Ia, .Tpb.Tpa,
                                      .Tcn.Ia, .Tcn.Tpa, 2)

                .Tpr.IaAdj = gGetTotalValue4(.Os.IaAdj, .Os.Tpa,
                                         .Ip.IaAdj, .Ip.Tpa,
                                         .Tpb.IaAdj, .Tpb.Tpa,
                                         .Tcn.IaAdj, .Tcn.Tpa, 2)

                .Tpr.Ca = gGetTotalValue4(.Os.Ca, .Os.Tpa,
                                      .Ip.Ca, .Ip.Tpa,
                                      .Tpb.Ca, .Tpb.Tpa,
                                      .Tcn.Ca, .Tcn.Tpa, 1)

                .Tpr.Fe = gGetTotalValue4(.Os.Fe, .Os.Tpa,
                                      .Ip.Fe, .Ip.Tpa,
                                      .Tpb.Fe, .Tpb.Tpa,
                                      .Tcn.Fe, .Tcn.Tpa, 2)

                .Tpr.FeAdj = gGetTotalValue4(.Os.FeAdj, .Os.Tpa,
                                         .Ip.FeAdj, .Ip.Tpa,
                                         .Tpb.FeAdj, .Tpb.Tpa,
                                         .Tcn.FeAdj, .Tcn.Tpa, 2)

                .Tpr.Al = gGetTotalValue4(.Os.Al, .Os.Tpa,
                                      .Ip.Al, .Ip.Tpa,
                                      .Tpb.Al, .Tpb.Tpa,
                                      .Tcn.Al, .Tcn.Tpa, 2)

                .Tpr.Mg = gGetTotalValue4(.Os.Mg, .Os.Tpa,
                                      .Ip.Mg, .Ip.Tpa,
                                      .Tpb.Mg, .Tpb.Tpa,
                                      .Tcn.Mg, .Tcn.Tpa, 2)

                .Tpr.WtPct = .Os.WtPct + .Ip.WtPct + .Tpb.WtPct + .Tcn.WtPct
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100% stuff
                .Tpr100.Tpa = .Os100.Tpa + .Ip100.Tpa + .Tpb100.Tpa + .Tcn100.Tpa

                .Tpr100.Bpl = gGetTotalValue4(.Os100.Bpl, .Os100.Tpa,
                                         .Ip100.Bpl, .Ip100.Tpa,
                                         .Tpb100.Bpl, .Tpb100.Tpa,
                                         .Tcn100.Bpl, .Tcn100.Tpa, 1)

                .Tpr100.Ins = gGetTotalValue4(.Os100.Ins, .Os100.Tpa,
                                         .Ip100.Ins, .Ip100.Tpa,
                                         .Tpb100.Ins, .Tpb100.Tpa,
                                         .Tcn100.Ins, .Tcn100.Tpa, 1)

                .Tpr100.Ia = gGetTotalValue4(.Os100.Ia, .Os100.Tpa,
                                        .Ip100.Ia, .Ip100.Tpa,
                                        .Tpb100.Ia, .Tpb100.Tpa,
                                        .Tcn100.Ia, .Tcn100.Tpa, 2)

                .Tpr100.IaAdj = gGetTotalValue4(.Os100.IaAdj, .Os100.Tpa,
                                           .Ip100.IaAdj, .Ip100.Tpa,
                                           .Tpb100.IaAdj, .Tpb100.Tpa,
                                           .Tcn100.IaAdj, .Tcn100.Tpa, 2)

                .Tpr100.Ca = gGetTotalValue4(.Os100.Ca, .Os100.Tpa,
                                        .Ip100.Ca, .Ip100.Tpa,
                                        .Tpb100.Ca, .Tpb100.Tpa,
                                        .Tcn100.Ca, .Tcn100.Tpa, 1)

                .Tpr100.Fe = gGetTotalValue4(.Os100.Fe, .Os100.Tpa,
                                        .Ip100.Fe, .Ip100.Tpa,
                                        .Tpb100.Fe, .Tpb100.Tpa,
                                        .Tcn100.Fe, .Tcn100.Tpa, 2)

                .Tpr100.FeAdj = gGetTotalValue4(.Os100.FeAdj, .Os100.Tpa,
                                            .Ip100.FeAdj, .Ip100.Tpa,
                                            .Tpb100.FeAdj, .Tpb100.Tpa,
                                            .Tcn100.FeAdj, .Tcn100.Tpa, 2)

                .Tpr100.Al = gGetTotalValue4(.Os100.Al, .Os100.Tpa,
                                        .Ip100.Al, .Ip100.Tpa,
                                        .Tpb100.Al, .Tpb100.Tpa,
                                        .Tcn100.Al, .Tcn100.Tpa, 2)

                .Tpr100.Mg = gGetTotalValue4(.Os100.Mg, .Os100.Tpa,
                                        .Ip100.Mg, .Ip100.Tpa,
                                        .Tpb100.Mg, .Tpb100.Tpa,
                                        .Tcn100.Mg, .Tcn100.Tpa, 2)

                .Tpr100.WtPct = .Os100.WtPct + .Ip100.WtPct + .Tpb100.WtPct + .Tcn100.WtPct
            End If
        End With
    End Sub

    Private Sub DetermineSplitMineability(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                          ByVal aRcvryParamsData As gDataRdctnParamsType,
                                          ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                          ByVal aSsProdDist As ViewModels.ProductSizeDesignation)

        Dim UserHasDefinedCpb As Boolean
        Dim UserHasDefinedFpb As Boolean
        Dim UserHasDefinedTpb As Boolean
        Dim UserHasDefinedCcn As Boolean
        Dim UserHasDefinedFcn As Boolean
        Dim UserHasDefinedTcn As Boolean
        Dim UserHasDefinedIp As Boolean
        Dim UserHasDefinedATpr As Boolean

        Dim UserHasDefinedTpbRej As Boolean

        Dim MtxYdsPc As Single
        Dim OnSpecProdTpaPc As Single
        Dim MtxxPc As Single

        Dim MtxYds100 As Single
        Dim OnSpecProdTpa100 As Single
        Dim Mtxx100 As Single

        Dim TotalProdTpaPc As Single
        Dim TotalProdTpa100 As Single

        Dim IpDistributedTo As Boolean

        Dim CpbFeVal As Single
        Dim FpbFeVal As Single
        Dim IpFeVal As Single
        Dim CcnFeVal As Single
        Dim FcnFeVal As Single
        Dim TpbFeVal As Single
        Dim TcnFeVal As Single

        Dim ThisSplit As Integer

        Try
            ThisSplit = aRdctnCalcData.SplitNumber

            'We will determine the split mineability based on only the split.
            'Later on we will look at this split in conjunction with the entire
            'hole to determine it's mineability with respect to the entire hole.

            'Will determine the split mineability based on the ProdCoeff data
            'that has been calculated (based on various recovery factors provided
            'by the user).

            'Parameters selected by the user:

            'In aRcvryProdQual():
            'Item1  Coarse pebble
            'Item2  Fine pebble
            'Item3  IP
            'Item4  Coarse concentrate
            'Item5  Fine concentrate
            'Item6  Total pebble
            'Item7  Total concentrate

            'aRcvryParamsData.MtxxMaxSpl
            'aRcvryParamsData.ClPctMaxSpl
            'aRcvryParamsData.MaxTotDepthModeSpl
            'aRcvryParamsData.MaxTotDepthSpl

            'Will assume that if any product quality parameter other than
            'minimum BPL is greater than or equal to 99.9 then user doesn't
            'care what that value is (Fe2O3, Al2O3, IA, MgO, CaO, MER, CaO/P2O5).

            'Will have to set the following in aRedctnCalcData based on the
            'product quality parameters set by the user:
            '.CpbMin   Is the coarse pebble mineable (Yes, No, ND)?
            '.FpbMin   Is the fine pebble mineable (Yes, No, ND)?
            '.TpbMin   Is the total pebble mineable (Yes, No, ND)?
            '.CcnMin   Is the coarse concentrate mineable (Yes, No, ND)?
            '.FcnMin   Is the fine concentrate mineable (Yes, No, ND)?
            '.TcnMin   Is the total concentrate mineable (Yes, No, ND)?
            '.OsMin    Is the oversize mineable (Yes, No, ND)?
            '.IpMin    Is the IP mineable (Yes, No, ND)?
            '-----
            '.FpbMgoOffSpec  Is the fine pebble MgO offspec? (Yes, No. ND)?
            '.IpMgoOffSpec   Is the IP MgO offspec? (Yes, No. ND)?

            Dim SplitMineability As Boolean = True
            UserHasDefinedCpb = False
            UserHasDefinedFpb = False
            UserHasDefinedCcn = False
            UserHasDefinedFcn = False
            UserHasDefinedTcn = False
            UserHasDefinedIp = False

            'Note: User cannot currently define OS (so .OsMin will always be "ND")!
            '      We really cannot include the OS in the Mtx"X" OnSpec value
            '      even if it is forced to be minable since we have no specs for OS.

            With aRdctnCalcData
                'If aRcvryParamsData.UseFeAdjust = True then will need to use the adjusted Fe values
                'to determine split minabilities!
                ' If aRcvryParamsData.UseFeAdjust Then
                If aRecoveryParams.UseAdjustedFeToDetermineMineability Then
                    CpbFeVal = .Cpb.FeAdj
                    FpbFeVal = .Fpb.FeAdj
                    IpFeVal = .Ip.FeAdj
                    CcnFeVal = .Ccn.FeAdj
                    FcnFeVal = .Fcn.FeAdj
                    TpbFeVal = .Tpb.FeAdj
                    TcnFeVal = .Tcn.FeAdj
                Else
                    CpbFeVal = .Cpb.Fe
                    FpbFeVal = .Fpb.Fe
                    IpFeVal = .Ip.Fe
                    CcnFeVal = .Ccn.Fe
                    FcnFeVal = .Fcn.Fe
                    TpbFeVal = .Tpb.Fe
                    TcnFeVal = .Tcn.Fe
                End If

                .CpbOnSpec = "ND"  'ND = None determined
                .FpbOnSpec = "ND"
                .TpbOnSpec = "ND"
                .CcnOnSpec = "ND"
                .FcnOnSpec = "ND"
                .TcnOnSpec = "ND"
                .OsOnSpec = "ND"
                .IpOnSpec = "ND"
                .FpbMgoOffSpec = "ND"
                .IpMgoOffSpec = "ND"

                .TpbOnSpecRej = "ND"

                UserHasDefinedCpb = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.CoarsePebbleValue.HasValue)
                .Cpb.ProdType = ProductType.CPb
                SetProductMiniabilityByLimits(.Cpb, aRecoveryParams.SplitQualitySpecifications, CpbFeVal, ProductType.CPb)
                Select Case .Cpb.IsOnSpec
                    Case True
                        .CpbOnSpec = "Yes"
                    Case False
                        .CpbOnSpec = "No"
                    Case Else
                        .CpbOnSpec = "ND"
                End Select

                If UserHasDefinedCpb And .CpbOnSpec <> "No" Then
                    .CpbOnSpec = "Yes"
                    .Cpb.IsOnSpec = True
                End If

                UserHasDefinedFpb = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.FinePebbleValue.HasValue)
                SetProductMiniabilityByLimits(.Fpb, aRecoveryParams.SplitQualitySpecifications, FpbFeVal, ProductType.FPb)

                Select Case .Fpb.IsOnSpec
                    Case True
                        .FpbOnSpec = "Yes"
                    Case False
                        .FpbOnSpec = "No"
                    Case Else
                        .FpbOnSpec = "ND"
                End Select

                Select Case .Fpb.MgOffSpecFlag
                    Case True
                        .FpbMgoOffSpec = "Yes"
                    Case False
                        .FpbMgoOffSpec = "No"
                    Case Else
                        .FpbMgoOffSpec = "ND"
                End Select

                If UserHasDefinedFpb And .FpbOnSpec <> "No" Then
                    .FpbOnSpec = "Yes"
                    .Fpb.IsOnSpec = True
                End If

                'IP  Use ProdCoeff data to determine split mineability
                IpDistributedTo = MatlDistributedTo(aSsProdDist, "IP")

                If IpDistributedTo Then
                    UserHasDefinedIp = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.IpValue.HasValue)
                    SetProductMiniabilityByLimits(.Ip, aRecoveryParams.SplitQualitySpecifications, IpFeVal, ProductType.IP)

                    Select Case .Ip.IsOnSpec
                        Case True
                            .IpOnSpec = "Yes"
                        Case False
                            .IpOnSpec = "No"
                        Case Else
                            .IpOnSpec = "ND"
                    End Select

                    Select Case .Ip.MgOffSpecFlag
                        Case True
                            .IpMgoOffSpec = "Yes"
                        Case False
                            .IpMgoOffSpec = "No"
                        Case Else
                            .IpMgoOffSpec = "ND"
                    End Select

                    If UserHasDefinedIp And .IpOnSpec <> "No" Then
                        .IpOnSpec = "Yes"
                        .Ip.IsOnSpec = True
                    End If
                Else
                    .IpOnSpec = ""
                End If

                'Total concentrate  Use ProdCoeff data to determine split mineability
                UserHasDefinedTcn = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.ConcentrateValue.HasValue)
                SetProductMiniabilityByLimits(.Tcn, aRecoveryParams.SplitQualitySpecifications, TcnFeVal, ProductType.TCn)
                Select Case .Tcn.IsOnSpec
                    Case True
                        .TcnOnSpec = "Yes"
                    Case False
                        .TcnOnSpec = "No"
                    Case Else
                        .TcnOnSpec = "ND"
                End Select
                If UserHasDefinedTcn And .TcnOnSpec <> "No" Then
                    .TcnOnSpec = "Yes"
                    .Tcn.IsOnSpec = True
                End If

                'As soon as the user has defined any mineability analysis
                'standards for total pebble then this will supercede any
                'mineability standards set by the user for coarse pebble or
                'fine pebble.
                'US 5845/OPS1-119 Tpb And Tpr On Spec? Check boxes, Color Not always working
                If UserHasDefinedCpb Or UserHasDefinedFpb Then
                    UserHasDefinedTpb = True
                End If
                ' UserHasDefinedTpb = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.PebbleValue.HasValue)
                SetProductMiniabilityByLimits(.Tpb, aRecoveryParams.SplitQualitySpecifications, TpbFeVal, ProductType.TPb) 'It is not doing anything
                If UserHasDefinedTpb Then
                    'We will determine the on-spec value for Tpb and leave Cpb and Fpb as they are as this limits only apply to rejection. The Tpb limits propagates to Cpb and Fpb making them the same.
                    Select Case .Tpb.IsOnSpec
                        Case True
                            .TpbOnSpec = "Yes"
                        Case False
                            .TpbOnSpec = "No"
                        Case Else
                            .TpbOnSpec = "ND"
                    End Select
                Else
                    If .CpbOnSpec = "Yes" And .FpbOnSpec = "Yes" Then
                        .TpbOnSpec = "Yes"
                        .Tpb.IsOnSpec = True
                    ElseIf .CpbOnSpec = "No" And .FpbOnSpec = "No" Then
                        .TpbOnSpec = "No"
                        .Tpb.IsOnSpec = False
                    ElseIf Not UserHasDefinedCpb And Not UserHasDefinedFpb Then
                        .TpbOnSpec = "Yes"
                        .Tpb.IsOnSpec = True
                    Else
                        .TpbOnSpec = "ND"
                        .Tpb.IsOnSpec = Nothing
                    End If
                End If

                'As soon as the user has defined any mineability analysis
                'standards for Rejection on total pebble then this will supercede any
                'mineability standards set by the user for coarse pebble or
                'fine pebble. 
                'US 5845/OPS1-119 Tpb And Tpr On Spec? Check boxes, Color Not always working
                If UserHasDefinedCpb Or UserHasDefinedFpb Then
                    UserHasDefinedTpbRej = True
                End If
                'UserHasDefinedTpbRej = aRecoveryParams.PebbleRejectCriteria.Any(Function(s) s.PebbleValue.HasValue)
                'SetProductMiniabilityByLimits(.Tpb, aRecoveryParams.PebbleRejectCriteria, TpbFeVal, ProductType.TPb)
                If UserHasDefinedTpbRej Then
                    'We will determine the on-spec value for Tpb and leave Cpb and Fpb as they are as this limits only apply to rejection. The Tpb limits propagates to Cpb and Fpb making them the same.
                    Select Case .Tpb.IsOnSpecRej
                        Case True
                            .TpbOnSpecRej = "Yes"
                        Case False
                            .TpbOnSpecRej = "No"
                        Case Else
                            .TpbOnSpecRej = "ND"
                    End Select
                End If

                'As soon as the user has defined any mineability analysis
                'standards for total concentrate then this will supercede any
                'mineability standards set by the user for coarse concentrate or
                'fine concentrate.
                If UserHasDefinedTcn Then
                    If .TcnOnSpec = "Yes" Then
                        .CcnOnSpec = "Yes"
                        .FcnOnSpec = "Yes"
                        .Ccn.IsOnSpec = True
                        .Fcn.IsOnSpec = True
                    End If
                    If .TcnOnSpec = "No" Then
                        .CcnOnSpec = "No"
                        .FcnOnSpec = "No"
                        .Ccn.IsOnSpec = False
                        .Fcn.IsOnSpec = False
                    End If
                Else
                    .TcnOnSpec = "Yes"
                    .Tcn.IsOnSpec = True
                    .CcnOnSpec = "Yes"
                    .FcnOnSpec = "Yes"
                    .Ccn.IsOnSpec = True
                    .Fcn.IsOnSpec = True
                End If


                ''Calculating All Total Products Catalog
                'Dim AllProductsCat As New List(Of mProdInfoType)
                'With AllProductsCat
                '    .Add(aRdctnCalcData.Cpb)
                '    .Add(aRdctnCalcData.Fpb)
                '    .Add(aRdctnCalcData.Ip)
                '    .Add(aRdctnCalcData.Ccn)
                'End With
                '.ATpr = CalcTotPrSpec(AllProductsCat, False)

                ''Calculating All Total Product 100%
                'Dim AllProducts100 As New List(Of mProdInfoType)
                'With AllProducts100
                '    .Add(aRdctnCalcData.Cpb100)
                '    .Add(aRdctnCalcData.Fpb100)
                '    .Add(aRdctnCalcData.Ip100)
                '    .Add(aRdctnCalcData.Ccn100)
                'End With
                '.ATpr100 = CalcTotPrSpec(AllProducts100, True)


                UserHasDefinedATpr = aRecoveryParams.SplitQualitySpecifications.Any(Function(s) s.TotalProductValue.HasValue)
                SetProductMiniabilityByLimits(.ATpr, aRecoveryParams.SplitQualitySpecifications, 0, ProductType.ATpr)
                If UserHasDefinedATpr Then
                    'We will determine the on-spec value for ATpr.
                    Select Case .ATpr.IsOnSpec
                        Case True
                            .ATprOnSpec = "Yes"
                        Case False
                            .ATprOnSpec = "No"
                        Case Else
                            .ATprOnSpec = "ND"
                    End Select
                Else
                    .ATprOnSpec = "ND"
                End If


                'Matrix "X"  Based on Mineable product PC TPA's determined above

                'Will adjust the matrix yards before we determine the Matrix "X".

                'Need to correct the matrix yards here for volume recovery factors.
                'Volume recovery factors
                'aRcvryParamsData.MineVolRcvryFa
                'aRcvryParamsData.MineVolRcvryCf
                'aRcvryParamsData.MineVolRcvryMode  "Linear model" or "Footage adjustment"
                'aRcvryParamsData.MineVolRcvryVf

                'Will also determine 100% Matrix "X" here also!  Matrix yards for this
                'calculation will not be adjusted!

                'If aRcvryParamsData.MineVolRcvryMode = "Linear model" Then
                'Only have constant factor -- variable factor not available
                MtxYdsPc = Round(.SplitThck * 43560 / 27, 0)
                MtxYds100 = Round(.SplitThck * 43560 / 27, 0)

                'If aRcvryParamsData.MineVolRcvryCf <> 0 Then
                If aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value <> 0 Then
                    MtxYdsPc = Round(MtxYdsPc * (aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value / 100), 0)
                End If
                'If aRcvryParamsData.MineVolRcvryMode = "Footage adjustment" Then
                '    MtxYdsPc = Round((.SplitThck + aRcvryParamsData.MineVolRcvryFa) * 43560 / 27, 0)
                'End If
                'End If

                'Need to determine the "On spec" product tons to use to calculate
                'the Mtx "X" (Cpb, Fpb, IP, Ccn, Fcn, OS).  We determined mineability
                'for the various products above.
                OnSpecProdTpaPc = 0
                OnSpecProdTpa100 = 0

                'Coarse pebble
                If .CpbOnSpec = "Yes" Or .CpbOnSpec = "ND" Then
                    OnSpecProdTpaPc = OnSpecProdTpaPc + .Cpb.Tpa
                    OnSpecProdTpa100 = OnSpecProdTpa100 + .Cpb100.Tpa
                End If
                'End If

                'Fine pebble
                If .FpbOnSpec = "Yes" Or .FpbOnSpec = "ND" Then
                    OnSpecProdTpaPc = OnSpecProdTpaPc + .Fpb.Tpa
                    OnSpecProdTpa100 = OnSpecProdTpa100 + .Fpb100.Tpa
                End If

                'IP
                If .IpOnSpec = "Yes" Or .IpOnSpec = "ND" Then
                    OnSpecProdTpaPc = OnSpecProdTpaPc + .Ip.Tpa
                    OnSpecProdTpa100 = OnSpecProdTpa100 + .Ip100.Tpa
                End If

                'Total concentrate
                If .TcnOnSpec = "Yes" OrElse .TcnOnSpec = "ND" Then
                    OnSpecProdTpaPc = OnSpecProdTpaPc + .Tcn.Tpa
                    OnSpecProdTpa100 = OnSpecProdTpa100 + .Tcn100.Tpa
                End If

                'Make sure the Off-spec pebble MgO plant data is zeroed!
                ZeroOffSpecPbPltProcess(aRdctnCalcData)

                'Make sure the Doloflot plant data is zeroed!
                ZeroDoloflotPltProcess(aRdctnCalcData)

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Private Function DetermineSplitMineability
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    If .TpbOnSpec <> "Yes" Then
                        'The total pebble is off-spec and the mine has an off-spec pebble MgO
                        'processing plant.

                        'OFFSPEC PEBBLE PLANT
                        '--------------------
                        If aRcvryParamsData.UseOrigMgoPlant Then
                            OffSpecPbPltProcess(aRdctnCalcData, aRcvryParamsData, "ProdCoeff")
                            OffSpecPbPltProcess(aRdctnCalcData, aRcvryParamsData, "100%")
                        End If

                        'DOLOFLOT PLANT FCO
                        '------------------
                        '11/16/2011
                        ''Changed OffSpecPbPltProcessFco to OffSpecPbPltProcessFco2
                        'If aRcvryParamsData.UseDoloflotPlantFco Then
                        '    OffSpecPbPltProcessFco2(aRcvryParamsData, aRdctnCalcData, "ProdCoeff")
                        '    OffSpecPbPltProcessFco2(aRcvryParamsData, aRdctnCalcData, "100%")
                        'End If

                        'PlaceOffSpecPbPltInReview(aRdctnCalcData, aSsSplitReview, aRow)

                        'These were my original thoughts!
                        'The only reason that we processed the pebble in the Off-spec pebble
                        'MgO plant is because it was off-spec!! Thus we will not add any
                        'pebble tons to the On-spec product tons!
                        'OnSpecProdTpaPc = OnSpecProdTpaPc + .MgPltProd.Tpa
                        'OnSpecProdTpa100 = OnSpecProdTpa100 + .MgPltProd100.Tpa

                        'After meeting with Gary Gavie on 01/21/2008 made the following
                        'decision -- since we have processed the pebble through the
                        'Off-spec pebble MgO processing plant we now have some pebble
                        'that is on-spec -- add it to the On-spec product tons!
                        'For now I will consider that anything that is considered MgO
                        'plant input (as set by the user) will always result in a mineable
                        'MgO plant product!

                        OnSpecProdTpaPc = OnSpecProdTpaPc + .MgPltProd.Tpa
                        OnSpecProdTpa100 = OnSpecProdTpa100 + .MgPltProd100.Tpa
                    End If
                End If

                'Now determine the "On Spec" Matrix "X" for this split (ProdCoeff).
                If OnSpecProdTpaPc <> 0 Then
                    MtxxPc = Round(MtxYdsPc / OnSpecProdTpaPc, 2)
                Else
                    MtxxPc = 0
                End If

                'If MtxxPc > aRcvryParamsData.MtxxMaxSpl Or MtxxPc = 0 Then
                If MtxxPc > aRecoveryParams.MiniabilityParamaters.MaxMtxXSpl Or MtxxPc = 0 Then
                    .MtxUnMineFlag = True
                    SplitMineability = False
                End If

                'This is the "On spec" matrix "X" using ProdCoeff data -- will place
                'it in aRdctnCalcData.

                'Note: User cannot currently define OS (so .OsMin will always be "ND")!
                '      We really cannot include the OS in the Mtx"X" OnSpec value
                '      even if it is forced to be minable since we have no specs for OS.

                .MtxxOnSpec = MtxxPc  'ProdCoeff
                .TotxOnSpec = 0       'ProdCoeff  (Don't need Total "X" for splits.)

                'Now determine the "On Spec" Matrix "X" for this split (100%).
                If OnSpecProdTpa100 <> 0 Then
                    Mtxx100 = Round(MtxYds100 / OnSpecProdTpa100, 2)
                Else
                    Mtxx100 = 0
                End If
                .MtxxOnSpec100 = Mtxx100  '100%
                .TotxOnSpec100 = 0        '100%  (Don't need Total "X" for splits.)

                'Will not determine the "All" Matrix "X" values for this split here.

                '%Clay  Use ProdCoeff data to determine mineability
                'If .Wcl.WtPct > aRcvryParamsData.ClPctMaxSpl Then
                If .Wcl.WtPct > aRecoveryParams.MiniabilityParamaters.MaxClPctSpl.Value Then
                    .Wcl.WtPctUnMineFlag = True
                    SplitMineability = False
                End If

                'Maximum total depth
                'If the user has not defined a maximum total depth (Split Level
                'Parameters -- Physical Mineability) then will skip this part!
                'If aRcvryParamsData.MaxTotDepthSpl > 0 Then
                If aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole.Value > 0 Then
                    'If aRcvryParamsData.MaxTotDepthModeSpl = "Absolute stop" Then
                    If aRecoveryParams.MiniabilityParamaters.IsMaxTotDepthHoleModeAbsoluteStop Then
                        'If .SplitDepthTop > aRcvryParamsData.MaxTotDepthSpl Or
                        '    .SplitDepthBot > aRcvryParamsData.MaxTotDepthSpl Then
                        '    MineProbs.TotDepth = True
                        '    MarkUnMineVal aSsSplitReview, aRow, 15
                        '    MarkUnMineVal aSsSplitReview, aRow, 16
                        '    DetermineSplitMineability = False
                        'End If
                        'If .SplitDepthTop < aRcvryParamsData.MaxTotDepthSpl And .SplitDepthBot > aRcvryParamsData.MaxTotDepthSpl Then
                        If .SplitDepthTop < aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole.Value And .SplitDepthBot > aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole.Value Then
                            'Only part of this split will be a candidate for mineability!
                            'Will not mark it as unmineable at this point however (for
                            'having part of the split be too deep).
                            .TDephtUnMineFlag = True
                            'SplitMineability = False
                        End If
                    Else    'Finish split
                        'If .SplitDepthTop > aRcvryParamsData.MaxTotDepthSpl Then
                        If .SplitDepthTop > aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole.Value Then
                            'This split is beyond the max total depth for splits thus it is
                            'unmineable regardless of its quality!
                            .TDephtUnMineFlag = True
                            SplitMineability = False
                        End If
                    End If
                End If
            End With


            aRdctnCalcData.IsSplitMineable = SplitMineability
            If SplitMineability Then
                aRdctnCalcData.MineableCalcd = "M"
            Else
                aRdctnCalcData.MineableCalcd = "U"
            End If

        Catch ex As Exception
            MsgBox("Error determining split mineability." & vbCrLf &
                   ex.Message,
                   vbOKOnly + vbExclamation,
                   "Data Process Error")
        End Try

    End Sub
    Private Sub SetProductMiniabilityByLimits(ByRef Product As mProdInfoType, ByVal ProductQualitySpecifications As IList(Of ProductQualitySpecification), ByVal FeVal As Single, ByVal ProductType As ProductType)

        With Product

            .IsOnSpec = True
            .BplOffSpecFlag = False
            .FeOffSpecFlag = False
            .AlOffSpecFlag = False
            .IaOffSpecFlag = False
            .MgOffSpecFlag = False
            .CaOffSpecFlag = False
            .MerOffSpecFlag = False
            .CaOP2O5OffSpecFlag = False
            .Fe2O3P2O5OffSpecFlag = False
            .MgOP2O5OffSpecFlag = False
            '.MgoOffSpec = Nothing

            .IsOnSpecRej = True

            For Each qualitySpec In ProductQualitySpecifications 'aRcvryProdQual.SplitQualitySpecifications
                Select Case qualitySpec.Element
                    Case Element.BPL.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If .Bpl <> 0 AndAlso qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso .Bpl < qualitySpec.CoarsePebbleValue.Value Then
                                    .BplOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If .Bpl <> 0 AndAlso qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso .Bpl < qualitySpec.FinePebbleValue.Value Then
                                    .BplOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If .Bpl <> 0 AndAlso qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso .Bpl < qualitySpec.IpValue.Value Then
                                    .BplOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If .Bpl <> 0 AndAlso qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso .Bpl < qualitySpec.ConcentrateValue.Value Then
                                    .BplOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                                'US 5845/OPS1-119 Tpb And Tpr On Spec? Check boxes, Color Not always working
                            'Case ProductType.TPb
                            '    If .Bpl <> 0 AndAlso qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso .Bpl < qualitySpec.PebbleValue.Value Then
                            '        .BplOffSpecFlag = True
                            '        .IsOnSpecRej = False
                            '    End If
                            Case ProductType.TPb
                                Dim DefaultPebbleValue = 0
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue Then
                                    If qualitySpec.CoarsePebbleValue.Value >= qualitySpec.FinePebbleValue.Value Then
                                        DefaultPebbleValue = qualitySpec.CoarsePebbleValue.Value
                                    Else
                                        DefaultPebbleValue = qualitySpec.FinePebbleValue.Value
                                    End If
                                    If .Bpl <> 0 AndAlso DefaultPebbleValue <> 0 AndAlso .Bpl < DefaultPebbleValue Then
                                        .BplOffSpecFlag = True
                                        .IsOnSpec = False
                                    End If
                                End If

                            Case ProductType.ATpr
                                If .Bpl <> 0 AndAlso qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso .Bpl < qualitySpec.TotalProductValue.Value Then
                                    .BplOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.FE2O3.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso FeVal > qualitySpec.CoarsePebbleValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso FeVal > qualitySpec.FinePebbleValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso FeVal > qualitySpec.IpValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso FeVal > qualitySpec.ConcentrateValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso FeVal > qualitySpec.PebbleValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso FeVal > qualitySpec.TotalProductValue.Value Then
                                    .FeOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.AL2O3.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso .Al > qualitySpec.CoarsePebbleValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso .Al > qualitySpec.FinePebbleValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso .Al > qualitySpec.IpValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso .Al > qualitySpec.ConcentrateValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso .Al > qualitySpec.PebbleValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso .Al > qualitySpec.TotalProductValue.Value Then
                                    .AlOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.IA.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso .Ia > qualitySpec.CoarsePebbleValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso .Ia > qualitySpec.FinePebbleValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso .Ia > qualitySpec.IpValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso .Ia > qualitySpec.ConcentrateValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso .Ia > qualitySpec.PebbleValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso .Ia > qualitySpec.TotalProductValue.Value Then
                                    .IaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.MGO.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso .Mg > qualitySpec.CoarsePebbleValue.Value Then
                                    .MgOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso .Mg > qualitySpec.FinePebbleValue.Value Then
                                    .MgOffSpecFlag = True
                                    .IsOnSpec = False
                                    '    .MgoOffSpec = True
                                    'Else '
                                    '    .MgoOffSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso .Mg > qualitySpec.IpValue.Value Then
                                    .MgOffSpecFlag = True
                                    .IsOnSpec = False
                                    '    .MgoOffSpec = True
                                    'Else '
                                    '    .MgoOffSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso .Mg > qualitySpec.ConcentrateValue.Value Then
                                    .MgOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            'Case ProductType.TPb
                            '    If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso .Mg > qualitySpec.PebbleValue.Value Then
                            '        .MgOffSpecFlag = True
                            '        .IsOnSpecRej = False
                            '    End If
                            'US 5845/OPS1-119 Tpb And Tpr On Spec? Check boxes, Color Not always working
                            Case ProductType.TPb
                                Dim DefaultPebbleValue = 0
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue Then
                                    If qualitySpec.CoarsePebbleValue.Value <= qualitySpec.FinePebbleValue.Value Then
                                        DefaultPebbleValue = qualitySpec.CoarsePebbleValue.Value
                                    Else
                                        DefaultPebbleValue = qualitySpec.FinePebbleValue.Value
                                    End If
                                    If .Mg <> 0 AndAlso DefaultPebbleValue <> 0 AndAlso .Mg > DefaultPebbleValue Then
                                        .MgOffSpecFlag = True
                                        .IsOnSpecRej = False
                                    End If
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso .Mg > qualitySpec.TotalProductValue.Value Then
                                    .MgOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.CAO.DisplayName
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso .Ca > qualitySpec.CoarsePebbleValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso .Ca > qualitySpec.FinePebbleValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso .Ca > qualitySpec.IpValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso .Ca > qualitySpec.ConcentrateValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso .Ca > qualitySpec.PebbleValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso .Ca > qualitySpec.TotalProductValue.Value Then
                                    .CaOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.MER.DisplayName
                        Dim MerVal As Double = .Mer
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso MerVal > qualitySpec.CoarsePebbleValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso MerVal > qualitySpec.FinePebbleValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso MerVal > qualitySpec.IpValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso MerVal > qualitySpec.ConcentrateValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso MerVal > qualitySpec.PebbleValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso MerVal > qualitySpec.TotalProductValue.Value Then
                                    .MerOffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.CAOP2O5.DisplayName
                        Dim CaP_ratio As Single = gGetCaP2O5(.Ca, .Bpl, 1)
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso CaP_ratio > qualitySpec.CoarsePebbleValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso CaP_ratio > qualitySpec.FinePebbleValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso CaP_ratio > qualitySpec.IpValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso CaP_ratio > qualitySpec.ConcentrateValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso CaP_ratio > qualitySpec.PebbleValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso CaP_ratio > qualitySpec.TotalProductValue.Value Then
                                    .CaOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.FE2O3P2O5.DisplayName
                        Dim FeP_ratio As Single = gGetQualityP2O5Times100(FeVal, .Bpl, 1)
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso FeP_ratio > qualitySpec.CoarsePebbleValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso FeP_ratio > qualitySpec.FinePebbleValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso FeP_ratio > qualitySpec.IpValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso FeP_ratio > qualitySpec.ConcentrateValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso FeP_ratio > qualitySpec.PebbleValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso FeP_ratio > qualitySpec.TotalProductValue.Value Then
                                    .Fe2O3P2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                    Case Element.MGOP2O5.DisplayName
                        Dim MgOP_ratio As Single = gGetQualityP2O5Times100(.Mg, .Bpl, 1)
                        Select Case ProductType
                            Case ProductType.CPb
                                If qualitySpec.CoarsePebbleValue IsNot Nothing AndAlso qualitySpec.CoarsePebbleValue.HasValue AndAlso MgOP_ratio > qualitySpec.CoarsePebbleValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.FPb
                                If qualitySpec.FinePebbleValue IsNot Nothing AndAlso qualitySpec.FinePebbleValue.HasValue AndAlso MgOP_ratio > qualitySpec.FinePebbleValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.IP
                                If qualitySpec.IpValue IsNot Nothing AndAlso qualitySpec.IpValue.HasValue AndAlso MgOP_ratio > qualitySpec.IpValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TCn
                                If qualitySpec.ConcentrateValue IsNot Nothing AndAlso qualitySpec.ConcentrateValue.HasValue AndAlso MgOP_ratio > qualitySpec.ConcentrateValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                            Case ProductType.TPb
                                If qualitySpec.PebbleValue IsNot Nothing AndAlso qualitySpec.PebbleValue.HasValue AndAlso MgOP_ratio > qualitySpec.PebbleValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpecRej = False
                                End If
                            Case ProductType.ATpr
                                If qualitySpec.TotalProductValue IsNot Nothing AndAlso qualitySpec.TotalProductValue.HasValue AndAlso MgOP_ratio > qualitySpec.TotalProductValue.Value Then
                                    .MgOP2O5OffSpecFlag = True
                                    .IsOnSpec = False
                                End If
                        End Select
                End Select
            Next

            'If there is no analysis for product then set mineability to "No"
            If .Bpl = 0 And FeVal = 0 And .Al = 0 And .Ia = 0 And .Mg = 0 And .Ca = 0 Then
                .IsOnSpec = False
                'If ProductType = ProductType.FPb Or ProductType = ProductType.IP Then
                '    .MgoOffSpec = Nothing
                'End If
                .BplOffSpecFlag = True
                .FeOffSpecFlag = True
                .AlOffSpecFlag = True
                .IaOffSpecFlag = True
                .MgOffSpecFlag = True
                .CaOffSpecFlag = True
                .CaOP2O5OffSpecFlag = True
                .Fe2O3P2O5OffSpecFlag = True
                .MgOP2O5OffSpecFlag = True
                If ProductType = ProductType.TPb Then
                    .IsOnSpecRej = False
                End If
            End If

        End With
    End Sub
    Private Sub FlagUnMineableSsSplitReview(ByRef aSsSplitReview As AxvaSpread, ByVal aRdctnCalcData As gRawProspSplRdctnType, ByVal aRow As Long)

        With aRdctnCalcData
            If .Cpb.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 93)
            End If
            If .Cpb.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 96)
            End If
            If .Cpb.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 97)
            End If
            If .Cpb.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 95)
            End If
            If .Cpb.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 98)
            End If
            If .Cpb.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 99)
            End If
            If .Cpb.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 100)
            End If
            If .Cpb.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 101)
            End If

            If .Fpb.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 104)
            End If
            If .Fpb.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 107)
            End If
            If .Fpb.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 108)
            End If
            If .Fpb.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 106)
            End If
            If .Fpb.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 109)
            End If
            If .Fpb.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 110)
            End If
            If .Fpb.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 111)
            End If
            If .Fpb.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 112)
            End If

            If .Ip.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 55)
            End If
            If .Ip.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 58)
            End If
            If .Ip.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 59)
            End If
            If .Ip.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 57)
            End If
            If .Ip.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 60)
            End If
            If .Ip.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 61)
            End If
            If .Ip.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 62)
            End If
            If .Ip.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 63)
            End If

            If .Ccn.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 136)
            End If
            If .Ccn.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 139)
            End If
            If .Ccn.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 140)
            End If
            If .Ccn.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 138)
            End If
            If .Ccn.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 141)
            End If
            If .Ccn.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 142)
            End If
            If .Ccn.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 143)
            End If
            If .Ccn.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 144)
            End If

            If .Fcn.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 147)
            End If
            If .Fcn.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 150)
            End If
            If .Fcn.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 151)
            End If
            If .Fcn.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 149)
            End If
            If .Fcn.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 152)
            End If
            If .Fcn.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 153)
            End If
            If .Fcn.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 154)
            End If
            If .Fcn.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 155)
            End If

            If .Tpb.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 44)
            End If
            If .Tpb.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 47)
            End If
            If .Tpb.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 48)
            End If
            If .Tpb.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 46)
            End If
            If .Tpb.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 49)
            End If
            If .Tpb.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 50)
            End If
            If .Tpb.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 51)
            End If
            If .Tpb.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 52)
            End If

            If .Tcn.BplOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 66)
            End If
            If .Tcn.FeOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 69)
            End If
            If .Tcn.AlOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 70)
            End If
            If .Tcn.IaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 68)
            End If
            If .Tcn.MgOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 71)
            End If
            If .Tcn.CaOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 72)
            End If
            If .Tcn.MerOffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 73)
            End If
            If .Tcn.CaOP2O5OffSpecFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 74)
            End If

            If .MtxUnMineFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 24)       'MtxxOnSpec
            End If

            If .MtxUnMineFlag And .MtxxAllUnMineFlag Then
                MarkMtxxAllUnMineVal(aSsSplitReview, aRow, 26)       'MtxxAll
            End If

            If .Wcl.WtPctUnMineFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 82)
            End If

            If .TDephtUnMineFlag Then
                MarkUnMineVal(aSsSplitReview, aRow, 15)
                MarkUnMineVal(aSsSplitReview, aRow, 16)
            End If

        End With
    End Sub
    Private Sub UpdateSsSplitReview(ByRef aSsSplitReview As AxvaSpread,
                                    ByVal aRdctnCalcData As gRawProspSplRdctnType,
                                    ByVal aRcvryParamsData As gDataRdctnParamsType,
                                    ByVal aRow As Long)

        If aRcvryParamsData.UseOrigMgoPlant = True Or aRcvryParamsData.UseDoloflotPlantFco = True Then
            If aRdctnCalcData.TpbOnSpec <> "Yes" Then
                PlaceOffSpecPbPltInReview(aSsSplitReview, aRdctnCalcData, aRow)
            End If
        End If
        If aRcvryParamsData.UseDoloflotPlant2010 = True Then
            If aRdctnCalcData.FpbOnSpec <> "Yes" Then
                PlaceDoloflotPltInReview(aSsSplitReview, aRdctnCalcData, aRow, "Fine pebble")
            End If
            If aRdctnCalcData.IpOnSpec <> "Yes" Then
                PlaceDoloflotPltInReview(aSsSplitReview, aRdctnCalcData, aRow, "IP")
            End If
        End If

        'Need to place the product mineabilities we have determined into
        'ssSplitReview.  Place the Mtx "X" stuff also.
        'Currently in Function DetermineSplitMineability

        With aSsSplitReview
            .Row = aRow
            .Col = 191
            .Text = aRdctnCalcData.CpbOnSpec
            .Col = 192
            .Text = aRdctnCalcData.FpbOnSpec
            .Col = 193
            .Text = aRdctnCalcData.TpbOnSpec
            .Col = 194
            .Text = aRdctnCalcData.CcnOnSpec
            .Col = 195
            .Text = aRdctnCalcData.FcnOnSpec
            .Col = 196
            .Text = aRdctnCalcData.TcnOnSpec
            .Col = 197
            .Text = aRdctnCalcData.OsOnSpec
            .Col = 198
            .Text = aRdctnCalcData.IpOnSpec
            '-----
            .Col = 775
            .Text = aRdctnCalcData.FpbMgoOffSpec
            .Col = 776
            .Text = aRdctnCalcData.IpMgoOffSpec
            '-----
            .Col = 24
            .Value = aRdctnCalcData.MtxxOnSpec     'PC
            .Col = 25
            .Value = aRdctnCalcData.TotxOnSpec     'PC
            '-----
            .Col = 315
            .Value = aRdctnCalcData.MtxxOnSpec100  '100
            .Col = 316
            .Value = aRdctnCalcData.TotxOnSpec100  '100
        End With

        'Mark this mineability status in aSsSplitReview
        'Will set to M or U to indicate calculated mineability!
        'Override mineabilities set by the user will be M, U, or C
        'where C = use calculated value.
        'The calculated mineability is based on ProdCoeff data!
        With aSsSplitReview
            .Row = aRow
            .Col = 4
            If aRdctnCalcData.IsSplitMineable Then
                .Text = "M"
            Else
                .Text = "U"
            End If
        End With

        'Assign Key value in ssSplitReview.
        'If split is mineable then Key = 1 else Key = 0
        Dim MineableCalcd As String
        Dim MineableOverride As String
        With aSsSplitReview
            .Row = aRow
            .Col = 4
            MineableCalcd = .Text
            .Col = 5
            MineableOverride = .Text

            .Col = 19
            If MineableCalcd = "M" Or MineableOverride = "M" Then
                .Value = 1
            Else
                .Value = 0
            End If
        End With

    End Sub

    Private Sub MarkUnMineVal(ByRef aSsSplitReview As AxvaSpread,
                              ByVal aRow As Long,
                              ByVal aCol As Integer)

        'Set unmineable problems with dark red and bold in aSsSplitReview.
        'This is really marking off-spec materials -- the split may or may not
        'actually be mined regardless of this material.
        With aSsSplitReview
            .Row = aRow
            .Col = aCol
            .ForeColor = Color.DarkRed ' &HC0&     'Dark red
            .FontBold = True
        End With

    End Sub
    Private Sub MarkMtxxAllUnMineVal(ByRef aSsSplitReview As AxvaSpread, ByVal aRow As Long, ByVal aCol As Integer)

        With aSsSplitReview
            .Row = aRow
            .Col = aCol
            .ForeColor = Color.DarkOrange
            .FontBold = True

        End With

    End Sub

    Public Function gCompositeSplitData(ByVal aSsSplitReview As AxvaSpread,
                                        ByVal aRcvryParamsData As gDataRdctnParamsType,
                                        ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                        ByVal aCalcMtxxOnSpec As Boolean,
                                        ByVal IsIPDistributedTo As Boolean) As List(Of gRawProspSplRdctnType)


        Dim CurrTwp As Integer = 0
        Dim CurrRge As Integer = 0
        Dim CurrSec As Integer = 0
        Dim CurrHole As String = String.Empty
        Dim RowIdx As Integer
        Dim SplData As gRawProspSplRdctnType
        Dim HoleData As gRawProspSplRdctnType
        Dim Holes As List(Of gRawProspSplRdctnType) = New List(Of gRawProspSplRdctnType)
        Dim SumData As New gRawProspSplRdctnSumType()
        Dim HoleSplCnt As Integer = 0
        Dim ThkTable(0 To 30) As gSplThkType
        Dim SplIdx As Integer
        Dim HoleMineable As Boolean
        Dim Spl1Depth As Single


        'ZeroRdctnData(HoleData)
        ZeroRdctnSumData(SumData)
        For SplIdx = 1 To UBound(ThkTable)
            ThkTable(SplIdx).SplNum = 0
            ThkTable(SplIdx).SplThk = 0
            ThkTable(SplIdx).SplMineable = ""
            ThkTable(SplIdx).SplitDepthTop = 0
            ThkTable(SplIdx).SplitDepthBot = 0
        Next SplIdx

        'Need to add together the splits in ssReview and place a single
        'row for the composited splits into ssCompReview.  Will composite
        'only splits designated as mineable.  Splits were previously
        'designated as mineable based on ProdCoeff data.  Will composite
        'both ProdCoeff and 100% at the same time. Note that the mineability
        'of the hole has also already been determined!

        'The splits have been marked in ssSplitReview in Columns 4 & 5.
        'Col4   Mineable Calc'd
        'Col5   Mineable Override

        'Need to also look at aRcvryParamsData.MaxTotDepthSpl and
        'aRcvryParamsData.MaxTotDepthModeSpl to make sure that we don't
        'mine to deep!  MaxTotDepthSpl will be either "Absolute stop" or
        '"Finish split".

        'HoleSplCnt = 0
        'CurrHole = ""
        'CurrTwp = 0
        'CurrRge = 0
        'CurrSec = 0
        'ZeroRdctnData(HoleData)
        'ZeroRdctnSumData(SumData)
        'For SplIdx = 1 To UBound(ThkTable)
        '    ThkTable(SplIdx).SplNum = 0
        '    ThkTable(SplIdx).SplThk = 0
        '    ThkTable(SplIdx).SplMineable = ""
        '    ThkTable(SplIdx).SplitDepthTop = 0
        '    ThkTable(SplIdx).SplitDepthBot = 0
        'Next SplIdx

        'With aSsSplitReview
        For RowIdx = 1 To aSsSplitReview.MaxRows
            ' aSsSplitReview.Row = RowIdx
            'Get the data from the split review spread.  Both ProdCoeff and
            '100% data will be available in ssSplitReview.
            SplData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)

            If (SplData.HoleLocation <> CurrHole Or
                    SplData.Township <> CurrTwp Or
                    SplData.Range <> CurrRge Or
                    SplData.Section <> CurrSec) And
                    (CurrHole <> "" And CurrTwp <> 0 And CurrRge <> 0 And
                    CurrSec <> 0) Then
                'We have composited the splits for a hole.
                'Need to add whatever we have composited to ssCompReview.
                'The data is in HoleData and SumData (ProdCoeff and 100%).
                'We are currently in Function gCompositeSplitData.
                'AssignSplThks will determine HoleData.OvbThk,
                'HoleData.ItbThk and HoleData.MtxThk from the data we have
                'gathered for the hole in ThkTable().
                AssignSplThks(SumData, HoleData, ThkTable)

                'May need the depth to the first split to assign the overburden
                'for unmineable holes correctly!
                Spl1Depth = ThkTable(1).SplitDepthTop


                'Need to calculate some hole data from the summed split data
                'first.  Will calculate ProdCoeff and 100%.

                ''We may need the data for the 1st split
                ''Wrong!!!!!!!
                ''Will work only if reducing 1 hole -- not for the batch reduction!!!
                ''gGetDataFromReviewSprd aSsSplitReview, 1, Sdata, "Split"
                CalcDataFromSumDataComp(HoleData,
                                        SumData,
                                        aRcvryParamsData,
                                        aRecoveryParams,
                                        "Both",
                                        Spl1Depth)


                If aCalcMtxxOnSpec Then
                    HoleMineable = DetermineHoleMineability(HoleData,
                                                                SumData,
                                                                aRcvryParamsData,
                                                                aRecoveryParams,
                                                                IsIPDistributedTo)
                    If Not HoleMineable Then
                        'Need to mark in ssCompErrors.
                        MarkCompError(HoleData, "Hole")
                    End If

                End If

                'Composited data will be assigned based on DataType.
                'AssignCompositedHoleData(aSsCompReview, HoleData)
                Holes.Add(HoleData)

                'ZeroRdctnData(HoleData)
                ZeroRdctnSumData(SumData)
                HoleSplCnt = 0
                For SplIdx = 1 To UBound(ThkTable)
                    ThkTable(SplIdx).SplNum = 0
                    ThkTable(SplIdx).SplThk = 0
                    ThkTable(SplIdx).SplMineable = ""
                    ThkTable(SplIdx).SplitDepthTop = 0
                    ThkTable(SplIdx).SplitDepthBot = 0
                Next SplIdx

                'We are ready to start processing the splits in the
                'next hole.
            End If

            'Process this split
            HoleSplCnt = HoleSplCnt + 1

            If HoleSplCnt = 1 Then
                HoleData = New gRawProspSplRdctnType()
                With HoleData
                    'This is the first split that we have for this hole!
                    'Will "initiate" the overburden thickness at this point!
                    .OvbThk = SplData.SplitDepthTop

                    'Need to capture these values that were determined
                    'during the hole mineability processing.
                    'Note that these are all hole data values.
                    .OsOnSpec = SplData.OsMinHole
                    .CpbOnSpec = SplData.CpbMinHole
                    .FpbOnSpec = SplData.FpbMinHole
                    .TpbOnSpec = SplData.TpbMinHole
                    .IpOnSpec = SplData.IpMinHole
                    .CcnOnSpec = SplData.CcnMinHole
                    .FcnOnSpec = SplData.FcnMinHole
                    .TcnOnSpec = SplData.TcnMinHole
                    '-----
                    .MtxxOnSpecPcHole = SplData.MtxxOnSpecPcHole
                    .MtxxOnSpec100Hole = SplData.MtxxOnSpec100Hole
                    .TotxOnSpecPcHole = SplData.TotxOnSpecPcHole
                    .TotxOnSpec100Hole = SplData.TotxOnSpec100Hole

                    'Assign some basic hole data that does not need to be composited.
                    .Township = SplData.Township
                    .Range = SplData.Range
                    .Section = SplData.Section
                    .HoleLocation = SplData.HoleLocation
                    .SplitNumber = 0
                    .ProspDate = SplData.ProspDate
                    .Forty = SplData.Forty
                    .Xcoord = SplData.Xcoord
                    .Ycoord = SplData.Ycoord
                    .Elevation = SplData.Elevation  'Elevations with the splits are hole elevations
                    '(not the elevation of the split).

                    'Changes 10/19/2011, lss
                    .HardpanFrom = SplData.HardpanFrom
                    .HardpanTo = SplData.HardpanTo
                    .HardpanThck = SplData.HardpanThck
                    .HardpanCode = SplData.HardpanCode
                    '-----
                    .Ownership = SplData.Ownership
                    .MinedOutStatus = SplData.MinedOutStatus
                    .HoleType = SplData.HoleType
                    .ExpDrill = SplData.ExpDrill
                    .TotDepth = SplData.TotDepth    'Total hole depth
                    .Override = SplData.Override

                    '1 = Key (minable MTX) / 0 = Non-key (everything else)
                    'This assignment is NOT correct -- needs to be fixed!  It is not
                    'critical to anything that I know of.
                    .Key = SplData.Key

                    .cClass = SplData.cClass
                    .Bed = SplData.Bed
                    .Level = SplData.Level
                    .Horizon = SplData.Horizon
                    .MtxColor = SplData.MtxColor
                    .DegConsol = SplData.DegConsol
                    .DigChar = SplData.DigChar
                    .PumpChar = SplData.PumpChar
                    .Lithology = SplData.Lithology
                    .PhosphColor = SplData.PhosphColor
                    .SurvCaddHoleId = SplData.SurvCaddHoleId
                    .HoleDesc = SplData.HoleDesc
                End With
            End If

            'Accumulate the split data for the hole that needs to be
            'summed as we go (ProdCoeff and 100%).
            'We are currently in Function gCompositeSplitData.
            'log &= "    gCompositeSplitData before AddSplToHoleSumDataComp," & DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss.fff tt") & vbNewLine   '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            AddSplToHoleSumDataComp(SumData,
                                    ThkTable,
                                    SplData,
                                    aRcvryParamsData,
                                    aRecoveryParams
                                     )

            CurrTwp = SplData.Township
            CurrRge = SplData.Range
            CurrSec = SplData.Section
            CurrHole = SplData.HoleLocation
        Next RowIdx

        'Need to take care of the last hole!
        'We are currently in Function gCompositeSplitData.
        AssignSplThks(SumData, HoleData, ThkTable)

        'May need the depth to the first split to assign the overburden
        'for unmineable holes correctly!
        Spl1Depth = ThkTable(1).SplitDepthTop

        CalcDataFromSumDataComp(HoleData,
                                SumData,
                                aRcvryParamsData,
                                aRecoveryParams,
                                "Both",
                                Spl1Depth)


        If aCalcMtxxOnSpec Then
            HoleMineable = DetermineHoleMineability(HoleData,
                                                        SumData,
                                                        aRcvryParamsData,
                                                        aRecoveryParams,
                                                        IsIPDistributedTo)
            If Not HoleMineable Then
                'Need to mark in ssCompErrors.
                MarkCompError(HoleData, "Hole")
            End If

        End If

        Holes.Add(HoleData)
        Return Holes
    End Function

    Public Sub gCompositeSplitData2(ByRef aHoles As List(Of Hole),
                                        ByVal aRcvryParamsData As gDataRdctnParamsType,
                                        ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                        ByVal aCalcMtxxOnSpec As Boolean,
                                        ByVal IsIPDistributedTo As Boolean)


        Dim CurrHole As String = String.Empty
        Dim SumData As New gRawProspSplRdctnSumType()
        Dim HoleSplCnt As Integer = 0
        Dim ThkTable(0 To 30) As gSplThkType
        Dim SplIdx As Integer
        Dim HoleMineable As Boolean
        Dim Spl1Depth As Single

        ZeroRdctnSumData(SumData)
        For SplIdx = 1 To UBound(ThkTable)
            ThkTable(SplIdx).SplNum = 0
            ThkTable(SplIdx).SplThk = 0
            ThkTable(SplIdx).SplMineable = ""
            ThkTable(SplIdx).SplitDepthTop = 0
            ThkTable(SplIdx).SplitDepthBot = 0
        Next SplIdx

        'Need to add together the splits  and place a single
        'row for the composited splits into ssCompReview.  Will composite
        'only splits designated as mineable.  Splits were previously
        'designated as mineable based on ProdCoeff data.  Will composite
        'both ProdCoeff and 100% at the same time. Note that the mineability
        'of the hole has also already been determined!

        For Each Hole As Hole In aHoles
            For Each Split As gRawProspSplRdctnType In Hole.Splits
                HoleSplCnt = HoleSplCnt + 1
                AddSplToHoleSumDataComp(SumData, ThkTable, Split, aRcvryParamsData, aRecoveryParams)
                'AssignSplThks will determine HoleData.OvbThk,
                'HoleData.ItbThk and HoleData.MtxThk from the data we have
                'gathered for the hole in ThkTable().
                AssignSplThks(SumData, Hole.Data, ThkTable)
                'May need the depth to the first split to assign the overburden
                'for unmineable holes correctly!
                Spl1Depth = ThkTable(1).SplitDepthTop
                CalcDataFromSumDataComp(Hole.Data,
                        SumData,
                        aRcvryParamsData,
                        aRecoveryParams,
                        "Both",
                        Spl1Depth)
                If aCalcMtxxOnSpec Then
                    HoleMineable = DetermineHoleMineability(Hole.Data,
                                                                SumData,
                                                                aRcvryParamsData,
                                                                aRecoveryParams,
                                                                IsIPDistributedTo)
                    If Not HoleMineable Then
                        'Need to mark in ssCompErrors.
                        MarkCompError(Hole.Data, "Hole")
                    End If
                End If
            Next
            'ZeroRdctnData(HoleData)
            ZeroRdctnSumData(SumData)
            HoleSplCnt = 0
            For SplIdx = 1 To UBound(ThkTable)
                ThkTable(SplIdx).SplNum = 0
                ThkTable(SplIdx).SplThk = 0
                ThkTable(SplIdx).SplMineable = ""
                ThkTable(SplIdx).SplitDepthTop = 0
                ThkTable(SplIdx).SplitDepthBot = 0
            Next SplIdx
        Next

    End Sub




    Public Sub AddSplToHoleSumDataComp(ByRef aSumData As gRawProspSplRdctnSumType,
                                       ByRef aThkTable() As gSplThkType,
                                       ByVal aSplData As gRawProspSplRdctnType,
                                       ByVal aRcvryParamsData As gDataRdctnParamsType,
                                       ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition
                                       )


        Dim SplMineability As String
        Dim SplIdx As Integer
        Dim InclCpb As Boolean
        Dim InclFpb As Boolean
        Dim InclOs As Boolean
        Dim MtxPctSol As Single
        Dim CorrFactor As Single
        Dim AdjSplThk As Single
        Dim CorrTpa As Double

        Dim InclCcn As Boolean
        Dim InclFcn As Boolean
        Dim ThisSplit As String
        Dim InclIp As Boolean

        'This proc is used when compositing split data.  Split mineabilities
        'at the hole level have been assigned already.  We just need to sum
        'the mineable ones.  Both ProdCoeff and 100% will be summed.

        'Only want to add the split data to the hole if the split is
        'mineable!

        'Need to also look at aRcvryParamsData.MaxTotDepthSpl and
        'aRcvryParamsData.MaxTotDepthModeSpl to make sure that we don't
        'mine to deep!  MaxTotDepthSpl will be either "Absolute stop" or
        '"Finish split".

        'Will be summing up "All" type data (not on-spec) -- need to take into
        'consideration:
        'Parameters selected by the user:
        'aRcvryParamsData.InclCpbAlways
        'aRcvryParamsData.InclFpbAlways
        'aRcvryParamsData.InclOsAlways
        'aRcvryParamsData.InclCpbNever
        'aRcvryParamsData.InclFpbNever
        'aRcvryParamsData.InclOsNever
        'aRcvryParamsData.CanSelectRejectTpb

        'Determine if this split is mineable!
        'Have MineableOride, MineableCalcd, MineableHole (PC), MineableHole100 (100)
        'MineableOride    -- set by user, always takes precedence
        'MineableCalcd    -- split mineability based on the split
        'MineableHole     -- split mineability based on the hole (PC)
        'MineableHole100  -- split mineability based on the hole (100)
        '(MineableHole and MineableHole100 will always be the same).

        '12/30/2008, lss
        'Minable override cannot override a "Forced minable"!!!


        With aSplData

            If .MineableOride <> "C" And .MineableHole <> "MF" Then
                'Override takes precedence.  The split is always mineable if the user
                'has set an overwrite value (unless the split has been forced to be
                'minable).
                SplMineability = .MineableOride     'Will be "M" or "U"
            Else
                'User has not set an override mineability for this split!
                'Will use the mineability set by this reduction (ie. the
                'calculated mineability for this split).
                SplMineability = .MineableHole
            End If


            InclCpb = False
            InclFpb = False
            InclOs = False
            InclIp = False

            If SplMineability = "M" Or SplMineability = "MF" Then
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff

                '09/11/2009, lss -- Added the following
                InclCcn = True
                InclFcn = True
                If .TcnOnSpec = "No" Then
                    InclCcn = False
                    InclFcn = False
                End If

                'Will use the InclCpb and InclFpb variables in a different way here
                'than normal.

                'The split thickness is aSplData.SplitThck.  We may not be able to mine
                'all of it aRcvryParamsData.MaxTotDepthSpl and aRcvryParamsData.MaxTotDepthModeSpl
                'have been set by the user!
                CorrFactor = 1
                AdjSplThk = .SplitThck
                'If aRcvryParamsData.MaxTotDepthSpl <> 0 Then
                If aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole <> 0 Then
                    'If .SplitDepthTop < aRcvryParamsData.MaxTotDepthSpl Then
                    If .SplitDepthTop < aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                        'If .SplitDepthBot > aRcvryParamsData.MaxTotDepthSpl Then
                        If .SplitDepthBot > aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                            'Determine the amount of this split that we can mine!
                            'If aRcvryParamsData.MaxTotDepthModeSpl = "Absolute stop" Then
                            If aRecoveryParams.MiniabilityParamaters.IsMaxTotDepthHoleModeAbsoluteStop Then
                                'AdjSplThk = aRcvryParamsData.MaxTotDepthSpl - .SplitDepthTop
                                AdjSplThk = aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole - .SplitDepthTop
                                If .SplitThck <> 0 Then
                                    CorrFactor = Round(AdjSplThk / .SplitThck, 4)
                                Else
                                    CorrFactor = 0
                                End If
                            Else    '"Finish split"
                                AdjSplThk = .SplitThck
                                CorrFactor = 0
                            End If
                        End If
                    Else
                        'All of this split is below aRcvryParamsData.MaxTotDepthSpl -- there is
                        'nothing in this split that we can mine!
                        'This split has probably already been set as unmineable thus this code
                        'won't run!
                        CorrFactor = 0
                        AdjSplThk = 0
                    End If
                End If

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO   PC
                '------------------------------------------
                'Currently in Public Sub AddSplToHoleSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRecoveryParams.EnterTotalPebbleRejectValue Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'If the pebble is off-spec then it will be handled thru the Off-spec
                    'pebble MgO plant summing.
                    If .TpbOnSpec = "No" Then
                        InclCpb = False
                        InclFpb = False
                    Else
                        InclCpb = True
                        InclFpb = True
                    End If
                Else
                    'DOLOFLOT PLANT ONA  PC
                    '------------------
                    If aRcvryParamsData.UseDoloflotPlant2010 Then
                        ThisSplit = aSplData.SplitNumber

                        'If the fine pebble MgO is off-spec then it will be handled by the
                        'Doloflot plant else the fine pebble is always included.
                        If .Fpb.Mg > aRcvryParamsData.DpFnePbMgoCutoff Then
                            InclFpb = False
                        Else
                            InclFpb = True
                        End If

                        If .IpMgoOffSpec = "Yes" Then
                            'This IP is going to be processed by the Doloflot plant and
                            'cannot be included here!
                            InclIp = False
                        Else
                            InclIp = True
                        End If
                    Else
                        'NORMAL STUFF  PC
                        '------------
                        'Mine does not have an Off-spec pebble plant or a Doloflot plant.

                        'Oversize
                        'Always include for user viewing -- will not be shown as total pebble
                        InclOs = True

                        'Coarse pebble
                        'If aRcvryParamsData.InclCpbAlways = True Then
                        If Not aRecoveryParams.EnterCoarsePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                            'Include the Cpb no matter what.
                            InclCpb = True
                        Else
                            If aRecoveryParams.EnterTotalPebbleRejectValue Then
                                'Include the Fpb if the Tpb quality is OK.
                                If .TpbOnSpec = "No" Then
                                    InclCpb = False
                                Else
                                    InclCpb = True
                                End If
                            Else
                                'Include the Cpb if the quality is OK.
                                'Have to selectively include the Cpb.
                                If .CpbOnSpec = "Yes" Or .CpbOnSpec = "ND" Then
                                    InclCpb = True
                                End If
                            End If
                        End If


                        'Fine pebble
                        'If aRcvryParamsData.InclFpbAlways = True Then
                        If Not aRecoveryParams.EnterFinePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                            'Include the Fpb no matter what.
                            InclFpb = True
                        Else
                            If aRecoveryParams.EnterTotalPebbleRejectValue Then
                                'Include the Fpb if the Tpb quality is OK.
                                If .TpbOnSpec = "No" Then
                                    InclFpb = False
                                Else
                                    InclFpb = True
                                End If
                            Else
                                'Include the Fpb if the quality is OK.
                                'Have to selectively include the Fpb.
                                If .FpbOnSpec = "Yes" Or .FpbOnSpec = "ND" Then
                                    InclFpb = True
                                End If
                            End If
                        End If

                        'IP
                        If Not aRecoveryParams.EnterIPRejectValue Then
                            'Include the IP no matter what.
                            InclIp = True
                        Else
                            'Include the IP if the quality is OK.
                            'Have to selectively include the IP.
                            If .IpOnSpec = "Yes" Or .IpOnSpec = "ND" Then
                                InclIp = True
                            End If
                            'End If
                        End If

                    End If
                End If

                'Oversize  ProdCoeff
                If InclOs = True Then
                    CorrTpa = Round(.Os.Tpa * CorrFactor, 0)
                    aSumData.Os.Tpa = aSumData.Os.Tpa + CorrTpa
                    If .Os.Bpl > 0 Then
                        aSumData.Os.TwBpl = aSumData.Os.TwBpl + CorrTpa
                    End If
                    If .Os.Ins > 0 Then
                        aSumData.Os.TwIns = aSumData.Os.TwIns + CorrTpa
                    End If
                    If .Os.Ia > 0 Then
                        aSumData.Os.TwIa = aSumData.Os.TwIa + CorrTpa
                    End If
                    If .Os.IaAdj > 0 Then
                        aSumData.Os.TwIaAdj = aSumData.Os.TwIaAdj + CorrTpa
                    End If
                    If .Os.Fe > 0 Then
                        aSumData.Os.TwFe = aSumData.Os.TwFe + CorrTpa
                    End If
                    If .Os.FeAdj > 0 Then
                        aSumData.Os.TwFeAdj = aSumData.Os.TwFeAdj + CorrTpa
                    End If
                    If .Os.Al > 0 Then
                        aSumData.Os.TwAl = aSumData.Os.TwAl + CorrTpa
                    End If
                    If .Os.Mg > 0 Then
                        aSumData.Os.TwMg = aSumData.Os.TwMg + CorrTpa
                    End If
                    If .Os.Ca > 0 Then
                        aSumData.Os.TwCa = aSumData.Os.TwCa + CorrTpa
                    End If
                    aSumData.Os.BplTons = aSumData.Os.BplTons + CorrTpa * .Os.Bpl
                    aSumData.Os.InsTons = aSumData.Os.InsTons + CorrTpa * .Os.Ins
                    aSumData.Os.IaTons = aSumData.Os.IaTons + CorrTpa * .Os.Ia
                    aSumData.Os.IaAdjTons = aSumData.Os.IaAdjTons + CorrTpa * .Os.IaAdj
                    aSumData.Os.FeTons = aSumData.Os.FeTons + CorrTpa * .Os.Fe
                    aSumData.Os.FeAdjTons = aSumData.Os.FeAdjTons + CorrTpa * .Os.FeAdj
                    aSumData.Os.AlTons = aSumData.Os.AlTons + CorrTpa * .Os.Al
                    aSumData.Os.MgTons = aSumData.Os.MgTons + CorrTpa * .Os.Mg
                    aSumData.Os.CaTons = aSumData.Os.CaTons + CorrTpa * .Os.Ca
                End If
                '-----
                'Coarse pebble  ProdCoeff
                If InclCpb Then
                    CorrTpa = Round(.Cpb.Tpa * CorrFactor, 0)
                    aSumData.Cpb.Tpa = aSumData.Cpb.Tpa + CorrTpa
                    If .Cpb.Bpl > 0 Then
                        aSumData.Cpb.TwBpl = aSumData.Cpb.TwBpl + CorrTpa
                    End If
                    If .Cpb.Ins > 0 Then
                        aSumData.Cpb.TwIns = aSumData.Cpb.TwIns + CorrTpa
                    End If
                    If .Cpb.Ia > 0 Then
                        aSumData.Cpb.TwIa = aSumData.Cpb.TwIa + CorrTpa
                    End If
                    If .Cpb.Ia > 0 Then
                        aSumData.Cpb.TwIaAdj = aSumData.Cpb.TwIaAdj + CorrTpa
                    End If
                    If .Cpb.Fe > 0 Then
                        aSumData.Cpb.TwFe = aSumData.Cpb.TwFe + CorrTpa
                    End If
                    If .Cpb.FeAdj > 0 Then
                        aSumData.Cpb.TwFeAdj = aSumData.Cpb.TwFeAdj + CorrTpa
                    End If
                    If .Cpb.Al > 0 Then
                        aSumData.Cpb.TwAl = aSumData.Cpb.TwAl + CorrTpa
                    End If
                    If .Cpb.Mg > 0 Then
                        aSumData.Cpb.TwMg = aSumData.Cpb.TwMg + CorrTpa
                    End If
                    If .Cpb.Ca > 0 Then
                        aSumData.Cpb.TwCa = aSumData.Cpb.TwCa + CorrTpa
                    End If
                    aSumData.Cpb.BplTons = aSumData.Cpb.BplTons + CorrTpa * .Cpb.Bpl
                    aSumData.Cpb.InsTons = aSumData.Cpb.InsTons + CorrTpa * .Cpb.Ins
                    aSumData.Cpb.IaTons = aSumData.Cpb.IaTons + CorrTpa * .Cpb.Ia
                    aSumData.Cpb.IaAdjTons = aSumData.Cpb.IaAdjTons + CorrTpa * .Cpb.IaAdj
                    aSumData.Cpb.FeTons = aSumData.Cpb.FeTons + CorrTpa * .Cpb.Fe
                    aSumData.Cpb.FeAdjTons = aSumData.Cpb.FeAdjTons + CorrTpa * .Cpb.FeAdj
                    aSumData.Cpb.AlTons = aSumData.Cpb.AlTons + CorrTpa * .Cpb.Al
                    aSumData.Cpb.MgTons = aSumData.Cpb.MgTons + CorrTpa * .Cpb.Mg
                    aSumData.Cpb.CaTons = aSumData.Cpb.CaTons + CorrTpa * .Cpb.Ca
                Else
                    'Coarse pebble rejected
                    CorrTpa = Round(.CpbRej.Tpa * CorrFactor, 0)
                    aSumData.CpbRej.Tpa = aSumData.CpbRej.Tpa + CorrTpa
                    If .CpbRej.Bpl > 0 Then
                        aSumData.CpbRej.TwBpl = aSumData.CpbRej.TwBpl + CorrTpa
                    End If
                    If .CpbRej.Ins > 0 Then
                        aSumData.CpbRej.TwIns = aSumData.CpbRej.TwIns + CorrTpa
                    End If
                    If .CpbRej.Ia > 0 Then
                        aSumData.CpbRej.TwIa = aSumData.CpbRej.TwIa + CorrTpa
                    End If
                    If .CpbRej.Ia > 0 Then
                        aSumData.CpbRej.TwIaAdj = aSumData.CpbRej.TwIaAdj + CorrTpa
                    End If
                    If .CpbRej.Fe > 0 Then
                        aSumData.CpbRej.TwFe = aSumData.CpbRej.TwFe + CorrTpa
                    End If
                    If .CpbRej.FeAdj > 0 Then
                        aSumData.CpbRej.TwFeAdj = aSumData.CpbRej.TwFeAdj + CorrTpa
                    End If
                    If .CpbRej.Al > 0 Then
                        aSumData.CpbRej.TwAl = aSumData.CpbRej.TwAl + CorrTpa
                    End If
                    If .CpbRej.Mg > 0 Then
                        aSumData.CpbRej.TwMg = aSumData.CpbRej.TwMg + CorrTpa
                    End If
                    If .CpbRej.Ca > 0 Then
                        aSumData.CpbRej.TwCa = aSumData.CpbRej.TwCa + CorrTpa
                    End If
                    aSumData.CpbRej.BplTons = aSumData.CpbRej.BplTons + CorrTpa * .CpbRej.Bpl
                    aSumData.CpbRej.InsTons = aSumData.CpbRej.InsTons + CorrTpa * .CpbRej.Ins
                    aSumData.CpbRej.IaTons = aSumData.CpbRej.IaTons + CorrTpa * .CpbRej.Ia
                    aSumData.CpbRej.IaAdjTons = aSumData.CpbRej.IaAdjTons + CorrTpa * .CpbRej.IaAdj
                    aSumData.CpbRej.FeTons = aSumData.CpbRej.FeTons + CorrTpa * .CpbRej.Fe
                    aSumData.CpbRej.FeAdjTons = aSumData.CpbRej.FeAdjTons + CorrTpa * .CpbRej.FeAdj
                    aSumData.CpbRej.AlTons = aSumData.CpbRej.AlTons + CorrTpa * .CpbRej.Al
                    aSumData.CpbRej.MgTons = aSumData.CpbRej.MgTons + CorrTpa * .CpbRej.Mg
                    aSumData.CpbRej.CaTons = aSumData.CpbRej.CaTons + CorrTpa * .CpbRej.Ca
                End If

                'Fine pebble  ProdCoeff
                If InclFpb Then
                    CorrTpa = Round(.Fpb.Tpa * CorrFactor, 0)
                    aSumData.Fpb.Tpa = aSumData.Fpb.Tpa + CorrTpa
                    If .Fpb.Bpl > 0 Then
                        aSumData.Fpb.TwBpl = aSumData.Fpb.TwBpl + CorrTpa
                    End If
                    If .Fpb.Ins > 0 Then
                        aSumData.Fpb.TwIns = aSumData.Fpb.TwIns + CorrTpa
                    End If
                    If .Fpb.Ia > 0 Then
                        aSumData.Fpb.TwIa = aSumData.Fpb.TwIa + CorrTpa
                    End If
                    If .Fpb.IaAdj > 0 Then
                        aSumData.Fpb.TwIaAdj = aSumData.Fpb.TwIaAdj + CorrTpa
                    End If
                    If .Fpb.Fe > 0 Then
                        aSumData.Fpb.TwFe = aSumData.Fpb.TwFe + CorrTpa
                    End If
                    If .Fpb.FeAdj > 0 Then
                        aSumData.Fpb.TwFeAdj = aSumData.Fpb.TwFeAdj + CorrTpa
                    End If
                    If .Fpb.Al > 0 Then
                        aSumData.Fpb.TwAl = aSumData.Fpb.TwAl + CorrTpa
                    End If
                    If .Fpb.Mg > 0 Then
                        aSumData.Fpb.TwMg = aSumData.Fpb.TwMg + CorrTpa
                    End If
                    If .Fpb.Ca > 0 Then
                        aSumData.Fpb.TwCa = aSumData.Fpb.TwCa + CorrTpa
                    End If
                    aSumData.Fpb.BplTons = aSumData.Fpb.BplTons + CorrTpa * .Fpb.Bpl
                    aSumData.Fpb.InsTons = aSumData.Fpb.InsTons + CorrTpa * .Fpb.Ins
                    aSumData.Fpb.IaTons = aSumData.Fpb.IaTons + CorrTpa * .Fpb.Ia
                    aSumData.Fpb.IaAdjTons = aSumData.Fpb.IaAdjTons + CorrTpa * .Fpb.IaAdj
                    aSumData.Fpb.FeTons = aSumData.Fpb.FeTons + CorrTpa * .Fpb.Fe
                    aSumData.Fpb.FeAdjTons = aSumData.Fpb.FeAdjTons + CorrTpa * .Fpb.FeAdj
                    aSumData.Fpb.AlTons = aSumData.Fpb.AlTons + CorrTpa * .Fpb.Al
                    aSumData.Fpb.MgTons = aSumData.Fpb.MgTons + CorrTpa * .Fpb.Mg
                    aSumData.Fpb.CaTons = aSumData.Fpb.CaTons + CorrTpa * .Fpb.Ca
                End If

                ''Total pebble Rejected ProdCoeff on CP Rejected at washer
                If (aRecoveryParams.EnterCoarsePebbleRejectValue Or aRecoveryParams.EnterTotalPebbleRejectValue) And Not InclCpb Then
                    CorrTpa = Round(.Cpb.Tpa * CorrFactor, 0)
                    aSumData.TpbRej.Tpa = aSumData.TpbRej.Tpa + CorrTpa
                    If .TpbRej.Bpl > 0 Then
                        aSumData.TpbRej.TwBpl = aSumData.TpbRej.TwBpl + CorrTpa
                    End If
                    If .TpbRej.Ins > 0 Then
                        aSumData.TpbRej.TwIns = aSumData.TpbRej.TwIns + CorrTpa
                    End If
                    If .TpbRej.Ia > 0 Then
                        aSumData.TpbRej.TwIa = aSumData.TpbRej.TwIa + CorrTpa
                    End If
                    If .TpbRej.IaAdj > 0 Then
                        aSumData.TpbRej.TwIaAdj = aSumData.TpbRej.TwIaAdj + CorrTpa
                    End If
                    If .TpbRej.Fe > 0 Then
                        aSumData.TpbRej.TwFe = aSumData.TpbRej.TwFe + CorrTpa
                    End If
                    If .TpbRej.FeAdj > 0 Then
                        aSumData.TpbRej.TwFeAdj = aSumData.TpbRej.TwFeAdj + CorrTpa
                    End If
                    If .TpbRej.Al > 0 Then
                        aSumData.TpbRej.TwAl = aSumData.TpbRej.TwAl + CorrTpa
                    End If
                    If .TpbRej.Mg > 0 Then
                        aSumData.TpbRej.TwMg = aSumData.TpbRej.TwMg + CorrTpa
                    End If
                    If .TpbRej.Ca > 0 Then
                        aSumData.TpbRej.TwCa = aSumData.TpbRej.TwCa + CorrTpa
                    End If
                    aSumData.TpbRej.BplTons = aSumData.TpbRej.BplTons + CorrTpa * .Cpb.Bpl
                    aSumData.TpbRej.InsTons = aSumData.TpbRej.InsTons + CorrTpa * .Cpb.Ins
                    aSumData.TpbRej.IaTons = aSumData.TpbRej.IaTons + CorrTpa * .Cpb.Ia
                    aSumData.TpbRej.IaAdjTons = aSumData.TpbRej.IaAdjTons + CorrTpa * .Cpb.IaAdj
                    aSumData.TpbRej.FeTons = aSumData.TpbRej.FeTons + CorrTpa * .Cpb.Fe
                    aSumData.TpbRej.FeAdjTons = aSumData.TpbRej.FeAdjTons + CorrTpa * .Cpb.FeAdj
                    aSumData.TpbRej.AlTons = aSumData.TpbRej.AlTons + CorrTpa * .Cpb.Al
                    aSumData.TpbRej.MgTons = aSumData.TpbRej.MgTons + CorrTpa * .Cpb.Mg
                    aSumData.TpbRej.CaTons = aSumData.TpbRej.CaTons + CorrTpa * .Cpb.Ca
                End If
                'Total pebble Rejected ProdCoeff on Fine pebble Rejected at washer
                If (aRecoveryParams.EnterFinePebbleRejectValue Or aRecoveryParams.EnterTotalPebbleRejectValue) And Not InclFpb Then
                    CorrTpa = Round(.Fpb.Tpa * CorrFactor, 0)
                    aSumData.TpbRej.Tpa = aSumData.TpbRej.Tpa + CorrTpa
                    If .TpbRej.Bpl > 0 Then
                        aSumData.TpbRej.TwBpl = aSumData.TpbRej.TwBpl + CorrTpa
                    End If
                    If .TpbRej.Ins > 0 Then
                        aSumData.TpbRej.TwIns = aSumData.TpbRej.TwIns + CorrTpa
                    End If
                    If .TpbRej.Ia > 0 Then
                        aSumData.TpbRej.TwIa = aSumData.TpbRej.TwIa + CorrTpa
                    End If
                    If .TpbRej.IaAdj > 0 Then
                        aSumData.TpbRej.TwIaAdj = aSumData.TpbRej.TwIaAdj + CorrTpa
                    End If
                    If .TpbRej.Fe > 0 Then
                        aSumData.TpbRej.TwFe = aSumData.TpbRej.TwFe + CorrTpa
                    End If
                    If .TpbRej.FeAdj > 0 Then
                        aSumData.TpbRej.TwFeAdj = aSumData.TpbRej.TwFeAdj + CorrTpa
                    End If
                    If .TpbRej.Al > 0 Then
                        aSumData.TpbRej.TwAl = aSumData.TpbRej.TwAl + CorrTpa
                    End If
                    If .TpbRej.Mg > 0 Then
                        aSumData.TpbRej.TwMg = aSumData.TpbRej.TwMg + CorrTpa
                    End If
                    If .TpbRej.Ca > 0 Then
                        aSumData.TpbRej.TwCa = aSumData.TpbRej.TwCa + CorrTpa
                    End If
                    aSumData.TpbRej.BplTons = aSumData.TpbRej.BplTons + CorrTpa * .Fpb.Bpl
                    aSumData.TpbRej.InsTons = aSumData.TpbRej.InsTons + CorrTpa * .Fpb.Ins
                    aSumData.TpbRej.IaTons = aSumData.TpbRej.IaTons + CorrTpa * .Fpb.Ia
                    aSumData.TpbRej.IaAdjTons = aSumData.TpbRej.IaAdjTons + CorrTpa * .Fpb.IaAdj
                    aSumData.TpbRej.FeTons = aSumData.TpbRej.FeTons + CorrTpa * .Fpb.Fe
                    aSumData.TpbRej.FeAdjTons = aSumData.TpbRej.FeAdjTons + CorrTpa * .Fpb.FeAdj
                    aSumData.TpbRej.AlTons = aSumData.TpbRej.AlTons + CorrTpa * .Fpb.Al
                    aSumData.TpbRej.MgTons = aSumData.TpbRej.MgTons + CorrTpa * .Fpb.Mg
                    aSumData.TpbRej.CaTons = aSumData.TpbRej.CaTons + CorrTpa * .Fpb.Ca
                End If
                '-----
                '-----
                'Currently in Sub AddSplToHoleSumDataComp.
                '-----
                'IP  ProdCoeff
                If InclIp Then
                    CorrTpa = Round(.Ip.Tpa * CorrFactor, 0)
                    aSumData.Ip.Tpa = aSumData.Ip.Tpa + CorrTpa
                    If .Ip.Bpl > 0 Then
                        aSumData.Ip.TwBpl = aSumData.Ip.TwBpl + CorrTpa
                    End If
                    If .Ip.Ins > 0 Then
                        aSumData.Ip.TwIns = aSumData.Ip.TwIns + CorrTpa
                    End If
                    If .Ip.Ia > 0 Then
                        aSumData.Ip.TwIa = aSumData.Ip.TwIa + CorrTpa
                    End If
                    If .Ip.IaAdj > 0 Then
                        aSumData.Ip.TwIaAdj = aSumData.Ip.TwIaAdj + CorrTpa
                    End If
                    If .Ip.Fe > 0 Then
                        aSumData.Ip.TwFe = aSumData.Ip.TwFe + CorrTpa
                    End If
                    If .Ip.FeAdj > 0 Then
                        aSumData.Ip.TwFeAdj = aSumData.Ip.TwFeAdj + CorrTpa
                    End If
                    If .Ip.Al > 0 Then
                        aSumData.Ip.TwAl = aSumData.Ip.TwAl + CorrTpa
                    End If
                    If .Ip.Mg > 0 Then
                        aSumData.Ip.TwMg = aSumData.Ip.TwMg + CorrTpa
                    End If
                    If .Ip.Ca > 0 Then
                        aSumData.Ip.TwCa = aSumData.Ip.TwCa + CorrTpa
                    End If
                    aSumData.Ip.BplTons = aSumData.Ip.BplTons + CorrTpa * .Ip.Bpl
                    aSumData.Ip.InsTons = aSumData.Ip.InsTons + CorrTpa * .Ip.Ins
                    aSumData.Ip.IaTons = aSumData.Ip.IaTons + CorrTpa * .Ip.Ia
                    aSumData.Ip.IaAdjTons = aSumData.Ip.IaAdjTons + CorrTpa * .Ip.IaAdj
                    aSumData.Ip.FeTons = aSumData.Ip.FeTons + CorrTpa * .Ip.Fe
                    aSumData.Ip.FeAdjTons = aSumData.Ip.FeAdjTons + CorrTpa * .Ip.FeAdj
                    aSumData.Ip.AlTons = aSumData.Ip.AlTons + CorrTpa * .Ip.Al
                    aSumData.Ip.MgTons = aSumData.Ip.MgTons + CorrTpa * .Ip.Mg
                    aSumData.Ip.CaTons = aSumData.Ip.CaTons + CorrTpa * .Ip.Ca
                End If
                '-----
                'Coarse concentrate  ProdCoeff
                CorrTpa = Round(.Ccn.Tpa * CorrFactor, 0)
                aSumData.Ccn.Tpa = aSumData.Ccn.Tpa + CorrTpa
                If .Ccn.Bpl > 0 Then
                    aSumData.Ccn.TwBpl = aSumData.Ccn.TwBpl + CorrTpa
                End If
                If .Ccn.Ins > 0 Then
                    aSumData.Ccn.TwIns = aSumData.Ccn.TwIns + CorrTpa
                End If
                If .Ccn.Ia > 0 Then
                    aSumData.Ccn.TwIa = aSumData.Ccn.TwIa + CorrTpa
                End If
                If .Ccn.IaAdj > 0 Then
                    aSumData.Ccn.TwIaAdj = aSumData.Ccn.TwIaAdj + CorrTpa
                End If
                If .Ccn.Fe > 0 Then
                    aSumData.Ccn.TwFe = aSumData.Ccn.TwFe + CorrTpa
                End If
                If .Ccn.FeAdj > 0 Then
                    aSumData.Ccn.TwFeAdj = aSumData.Ccn.TwFeAdj + CorrTpa
                End If
                If .Ccn.Al > 0 Then
                    aSumData.Ccn.TwAl = aSumData.Ccn.TwAl + CorrTpa
                End If
                If .Ccn.Mg > 0 Then
                    aSumData.Ccn.TwMg = aSumData.Ccn.TwMg + CorrTpa
                End If
                If .Ccn.Ca > 0 Then
                    aSumData.Ccn.TwCa = aSumData.Ccn.TwCa + CorrTpa
                End If
                aSumData.Ccn.BplTons = aSumData.Ccn.BplTons + CorrTpa * .Ccn.Bpl
                aSumData.Ccn.InsTons = aSumData.Ccn.InsTons + CorrTpa * .Ccn.Ins
                aSumData.Ccn.IaTons = aSumData.Ccn.IaTons + CorrTpa * .Ccn.Ia
                aSumData.Ccn.IaAdjTons = aSumData.Ccn.IaAdjTons + CorrTpa * .Ccn.IaAdj
                aSumData.Ccn.FeTons = aSumData.Ccn.FeTons + CorrTpa * .Ccn.Fe
                aSumData.Ccn.FeAdjTons = aSumData.Ccn.FeAdjTons + CorrTpa * .Ccn.FeAdj
                aSumData.Ccn.AlTons = aSumData.Ccn.AlTons + CorrTpa * .Ccn.Al
                aSumData.Ccn.MgTons = aSumData.Ccn.MgTons + CorrTpa * .Ccn.Mg
                aSumData.Ccn.CaTons = aSumData.Ccn.CaTons + CorrTpa * .Ccn.Ca
                '-----
                'Coarse concentrate  ProdCoeff  Rejected somewhere
                '09/11/2009, lss -- Added the following
                If aRcvryParamsData.CanSelectRejectTcn And Not InclCcn Then
                    CorrTpa = Round(.Ccn.Tpa * CorrFactor, 0)
                    aSumData.TcnRej.Tpa = aSumData.TcnRej.Tpa + CorrTpa
                    If .Ccn.Bpl > 0 Then
                        aSumData.TcnRej.TwBpl = aSumData.TcnRej.TwBpl + CorrTpa
                    End If
                    If .Ccn.Ins > 0 Then
                        aSumData.TcnRej.TwIns = aSumData.TcnRej.TwIns + CorrTpa
                    End If
                    If .Ccn.Ia > 0 Then
                        aSumData.TcnRej.TwIa = aSumData.TcnRej.TwIa + CorrTpa
                    End If
                    If .Ccn.IaAdj > 0 Then
                        aSumData.TcnRej.TwIaAdj = aSumData.TcnRej.TwIaAdj + CorrTpa
                    End If
                    If .Ccn.Fe > 0 Then
                        aSumData.TcnRej.TwFe = aSumData.TcnRej.TwFe + CorrTpa
                    End If
                    If .Ccn.FeAdj > 0 Then
                        aSumData.TcnRej.TwFeAdj = aSumData.TcnRej.TwFeAdj + CorrTpa
                    End If
                    If .Ccn.Al > 0 Then
                        aSumData.TcnRej.TwAl = aSumData.TcnRej.TwAl + CorrTpa
                    End If
                    If .Ccn.Mg > 0 Then
                        aSumData.TcnRej.TwMg = aSumData.TcnRej.TwMg + CorrTpa
                    End If
                    If .Ccn.Ca > 0 Then
                        aSumData.TcnRej.TwCa = aSumData.TcnRej.TwCa + CorrTpa
                    End If
                    aSumData.TcnRej.BplTons = aSumData.TcnRej.BplTons + CorrTpa * .Ccn.Bpl
                    aSumData.TcnRej.InsTons = aSumData.TcnRej.InsTons + CorrTpa * .Ccn.Ins
                    aSumData.TcnRej.IaTons = aSumData.TcnRej.IaTons + CorrTpa * .Ccn.Ia
                    aSumData.TcnRej.IaAdjTons = aSumData.TcnRej.IaAdjTons + CorrTpa * .Ccn.IaAdj
                    aSumData.TcnRej.FeTons = aSumData.TcnRej.FeTons + CorrTpa * .Ccn.Fe
                    aSumData.TcnRej.FeAdjTons = aSumData.TcnRej.FeAdjTons + CorrTpa * .Ccn.FeAdj
                    aSumData.TcnRej.AlTons = aSumData.TcnRej.AlTons + CorrTpa * .Ccn.Al
                    aSumData.TcnRej.MgTons = aSumData.TcnRej.MgTons + CorrTpa * .Ccn.Mg
                    aSumData.TcnRej.CaTons = aSumData.TcnRej.CaTons + CorrTpa * .Ccn.Ca
                End If

                'Fine concentrate  ProdCoeff
                CorrTpa = Round(.Fcn.Tpa * CorrFactor, 0)
                aSumData.Fcn.Tpa = aSumData.Fcn.Tpa + CorrTpa
                If .Fcn.Bpl > 0 Then
                    aSumData.Fcn.TwBpl = aSumData.Fcn.TwBpl + CorrTpa
                End If
                If .Fcn.Ins > 0 Then
                    aSumData.Fcn.TwIns = aSumData.Fcn.TwIns + CorrTpa
                End If
                If .Fcn.Ia > 0 Then
                    aSumData.Fcn.TwIa = aSumData.Fcn.TwIa + CorrTpa
                End If
                If .Fcn.IaAdj > 0 Then
                    aSumData.Fcn.TwIaAdj = aSumData.Fcn.TwIaAdj + CorrTpa
                End If
                If .Fcn.Fe > 0 Then
                    aSumData.Fcn.TwFe = aSumData.Fcn.TwFe + CorrTpa
                End If
                If .Fcn.FeAdj > 0 Then
                    aSumData.Fcn.TwFeAdj = aSumData.Fcn.TwFeAdj + CorrTpa
                End If
                If .Fcn.Al > 0 Then
                    aSumData.Fcn.TwAl = aSumData.Fcn.TwAl + CorrTpa
                End If
                If .Fcn.Mg > 0 Then
                    aSumData.Fcn.TwMg = aSumData.Fcn.TwMg + CorrTpa
                End If
                If .Fcn.Ca > 0 Then
                    aSumData.Fcn.TwCa = aSumData.Fcn.TwCa + CorrTpa
                End If
                aSumData.Fcn.BplTons = aSumData.Fcn.BplTons + CorrTpa * .Fcn.Bpl
                aSumData.Fcn.InsTons = aSumData.Fcn.InsTons + CorrTpa * .Fcn.Ins
                aSumData.Fcn.IaTons = aSumData.Fcn.IaTons + CorrTpa * .Fcn.Ia
                aSumData.Fcn.IaAdjTons = aSumData.Fcn.IaAdjTons + CorrTpa * .Fcn.IaAdj
                aSumData.Fcn.FeTons = aSumData.Fcn.FeTons + CorrTpa * .Fcn.Fe
                aSumData.Fcn.FeAdjTons = aSumData.Fcn.FeAdjTons + CorrTpa * .Fcn.FeAdj
                aSumData.Fcn.AlTons = aSumData.Fcn.AlTons + CorrTpa * .Fcn.Al
                aSumData.Fcn.MgTons = aSumData.Fcn.MgTons + CorrTpa * .Fcn.Mg
                aSumData.Fcn.CaTons = aSumData.Fcn.CaTons + CorrTpa * .Fcn.Ca
                '-----
                'Fine concentrate  ProdCoeff  Rejected somewhere
                '09/11/2009, lss -- Added the following
                If aRcvryParamsData.CanSelectRejectTcn And Not InclFcn Then
                    CorrTpa = Round(.Fcn.Tpa * CorrFactor, 0)
                    aSumData.TcnRej.Tpa = aSumData.TcnRej.Tpa + CorrTpa
                    If .Fcn.Bpl > 0 Then
                        aSumData.TcnRej.TwBpl = aSumData.TcnRej.TwBpl + CorrTpa
                    End If
                    If .Fcn.Ins > 0 Then
                        aSumData.TcnRej.TwIns = aSumData.TcnRej.TwIns + CorrTpa
                    End If
                    If .Fcn.Ia > 0 Then
                        aSumData.TcnRej.TwIa = aSumData.TcnRej.TwIa + CorrTpa
                    End If
                    If .Fcn.IaAdj > 0 Then
                        aSumData.TcnRej.TwIaAdj = aSumData.TcnRej.TwIaAdj + CorrTpa
                    End If
                    If .Fcn.Fe > 0 Then
                        aSumData.TcnRej.TwFe = aSumData.TcnRej.TwFe + CorrTpa
                    End If
                    If .Fcn.FeAdj > 0 Then
                        aSumData.TcnRej.TwFeAdj = aSumData.TcnRej.TwFeAdj + CorrTpa
                    End If
                    If .Fcn.Al > 0 Then
                        aSumData.TcnRej.TwAl = aSumData.TcnRej.TwAl + CorrTpa
                    End If
                    If .Fcn.Mg > 0 Then
                        aSumData.TcnRej.TwMg = aSumData.TcnRej.TwMg + CorrTpa
                    End If
                    If .Fcn.Ca > 0 Then
                        aSumData.TcnRej.TwCa = aSumData.TcnRej.TwCa + CorrTpa
                    End If
                    aSumData.TcnRej.BplTons = aSumData.TcnRej.BplTons + CorrTpa * .Fcn.Bpl
                    aSumData.TcnRej.InsTons = aSumData.TcnRej.InsTons + CorrTpa * .Fcn.Ins
                    aSumData.TcnRej.IaTons = aSumData.TcnRej.IaTons + CorrTpa * .Fcn.Ia
                    aSumData.TcnRej.IaAdjTons = aSumData.TcnRej.IaAdjTons + CorrTpa * .Fcn.IaAdj
                    aSumData.TcnRej.FeTons = aSumData.TcnRej.FeTons + CorrTpa * .Fcn.Fe
                    aSumData.TcnRej.FeAdjTons = aSumData.TcnRej.FeAdjTons + CorrTpa * .Fcn.FeAdj
                    aSumData.TcnRej.AlTons = aSumData.TcnRej.AlTons + CorrTpa * .Fcn.Al
                    aSumData.TcnRej.MgTons = aSumData.TcnRej.MgTons + CorrTpa * .Fcn.Mg
                    aSumData.TcnRej.CaTons = aSumData.TcnRej.CaTons + CorrTpa * .Fcn.Ca
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO   PC
                '------------------------------------------
                'Currently in Public Sub AddSplToHoleSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant = True Or
                aRcvryParamsData.UseDoloflotPlantFco = True Then
                    CorrTpa = Round(.MgPltInp.Tpa * CorrFactor, 0)
                    'Off-spec pebble MgO plant input  ProdCoeff
                    aSumData.MgPltInp.Tpa = aSumData.MgPltInp.Tpa + CorrTpa
                    If .MgPltInp.Bpl > 0 Then
                        aSumData.MgPltInp.TwBpl = aSumData.MgPltInp.TwBpl + CorrTpa
                    End If
                    If .MgPltInp.Ins > 0 Then
                        aSumData.MgPltInp.TwIns = aSumData.MgPltInp.TwIns + CorrTpa
                    End If
                    If .MgPltInp.Ia > 0 Then
                        aSumData.MgPltInp.TwIa = aSumData.MgPltInp.TwIa + CorrTpa
                    End If

                    If .MgPltInp.Fe > 0 Then
                        aSumData.MgPltInp.TwFe = aSumData.MgPltInp.TwFe + CorrTpa
                    End If

                    'Currently in Sub AddSplToHoleSumDataComp.
                    '03/24/2011**, lss New
                    If .MgPltInp.IaAdj > 0 Then
                        aSumData.MgPltInp.TwIaAdj = aSumData.MgPltInp.TwIaAdj + CorrTpa
                    End If
                    If .MgPltInp.FeAdj > 0 Then
                        aSumData.MgPltInp.TwFeAdj = aSumData.MgPltInp.TwFeAdj + CorrTpa
                    End If

                    If .MgPltInp.Al > 0 Then
                        aSumData.MgPltInp.TwAl = aSumData.MgPltInp.TwAl + CorrTpa
                    End If
                    If .MgPltInp.Mg > 0 Then
                        aSumData.MgPltInp.TwMg = aSumData.MgPltInp.TwMg + CorrTpa
                    End If
                    If .MgPltInp.Ca > 0 Then
                        aSumData.MgPltInp.TwCa = aSumData.MgPltInp.TwCa + CorrTpa
                    End If
                    aSumData.MgPltInp.BplTons = aSumData.MgPltInp.BplTons + CorrTpa * .MgPltInp.Bpl
                    aSumData.MgPltInp.InsTons = aSumData.MgPltInp.InsTons + CorrTpa * .MgPltInp.Ins
                    aSumData.MgPltInp.IaTons = aSumData.MgPltInp.IaTons + CorrTpa * .MgPltInp.Ia

                    aSumData.MgPltInp.FeTons = aSumData.MgPltInp.FeTons + CorrTpa * .MgPltInp.Fe

                    '03/24/2011**, lss New
                    aSumData.MgPltInp.IaAdjTons = aSumData.MgPltInp.IaAdjTons + CorrTpa * .MgPltInp.IaAdj
                    aSumData.MgPltInp.FeAdjTons = aSumData.MgPltInp.FeAdjTons + CorrTpa * .MgPltInp.FeAdj

                    aSumData.MgPltInp.AlTons = aSumData.MgPltInp.AlTons + CorrTpa * .MgPltInp.Al
                    aSumData.MgPltInp.MgTons = aSumData.MgPltInp.MgTons + CorrTpa * .MgPltInp.Mg
                    aSumData.MgPltInp.CaTons = aSumData.MgPltInp.CaTons + CorrTpa * .MgPltInp.Ca

                    'Off-spec pebble MgO plant reject  ProdCoeff
                    CorrTpa = Round(.MgPltRej.Tpa * CorrFactor, 0)
                    aSumData.MgPltRej.Tpa = aSumData.MgPltRej.Tpa + CorrTpa
                    If .MgPltRej.Bpl > 0 Then
                        aSumData.MgPltRej.TwBpl = aSumData.MgPltRej.TwBpl + CorrTpa
                    End If
                    If .MgPltRej.Ins > 0 Then
                        aSumData.MgPltRej.TwIns = aSumData.MgPltRej.TwIns + CorrTpa
                    End If
                    If .MgPltRej.Ia > 0 Then
                        aSumData.MgPltRej.TwIa = aSumData.MgPltRej.TwIa + CorrTpa
                    End If

                    If .MgPltRej.Fe > 0 Then
                        aSumData.MgPltRej.TwFe = aSumData.MgPltRej.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss New
                    If .MgPltRej.IaAdj > 0 Then
                        aSumData.MgPltRej.TwIaAdj = aSumData.MgPltRej.TwIaAdj + CorrTpa
                    End If
                    If .MgPltRej.FeAdj > 0 Then
                        aSumData.MgPltRej.TwFeAdj = aSumData.MgPltRej.TwFeAdj + CorrTpa
                    End If

                    If .MgPltRej.Al > 0 Then
                        aSumData.MgPltRej.TwAl = aSumData.MgPltRej.TwAl + CorrTpa
                    End If
                    If .MgPltRej.Mg > 0 Then
                        aSumData.MgPltRej.TwMg = aSumData.MgPltRej.TwMg + CorrTpa
                    End If
                    If .MgPltRej.Ca > 0 Then
                        aSumData.MgPltRej.TwCa = aSumData.MgPltRej.TwCa + CorrTpa
                    End If
                    aSumData.MgPltRej.BplTons = aSumData.MgPltRej.BplTons + CorrTpa * .MgPltRej.Bpl
                    aSumData.MgPltRej.InsTons = aSumData.MgPltRej.InsTons + CorrTpa * .MgPltRej.Ins
                    aSumData.MgPltRej.IaTons = aSumData.MgPltRej.IaTons + CorrTpa * .MgPltRej.Ia

                    aSumData.MgPltRej.FeTons = aSumData.MgPltRej.FeTons + CorrTpa * .MgPltRej.Fe

                    '03/24/2011**, lss New
                    aSumData.MgPltRej.IaAdjTons = aSumData.MgPltRej.IaAdjTons + CorrTpa * .MgPltRej.IaAdj
                    aSumData.MgPltRej.FeAdjTons = aSumData.MgPltRej.FeAdjTons + CorrTpa * .MgPltRej.FeAdj

                    aSumData.MgPltRej.AlTons = aSumData.MgPltRej.AlTons + CorrTpa * .MgPltRej.Al
                    aSumData.MgPltRej.MgTons = aSumData.MgPltRej.MgTons + CorrTpa * .MgPltRej.Mg
                    aSumData.MgPltRej.CaTons = aSumData.MgPltRej.CaTons + CorrTpa * .MgPltRej.Ca

                    'Off-spec pebble MgO plant product  ProdCoeff
                    CorrTpa = Round(.MgPltProd.Tpa * CorrFactor, 0)
                    aSumData.MgPltProd.Tpa = aSumData.MgPltProd.Tpa + CorrTpa
                    If .MgPltProd.Bpl > 0 Then
                        aSumData.MgPltProd.TwBpl = aSumData.MgPltProd.TwBpl + CorrTpa
                    End If
                    If .MgPltProd.Ins > 0 Then
                        aSumData.MgPltProd.TwIns = aSumData.MgPltProd.TwIns + CorrTpa
                    End If
                    If .MgPltProd.Ia > 0 Then
                        aSumData.MgPltProd.TwIa = aSumData.MgPltProd.TwIa + CorrTpa
                    End If

                    If .MgPltProd.Fe > 0 Then
                        aSumData.MgPltProd.TwFe = aSumData.MgPltProd.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss New
                    If .MgPltProd.IaAdj > 0 Then
                        aSumData.MgPltProd.TwIaAdj = aSumData.MgPltProd.TwIaAdj + CorrTpa
                    End If
                    If .MgPltProd.FeAdj > 0 Then
                        aSumData.MgPltProd.TwFeAdj = aSumData.MgPltProd.TwFeAdj + CorrTpa
                    End If

                    If .MgPltProd.Al > 0 Then
                        aSumData.MgPltProd.TwAl = aSumData.MgPltProd.TwAl + CorrTpa
                    End If
                    If .MgPltProd.Mg > 0 Then
                        aSumData.MgPltProd.TwMg = aSumData.MgPltProd.TwMg + CorrTpa
                    End If
                    If .MgPltProd.Ca > 0 Then
                        aSumData.MgPltProd.TwCa = aSumData.MgPltProd.TwCa + CorrTpa
                    End If
                    aSumData.MgPltProd.BplTons = aSumData.MgPltProd.BplTons + CorrTpa * .MgPltProd.Bpl
                    aSumData.MgPltProd.InsTons = aSumData.MgPltProd.InsTons + CorrTpa * .MgPltProd.Ins
                    aSumData.MgPltProd.IaTons = aSumData.MgPltProd.IaTons + CorrTpa * .MgPltProd.Ia

                    aSumData.MgPltProd.FeTons = aSumData.MgPltProd.FeTons + CorrTpa * .MgPltProd.Fe

                    '03/24/2011**, lss New
                    aSumData.MgPltProd.IaAdjTons = aSumData.MgPltProd.IaAdjTons + CorrTpa * .MgPltProd.IaAdj
                    aSumData.MgPltProd.FeAdjTons = aSumData.MgPltProd.FeAdjTons + CorrTpa * .MgPltProd.FeAdj

                    aSumData.MgPltProd.AlTons = aSumData.MgPltProd.AlTons + CorrTpa * .MgPltProd.Al
                    aSumData.MgPltProd.MgTons = aSumData.MgPltProd.MgTons + CorrTpa * .MgPltProd.Mg
                    aSumData.MgPltProd.CaTons = aSumData.MgPltProd.CaTons + CorrTpa * .MgPltProd.Ca
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA  PC
                '------------------
                'Currently in Public Sub AddSplToHoleSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                    CorrTpa = Round(.DfFpbInp.Tpa * CorrFactor, 0)
                    'Doloflot plant fine pebble input  ProdCoeff
                    aSumData.DfFpbInp.Tpa = aSumData.DfFpbInp.Tpa + CorrTpa
                    If .DfFpbInp.Bpl > 0 Then
                        aSumData.DfFpbInp.TwBpl = aSumData.DfFpbInp.TwBpl + CorrTpa
                    End If
                    If .DfFpbInp.Ins > 0 Then
                        aSumData.DfFpbInp.TwIns = aSumData.DfFpbInp.TwIns + CorrTpa
                    End If
                    If .DfFpbInp.Ia > 0 Then
                        aSumData.DfFpbInp.TwIa = aSumData.DfFpbInp.TwIa + CorrTpa
                    End If
                    If .DfFpbInp.Fe > 0 Then
                        aSumData.DfFpbInp.TwFe = aSumData.DfFpbInp.TwFe + CorrTpa
                    End If
                    If .DfFpbInp.FeAdj > 0 Then
                        aSumData.DfFpbInp.TwFeAdj = aSumData.DfFpbInp.TwFeAdj + CorrTpa
                    End If
                    If .DfFpbInp.Al > 0 Then
                        aSumData.DfFpbInp.TwAl = aSumData.DfFpbInp.TwAl + CorrTpa
                    End If
                    If .DfFpbInp.Mg > 0 Then
                        aSumData.DfFpbInp.TwMg = aSumData.DfFpbInp.TwMg + CorrTpa
                    End If
                    If .DfFpbInp.Ca > 0 Then
                        aSumData.DfFpbInp.TwCa = aSumData.DfFpbInp.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbInp.BplTons = aSumData.DfFpbInp.BplTons + CorrTpa * .DfFpbInp.Bpl
                    aSumData.DfFpbInp.InsTons = aSumData.DfFpbInp.InsTons + CorrTpa * .DfFpbInp.Ins
                    aSumData.DfFpbInp.IaTons = aSumData.DfFpbInp.IaTons + CorrTpa * .DfFpbInp.Ia
                    aSumData.DfFpbInp.FeTons = aSumData.DfFpbInp.FeTons + CorrTpa * .DfFpbInp.Fe
                    aSumData.DfFpbInp.FeAdjTons = aSumData.DfFpbInp.FeAdjTons + CorrTpa * .DfFpbInp.FeAdj
                    aSumData.DfFpbInp.AlTons = aSumData.DfFpbInp.AlTons + CorrTpa * .DfFpbInp.Al
                    aSumData.DfFpbInp.MgTons = aSumData.DfFpbInp.MgTons + CorrTpa * .DfFpbInp.Mg
                    aSumData.DfFpbInp.CaTons = aSumData.DfFpbInp.CaTons + CorrTpa * .DfFpbInp.Ca

                    'Doloflot plant fine pebble reject  ProdCoeff -- no "reject" for Doloflot plant!

                    'Doloflot plant fine pebble product  ProdCoeff
                    CorrTpa = Round(.DfFpbProd.Tpa * CorrFactor, 0)
                    aSumData.DfFpbProd.Tpa = aSumData.DfFpbProd.Tpa + CorrTpa
                    If .DfFpbProd.Bpl > 0 Then
                        aSumData.DfFpbProd.TwBpl = aSumData.DfFpbProd.TwBpl + CorrTpa
                    End If
                    If .DfFpbProd.Ins > 0 Then
                        aSumData.DfFpbProd.TwIns = aSumData.DfFpbProd.TwIns + CorrTpa
                    End If
                    If .DfFpbProd.Ia > 0 Then
                        aSumData.DfFpbProd.TwIa = aSumData.DfFpbProd.TwIa + CorrTpa
                    End If
                    If .DfFpbProd.Fe > 0 Then
                        aSumData.DfFpbProd.TwFe = aSumData.DfFpbProd.TwFe + CorrTpa
                    End If
                    If .DfFpbProd.FeAdj > 0 Then
                        aSumData.DfFpbProd.TwFeAdj = aSumData.DfFpbProd.TwFeAdj + CorrTpa
                    End If
                    If .DfFpbProd.Al > 0 Then
                        aSumData.DfFpbProd.TwAl = aSumData.DfFpbProd.TwAl + CorrTpa
                    End If
                    If .DfFpbProd.Mg > 0 Then
                        aSumData.DfFpbProd.TwMg = aSumData.DfFpbProd.TwMg + CorrTpa
                    End If
                    If .DfFpbProd.Ca > 0 Then
                        aSumData.DfFpbProd.TwCa = aSumData.DfFpbProd.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbProd.BplTons = aSumData.DfFpbProd.BplTons + CorrTpa * .DfFpbProd.Bpl
                    aSumData.DfFpbProd.InsTons = aSumData.DfFpbProd.InsTons + CorrTpa * .DfFpbProd.Ins
                    aSumData.DfFpbProd.IaTons = aSumData.DfFpbProd.IaTons + CorrTpa * .DfFpbProd.Ia
                    aSumData.DfFpbProd.FeTons = aSumData.DfFpbProd.FeTons + CorrTpa * .DfFpbProd.Fe
                    aSumData.DfFpbProd.FeAdjTons = aSumData.DfFpbProd.FeAdjTons + CorrTpa * .DfFpbProd.FeAdj
                    aSumData.DfFpbProd.AlTons = aSumData.DfFpbProd.AlTons + CorrTpa * .DfFpbProd.Al
                    aSumData.DfFpbProd.MgTons = aSumData.DfFpbProd.MgTons + CorrTpa * .DfFpbProd.Mg
                    aSumData.DfFpbProd.CaTons = aSumData.DfFpbProd.CaTons + CorrTpa * .DfFpbProd.Ca
                    '-----
                    CorrTpa = Round(.DfIpInp.Tpa * CorrFactor, 0)
                    'Doloflot plant IP input  ProdCoeff
                    aSumData.DfIpInp.Tpa = aSumData.DfIpInp.Tpa + CorrTpa
                    If .DfIpInp.Bpl > 0 Then
                        aSumData.DfIpInp.TwBpl = aSumData.DfIpInp.TwBpl + CorrTpa
                    End If
                    If .DfIpInp.Ins > 0 Then
                        aSumData.DfIpInp.TwIns = aSumData.DfIpInp.TwIns + CorrTpa
                    End If
                    If .DfIpInp.Ia > 0 Then
                        aSumData.DfIpInp.TwIa = aSumData.DfIpInp.TwIa + CorrTpa
                    End If
                    If .DfIpInp.Fe > 0 Then
                        aSumData.DfIpInp.TwFe = aSumData.DfIpInp.TwFe + CorrTpa
                    End If
                    If .DfIpInp.FeAdj > 0 Then
                        aSumData.DfIpInp.TwFeAdj = aSumData.DfIpInp.TwFeAdj + CorrTpa
                    End If
                    If .DfIpInp.Al > 0 Then
                        aSumData.DfIpInp.TwAl = aSumData.DfIpInp.TwAl + CorrTpa
                    End If
                    If .DfIpInp.Mg > 0 Then
                        aSumData.DfIpInp.TwMg = aSumData.DfIpInp.TwMg + CorrTpa
                    End If
                    If .DfIpInp.Ca > 0 Then
                        aSumData.DfIpInp.TwCa = aSumData.DfIpInp.TwCa + CorrTpa
                    End If
                    aSumData.DfIpInp.BplTons = aSumData.DfIpInp.BplTons + CorrTpa * .DfIpInp.Bpl
                    aSumData.DfIpInp.InsTons = aSumData.DfIpInp.InsTons + CorrTpa * .DfIpInp.Ins
                    aSumData.DfIpInp.IaTons = aSumData.DfIpInp.IaTons + CorrTpa * .DfIpInp.Ia
                    aSumData.DfIpInp.FeTons = aSumData.DfIpInp.FeTons + CorrTpa * .DfIpInp.Fe
                    aSumData.DfIpInp.FeAdjTons = aSumData.DfIpInp.FeAdjTons + CorrTpa * .DfIpInp.FeAdj
                    aSumData.DfIpInp.AlTons = aSumData.DfIpInp.AlTons + CorrTpa * .DfIpInp.Al
                    aSumData.DfIpInp.MgTons = aSumData.DfIpInp.MgTons + CorrTpa * .DfIpInp.Mg
                    aSumData.DfIpInp.CaTons = aSumData.DfIpInp.CaTons + CorrTpa * .DfIpInp.Ca

                    'Doloflot plant IP reject  ProdCoeff -- no "reject" for Doloflot plant!

                    'Doloflot plant IP product  ProdCoeff
                    CorrTpa = Round(.DfIpProd.Tpa * CorrFactor, 0)
                    aSumData.DfIpProd.Tpa = aSumData.DfIpProd.Tpa + CorrTpa
                    If .DfIpProd.Bpl > 0 Then
                        aSumData.DfIpProd.TwBpl = aSumData.DfIpProd.TwBpl + CorrTpa
                    End If
                    If .DfIpProd.Ins > 0 Then
                        aSumData.DfIpProd.TwIns = aSumData.DfIpProd.TwIns + CorrTpa
                    End If
                    If .DfIpProd.Ia > 0 Then
                        aSumData.DfIpProd.TwIa = aSumData.DfIpProd.TwIa + CorrTpa
                    End If
                    If .DfIpProd.Fe > 0 Then
                        aSumData.DfIpProd.TwFe = aSumData.DfIpProd.TwFe + CorrTpa
                    End If
                    If .DfIpProd.FeAdj > 0 Then
                        aSumData.DfIpProd.TwFeAdj = aSumData.DfIpProd.TwFeAdj + CorrTpa
                    End If
                    If .DfIpProd.Al > 0 Then
                        aSumData.DfIpProd.TwAl = aSumData.DfIpProd.TwAl + CorrTpa
                    End If
                    If .DfIpProd.Mg > 0 Then
                        aSumData.DfIpProd.TwMg = aSumData.DfIpProd.TwMg + CorrTpa
                    End If
                    If .DfIpProd.Ca > 0 Then
                        aSumData.DfIpProd.TwCa = aSumData.DfIpProd.TwCa + CorrTpa
                    End If
                    aSumData.DfIpProd.BplTons = aSumData.DfIpProd.BplTons + CorrTpa * .DfIpProd.Bpl
                    aSumData.DfIpProd.InsTons = aSumData.DfIpProd.InsTons + CorrTpa * .DfIpProd.Ins
                    aSumData.DfIpProd.IaTons = aSumData.DfIpProd.IaTons + CorrTpa * .DfIpProd.Ia
                    aSumData.DfIpProd.FeTons = aSumData.DfIpProd.FeTons + CorrTpa * .DfIpProd.Fe
                    aSumData.DfIpProd.FeAdjTons = aSumData.DfIpProd.FeAdjTons + CorrTpa * .DfIpProd.FeAdj
                    aSumData.DfIpProd.AlTons = aSumData.DfIpProd.AlTons + CorrTpa * .DfIpProd.Al
                    aSumData.DfIpProd.MgTons = aSumData.DfIpProd.MgTons + CorrTpa * .DfIpProd.Mg
                    aSumData.DfIpProd.CaTons = aSumData.DfIpProd.CaTons + CorrTpa * .DfIpProd.Ca
                End If
                '-----
                'Waste clay  ProdCoeff
                CorrTpa = Round(.Wcl.Tpa * CorrFactor, 0)
                aSumData.Wcl.Tpa = aSumData.Wcl.Tpa + CorrTpa
                If .Wcl.Bpl > 0 Then
                    aSumData.Wcl.TwBpl = aSumData.Wcl.TwBpl + CorrTpa
                End If
                aSumData.Wcl.BplTons = aSumData.Wcl.BplTons + CorrTpa * .Wcl.Bpl
                '-----
                'Coarse feed  ProdCoeff
                CorrTpa = Round(.Cfd.Tpa * CorrFactor, 0)
                aSumData.Cfd.Tpa = aSumData.Cfd.Tpa + CorrTpa
                If .Cfd.Bpl > 0 Then
                    aSumData.Cfd.TwBpl = aSumData.Cfd.TwBpl + CorrTpa
                End If
                aSumData.Cfd.BplTons = aSumData.Cfd.BplTons + CorrTpa * .Cfd.Bpl
                '-----
                'Fine feed  ProdCoeff
                CorrTpa = Round(.Ffd.Tpa * CorrFactor, 0)
                aSumData.Ffd.Tpa = aSumData.Ffd.Tpa + CorrTpa
                If .Ffd.Bpl > 0 Then
                    aSumData.Ffd.TwBpl = aSumData.Ffd.TwBpl + CorrTpa
                End If
                aSumData.Ffd.BplTons = aSumData.Ffd.BplTons + CorrTpa * .Ffd.Bpl
                '-----
                'Total tails  ProdCoeff
                CorrTpa = Round(.Ttl.Tpa * CorrFactor, 0)
                aSumData.Ttl.Tpa = aSumData.Ttl.Tpa + CorrTpa
                If .Ttl.Bpl > 0 Then
                    aSumData.Ttl.TwBpl = aSumData.Ttl.TwBpl + CorrTpa
                End If
                aSumData.Ttl.BplTons = aSumData.Ttl.BplTons + CorrTpa * .Ttl.Bpl
                '-----
                'Matrix  ProdCoeff
                'Currently in Public Sub AddSplToHoleSumDataComp
                CorrTpa = Round(.MtxTpaPc * CorrFactor, 0)
                aSumData.MtxTPA = aSumData.MtxTPA + CorrTpa

                '100%  100%  100%  100%  100%
                '100%  100%  100%  100%  100%
                '100%  100%  100%  100%  100%

                'Oversize  100%
                If InclOs Then
                    CorrTpa = Round(.Os100.Tpa * CorrFactor, 0)
                    aSumData.Os100.Tpa = aSumData.Os100.Tpa + CorrTpa
                    If .Os100.Bpl > 0 Then
                        aSumData.Os100.TwBpl = aSumData.Os100.TwBpl + CorrTpa
                    End If
                    If .Os100.Ins > 0 Then
                        aSumData.Os100.TwIns = aSumData.Os100.TwIns + CorrTpa
                    End If
                    If .Os100.Ia > 0 Then
                        aSumData.Os100.TwIa = aSumData.Os100.TwIa + CorrTpa
                    End If
                    If .Os100.IaAdj > 0 Then
                        aSumData.Os100.TwIaAdj = aSumData.Os100.TwIaAdj + CorrTpa
                    End If
                    If .Os100.Fe > 0 Then
                        aSumData.Os100.TwFe = aSumData.Os100.TwFe + CorrTpa
                    End If
                    If .Os100.FeAdj > 0 Then
                        aSumData.Os100.TwFeAdj = aSumData.Os100.TwFeAdj + CorrTpa
                    End If
                    If .Os100.Al > 0 Then
                        aSumData.Os100.TwAl = aSumData.Os100.TwAl + CorrTpa
                    End If
                    If .Os100.Mg > 0 Then
                        aSumData.Os100.TwMg = aSumData.Os100.TwMg + CorrTpa
                    End If
                    If .Os100.Ca > 0 Then
                        aSumData.Os100.TwCa = aSumData.Os100.TwCa + CorrTpa
                    End If
                    aSumData.Os100.BplTons = aSumData.Os100.BplTons + CorrTpa * .Os100.Bpl
                    aSumData.Os100.InsTons = aSumData.Os100.InsTons + CorrTpa * .Os100.Ins
                    aSumData.Os100.IaTons = aSumData.Os100.IaTons + CorrTpa * .Os100.Ia
                    aSumData.Os100.IaAdjTons = aSumData.Os100.IaAdjTons + CorrTpa * .Os100.IaAdj
                    aSumData.Os100.FeTons = aSumData.Os100.FeTons + CorrTpa * .Os100.Fe
                    aSumData.Os100.FeAdjTons = aSumData.Os100.FeAdjTons + CorrTpa * .Os100.FeAdj
                    aSumData.Os100.AlTons = aSumData.Os100.AlTons + CorrTpa * .Os100.Al
                    aSumData.Os100.MgTons = aSumData.Os100.MgTons + CorrTpa * .Os100.Mg
                    aSumData.Os100.CaTons = aSumData.Os100.CaTons + CorrTpa * .Os100.Ca
                End If
                '-----
                'Coarse pebble  100%
                If InclCpb Then
                    CorrTpa = Round(.Cpb100.Tpa * CorrFactor, 0)
                    aSumData.Cpb100.Tpa = aSumData.Cpb100.Tpa + CorrTpa
                    If .Cpb100.Bpl > 0 Then
                        aSumData.Cpb100.TwBpl = aSumData.Cpb100.TwBpl + CorrTpa
                    End If
                    If .Cpb100.Ins > 0 Then
                        aSumData.Cpb100.TwIns = aSumData.Cpb100.TwIns + CorrTpa
                    End If
                    If .Cpb100.Ia > 0 Then
                        aSumData.Cpb100.TwIa = aSumData.Cpb100.TwIa + CorrTpa
                    End If
                    If .Cpb100.IaAdj > 0 Then
                        aSumData.Cpb100.TwIaAdj = aSumData.Cpb100.TwIaAdj + CorrTpa
                    End If
                    If .Cpb100.Fe > 0 Then
                        aSumData.Cpb100.TwFe = aSumData.Cpb100.TwFe + CorrTpa
                    End If
                    If .Cpb100.FeAdj > 0 Then
                        aSumData.Cpb100.TwFeAdj = aSumData.Cpb100.TwFeAdj + CorrTpa
                    End If
                    If .Cpb100.Al > 0 Then
                        aSumData.Cpb100.TwAl = aSumData.Cpb100.TwAl + CorrTpa
                    End If
                    If .Cpb100.Mg > 0 Then
                        aSumData.Cpb100.TwMg = aSumData.Cpb100.TwMg + CorrTpa
                    End If
                    If .Cpb100.Ca > 0 Then
                        aSumData.Cpb100.TwCa = aSumData.Cpb100.TwCa + CorrTpa
                    End If
                    aSumData.Cpb100.BplTons = aSumData.Cpb100.BplTons + CorrTpa * .Cpb100.Bpl
                    aSumData.Cpb100.InsTons = aSumData.Cpb100.InsTons + CorrTpa * .Cpb100.Ins
                    aSumData.Cpb100.IaTons = aSumData.Cpb100.IaTons + CorrTpa * .Cpb100.Ia
                    aSumData.Cpb100.IaAdjTons = aSumData.Cpb100.IaAdjTons + CorrTpa * .Cpb100.IaAdj
                    aSumData.Cpb100.FeTons = aSumData.Cpb100.FeTons + CorrTpa * .Cpb100.Fe
                    aSumData.Cpb100.FeAdjTons = aSumData.Cpb100.FeAdjTons + CorrTpa * .Cpb100.FeAdj
                    aSumData.Cpb100.AlTons = aSumData.Cpb100.AlTons + CorrTpa * .Cpb100.Al
                    aSumData.Cpb100.MgTons = aSumData.Cpb100.MgTons + CorrTpa * .Cpb100.Mg
                    aSumData.Cpb100.CaTons = aSumData.Cpb100.CaTons + CorrTpa * .Cpb100.Ca
                Else
                    'Coarse pebble rejected
                    CorrTpa = Round(.CpbRej100.Tpa * CorrFactor, 0)
                    aSumData.CpbRej100.Tpa = aSumData.CpbRej100.Tpa + CorrTpa
                    If .CpbRej100.Bpl > 0 Then
                        aSumData.CpbRej100.TwBpl = aSumData.CpbRej100.TwBpl + CorrTpa
                    End If
                    If .CpbRej100.Ins > 0 Then
                        aSumData.CpbRej100.TwIns = aSumData.CpbRej100.TwIns + CorrTpa
                    End If
                    If .CpbRej100.Ia > 0 Then
                        aSumData.CpbRej100.TwIa = aSumData.CpbRej100.TwIa + CorrTpa
                    End If
                    If .CpbRej100.IaAdj > 0 Then
                        aSumData.CpbRej100.TwIaAdj = aSumData.CpbRej100.TwIaAdj + CorrTpa
                    End If
                    If .CpbRej100.Fe > 0 Then
                        aSumData.CpbRej100.TwFe = aSumData.CpbRej100.TwFe + CorrTpa
                    End If
                    If .CpbRej100.FeAdj > 0 Then
                        aSumData.CpbRej100.TwFeAdj = aSumData.CpbRej100.TwFeAdj + CorrTpa
                    End If
                    If .CpbRej100.Al > 0 Then
                        aSumData.CpbRej100.TwAl = aSumData.CpbRej100.TwAl + CorrTpa
                    End If
                    If .CpbRej100.Mg > 0 Then
                        aSumData.CpbRej100.TwMg = aSumData.CpbRej100.TwMg + CorrTpa
                    End If
                    If .CpbRej100.Ca > 0 Then
                        aSumData.CpbRej100.TwCa = aSumData.CpbRej100.TwCa + CorrTpa
                    End If
                    aSumData.CpbRej100.BplTons = aSumData.CpbRej100.BplTons + CorrTpa * .CpbRej100.Bpl
                    aSumData.CpbRej100.InsTons = aSumData.CpbRej100.InsTons + CorrTpa * .CpbRej100.Ins
                    aSumData.CpbRej100.IaTons = aSumData.CpbRej100.IaTons + CorrTpa * .CpbRej100.Ia
                    aSumData.CpbRej100.IaAdjTons = aSumData.CpbRej100.IaAdjTons + CorrTpa * .CpbRej100.IaAdj
                    aSumData.CpbRej100.FeTons = aSumData.CpbRej100.FeTons + CorrTpa * .CpbRej100.Fe
                    aSumData.CpbRej100.FeAdjTons = aSumData.CpbRej100.FeAdjTons + CorrTpa * .CpbRej100.FeAdj
                    aSumData.CpbRej100.AlTons = aSumData.CpbRej100.AlTons + CorrTpa * .CpbRej100.Al
                    aSumData.CpbRej100.MgTons = aSumData.CpbRej100.MgTons + CorrTpa * .CpbRej100.Mg
                    aSumData.CpbRej100.CaTons = aSumData.CpbRej100.CaTons + CorrTpa * .CpbRej100.Ca
                End If
                '-----
                'Total pebble  100%  Rejected at washer
                'If aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTpb And InclCpb Then
                If aRecoveryParams.EnterCoarsePebbleRejectValue And Not InclCpb Then
                    CorrTpa = Round(.Cpb100.Tpa * CorrFactor, 0)
                    aSumData.TpbRej100.Tpa = aSumData.TpbRej100.Tpa + CorrTpa
                    If .TpbRej100.Bpl > 0 Then
                        aSumData.TpbRej100.TwBpl = aSumData.TpbRej100.TwBpl + CorrTpa
                    End If
                    If .TpbRej100.Ins > 0 Then
                        aSumData.TpbRej100.TwIns = aSumData.TpbRej100.TwIns + CorrTpa
                    End If
                    If .TpbRej100.Ia > 0 Then
                        aSumData.TpbRej100.TwIa = aSumData.TpbRej100.TwIa + CorrTpa
                    End If
                    If .TpbRej100.IaAdj > 0 Then
                        aSumData.TpbRej100.TwIaAdj = aSumData.TpbRej100.TwIaAdj + CorrTpa
                    End If
                    If .TpbRej100.Fe > 0 Then
                        aSumData.TpbRej100.TwFe = aSumData.TpbRej100.TwFe + CorrTpa
                    End If
                    If .TpbRej100.FeAdj > 0 Then
                        aSumData.TpbRej100.TwFeAdj = aSumData.TpbRej100.TwFeAdj + CorrTpa
                    End If
                    If .TpbRej100.Al > 0 Then
                        aSumData.TpbRej100.TwAl = aSumData.TpbRej100.TwAl + CorrTpa
                    End If
                    If .TpbRej100.Mg > 0 Then
                        aSumData.TpbRej100.TwMg = aSumData.TpbRej100.TwMg + CorrTpa
                    End If
                    If .TpbRej100.Ca > 0 Then
                        aSumData.TpbRej100.TwCa = aSumData.TpbRej100.TwCa + CorrTpa
                    End If
                    aSumData.TpbRej100.BplTons = aSumData.TpbRej100.BplTons + CorrTpa * .Cpb100.Bpl
                    aSumData.TpbRej100.InsTons = aSumData.TpbRej100.InsTons + CorrTpa * .Cpb100.Ins
                    aSumData.TpbRej100.IaTons = aSumData.TpbRej100.IaTons + CorrTpa * .Cpb100.Ia
                    aSumData.TpbRej100.IaAdjTons = aSumData.TpbRej100.IaAdjTons + CorrTpa * .Cpb100.IaAdj
                    aSumData.TpbRej100.FeTons = aSumData.TpbRej100.FeTons + CorrTpa * .Cpb100.Fe
                    aSumData.TpbRej100.FeAdjTons = aSumData.TpbRej100.FeAdjTons + CorrTpa * .Cpb100.FeAdj
                    aSumData.TpbRej100.AlTons = aSumData.TpbRej100.AlTons + CorrTpa * .Cpb100.Al
                    aSumData.TpbRej100.MgTons = aSumData.TpbRej100.MgTons + CorrTpa * .Cpb100.Mg
                    aSumData.TpbRej100.CaTons = aSumData.TpbRej100.CaTons + CorrTpa * .Cpb100.Ca
                End If
                '-----
                'Fine pebble  100%
                If InclFpb Then
                    CorrTpa = Round(.Fpb100.Tpa * CorrFactor, 0)
                    aSumData.Fpb100.Tpa = aSumData.Fpb100.Tpa + CorrTpa
                    If .Fpb100.Bpl > 0 Then
                        aSumData.Fpb100.TwBpl = aSumData.Fpb100.TwBpl + CorrTpa
                    End If
                    If .Fpb100.Ins > 0 Then
                        aSumData.Fpb100.TwIns = aSumData.Fpb100.TwIns + CorrTpa
                    End If
                    If .Fpb100.Ia > 0 Then
                        aSumData.Fpb100.TwIa = aSumData.Fpb100.TwIa + CorrTpa
                    End If
                    If .Fpb100.IaAdj > 0 Then
                        aSumData.Fpb100.TwIaAdj = aSumData.Fpb100.TwIaAdj + CorrTpa
                    End If
                    If .Fpb100.Fe > 0 Then
                        aSumData.Fpb100.TwFe = aSumData.Fpb100.TwFe + CorrTpa
                    End If
                    If .Fpb100.FeAdj > 0 Then
                        aSumData.Fpb100.TwFeAdj = aSumData.Fpb100.TwFeAdj + CorrTpa
                    End If
                    If .Fpb100.Al > 0 Then
                        aSumData.Fpb100.TwAl = aSumData.Fpb100.TwAl + CorrTpa
                    End If
                    If .Fpb100.Mg > 0 Then
                        aSumData.Fpb100.TwMg = aSumData.Fpb100.TwMg + CorrTpa
                    End If
                    If .Fpb100.Ca > 0 Then
                        aSumData.Fpb100.TwCa = aSumData.Fpb100.TwCa + CorrTpa
                    End If
                    aSumData.Fpb100.BplTons = aSumData.Fpb100.BplTons + CorrTpa * .Fpb100.Bpl
                    aSumData.Fpb100.InsTons = aSumData.Fpb100.InsTons + CorrTpa * .Fpb100.Ins
                    aSumData.Fpb100.IaTons = aSumData.Fpb100.IaTons + CorrTpa * .Fpb100.Ia
                    aSumData.Fpb100.IaAdjTons = aSumData.Fpb100.IaAdjTons + CorrTpa * .Fpb100.IaAdj
                    aSumData.Fpb100.FeTons = aSumData.Fpb100.FeTons + CorrTpa * .Fpb100.Fe
                    aSumData.Fpb100.FeAdjTons = aSumData.Fpb100.FeAdjTons + CorrTpa * .Fpb100.FeAdj
                    aSumData.Fpb100.AlTons = aSumData.Fpb100.AlTons + CorrTpa * .Fpb100.Al
                    aSumData.Fpb100.MgTons = aSumData.Fpb100.MgTons + CorrTpa * .Fpb100.Mg
                    aSumData.Fpb100.CaTons = aSumData.Fpb100.CaTons + CorrTpa * .Fpb100.Ca
                End If
                '-----
                'Fine pebble  100%  Rejected at washer
                ' If aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTpb And InclFpb Then
                If (aRecoveryParams.EnterFinePebbleRejectValue Or aRecoveryParams.EnterTotalPebbleRejectValue) And Not InclFpb Then
                    CorrTpa = Round(.Fpb100.Tpa * CorrFactor, 0)
                    aSumData.TpbRej100.Tpa = aSumData.TpbRej100.Tpa + CorrTpa
                    If .TpbRej100.Bpl > 0 Then
                        aSumData.TpbRej100.TwBpl = aSumData.TpbRej100.TwBpl + CorrTpa
                    End If
                    If .TpbRej100.Ins > 0 Then
                        aSumData.TpbRej100.TwIns = aSumData.TpbRej100.TwIns + CorrTpa
                    End If
                    If .TpbRej100.Ia > 0 Then
                        aSumData.TpbRej100.TwIa = aSumData.TpbRej100.TwIa + CorrTpa
                    End If
                    If .TpbRej100.IaAdj > 0 Then
                        aSumData.TpbRej100.TwIaAdj = aSumData.TpbRej100.TwIaAdj + CorrTpa
                    End If
                    If .TpbRej100.Fe > 0 Then
                        aSumData.TpbRej100.TwFe = aSumData.TpbRej100.TwFe + CorrTpa
                    End If
                    If .TpbRej100.FeAdj > 0 Then
                        aSumData.TpbRej100.TwFeAdj = aSumData.TpbRej100.TwFeAdj + CorrTpa
                    End If
                    If .TpbRej100.Al > 0 Then
                        aSumData.TpbRej100.TwAl = aSumData.TpbRej100.TwAl + CorrTpa
                    End If
                    If .TpbRej100.Mg > 0 Then
                        aSumData.TpbRej100.TwMg = aSumData.TpbRej100.TwMg + CorrTpa
                    End If
                    If .TpbRej100.Ca > 0 Then
                        aSumData.TpbRej100.TwCa = aSumData.TpbRej100.TwCa + CorrTpa
                    End If
                    aSumData.TpbRej100.BplTons = aSumData.TpbRej100.BplTons + CorrTpa * .Fpb100.Bpl
                    aSumData.TpbRej100.InsTons = aSumData.TpbRej100.InsTons + CorrTpa * .Fpb100.Ins
                    aSumData.TpbRej100.IaTons = aSumData.TpbRej100.IaTons + CorrTpa * .Fpb100.Ia
                    aSumData.TpbRej100.IaAdjTons = aSumData.TpbRej100.IaAdjTons + CorrTpa * .Fpb100.IaAdj
                    aSumData.TpbRej100.FeTons = aSumData.TpbRej100.FeTons + CorrTpa * .Fpb100.Fe
                    aSumData.TpbRej100.FeAdjTons = aSumData.TpbRej100.FeAdjTons + CorrTpa * .Fpb100.FeAdj
                    aSumData.TpbRej100.AlTons = aSumData.TpbRej100.AlTons + CorrTpa * .Fpb100.Al
                    aSumData.TpbRej100.MgTons = aSumData.TpbRej100.MgTons + CorrTpa * .Fpb100.Mg
                    aSumData.TpbRej100.CaTons = aSumData.TpbRej100.CaTons + CorrTpa * .Fpb100.Ca
                End If
                '-----
                'IP  100%
                If InclIp Then
                    CorrTpa = Round(.Ip100.Tpa * CorrFactor, 0)
                    aSumData.Ip100.Tpa = aSumData.Ip100.Tpa + CorrTpa
                    If .Ip100.Bpl > 0 Then
                        aSumData.Ip100.TwBpl = aSumData.Ip100.TwBpl + CorrTpa
                    End If
                    If .Ip100.Ins > 0 Then
                        aSumData.Ip100.TwIns = aSumData.Ip100.TwIns + CorrTpa
                    End If
                    If .Ip100.Ia > 0 Then
                        aSumData.Ip100.TwIa = aSumData.Ip100.TwIa + CorrTpa
                    End If
                    If .Ip100.IaAdj > 0 Then
                        aSumData.Ip100.TwIaAdj = aSumData.Ip100.TwIaAdj + CorrTpa
                    End If
                    If .Ip100.Fe > 0 Then
                        aSumData.Ip100.TwFe = aSumData.Ip100.TwFe + CorrTpa
                    End If
                    If .Ip100.FeAdj > 0 Then
                        aSumData.Ip100.TwFeAdj = aSumData.Ip100.TwFeAdj + CorrTpa
                    End If
                    If .Ip100.Al > 0 Then
                        aSumData.Ip100.TwAl = aSumData.Ip100.TwAl + CorrTpa
                    End If
                    If .Ip100.Mg > 0 Then
                        aSumData.Ip100.TwMg = aSumData.Ip100.TwMg + CorrTpa
                    End If
                    If .Ip100.Ca > 0 Then
                        aSumData.Ip100.TwCa = aSumData.Ip100.TwCa + CorrTpa
                    End If
                    aSumData.Ip100.BplTons = aSumData.Ip100.BplTons + CorrTpa * .Ip100.Bpl
                    aSumData.Ip100.InsTons = aSumData.Ip100.InsTons + CorrTpa * .Ip100.Ins
                    aSumData.Ip100.IaTons = aSumData.Ip100.IaTons + CorrTpa * .Ip100.Ia
                    aSumData.Ip100.IaAdjTons = aSumData.Ip100.IaAdjTons + CorrTpa * .Ip100.IaAdj
                    aSumData.Ip100.FeTons = aSumData.Ip100.FeTons + CorrTpa * .Ip100.Fe
                    aSumData.Ip100.FeAdjTons = aSumData.Ip100.FeAdjTons + CorrTpa * .Ip100.FeAdj
                    aSumData.Ip100.AlTons = aSumData.Ip100.AlTons + CorrTpa * .Ip100.Al
                    aSumData.Ip100.MgTons = aSumData.Ip100.MgTons + CorrTpa * .Ip100.Mg
                    aSumData.Ip100.CaTons = aSumData.Ip100.CaTons + CorrTpa * .Ip100.Ca
                End If
                '-----
                'Coarse concentrate  100%
                CorrTpa = Round(.Ccn100.Tpa * CorrFactor, 0)
                aSumData.Ccn100.Tpa = aSumData.Ccn100.Tpa + CorrTpa
                If .Ccn100.Bpl > 0 Then
                    aSumData.Ccn100.TwBpl = aSumData.Ccn100.TwBpl + CorrTpa
                End If
                If .Ccn100.Ins > 0 Then
                    aSumData.Ccn100.TwIns = aSumData.Ccn100.TwIns + CorrTpa
                End If
                If .Ccn100.Ia > 0 Then
                    aSumData.Ccn100.TwIa = aSumData.Ccn100.TwIa + CorrTpa
                End If
                If .Ccn100.IaAdj > 0 Then
                    aSumData.Ccn100.TwIaAdj = aSumData.Ccn100.TwIaAdj + CorrTpa
                End If
                If .Ccn100.Fe > 0 Then
                    aSumData.Ccn100.TwFe = aSumData.Ccn100.TwFe + CorrTpa
                End If
                If .Ccn100.FeAdj > 0 Then
                    aSumData.Ccn100.TwFeAdj = aSumData.Ccn100.TwFeAdj + CorrTpa
                End If
                If .Ccn100.Al > 0 Then
                    aSumData.Ccn100.TwAl = aSumData.Ccn100.TwAl + CorrTpa
                End If
                If .Ccn100.Mg > 0 Then
                    aSumData.Ccn100.TwMg = aSumData.Ccn100.TwMg + CorrTpa
                End If
                If .Ccn100.Ca > 0 Then
                    aSumData.Ccn100.TwCa = aSumData.Ccn100.TwCa + CorrTpa
                End If
                aSumData.Ccn100.BplTons = aSumData.Ccn100.BplTons + CorrTpa * .Ccn100.Bpl
                aSumData.Ccn100.InsTons = aSumData.Ccn100.InsTons + CorrTpa * .Ccn100.Ins
                aSumData.Ccn100.IaTons = aSumData.Ccn100.IaTons + CorrTpa * .Ccn100.Ia
                aSumData.Ccn100.IaAdjTons = aSumData.Ccn100.IaAdjTons + CorrTpa * .Ccn100.IaAdj
                aSumData.Ccn100.FeTons = aSumData.Ccn100.FeTons + CorrTpa * .Ccn100.Fe
                aSumData.Ccn100.FeAdjTons = aSumData.Ccn100.FeAdjTons + CorrTpa * .Ccn100.FeAdj
                aSumData.Ccn100.AlTons = aSumData.Ccn100.AlTons + CorrTpa * .Ccn100.Al
                aSumData.Ccn100.MgTons = aSumData.Ccn100.MgTons + CorrTpa * .Ccn100.Mg
                aSumData.Ccn100.CaTons = aSumData.Ccn100.CaTons + CorrTpa * .Ccn100.Ca
                '-----
                'Coarse concentrate  100%  Rejected somewhere
                '09/11/2009, lss -- Added the following
                If aRcvryParamsData.CanSelectRejectTcn = True And InclFcn = False Then
                    CorrTpa = Round(.Ccn100.Tpa * CorrFactor, 0)
                    aSumData.TcnRej.Tpa = aSumData.TcnRej.Tpa + CorrTpa
                    If .Ccn100.Bpl > 0 Then
                        aSumData.TcnRej.TwBpl = aSumData.TcnRej.TwBpl + CorrTpa
                    End If
                    If .Ccn100.Ins > 0 Then
                        aSumData.TcnRej.TwIns = aSumData.TcnRej.TwIns + CorrTpa
                    End If
                    If .Ccn100.Ia > 0 Then
                        aSumData.TcnRej.TwIa = aSumData.TcnRej.TwIa + CorrTpa
                    End If
                    If .Ccn100.IaAdj > 0 Then
                        aSumData.TcnRej.TwIaAdj = aSumData.TcnRej.TwIaAdj + CorrTpa
                    End If
                    If .Ccn100.Fe > 0 Then
                        aSumData.TcnRej.TwFe = aSumData.TcnRej.TwFe + CorrTpa
                    End If
                    If .Ccn100.FeAdj > 0 Then
                        aSumData.TcnRej.TwFeAdj = aSumData.TcnRej.TwFeAdj + CorrTpa
                    End If
                    If .Ccn100.Al > 0 Then
                        aSumData.TcnRej.TwAl = aSumData.TcnRej.TwAl + CorrTpa
                    End If
                    If .Ccn100.Mg > 0 Then
                        aSumData.TcnRej.TwMg = aSumData.TcnRej.TwMg + CorrTpa
                    End If
                    If .Ccn100.Ca > 0 Then
                        aSumData.TcnRej.TwCa = aSumData.TcnRej.TwCa + CorrTpa
                    End If
                    aSumData.TcnRej.BplTons = aSumData.TcnRej.BplTons + CorrTpa * .Ccn100.Bpl
                    aSumData.TcnRej.InsTons = aSumData.TcnRej.InsTons + CorrTpa * .Ccn100.Ins
                    aSumData.TcnRej.IaTons = aSumData.TcnRej.IaTons + CorrTpa * .Ccn100.Ia
                    aSumData.TcnRej.IaAdjTons = aSumData.TcnRej.IaAdjTons + CorrTpa * .Ccn100.IaAdj
                    aSumData.TcnRej.FeTons = aSumData.TcnRej.FeTons + CorrTpa * .Ccn100.Fe
                    aSumData.TcnRej.FeAdjTons = aSumData.TcnRej.FeAdjTons + CorrTpa * .Ccn100.FeAdj
                    aSumData.TcnRej.AlTons = aSumData.TcnRej.AlTons + CorrTpa * .Ccn100.Al
                    aSumData.TcnRej.MgTons = aSumData.TcnRej.MgTons + CorrTpa * .Ccn100.Mg
                    aSumData.TcnRej.CaTons = aSumData.TcnRej.CaTons + CorrTpa * .Ccn100.Ca
                End If
                '-----
                'Fine concentrate  100%
                CorrTpa = Round(.Fcn100.Tpa * CorrFactor, 0)
                aSumData.Fcn100.Tpa = aSumData.Fcn100.Tpa + CorrTpa
                If .Fcn100.Bpl > 0 Then
                    aSumData.Fcn100.TwBpl = aSumData.Fcn100.TwBpl + CorrTpa
                End If
                If .Fcn100.Ins > 0 Then
                    aSumData.Fcn100.TwIns = aSumData.Fcn100.TwIns + CorrTpa
                End If
                If .Fcn100.Ia > 0 Then
                    aSumData.Fcn100.TwIa = aSumData.Fcn100.TwIa + CorrTpa
                End If
                If .Fcn100.IaAdj > 0 Then
                    aSumData.Fcn100.TwIaAdj = aSumData.Fcn100.TwIaAdj + CorrTpa
                End If
                If .Fcn100.Fe > 0 Then
                    aSumData.Fcn100.TwFe = aSumData.Fcn100.TwFe + CorrTpa
                End If
                If .Fcn100.FeAdj > 0 Then
                    aSumData.Fcn100.TwFeAdj = aSumData.Fcn100.TwFeAdj + CorrTpa
                End If
                If .Fcn100.Al > 0 Then
                    aSumData.Fcn100.TwAl = aSumData.Fcn100.TwAl + CorrTpa
                End If
                If .Fcn100.Mg > 0 Then
                    aSumData.Fcn100.TwMg = aSumData.Fcn100.TwMg + CorrTpa
                End If
                If .Fcn100.Ca > 0 Then
                    aSumData.Fcn100.TwCa = aSumData.Fcn100.TwCa + CorrTpa
                End If
                aSumData.Fcn100.BplTons = aSumData.Fcn100.BplTons + CorrTpa * .Fcn100.Bpl
                aSumData.Fcn100.InsTons = aSumData.Fcn100.InsTons + CorrTpa * .Fcn100.Ins
                aSumData.Fcn100.IaTons = aSumData.Fcn100.IaTons + CorrTpa * .Fcn100.Ia
                aSumData.Fcn100.IaAdjTons = aSumData.Fcn100.IaAdjTons + CorrTpa * .Fcn100.IaAdj
                aSumData.Fcn100.FeTons = aSumData.Fcn100.FeTons + CorrTpa * .Fcn100.Fe
                aSumData.Fcn100.FeAdjTons = aSumData.Fcn100.FeAdjTons + CorrTpa * .Fcn100.FeAdj
                aSumData.Fcn100.AlTons = aSumData.Fcn100.AlTons + CorrTpa * .Fcn100.Al
                aSumData.Fcn100.MgTons = aSumData.Fcn100.MgTons + CorrTpa * .Fcn100.Mg
                aSumData.Fcn100.CaTons = aSumData.Fcn100.CaTons + CorrTpa * .Fcn100.Ca
                '-----
                'Fine concentrate  100%  Rejected somewhere
                '09/11/2009, lss -- Added the following
                If aRcvryParamsData.CanSelectRejectTcn = True And InclFcn = False Then
                    CorrTpa = Round(.Fcn100.Tpa * CorrFactor, 0)
                    aSumData.TcnRej.Tpa = aSumData.TcnRej.Tpa + CorrTpa
                    If .Fcn100.Bpl > 0 Then
                        aSumData.TcnRej.TwBpl = aSumData.TcnRej.TwBpl + CorrTpa
                    End If
                    If .Fcn100.Ins > 0 Then
                        aSumData.TcnRej.TwIns = aSumData.TcnRej.TwIns + CorrTpa
                    End If
                    If .Fcn100.Ia > 0 Then
                        aSumData.TcnRej.TwIa = aSumData.TcnRej.TwIa + CorrTpa
                    End If
                    If .Fcn100.IaAdj > 0 Then
                        aSumData.TcnRej.TwIaAdj = aSumData.TcnRej.TwIaAdj + CorrTpa
                    End If
                    If .Fcn100.Fe > 0 Then
                        aSumData.TcnRej.TwFe = aSumData.TcnRej.TwFe + CorrTpa
                    End If
                    If .Fcn100.FeAdj > 0 Then
                        aSumData.TcnRej.TwFeAdj = aSumData.TcnRej.TwFeAdj + CorrTpa
                    End If
                    If .Fcn100.Al > 0 Then
                        aSumData.TcnRej.TwAl = aSumData.TcnRej.TwAl + CorrTpa
                    End If
                    If .Fcn100.Mg > 0 Then
                        aSumData.TcnRej.TwMg = aSumData.TcnRej.TwMg + CorrTpa
                    End If
                    If .Fcn100.Ca > 0 Then
                        aSumData.TcnRej.TwCa = aSumData.TcnRej.TwCa + CorrTpa
                    End If
                    aSumData.TcnRej.BplTons = aSumData.TcnRej.BplTons + CorrTpa * .Fcn100.Bpl
                    aSumData.TcnRej.InsTons = aSumData.TcnRej.InsTons + CorrTpa * .Fcn100.Ins
                    aSumData.TcnRej.IaTons = aSumData.TcnRej.IaTons + CorrTpa * .Fcn100.Ia
                    aSumData.TcnRej.IaAdjTons = aSumData.TcnRej.IaAdjTons + CorrTpa * .Fcn100.IaAdj
                    aSumData.TcnRej.FeTons = aSumData.TcnRej.FeTons + CorrTpa * .Fcn100.Fe
                    aSumData.TcnRej.FeAdjTons = aSumData.TcnRej.FeAdjTons + CorrTpa * .Fcn100.FeAdj
                    aSumData.TcnRej.AlTons = aSumData.TcnRej.AlTons + CorrTpa * .Fcn100.Al
                    aSumData.TcnRej.MgTons = aSumData.TcnRej.MgTons + CorrTpa * .Fcn100.Mg
                    aSumData.TcnRej.CaTons = aSumData.TcnRej.CaTons + CorrTpa * .Fcn100.Ca
                End If
                '-----
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO  100%
                '------------------------------------------
                'Currently in Public Sub AddSplToHoleSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant = True Or
                aRcvryParamsData.UseDoloflotPlantFco = True Then
                    'Off-spec pebble MgO plant input  100%
                    CorrTpa = Round(.MgPltInp100.Tpa * CorrFactor, 0)
                    aSumData.MgPltInp100.Tpa = aSumData.MgPltInp100.Tpa + CorrTpa
                    If .MgPltInp100.Bpl > 0 Then
                        aSumData.MgPltInp100.TwBpl = aSumData.MgPltInp100.TwBpl + CorrTpa
                    End If
                    If .MgPltInp100.Ins > 0 Then
                        aSumData.MgPltInp100.TwIns = aSumData.MgPltInp100.TwIns + CorrTpa
                    End If
                    If .MgPltInp100.Ia > 0 Then
                        aSumData.MgPltInp100.TwIa = aSumData.MgPltInp100.TwIa + CorrTpa
                    End If
                    If .MgPltInp100.Fe > 0 Then
                        aSumData.MgPltInp100.TwFe = aSumData.MgPltInp100.TwFe + CorrTpa
                    End If

                    'Currently in Sub AddSplToHoleSumDataComp.
                    '03/24/2011**, lss
                    If .MgPltInp100.IaAdj > 0 Then
                        aSumData.MgPltInp100.TwIaAdj = aSumData.MgPltInp100.TwIaAdj + CorrTpa
                    End If
                    If .MgPltInp100.FeAdj > 0 Then
                        aSumData.MgPltInp100.TwFeAdj = aSumData.MgPltInp100.TwFeAdj + CorrTpa
                    End If

                    If .MgPltInp100.Al > 0 Then
                        aSumData.MgPltInp100.TwAl = aSumData.MgPltInp100.TwAl + CorrTpa
                    End If
                    If .MgPltInp100.Mg > 0 Then
                        aSumData.MgPltInp100.TwMg = aSumData.MgPltInp100.TwMg + CorrTpa
                    End If
                    If .MgPltInp100.Ca > 0 Then
                        aSumData.MgPltInp100.TwCa = aSumData.MgPltInp100.TwCa + CorrTpa
                    End If
                    aSumData.MgPltInp100.BplTons = aSumData.MgPltInp100.BplTons + CorrTpa * .MgPltInp100.Bpl
                    aSumData.MgPltInp100.InsTons = aSumData.MgPltInp100.InsTons + CorrTpa * .MgPltInp100.Ins
                    aSumData.MgPltInp100.IaTons = aSumData.MgPltInp100.IaTons + CorrTpa * .MgPltInp100.Ia
                    aSumData.MgPltInp100.FeTons = aSumData.MgPltInp100.FeTons + CorrTpa * .MgPltInp100.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltInp100.IaAdjTons = aSumData.MgPltInp100.IaAdjTons + CorrTpa * .MgPltInp100.IaAdj
                    aSumData.MgPltInp100.FeAdjTons = aSumData.MgPltInp100.FeAdjTons + CorrTpa * .MgPltInp100.FeAdj

                    aSumData.MgPltInp100.AlTons = aSumData.MgPltInp100.AlTons + CorrTpa * .MgPltInp100.Al
                    aSumData.MgPltInp100.MgTons = aSumData.MgPltInp100.MgTons + CorrTpa * .MgPltInp100.Mg
                    aSumData.MgPltInp100.CaTons = aSumData.MgPltInp100.CaTons + CorrTpa * .MgPltInp100.Ca

                    'Off-spec pebble MgO plant reject  100%
                    CorrTpa = Round(.MgPltRej100.Tpa * CorrFactor, 0)
                    aSumData.MgPltRej100.Tpa = aSumData.MgPltRej100.Tpa + CorrTpa
                    If .MgPltRej100.Bpl > 0 Then
                        aSumData.MgPltRej100.TwBpl = aSumData.MgPltRej100.TwBpl + CorrTpa
                    End If
                    If .MgPltRej100.Ins > 0 Then
                        aSumData.MgPltRej100.TwIns = aSumData.MgPltRej100.TwIns + CorrTpa
                    End If
                    If .MgPltRej100.Ia > 0 Then
                        aSumData.MgPltRej100.TwIa = aSumData.MgPltRej100.TwIa + CorrTpa
                    End If
                    If .MgPltRej100.Fe > 0 Then
                        aSumData.MgPltRej100.TwFe = aSumData.MgPltRej100.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss
                    If .MgPltRej100.IaAdj > 0 Then
                        aSumData.MgPltRej100.TwIaAdj = aSumData.MgPltRej100.TwIaAdj + CorrTpa
                    End If
                    If .MgPltRej100.FeAdj > 0 Then
                        aSumData.MgPltRej100.TwFeAdj = aSumData.MgPltRej100.TwFeAdj + CorrTpa
                    End If

                    If .MgPltRej100.Al > 0 Then
                        aSumData.MgPltRej100.TwAl = aSumData.MgPltRej100.TwAl + CorrTpa
                    End If
                    If .MgPltRej100.Mg > 0 Then
                        aSumData.MgPltRej100.TwMg = aSumData.MgPltRej100.TwMg + CorrTpa
                    End If
                    If .MgPltRej100.Ca > 0 Then
                        aSumData.MgPltRej100.TwCa = aSumData.MgPltRej100.TwCa + CorrTpa
                    End If
                    aSumData.MgPltRej100.BplTons = aSumData.MgPltRej100.BplTons + CorrTpa * .MgPltRej100.Bpl
                    aSumData.MgPltRej100.InsTons = aSumData.MgPltRej100.InsTons + CorrTpa * .MgPltRej100.Ins
                    aSumData.MgPltRej100.IaTons = aSumData.MgPltRej100.IaTons + CorrTpa * .MgPltRej100.Ia
                    aSumData.MgPltRej100.FeTons = aSumData.MgPltRej100.FeTons + CorrTpa * .MgPltRej100.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltRej100.IaAdjTons = aSumData.MgPltRej100.IaAdjTons + CorrTpa * .MgPltRej100.IaAdj
                    aSumData.MgPltRej100.FeAdjTons = aSumData.MgPltRej100.FeAdjTons + CorrTpa * .MgPltRej100.FeAdj

                    aSumData.MgPltRej100.AlTons = aSumData.MgPltRej100.AlTons + CorrTpa * .MgPltRej100.Al
                    aSumData.MgPltRej100.MgTons = aSumData.MgPltRej100.MgTons + CorrTpa * .MgPltRej100.Mg
                    aSumData.MgPltRej100.CaTons = aSumData.MgPltRej100.CaTons + CorrTpa * .MgPltRej100.Ca

                    'Off-spec pebble MgO plant product  100%
                    CorrTpa = Round(.MgPltProd100.Tpa * CorrFactor, 0)
                    aSumData.MgPltProd100.Tpa = aSumData.MgPltProd100.Tpa + CorrTpa
                    If .MgPltProd100.Bpl > 0 Then
                        aSumData.MgPltProd100.TwBpl = aSumData.MgPltProd100.TwBpl + CorrTpa
                    End If
                    If .MgPltProd100.Ins > 0 Then
                        aSumData.MgPltProd100.TwIns = aSumData.MgPltProd100.TwIns + CorrTpa
                    End If
                    If .MgPltProd100.Ia > 0 Then
                        aSumData.MgPltProd100.TwIa = aSumData.MgPltProd100.TwIa + CorrTpa
                    End If
                    If .MgPltProd100.Fe > 0 Then
                        aSumData.MgPltProd100.TwFe = aSumData.MgPltProd100.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss
                    If .MgPltProd100.IaAdj > 0 Then
                        aSumData.MgPltProd100.TwIaAdj = aSumData.MgPltProd100.TwIaAdj + CorrTpa
                    End If
                    If .MgPltProd100.FeAdj > 0 Then
                        aSumData.MgPltProd100.TwFeAdj = aSumData.MgPltProd100.TwFeAdj + CorrTpa
                    End If

                    If .MgPltProd100.Al > 0 Then
                        aSumData.MgPltProd100.TwAl = aSumData.MgPltProd100.TwAl + CorrTpa
                    End If
                    If .MgPltProd100.Mg > 0 Then
                        aSumData.MgPltProd100.TwMg = aSumData.MgPltProd100.TwMg + CorrTpa
                    End If
                    If .MgPltProd100.Ca > 0 Then
                        aSumData.MgPltProd100.TwCa = aSumData.MgPltProd100.TwCa + CorrTpa
                    End If
                    aSumData.MgPltProd100.BplTons = aSumData.MgPltProd100.BplTons + CorrTpa * .MgPltProd100.Bpl
                    aSumData.MgPltProd100.InsTons = aSumData.MgPltProd100.InsTons + CorrTpa * .MgPltProd100.Ins
                    aSumData.MgPltProd100.IaTons = aSumData.MgPltProd100.IaTons + CorrTpa * .MgPltProd100.Ia
                    aSumData.MgPltProd100.FeTons = aSumData.MgPltProd100.FeTons + CorrTpa * .MgPltProd100.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltProd100.IaAdjTons = aSumData.MgPltProd100.IaAdjTons + CorrTpa * .MgPltProd100.IaAdj
                    aSumData.MgPltProd100.FeAdjTons = aSumData.MgPltProd100.FeAdjTons + CorrTpa * .MgPltProd100.FeAdj

                    aSumData.MgPltProd100.AlTons = aSumData.MgPltProd100.AlTons + CorrTpa * .MgPltProd100.Al
                    aSumData.MgPltProd100.MgTons = aSumData.MgPltProd100.MgTons + CorrTpa * .MgPltProd100.Mg
                    aSumData.MgPltProd100.CaTons = aSumData.MgPltProd100.CaTons + CorrTpa * .MgPltProd100.Ca
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA  100%
                '------------------
                'Currently in Public Sub AddSplToHoleSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                    CorrTpa = Round(.DfFpbInp100.Tpa * CorrFactor, 0)
                    'Doloflot plant fine pebble input  ProdCoeff
                    aSumData.DfFpbInp100.Tpa = aSumData.DfFpbInp100.Tpa + CorrTpa
                    If .DfFpbInp100.Bpl > 0 Then
                        aSumData.DfFpbInp100.TwBpl = aSumData.DfFpbInp100.TwBpl + CorrTpa
                    End If
                    If .DfFpbInp100.Ins > 0 Then
                        aSumData.DfFpbInp100.TwIns = aSumData.DfFpbInp100.TwIns + CorrTpa
                    End If
                    If .DfFpbInp100.Ia > 0 Then
                        aSumData.DfFpbInp100.TwIa = aSumData.DfFpbInp100.TwIa + CorrTpa
                    End If
                    If .DfFpbInp100.Fe > 0 Then
                        aSumData.DfFpbInp100.TwFe = aSumData.DfFpbInp100.TwFe + CorrTpa
                    End If
                    If .DfFpbInp100.FeAdj > 0 Then
                        aSumData.DfFpbInp100.TwFeAdj = aSumData.DfFpbInp100.TwFeAdj + CorrTpa
                    End If
                    If .DfFpbInp100.Al > 0 Then
                        aSumData.DfFpbInp100.TwAl = aSumData.DfFpbInp100.TwAl + CorrTpa
                    End If
                    If .DfFpbInp100.Mg > 0 Then
                        aSumData.DfFpbInp100.TwMg = aSumData.DfFpbInp100.TwMg + CorrTpa
                    End If
                    If .DfFpbInp100.Ca > 0 Then
                        aSumData.DfFpbInp100.TwCa = aSumData.DfFpbInp100.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbInp100.BplTons = aSumData.DfFpbInp100.BplTons + CorrTpa * .DfFpbInp100.Bpl
                    aSumData.DfFpbInp100.InsTons = aSumData.DfFpbInp100.InsTons + CorrTpa * .DfFpbInp100.Ins
                    aSumData.DfFpbInp100.IaTons = aSumData.DfFpbInp100.IaTons + CorrTpa * .DfFpbInp100.Ia
                    aSumData.DfFpbInp100.FeTons = aSumData.DfFpbInp100.FeTons + CorrTpa * .DfFpbInp100.Fe
                    aSumData.DfFpbInp100.FeAdjTons = aSumData.DfFpbInp100.FeAdjTons + CorrTpa * .DfFpbInp100.FeAdj
                    aSumData.DfFpbInp100.AlTons = aSumData.DfFpbInp100.AlTons + CorrTpa * .DfFpbInp100.Al
                    aSumData.DfFpbInp100.MgTons = aSumData.DfFpbInp100.MgTons + CorrTpa * .DfFpbInp100.Mg
                    aSumData.DfFpbInp100.CaTons = aSumData.DfFpbInp100.CaTons + CorrTpa * .DfFpbInp100.Ca

                    'Doloflot plant fine pebble reject  ProdCoeff -- no "reject" for Doloflot plant!

                    'Doloflot plant fine pebble product  ProdCoeff
                    CorrTpa = Round(.DfFpbProd100.Tpa * CorrFactor, 0)
                    aSumData.DfFpbProd100.Tpa = aSumData.DfFpbProd100.Tpa + CorrTpa
                    If .DfFpbProd100.Bpl > 0 Then
                        aSumData.DfFpbProd100.TwBpl = aSumData.DfFpbProd100.TwBpl + CorrTpa
                    End If
                    If .DfFpbProd100.Ins > 0 Then
                        aSumData.DfFpbProd100.TwIns = aSumData.DfFpbProd100.TwIns + CorrTpa
                    End If
                    If .DfFpbProd100.Ia > 0 Then
                        aSumData.DfFpbProd100.TwIa = aSumData.DfFpbProd100.TwIa + CorrTpa
                    End If
                    If .DfFpbProd100.Fe > 0 Then
                        aSumData.DfFpbProd100.TwFe = aSumData.DfFpbProd100.TwFe + CorrTpa
                    End If
                    If .DfFpbProd100.FeAdj > 0 Then
                        aSumData.DfFpbProd100.TwFeAdj = aSumData.DfFpbProd100.TwFeAdj + CorrTpa
                    End If
                    If .DfFpbProd100.Al > 0 Then
                        aSumData.DfFpbProd100.TwAl = aSumData.DfFpbProd100.TwAl + CorrTpa
                    End If
                    If .DfFpbProd100.Mg > 0 Then
                        aSumData.DfFpbProd100.TwMg = aSumData.DfFpbProd100.TwMg + CorrTpa
                    End If
                    If .DfFpbProd100.Ca > 0 Then
                        aSumData.DfFpbProd100.TwCa = aSumData.DfFpbProd100.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbProd100.BplTons = aSumData.DfFpbProd100.BplTons + CorrTpa * .DfFpbProd100.Bpl
                    aSumData.DfFpbProd100.InsTons = aSumData.DfFpbProd100.InsTons + CorrTpa * .DfFpbProd100.Ins
                    aSumData.DfFpbProd100.IaTons = aSumData.DfFpbProd100.IaTons + CorrTpa * .DfFpbProd100.Ia
                    aSumData.DfFpbProd100.FeTons = aSumData.DfFpbProd100.FeTons + CorrTpa * .DfFpbProd100.Fe
                    aSumData.DfFpbProd100.FeAdjTons = aSumData.DfFpbProd100.FeAdjTons + CorrTpa * .DfFpbProd100.FeAdj
                    aSumData.DfFpbProd100.AlTons = aSumData.DfFpbProd100.AlTons + CorrTpa * .DfFpbProd100.Al
                    aSumData.DfFpbProd100.MgTons = aSumData.DfFpbProd100.MgTons + CorrTpa * .DfFpbProd100.Mg
                    aSumData.DfFpbProd100.CaTons = aSumData.DfFpbProd100.CaTons + CorrTpa * .DfFpbProd100.Ca
                    '-----
                    CorrTpa = Round(.DfIpInp100.Tpa * CorrFactor, 0)
                    'Doloflot plant IP input  ProdCoeff
                    aSumData.DfIpInp100.Tpa = aSumData.DfIpInp100.Tpa + CorrTpa
                    If .DfIpInp100.Bpl > 0 Then
                        aSumData.DfIpInp100.TwBpl = aSumData.DfIpInp100.TwBpl + CorrTpa
                    End If
                    If .DfIpInp100.Ins > 0 Then
                        aSumData.DfIpInp100.TwIns = aSumData.DfIpInp100.TwIns + CorrTpa
                    End If
                    If .DfIpInp100.Ia > 0 Then
                        aSumData.DfIpInp100.TwIa = aSumData.DfIpInp100.TwIa + CorrTpa
                    End If
                    If .DfIpInp100.Fe > 0 Then
                        aSumData.DfIpInp100.TwFe = aSumData.DfIpInp100.TwFe + CorrTpa
                    End If
                    If .DfIpInp100.FeAdj > 0 Then
                        aSumData.DfIpInp100.TwFeAdj = aSumData.DfIpInp100.TwFeAdj + CorrTpa
                    End If
                    If .DfIpInp100.Al > 0 Then
                        aSumData.DfIpInp100.TwAl = aSumData.DfIpInp100.TwAl + CorrTpa
                    End If
                    If .DfIpInp100.Mg > 0 Then
                        aSumData.DfIpInp100.TwMg = aSumData.DfIpInp100.TwMg + CorrTpa
                    End If
                    If .DfIpInp100.Ca > 0 Then
                        aSumData.DfIpInp100.TwCa = aSumData.DfIpInp100.TwCa + CorrTpa
                    End If
                    aSumData.DfIpInp100.BplTons = aSumData.DfIpInp100.BplTons + CorrTpa * .DfIpInp100.Bpl
                    aSumData.DfIpInp100.InsTons = aSumData.DfIpInp100.InsTons + CorrTpa * .DfIpInp100.Ins
                    aSumData.DfIpInp100.IaTons = aSumData.DfIpInp100.IaTons + CorrTpa * .DfIpInp100.Ia
                    aSumData.DfIpInp100.FeTons = aSumData.DfIpInp100.FeTons + CorrTpa * .DfIpInp100.Fe
                    aSumData.DfIpInp100.FeAdjTons = aSumData.DfIpInp100.FeAdjTons + CorrTpa * .DfIpInp100.FeAdj
                    aSumData.DfIpInp100.AlTons = aSumData.DfIpInp100.AlTons + CorrTpa * .DfIpInp100.Al
                    aSumData.DfIpInp100.MgTons = aSumData.DfIpInp100.MgTons + CorrTpa * .DfIpInp100.Mg
                    aSumData.DfIpInp100.CaTons = aSumData.DfIpInp100.CaTons + CorrTpa * .DfIpInp100.Ca

                    'Doloflot plant IP reject  ProdCoeff -- no "reject" for Doloflot plant!

                    'Doloflot plant IP product  ProdCoeff
                    CorrTpa = Round(.DfIpProd100.Tpa * CorrFactor, 0)
                    aSumData.DfIpProd100.Tpa = aSumData.DfIpProd100.Tpa + CorrTpa
                    If .DfIpProd100.Bpl > 0 Then
                        aSumData.DfIpProd100.TwBpl = aSumData.DfIpProd100.TwBpl + CorrTpa
                    End If
                    If .DfIpProd100.Ins > 0 Then
                        aSumData.DfIpProd100.TwIns = aSumData.DfIpProd100.TwIns + CorrTpa
                    End If
                    If .DfIpProd100.Ia > 0 Then
                        aSumData.DfIpProd100.TwIa = aSumData.DfIpProd100.TwIa + CorrTpa
                    End If
                    If .DfIpProd100.Fe > 0 Then
                        aSumData.DfIpProd100.TwFe = aSumData.DfIpProd100.TwFe + CorrTpa
                    End If
                    If .DfIpProd100.FeAdj > 0 Then
                        aSumData.DfIpProd100.TwFeAdj = aSumData.DfIpProd100.TwFeAdj + CorrTpa
                    End If
                    If .DfIpProd100.Al > 0 Then
                        aSumData.DfIpProd100.TwAl = aSumData.DfIpProd100.TwAl + CorrTpa
                    End If
                    If .DfIpProd100.Mg > 0 Then
                        aSumData.DfIpProd100.TwMg = aSumData.DfIpProd100.TwMg + CorrTpa
                    End If
                    If .DfIpProd100.Ca > 0 Then
                        aSumData.DfIpProd100.TwCa = aSumData.DfIpProd100.TwCa + CorrTpa
                    End If
                    aSumData.DfIpProd100.BplTons = aSumData.DfIpProd100.BplTons + CorrTpa * .DfIpProd100.Bpl
                    aSumData.DfIpProd100.InsTons = aSumData.DfIpProd100.InsTons + CorrTpa * .DfIpProd100.Ins
                    aSumData.DfIpProd100.IaTons = aSumData.DfIpProd100.IaTons + CorrTpa * .DfIpProd100.Ia
                    aSumData.DfIpProd100.FeTons = aSumData.DfIpProd100.FeTons + CorrTpa * .DfIpProd100.Fe
                    aSumData.DfIpProd100.FeAdjTons = aSumData.DfIpProd100.FeAdjTons + CorrTpa * .DfIpProd100.FeAdj
                    aSumData.DfIpProd100.AlTons = aSumData.DfIpProd100.AlTons + CorrTpa * .DfIpProd100.Al
                    aSumData.DfIpProd100.MgTons = aSumData.DfIpProd100.MgTons + CorrTpa * .DfIpProd100.Mg
                    aSumData.DfIpProd100.CaTons = aSumData.DfIpProd100.CaTons + CorrTpa * .DfIpProd100.Ca
                End If
                '-----
                'Waste clay  100%
                CorrTpa = Round(.Wcl100.Tpa * CorrFactor, 0)
                aSumData.Wcl100.Tpa = aSumData.Wcl100.Tpa + CorrTpa
                If .Wcl100.Bpl > 0 Then
                    aSumData.Wcl100.TwBpl = aSumData.Wcl100.TwBpl + CorrTpa
                End If
                aSumData.Wcl100.BplTons = aSumData.Wcl100.BplTons + CorrTpa * .Wcl100.Bpl
                '-----
                'Coarse feed  100%
                CorrTpa = Round(.Cfd100.Tpa * CorrFactor, 0)
                aSumData.Cfd100.Tpa = aSumData.Cfd100.Tpa + CorrTpa
                If .Cfd100.Bpl > 0 Then
                    aSumData.Cfd100.TwBpl = aSumData.Cfd100.TwBpl + CorrTpa
                End If
                aSumData.Cfd100.BplTons = aSumData.Cfd100.BplTons + CorrTpa * .Cfd100.Bpl
                '-----
                'Fine feed  100%
                CorrTpa = Round(.Ffd100.Tpa * CorrFactor, 0)
                aSumData.Ffd100.Tpa = aSumData.Ffd100.Tpa + CorrTpa
                If .Ffd100.Bpl > 0 Then
                    aSumData.Ffd100.TwBpl = aSumData.Ffd100.TwBpl + CorrTpa
                End If
                aSumData.Ffd100.BplTons = aSumData.Ffd100.BplTons + CorrTpa * .Ffd100.Bpl
                '-----
                'Total tails  100%
                CorrTpa = Round(.Ttl100.Tpa * CorrFactor, 0)
                aSumData.Ttl100.Tpa = aSumData.Ttl100.Tpa + CorrTpa
                If .Ttl100.Bpl > 0 Then
                    aSumData.Ttl100.TwBpl = aSumData.Ttl100.TwBpl + CorrTpa
                End If
                aSumData.Ttl100.BplTons = aSumData.Ttl100.BplTons + CorrTpa * .Ttl100.Bpl
                '-----
                'Matrix  100%
                'Currently in Public Sub AddSplToHoleSumDataComp
                CorrTpa = Round(.MtxTPA * CorrFactor, 0)
                aSumData.MtxTpa100 = aSumData.MtxTpa100 + CorrTpa

                'Miscellaneous  Miscellaneous
                'Miscellaneous  Miscellaneous
                'Miscellaneous  Miscellaneous

                'Currently in Public Sub AddSplToHoleSumDataComp

                aSumData.MtxFt = aSumData.MtxFt + AdjSplThk
                aSumData.MtxDensityFt = aSumData.MtxDensityFt + .MtxDensity * AdjSplThk

                'Sum number of mineable splits.
                aSumData.NumMineableSplits = aSumData.NumMineableSplits + 1
                If SplMineability = "MF" Then
                    aSumData.NumMineableSplitsForced = aSumData.NumMineableSplitsForced + 1
                End If

                'May not have a matrix %solids!
                If .MtxPctSol = 0 Then
                    MtxPctSol = 82.5
                Else
                    MtxPctSol = .MtxPctSol
                End If

                'We are summing 100% stuff here to get this aSumData.MtxTpaWet value!!!!
                CorrTpa = Round(.MtxTPA * CorrFactor, 0)
                aSumData.MtxTpaWet = aSumData.MtxTpaWet + Round(CorrTpa / (MtxPctSol / 100), 0)

                'Sheryl - Assigned the Atpr Wt Pct value of the mineable Split to the Hole
                aSumData.HoleAtprWtPct = .ATpr.WtPct
            Else
                'This is an unminable split!
                '09/02/2008, lss  Added this code -- need to handle interburdens that are beneath
                'the max mining depth correctly (MaxTotDepthSpl).
                If .SplitDepthBot < aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                    AdjSplThk = aSplData.SplitThck
                Else
                    AdjSplThk = 0
                End If
            End If
        End With

        'Need to add this to aThkTable().  This will allow us eventually to
        'determine Ovb, Itb and Mtx thicknesses.  These thicknesses will be the
        'same for both ProdCoeff and 100%.
        For SplIdx = 1 To UBound(aThkTable)
            If aThkTable(SplIdx).SplNum = 0 Then
                aThkTable(SplIdx).SplNum = aSplData.SplitNumber
                aThkTable(SplIdx).SplThk = aSplData.SplitThck
                aThkTable(SplIdx).SplMineable = SplMineability
                aThkTable(SplIdx).SplitDepthTop = aSplData.SplitDepthTop
                aThkTable(SplIdx).SplitDepthBot = aSplData.SplitDepthBot
                aThkTable(SplIdx).SplAdjThk = AdjSplThk
                Exit For
            End If
        Next
    End Sub

    Public Sub AssignSplThks(ByRef aSumData As gRawProspSplRdctnSumType,
                         ByRef aHoleData As gRawProspSplRdctnType,
                         ByVal aThkTable() As gSplThkType)


        Dim OvbThk As Single
        Dim ItbThk As Single
        Dim MtxThk As Single
        Dim SplIdx As Integer
        Dim SplIdx2 As Integer
        Dim MineableFound As Boolean
        Dim BottomSpl As Boolean
        Dim MineableSplBelow As Boolean

        'Need to assign OvbThk, ItbThk, MtxThk in aSumData
        'The initial overburden thickness is in aHoleData

        OvbThk = aHoleData.OvbThk
        ItbThk = 0
        MtxThk = 0
        MineableFound = False
        BottomSpl = False
        MineableSplBelow = False

        For SplIdx = 1 To UBound(aThkTable)
            If aThkTable(SplIdx).SplNum <> 0 Then
                'Is this the bottom split?
                If aThkTable(SplIdx + 1).SplNum = 0 Then
                    BottomSpl = True
                End If

                'Is there a mineable split below this one?
                MineableSplBelow = False
                For SplIdx2 = SplIdx + 1 To UBound(aThkTable)
                    If (aThkTable(SplIdx2).SplMineable = "M" Or aThkTable(SplIdx2).SplMineable = "MF") And
                        aThkTable(SplIdx2).SplAdjThk > 0 Then
                        MineableSplBelow = True
                        Exit For
                    End If
                    If aThkTable(SplIdx2).SplNum = 0 Then
                        Exit For
                    End If
                Next SplIdx2

                'Add to Ovb' if necessary.
                If MineableFound = False And aThkTable(SplIdx).SplMineable = "U" Then
                    'Unmineable split at the top -- add to ovb
                    OvbThk = OvbThk + aThkTable(SplIdx).SplThk
                End If

                'Check for possible interburden.
                If MineableFound = True And aThkTable(SplIdx).SplMineable = "U" And
                MineableSplBelow = True Then
                    '09/02/2008, lss Was ItbThk = ItbThk + aThkTable(SplIdx).SplThk
                    'Made this change to handle potential interburdens that are below the
                    'max total mining depth (MaxTotDepthSpl)

                    ItbThk = ItbThk + aThkTable(SplIdx).SplAdjThk
                End If

                'Add to Mtx' if necessary.
                If aThkTable(SplIdx).SplMineable = "M" Or
                aThkTable(SplIdx).SplMineable = "MF" Then
                    MtxThk = MtxThk + aThkTable(SplIdx).SplAdjThk
                End If

                If aThkTable(SplIdx).SplMineable = "M" Or
                aThkTable(SplIdx).SplMineable = "MF" Then
                    MineableFound = True
                End If
            End If
        Next SplIdx

        'Assign to hole data
        With aHoleData
            .OvbThk = OvbThk
            .ItbThk = ItbThk
            .MtxThk = MtxThk
        End With

        'Assign to sum data
        With aSumData
            .OvbThk = OvbThk
            .ItbThk = ItbThk
            .MtxThk = MtxThk
        End With
    End Sub

    Public Sub AssignCompositedHoleData(ByRef aSsCompReview As AxvaSpread,
                                        ByRef aHoleData As gRawProspSplRdctnType)

        Dim ColIdx As Integer

        '1   HoleLocation  (Description)
        '2   SplitNumber
        '3   ProspDate
        '4   MineableCalcd
        '5   MineableOride
        '6   Forty
        '7   Xcoord
        '8   Ycoord
        '9   Elevation
        '10  Ownership
        '11  MinedOutStatus
        '12  HoleType
        '13  ExpDrill
        '14  TotDepth
        '15  SplitDepthTop
        '16  SplitDepthBot
        '17  SplitThck
        '18  Override
        '19  Key
        '20  Class
        '21  Bed
        '22  Level
        '23  Horizon
        '-----
        '24  MtxxOnSpec PC  Split
        '25  TotxOnSpec PC  Split
        '26  MtxxAll    PC  Split
        '27  TotxAll    PC  Split
        '-----
        '28  MtxTpa     100%
        '29  MtxBpl
        '30  MtxDensity 100%
        '-----
        '31  OsTpa      PC
        '32  OsWtPct    PC
        '33  OsBpl      PC
        '34  OsIns      PC
        '35  OsIa       PC
        '36  OsFe       PC
        '37  OsAl       PC
        '38  OsMg       PC
        '39  OsCa       PC
        '40  OsMer      PC
        '41  OsCpr      PC
        '-----
        '42  TpbTpa     PC
        '43  TpbWtPct   PC
        '44  TpbBpl     PC
        '45  TpbIns     PC
        '46  TpbIa      PC
        '47  TpbFe      PC
        '48  TpbAl      PC
        '49  TpbMg      PC
        '50  TpbCa      PC
        '51  TpbMer     PC
        '52  TpbCpr     PC
        '-----
        '53  IpTpa      PC
        '54  IpWtPct    PC
        '55  IpBpl      PC
        '56  IpIns      PC
        '57  IpIa       PC
        '58  IpFe       PC
        '59  IpAl       PC
        '60  IpMg       PC
        '61  IpCa       PC
        '62  IpMer      PC
        '63  IpCpr      PC
        '-----
        '64  TcnTpa     PC
        '65  TcnWtPct   PC
        '66  TcnBpl     PC
        '67  TcnIns     PC
        '68  TcnIa      PC
        '69  TcnFe      PC
        '70  TcnAl      PC
        '71  TcnMg      PC
        '72  TcnCa      PC
        '73  TcnMer     PC
        '74  TcnCpr     PC
        '-----
        '75  CfdTpa     PC
        '76  CfdWtPct   PC
        '77  CfdBpl     PC
        '-----
        '78  FfdTpa     PC
        '79  FfdWtPct   PC
        '80  FfdBpl     PC
        '-----
        '81  WclTpa     PC
        '82  WclWtPct   PC
        '83  WclBpl     PC
        '-----
        '84  MtxColor
        '85  DegConsol
        '86  DigChar 1
        '87  PumpChar
        '88  Lithology
        '89  PhosphColor
        '-----
        '90  SurvCaddHoleId
        '-----
        '91  CpbTpa     PC
        '92  CpbWtPct   PC
        '93  CpbBpl     PC
        '94  CpbIns     PC
        '95  CpbIa      PC
        '96  CpbFe      PC
        '97  CpbAl      PC
        '98  CpbMg      PC
        '99  CpbCa      PC
        '100 CpbMer     PC
        '101 CpbCpr     PC
        '-----
        '102 FpbTpa     PC
        '103 FpbWtPct   PC
        '104 FpbBpl     PC
        '105 FpbIns     PC
        '106 FpbIa      PC
        '107 FpbFe      PC
        '108 FpbAl      PC
        '109 FpbMg      PC
        '110 FpbCa      PC
        '111 FpbMer     PC
        '112 FpbCpr     PC
        '-----
        '113 Barren split
        '-----
        '114 TlTpa      PC
        '115 TlWtPct    PC
        '116 TlBpl      PC
        '-----
        '117 TfdTpa     PC
        '118 TfdWtPct   PC
        '119 TfdBpl     PC
        '-----
        '120 TprTpa     PC
        '121 TprWtPct   PC
        '122 TprBpl     PC
        '123 TprIns     PC
        '124 TprIa      PC
        '125 TprFe      PC
        '126 TprAl      PC
        '127 TprMg      PC
        '128 TprCa      PC
        '129 TprMer     PC
        '130 TprCpr     PC
        '-----
        '131 OvbThk     The same for PC & 100%
        '132 ItbThk     The same for PC & 100%
        '133 MtxThk     The same for PC & 100%
        '-----
        '134 CcnTpa     PC
        '135 CcnWtPct   PC
        '136 CcnBpl     PC
        '137 CcnIns     PC
        '138 CcnIa      PC
        '139 CcnFe      PC
        '140 CcnAl      PC
        '141 CcnMg      PC
        '142 CcnCa      PC
        '143 CcnMer     PC
        '144 CcnCpr     PC
        '-----
        '145 FcnTpa     PC
        '146 FcnWtPct   PC
        '147 FcnBpl     PC
        '148 FcnIns     PC
        '149 FcnIa      PC
        '150 FcnFe      PC
        '151 FcnAl      PC
        '152 FcnMg      PC
        '153 FcnCa      PC
        '154 FcnMer     PC
        '155 FcnCpr     PC
        '-----
        '156 Sample ID
        '-----
        '157 Hardpan From
        '158 Hardpan To
        '159 Hardpan Thck
        '160 Hardpan Code
        '161 Not used
        '162 Not used
        '163 Not used
        '164 Not used
        '165 Not used
        '166 Not used
        '167 Not used
        '168 Not used
        '169 Not used
        '170 Not used
        '-----
        '171 Not used
        '172 Not used
        '173 Not used
        '174 Not used
        '175 Not used
        '176 Not used
        '177 Not used
        '178 Not used
        '179 Not used
        '180 Not used
        '181 Not used
        '182 Not used
        '183 Not used
        '184 Not used
        '185 Not used
        '186 Not used
        '187 Not used
        '188 Not used
        '189 Not used
        '-----
        '190 MineableHole     PC
        '-----
        '191 CpbMin Split     PC
        '192 FpbMin Split     PC
        '193 TpbMin Split     PC
        '194 CcnMin Split     PC
        '195 FcnMin Split     PC
        '196 TcnMin Split     PC
        '197 OsMin Split      PC
        '198 IpMin Split      PC
        '-----
        '199 Cpb100Tpa        100%
        '200 Cpb100WtPct      100%
        '201 Cpb100Bpl        100%
        '202 Cpb100Ins        100%
        '203 Cpb100Ia         100%
        '204 Cpb100Fe         100%
        '205 Cpb100Al         100%
        '206 Cpb100Mg         100%
        '207 Cpb100Ca         100%
        '208 Cpb100Mer        100%
        '209 Cpb100Cpr        100%
        '-----
        '210 Fpb100Tpa        100%
        '211 Fpb100WtPct      100%
        '212 Fpb100Bpl        100%
        '213 Fpb100Ins        100%
        '214 Fpb100Ia         100%
        '215 Fpb100Fe         100%
        '216 Fpb100Al         100%
        '217 Fpb100Mg         100%
        '218 Fpb100Ca         100%
        '219 Fpb100Mer        100%
        '220 Fpb100Cpr        100%
        '-----
        '221 Tl100Tpa         100%
        '222 Tl100WtPct       100%
        '223 Tl100Bpl         100%
        '-----
        '224 Tfd100Tpa        100%
        '225 Tfd100WtPct      100%
        '226 Tfd100Bpl        100%
        '-----
        '227 Tpr100Tpa        100%
        '228 Tpr100WtPct      100%
        '229 Tpr100Bpl        100%
        '230 Tpr100Ins        100%
        '231 Tpr100Ia         100%
        '232 Tpr100Fe         100%
        '233 Tpr100Al         100%
        '234 Tpr100Mg         100%
        '235 Tpr100Ca         100%
        '236 Tpr100Mer        100%
        '237 Tpr100Cpr        100%
        '-----
        '238 Ccn100Tpa        100%
        '239 Ccn100WtPct      100%
        '240 Ccn100Bpl        100%
        '241 Ccn100Ins        100%
        '242 Ccn100Ia         100%
        '243 Ccn100Fe         100%
        '244 Ccn100Al         100%
        '245 Ccn100Mg         100%
        '246 Ccn100Ca         100%
        '247 Ccn100Mer        100%
        '248 Ccn100Cpr        100%
        '-----
        '249 Fcn100Tpa        100%
        '250 Fcn100WtPct      100%
        '251 Fcn100Bpl        100%
        '252 Fcn100Ins        100%
        '253 Fcn100Ia         100%
        '254 Fcn100Fe         100%
        '255 Fcn100Al         100%
        '256 Fcn100Mg         100%
        '257 Fcn100Ca         100%
        '258 Fcn100Mer        100%
        '259 Fcn100Cpr        100%
        '-----
        '260 Os100Tpa         100%
        '261 Os100WtPct       100%
        '262 Os100Bpl         100%
        '263 Os100Ins         100%
        '264 Os100Ia          100%
        '265 Os100Fe          100%
        '266 Os100Al          100%
        '267 Os100Mg          100%
        '268 Os100Ca          100%
        '269 Os100Mer         100%
        '270 Os100Cpr         100%
        '-----
        '271 Tpb100Tpa        100%
        '272 Tpb100WtPct      100%
        '273 Tpb100Bpl        100%
        '274 Tpb100Ins        100%
        '275 Tpb100Ia         100%
        '276 Tpb100Fe         100%
        '277 Tpb100Al         100%
        '278 Tpb100Mg         100%
        '279 Tpb100Ca         100%
        '280 Tpb100Mer        100%
        '281 Tpb100Cpr        100%
        '-----
        '282 Ip100Tpa         100%
        '283 Ip100WtPct       100%
        '284 Ip100Bpl         100%
        '285 Ip100Ins         100%
        '286 Ip100Ia          100%
        '287 Ip100Fe          100%
        '288 Ip100Al          100%
        '289 Ip100Mg          100%
        '290 Ip100Ca          100%
        '291 Ip100Mer         100%
        '292 Ip100Cpr         100%
        '-----
        '293 Tcn100Tpa        100%
        '294 Tcn100WtPct      100%
        '295 Tcn100Bpl        100%
        '296 Tcn100Ins        100%
        '297 Tcn100Ia         100%
        '298 Tcn100Fe         100%
        '299 Tcn100Al         100%
        '300 Tcn100Mg         100%
        '301 Tcn100Ca         100%
        '302 Tcn100Mer        100%
        '303 Tcn100Cpr        100%
        '-----
        '304 Cfd100Tpa        100%
        '305 Cfd100WtPct      100%
        '306 Cfd100Bpl        100%
        '-----
        '307 Ffd100Tpa        100%
        '308 Ffd100WtPct      100%
        '309 Ffd100Bpl        100%
        '-----
        '310 Wcl100Tpa        100%
        '311 Wcl100WtPct      100%
        '312 Wcl100Bpl        100%
        '-----
        '313 MineableHole100  100%
        '314 MtxTpaPc         PC
        '-----
        '315 MtxxOnSpec100     100%  Split
        '316 TotxOnSpec100     100%  Split
        '317 MtxxAll100        100%  Split
        '318 TotxAll100        100%  Split
        '-----
        '319 CpbMinHole        PC  Hole
        '320 FpbMinHole        PC  Hole
        '321 TpbMinHole        PC  Hole
        '322 CcnMinHole        PC  Hole
        '323 FcnMinHole        PC  Hole
        '324 TcnMinHole        PC  Hole
        '325 OsMinHole         PC  Hole
        '326 IpMinHole         PC  Hole
        '-----
        '327 MtxxOnSpecPcHole  PC  Hole
        '328 TotxOnSpecPcHole  PC  Hole
        '329 MtxxAllPcHole     PC  Hole
        '330 TotxAllPcHole     PC  Hole
        '-----
        '331 MtxxOnSpec100Hole PC  Hole
        '332 TotxOnSpec100Hole PC  Hole
        '333 MtxxAll100Hole    PC  Hole
        '334 TotxAll100Hole    PC  Hole
        '-----
        '335 MtxPctMois
        '336 MtxPctSol
        '-----
        '457 TpbRejTpa     PC
        '458 TpbRejBpl     PC
        '459 TpbRejIns     PC
        '460 TpbRejIa      PC
        '461 TpbRejFe      PC
        '462 TpbRejAl      PC
        '463 TpbRejMg      PC
        '464 TpbRejCa      PC
        '-----
        '465 TpbRejTpa     %100
        '466 TpbRejBpl     %100
        '467 TpbRejIns     %100
        '468 TpbRejIa      %100
        '469 TpbRejFe      %100
        '470 TpbRejAl      %100
        '471 TpbRejMg      %100
        '472 TpbRejCa      %100
        '-----
        '473 OsFeAdj         PC
        '474 OsIaAdj         PC
        '475 OsMerAdj        PC
        '476 CpbFeAdj        PC
        '477 CpbIaAdj        PC
        '478 CpbMerAdj       PC
        '479 FpbFeAdj        PC
        '480 FpbIaAdj        PC
        '481 FpbMerAdj       PC
        '482 TpbFeAdj        PC
        '483 TpbIaAdj        PC
        '484 TpbMerAdj       PC
        '485 IpFeAdj         PC
        '486 IpIaAdj         PC
        '487 IpMerAdj        PC
        '488 CcnFeAdj        PC
        '489 CcnIaAdj        PC
        '490 CcnMerAdj       PC
        '491 FcnFeAdj        PC
        '492 FcnIaAdj        PC
        '493 FcnMerAdj       PC
        '494 TcnFeAdj        PC
        '495 TcnIaAdj        PC
        '496 TcnMerAdj       PC
        '497 TprFeAdj        PC
        '498 TprIaAdj        PC
        '499 TprMerAdj       PC
        '500 TpbRejFeAdj     PC
        '501 TpbRejIaAdj     PC
        '-----
        '502 Os100FeAdj      %100
        '503 Os100IaAdj      %100
        '504 Os100MerAdj     %100
        '505 Cpb100FeAdj     %100
        '506 Cpb100IaAdj     %100
        '507 Cpb100MerAdj    %100
        '508 Fpb100FeAdj     %100
        '509 Fpb100IaAdj     %100
        '510 Fpb100MerAdj    %100
        '511 Tpb100FeAdj     %100
        '512 Tpb100IaAdj     %100
        '513 Tpb100MerAdj    %100
        '514 Ip100FeAdj      %100
        '515 Ip100IaAdj      %100
        '516 Ip100MerAdj     %100
        '517 Ccn100FeAdj     %100
        '518 Ccn100IaAdj     %100
        '519 Ccn100MerAdj    %100
        '520 Fcn100FeAdj     %100
        '521 Fcn100IaAdj     %100
        '522 Fcn100MerAdj    %100
        '523 Tcn100FeAdj     %100
        '524 Tcn100IaAdj     %100
        '525 Tcn100MerAdj    %100
        '526 Tpr100FeAdj     %100
        '527 Tpr100IaAdj     %100
        '528 Tpr100MerAdj    %100
        '529 Tpb100RejFeAdj  %100
        '530 Tpb100RejIaAdj  %100
        '-----
        '09/11/2009, lss -- added 531 to 550
        '531 TcnRejTpa     PC
        '532 TcnRejBpl     PC
        '533 TcnRejIns     PC
        '534 TcnRejIa      PC
        '535 TcnRejFe      PC
        '536 TcnRejAl      PC
        '537 TcnRejMg      PC
        '538 TcnRejCa      PC
        '-----
        '539 TcnRejTpa 100 %100
        '540 TcnRejBpl 100 %100
        '541 TcnRejIns 100 %100
        '542 TcnRejIa  100 %100
        '543 TcnRejFe  100 %100
        '544 TcnRejAl  100 %100
        '545 TcnRejMg  100 %100
        '546 TcnRejCa  100 %100
        '-----
        '547 TcnRejFeAdj     PC
        '548 TcnRejIaAdj     PC
        '549 Tcn100RejFeAdj  %100
        '550 Tcn100RejIaAdj  %100    heyjud
        '-----
        '06/15/2010, lss -- Added 551 to 776
        'DOLOFLOT STUFF
        '551 DfFpbInp PC TPA
        '552 DfFpbInp PC Wt%
        '553 DfFpbInp PC BPL
        '554 DfFpbInp PC Insol
        '555 DfFpbInp PC I&A
        '556 DfFpbInp PC Fe2O3
        '557 DfFpbInp PC Al2O3
        '558 DfFpbInp PC MgO
        '559 DfFpbInp PC CaO
        '560 DfFpbInp PC MER
        '561 DfFpbInp PC CPR
        '562 DfFpbInp PC Fe2O3 Adj
        '563 DfFpbInp PC I&A Adj
        '564 DfFpbInp PC MER Adj
        '-----
        '565 DfFpbRej PC TPA          Not needed!
        '566 DfFpbRej PC Wt%          Not needed!
        '567 DfFpbRej PC BPL          Not needed!
        '568 DfFpbRej PC Insol        Not needed!
        '569 DfFpbRej PC I&A          Not needed!
        '570 DfFpbRej PC Fe2O3        Not needed!
        '571 DfFpbRej PC Al2O3        Not needed!
        '572 DfFpbRej PC MgO          Not needed!
        '573 DfFpbRej PC CaO          Not needed!
        '574 DfFpbRej PC MER          Not needed!
        '575 DfFpbRej PC CPR          Not needed!
        '576 DfFpbRej PC Fe2O3 Adj    Not needed!
        '577 DfFpbRej PC I&A Adj      Not needed!
        '578 DfFpbRej PC MER Adj      Not needed!
        '-----
        '579 DfFpbProd PC TPA
        '580 DfFpbProd PC Wt%
        '581 DfFpbProd PC BPL
        '582 DfFpbProd PC Insol
        '583 DfFpbProd PC I&A
        '584 DfFpbProd PC Fe2O3
        '585 DfFpbProd PC Al2O3
        '586 DfFpbProd PC MgO
        '587 DfFpbProd PC CaO
        '588 DfFpbProd PC MER
        '589 DfFpbProd PC CPR
        '590 DfFpbProd PC Fe2O3 Adj
        '591 DfFpbProd PC I&A Adj
        '592 DfFpbProd PC MER Adj
        '-----
        '593 DfIpInp PC TPA
        '594 DfIpInp PC Wt%
        '595 DfIpInp PC BPL
        '596 DfIpInp PC Insol
        '597 DfIpInp PC I&A
        '598 DfIpInp PC Fe2O3
        '599 DfIpInp PC Al2O3
        '600 DfIpInp PC MgO
        '601 DfIpInp PC CaO
        '602 DfIpInp PC MER
        '603 DfIpInp PC CPR
        '604 DfIpInp PC Fe2O3 Adj
        '605 DfIpInp PC I&A Adj
        '606 DfIpInp PC MER Adj
        '-----
        '607 DfIpRej PC TPA          Not needed!
        '608 DfIpRej PC Wt%          Not needed!
        '609 DfIpRej PC BPL          Not needed!
        '610 DfIpRej PC Insol        Not needed!
        '611 DfIpRej PC I&A          Not needed!
        '612 DfIpRej PC Fe2O3        Not needed!
        '613 DfIpRej PC Al2O3        Not needed!
        '614 DfIpRej PC MgO          Not needed!
        '615 DfIpRej PC CaO          Not needed!
        '616 DfIpRej PC MER          Not needed!
        '617 DfIpRej PC CPR          Not needed!
        '618 DfIpRej PC Fe2O3 Adj    Not needed!
        '619 DfIpRej PC I&A Adj      Not needed!
        '620 DfIpRej PC MER Adj      Not needed!
        '-----
        '621 DfIpProd PC TPA
        '622 DfIpProd PC Wt%
        '623 DfIpProd PC BPL
        '624 DfIpProd PC Insol
        '625 DfIpProd PC I&A
        '626 DfIpProd PC Fe2O3
        '627 DfIpProd PC Al2O3
        '628 DfIpProd PC MgO
        '629 DfIpProd PC CaO
        '630 DfIpProd PC MER
        '631 DfIpProd PC CPR
        '632 DfIpProd PC Fe2O3 Adj
        '633 DfIpProd PC I&A Adj
        '634 DfIpProd PC MER Adj
        '-----
        '635 DfFpbInp 100 TPA
        '636 DfFpbInp 100 Wt%
        '637 DfFpbInp 100 BPL
        '638 DfFpbInp 100 Insol
        '639 DfFpbInp 100 I&A
        '640 DfFpbInp 100 Fe2O3
        '641 DfFpbInp 100 Al2O3
        '642 DfFpbInp 100 MgO
        '643 DfFpbInp 100 CaO
        '644 DfFpbInp 100 MER
        '645 DfFpbInp 100 CPR
        '646 DfFpbInp 100 Fe2O3 Adj
        '647 DfFpbInp 100 I&A Adj
        '648 DfFpbInp 100 MER Adj
        '-----
        '649 DfFpbRej 100 TPA          Not needed!
        '650 DfFpbRej 100 Wt%          Not needed!
        '651 DfFpbRej 100 BPL          Not needed!
        '652 DfFpbRej 100 Insol        Not needed!
        '653 DfFpbRej 100 I&A          Not needed!
        '654 DfFpbRej 100 Fe2O3        Not needed!
        '655 DfFpbRej 100 Al2O3        Not needed!
        '656 DfFpbRej 100 MgO          Not needed!
        '657 DfFpbRej 100 CaO          Not needed!
        '658 DfFpbRej 100 MER          Not needed!
        '659 DfFpbRej 100 CPR          Not needed!
        '660 DfFpbRej 100 Fe2O3 Adj    Not needed!
        '661 DfFpbRej 100 I&A Adj      Not needed!
        '662 DfFpbRej 100 MER Adj      Not needed!
        '-----
        '663 DfFpbProd 100 TPA
        '664 DfFpbProd 100 Wt%
        '665 DfFpbProd 100 BPL
        '666 DfFpbProd 100 Insol
        '667 DfFpbProd 100 I&A
        '668 DfFpbProd 100 Fe2O3
        '669 DfFpbProd 100 Al2O3
        '670 DfFpbProd 100 MgO
        '671 DfFpbProd 100 CaO
        '672 DfFpbProd 100 MER
        '673 DfFpbProd 100 CPR
        '674 DfFpbProd 100 Fe2O3 Adj
        '675 DfFpbProd 100 I&A Adj
        '676 DfFpbProd 100 MER Adj
        '-----
        '677 DfIpInp 100 TPA
        '678 DfIpInp 100 Wt%
        '679 DfIpInp 100 BPL
        '680 DfIpInp 100 Insol
        '681 DfIpInp 100 I&A
        '682 DfIpInp 100 Fe2O3
        '683 DfIpInp 100 Al2O3
        '684 DfIpInp 100 MgO
        '685 DfIpInp 100 CaO
        '686 DfIpInp 100 MER
        '687 DfIpInp 100 CPR
        '688 DfIpInp 100 Fe2O3 Adj
        '689 DfIpInp 100 I&A Adj
        '690 DfIpInp 100 MER Adj
        '-----
        '691 DfIpRej 100 TPA          Not needed!
        '692 DfIpRej 100 Wt%          Not needed!
        '693 DfIpRej 100 BPL          Not needed!
        '694 DfIpRej 100 Insol        Not needed!
        '695 DfIpRej 100 I&A          Not needed!
        '696 DfIpRej 100 Fe2O3        Not needed!
        '697 DfIpRej 100 Al2O3        Not needed!
        '698 DfIpRej 100 MgO          Not needed!
        '699 DfIpRej 100 CaO          Not needed!
        '700 DfIpRej 100 MER          Not needed!
        '701 DfIpRej 100 CPR          Not needed!
        '702 DfIpRej 100 Fe2O3 Adj    Not needed!
        '703 DfIpRej 100 I&A Adj      Not needed!
        '704 DfIpRej 100 MER Adj      Not needed!
        '-----
        '705 DfIpProd 100 TPA
        '706 DfIpProd 100 Wt%
        '707 DfIpProd 100 BPL
        '708 DfIpProd 100 Insol
        '709 DfIpProd 100 I&A
        '710 DfIpProd 100 Fe2O3
        '711 DfIpProd 100 Al2O3
        '712 DfIpProd 100 MgO
        '713 DfIpProd 100 CaO
        '714 DfIpProd 100 MER
        '715 DfIpProd 100 CPR
        '716 DfIpProd 100 Fe2O3 Adj
        '717 DfIpProd 100 I&A Adj
        '718 DfIpProd 100 MER Adj
        '-----
        '719 DfTcn PC TPA
        '720 DfTcn PC Wt%
        '721 DfTcn PC BPL
        '722 DfTcn PC Insol
        '723 DfTcn PC I&A
        '724 DfTcn PC Fe2O3
        '725 DfTcn PC Al2O3
        '726 DfTcn PC MgO
        '727 DfTcn PC CaO
        '728 DfTcn PC MER
        '729 DfTcn PC CPR
        '730 DfTcn PC Fe2O3 Adj
        '731 DfTcn PC I&A Adj
        '732 DfTcn PC MER Adj
        '-----
        '733 DfTpr PC TPA
        '734 DfTpr PC Wt%
        '735 DfTpr PC BPL
        '736 DfTpr PC Insol
        '737 DfTpr PC I&A
        '738 DfTpr PC Fe2O3
        '739 DfTpr PC Al2O3
        '740 DfTpr PC MgO
        '741 DfTpr PC CaO
        '742 DfTpr PC MER
        '743 DfTpr PC CPR
        '744 DfTpr PC Fe2O3 Adj
        '745 DfTpr PC I&A Adj
        '746 DfTpr PC MER Adj
        '-----
        '747 DfTcn 100 TPA
        '748 DfTcn 100 Wt%
        '749 DfTcn 100 BPL
        '750 DfTcn 100 Insol
        '751 DfTcn 100 I&A
        '752 DfTcn 100 Fe2O3
        '753 DfTcn 100 Al2O3
        '754 DfTcn 100 MgO
        '755 DfTcn 100 CaO
        '756 DfTcn 100 MER
        '757 DfTcn 100 CPR
        '758 DfTcn 100 Fe2O3 Adj
        '759 DfTcn 100 I&A Adj
        '760 DfTcn 100 MER Adj
        '-----
        '761 DfTpr 100 TPA
        '762 DfTpr 100 Wt%
        '763 DfTpr 100 BPL
        '764 DfTpr 100 Insol
        '765 DfTpr 100 I&A
        '766 DfTpr 100 Fe2O3
        '767 DfTpr 100 Al2O3
        '768 DfTpr 100 MgO
        '769 DfTpr 100 CaO
        '770 DfTpr 100 MER
        '771 DfTpr 100 CPR
        '772 DfTpr 100 Fe2O3 Adj
        '773 DfTpr 100 I&A Adj
        '774 DfTpr 100 MER Adj
        '-----
        '775 FpbMgoOffSpec   Split  PC
        '776 IpMgoOffSpec    Split  PC
        '-----
        '777 CpbRejTpa     PC
        '778 CpbRejWtPct   PC
        '779 CpbRejBpl     PC
        '780 CpbRejIns     PC
        '781 CpbRejIa      PC
        '782 CpbRejFe      PC
        '783 CpbRejAl      PC
        '784 CpbRejMg      PC
        '785 CpbRejCa      PC
        '786 CpbRejMer     PC
        '787 CpbRejCpr     PC
        '788 CpbRejFeAdj   PC
        '789 CpbRejIaAdj   PC
        '790 CpbRejMerAdj  PC
        '-----
        '791 CpbRejTpa     100%
        '792 CpbRejWtPct   100%
        '793 CpbRejBpl     100%
        '794 CpbRejIns     100%
        '795 CpbRejIa      100%
        '796 CpbRejFe      100%
        '797 CpbRejAl      100%
        '798 CpbRejMg      100%
        '799 CpbRejCa      100%
        '800 CpbRejMer     100%
        '801 CpbRejCpr     100%
        '802 CpbRejFeAdj   100%
        '803 CpbRejIaAdj   100%
        '804 CpbRejMerAdj  100%
        '-----
        '805 MpInp PC Fe2O3 Adj
        '806 MpInp PC I&A Adj
        '807 MpRej PC Fe2O3 Adj
        '808 MpRej PC I&A Adj
        '809 MpProd PC Fe2O3 Adj
        '810 MpProd PC I&A Adj
        '811 MpTcn PC Fe2O3 Adj
        '812 MpTcn PC I&A Adj
        '813 MpTpr PC Fe2O3 Adj
        '814 MpTpr PC I&A Adj
        '-----
        '815 MpInp 100 Fe2O3 Adj
        '816 MpInp 100 I&A Adj
        '817 MpRej 100 Fe2O3 Adj
        '818 MpRej 100 I&A Adj
        '819 MpProd 100 Fe2O3 Adj
        '820 MpProd 100 I&A Adj
        '821 MpTcn 100 Fe2O3 Adj
        '822 MpTcn 100 I&A Adj
        '823 MpTpr 100 Fe2O3 Adj
        '824 MpTpr 100 I&A Adj

        'Add the hole data (in aHoleData & aSumData) to aSsCompReview.


        'We are currently in Sub AssignCompositedHoleData.
        ''CalcDataFromSumDataComp aHoleData,
        'aSumData,
        'aRcvryParamsData,
        '"Both",
        'Sdata,
        'aSpl1Depth

        'CalcDataFromSumDataComp(aHoleData,
        '                        aSumData,
        '                        aRcvryParamsData, aRecoveryParams,
        '                        "Both",
        '                        aSpl1Depth)

        'Will indicate the mineability of the hole by placing "M" or
        '"U" in Col4 "Mineable calc'd".  Col5 "Mineable Oride" will be
        'set to "--".

        'Actually the hole mineability is indicated in three different places
        'and they should all be the same!
        '1) Col4    Mineable calc'd
        '2) Col190  Mineable calc'd PC
        '3) Col313  Mineable calc'd 100%

        With aSsCompReview
            .MaxRows = .MaxRows + 1
            .Row = .MaxRows
            .Col = 1    'Hole description tt-rr-sec hole
            .Text = aHoleData.HoleDesc
            .Col = 2    'Split#
            .Value = aHoleData.SplitNumber
            .Col = 3    'Prospect date
            .Value = aHoleData.ProspDate
            .Col = 4    'Mineable calc'd -- hole
            .Text = aHoleData.MineableCalcd
            .Col = 5    'Mineable Oride
            .Text = "--"
            .Col = 6    'Forty
            .Value = aHoleData.Forty
            .Col = 7    'Xcoord
            .Value = aHoleData.Xcoord
            .Col = 8    'Ycoord
            .Value = aHoleData.Ycoord
            .Col = 9    'Elevation
            .Value = aHoleData.Elevation
            .Col = 10   'Ownership
            .Text = aHoleData.Ownership
            .Col = 11   'Mined-out status
            .Text = aHoleData.MinedOutStatus
            .Col = 12
            .Text = aHoleData.HoleType
            .Col = 13
            .Text = aHoleData.ExpDrill
            .Col = 14
            .Value = aHoleData.TotDepth
            .Col = 15
            .Value = aHoleData.SplitDepthTop
            .Col = 16
            .Value = aHoleData.SplitDepthBot
            .Col = 17
            .Value = aHoleData.SplitThck
            .Col = 18
            .Text = aHoleData.Override
            .Col = 19
            .Value = aHoleData.Key
            .Col = 20
            .Text = aHoleData.cClass
            .Col = 21
            .Text = aHoleData.Bed
            .Col = 22
            .Text = aHoleData.Level
            .Col = 23
            .Text = aHoleData.Horizon
            .Col = 24
            .Value = aHoleData.MtxxOnSpec   'PC  Split
            .Col = 25
            .Value = aHoleData.TotxOnSpec   'PC  Split
            .Col = 26
            .Value = aHoleData.MtxxAll      'PC  Split
            .Col = 27
            .Value = aHoleData.TotxAll      'PC  Split
            .Col = 28
            .Value = aHoleData.MtxTPA       '100%
            .Col = 29
            .Value = aHoleData.MtxBPL
            .Col = 30
            .Value = aHoleData.MtxDensity
            '-----
            .Col = 31
            .Value = aHoleData.Os.Tpa       'PC
            .Col = 32
            .Value = aHoleData.Os.WtPct     'PC
            .Col = 33
            .Value = aHoleData.Os.Bpl       'PC
            .Col = 34
            .Value = aHoleData.Os.Ins       'PC
            .Col = 35
            .Value = aHoleData.Os.Ia        'PC
            .Col = 36
            .Value = aHoleData.Os.Fe        'PC
            .Col = 37
            .Value = aHoleData.Os.Al        'PC
            .Col = 38
            .Value = aHoleData.Os.Mg        'PC
            .Col = 39
            .Value = aHoleData.Os.Ca        'PC
            .Col = 40
            .Value = aHoleData.Os.Mer          'PC
            .Col = 41
            .Value = gGetCaP2O5(aHoleData.Os.Ca,
                                aHoleData.Os.Bpl,
                                2)          'PC
            '-----
            .Col = 42
            .Value = aHoleData.Tpb.Tpa      'PC
            .Col = 43
            .Value = aHoleData.Tpb.WtPct    'PC
            .Col = 44
            .Value = aHoleData.Tpb.Bpl      'PC
            .Col = 45
            .Value = aHoleData.Tpb.Ins      'PC
            .Col = 46
            .Value = aHoleData.Tpb.Ia       'PC
            .Col = 47
            .Value = aHoleData.Tpb.Fe       'PC
            .Col = 48
            .Value = aHoleData.Tpb.Al       'PC
            .Col = 49
            .Value = aHoleData.Tpb.Mg       'PC
            .Col = 50
            .Value = aHoleData.Tpb.Ca       'PC
            .Col = 51
            .Value = aHoleData.Tpb.Mer        'PC
            .Col = 52
            .Value = gGetCaP2O5(aHoleData.Tpb.Ca,
                                aHoleData.Tpb.Bpl,
                                2)          'PC
            '-----
            .Col = 53
            .Value = aHoleData.Ip.Tpa       'PC
            .Col = 54
            .Value = aHoleData.Ip.WtPct     'PC
            .Col = 55
            .Value = aHoleData.Ip.Bpl       'PC
            .Col = 56
            .Value = aHoleData.Ip.Ins       'PC
            .Col = 57
            .Value = aHoleData.Ip.Ia        'PC
            .Col = 58
            .Value = aHoleData.Ip.Fe        'PC
            .Col = 59
            .Value = aHoleData.Ip.Al        'PC
            .Col = 60
            .Value = aHoleData.Ip.Mg        'PC
            .Col = 61
            .Value = aHoleData.Ip.Ca        'PC
            .Col = 62
            .Value = aHoleData.Ip.Mer          'PC
            .Col = 63
            .Value = gGetCaP2O5(aHoleData.Ip.Ca,
                                aHoleData.Ip.Bpl,
                                2)          'PC
            '-----
            .Col = 64
            .Value = aHoleData.Tcn.Tpa      'PC
            .Col = 65
            .Value = aHoleData.Tcn.WtPct    'PC
            .Col = 66
            .Value = aHoleData.Tcn.Bpl      'PC
            .Col = 67
            .Value = aHoleData.Tcn.Ins      'PC
            .Col = 68
            .Value = aHoleData.Tcn.Ia       'PC
            .Col = 69
            .Value = aHoleData.Tcn.Fe       'PC
            .Col = 70
            .Value = aHoleData.Tcn.Al       'PC
            .Col = 71
            .Value = aHoleData.Tcn.Mg       'PC
            .Col = 72
            .Value = aHoleData.Tcn.Ca       'PC
            .Col = 73
            .Value = aHoleData.Tcn.Mer         'PC
            .Col = 74
            .Value = gGetCaP2O5(aHoleData.Tcn.Ca,
                                aHoleData.Tcn.Bpl,
                                2)          'PC
            '-----
            .Col = 75
            .Value = aHoleData.Cfd.Tpa      'PC
            .Col = 76
            .Value = aHoleData.Cfd.WtPct    'PC
            .Col = 77
            .Value = aHoleData.Cfd.Bpl      'PC
            '-----
            .Col = 78
            .Value = aHoleData.Ffd.Tpa      'PC
            .Col = 79
            .Value = aHoleData.Ffd.WtPct    'PC
            .Col = 80
            .Value = aHoleData.Ffd.Bpl      'PC
            '-----
            .Col = 81
            .Value = aHoleData.Wcl.Tpa      'PC
            .Col = 82
            .Value = aHoleData.Wcl.WtPct    'PC
            .Col = 83
            .Value = aHoleData.Wcl.Bpl      'PC
            '-----
            .Col = 84
            .Text = aHoleData.MtxColor
            .Col = 85
            .Text = aHoleData.DegConsol
            .Col = 86
            .Text = aHoleData.DigChar
            .Col = 87
            .Text = aHoleData.PumpChar
            .Col = 88
            .Text = aHoleData.Lithology
            .Col = 89
            .Text = aHoleData.PhosphColor
            .Col = 90
            .Text = aHoleData.SurvCaddHoleId
            '-----
            .Col = 91
            .Value = aHoleData.Cpb.Tpa      'PC
            .Col = 92
            .Value = aHoleData.Cpb.WtPct    'PC
            .Col = 93
            .Value = aHoleData.Cpb.Bpl      'PC
            .Col = 94
            .Value = aHoleData.Cpb.Ins      'PC
            .Col = 95
            .Value = aHoleData.Cpb.Ia       'PC
            .Col = 96
            .Value = aHoleData.Cpb.Fe       'PC
            .Col = 97
            .Value = aHoleData.Cpb.Al       'PC
            .Col = 98
            .Value = aHoleData.Cpb.Mg       'PC
            .Col = 99
            .Value = aHoleData.Cpb.Ca       'PC
            .Col = 100
            .Value = aHoleData.Cpb.Mer         'PC
            .Col = 101
            .Value = gGetCaP2O5(aHoleData.Cpb.Ca,
                                aHoleData.Cpb.Bpl,
                                2)          'PC
            '-----
            .Col = 102
            .Value = aHoleData.Fpb.Tpa      'PC
            .Col = 103
            .Value = aHoleData.Fpb.WtPct    'PC
            .Col = 104
            .Value = aHoleData.Fpb.Bpl      'PC
            .Col = 105
            .Value = aHoleData.Fpb.Ins      'PC
            .Col = 106
            .Value = aHoleData.Fpb.Ia       'PC
            .Col = 107
            .Value = aHoleData.Fpb.Fe       'PC
            .Col = 108
            .Value = aHoleData.Fpb.Al       'PC
            .Col = 109
            .Value = aHoleData.Fpb.Mg       'PC
            .Col = 110
            .Value = aHoleData.Fpb.Ca       'PC
            .Col = 111
            .Value = aHoleData.Fpb.Mer        'PC
            .Col = 112
            .Value = aHoleData.Fpb.CaOP2O5 'gGetCaP2O5(aHoleData.Fpb.Ca, aHoleData.Fpb.Bpl, 2)          'PC
            '-----
            .Col = 113
            .Value = aHoleData.SplitBarren
            '-----
            .Col = 114
            .Value = aHoleData.Ttl.Tpa      'PC
            .Col = 115
            .Value = aHoleData.Ttl.WtPct    'PC
            .Col = 116
            .Value = aHoleData.Ttl.Bpl      'PC
            '-----
            .Col = 117
            .Value = aHoleData.Tfd.Tpa      'PC
            .Col = 118
            .Value = aHoleData.Tfd.WtPct    'PC
            .Col = 119
            .Value = aHoleData.Tfd.Bpl      'PC
            '-----
            .Col = 120
            .Value = aHoleData.Tpr.Tpa      'PC
            .Col = 121
            .Value = aHoleData.Tpr.WtPct    'PC
            .Col = 122
            .Value = aHoleData.Tpr.Bpl      'PC
            .Col = 123
            .Value = aHoleData.Tpr.Ins      'PC
            .Col = 124
            .Value = aHoleData.Tpr.Ia       'PC
            .Col = 125
            .Value = aHoleData.Tpr.Fe       'PC
            .Col = 126
            .Value = aHoleData.Tpr.Al       'PC
            .Col = 127
            .Value = aHoleData.Tpr.Mg       'PC
            .Col = 128
            .Value = aHoleData.Tpr.Ca       'PC
            .Col = 129
            .Value = aHoleData.Tpr.Mer          'PC
            .Col = 130
            .Value = gGetCaP2O5(aHoleData.Tpr.Ca,
                                aHoleData.Tpr.Bpl,
                                2)          'PC
            '-----
            .Col = 131
            .Value = aHoleData.OvbThk
            .Col = 132
            .Value = aHoleData.ItbThk
            .Col = 133
            .Value = aHoleData.MtxThk
            '-----
            .Col = 134
            .Value = aHoleData.Ccn.Tpa      'PC
            .Col = 135
            .Value = aHoleData.Ccn.WtPct    'PC
            .Col = 136
            .Value = aHoleData.Ccn.Bpl      'PC
            .Col = 137
            .Value = aHoleData.Ccn.Ins      'PC
            .Col = 138
            .Value = aHoleData.Ccn.Ia       'PC
            .Col = 139
            .Value = aHoleData.Ccn.Fe       'PC
            .Col = 140
            .Value = aHoleData.Ccn.Al       'PC
            .Col = 141
            .Value = aHoleData.Ccn.Mg       'PC
            .Col = 142
            .Value = aHoleData.Ccn.Ca       'PC
            .Col = 143
            .Value = aHoleData.Ccn.Mer       'PC
            .Col = 144
            .Value = aHoleData.Ccn.CaOP2O5       'PC
            '-----
            .Col = 145
            .Value = aHoleData.Fcn.Tpa      'PC
            .Col = 146
            .Value = aHoleData.Fcn.WtPct    'PC
            .Col = 147
            .Value = aHoleData.Fcn.Bpl      'PC
            .Col = 148
            .Value = aHoleData.Fcn.Ins      'PC
            .Col = 149
            .Value = aHoleData.Fcn.Ia       'PC
            .Col = 150
            .Value = aHoleData.Fcn.Fe       'PC
            .Col = 151
            .Value = aHoleData.Fcn.Al       'PC
            .Col = 152
            .Value = aHoleData.Fcn.Mg       'PC
            .Col = 153
            .Value = aHoleData.Fcn.Ca       'PC
            .Col = 154
            .Value = aHoleData.Fcn.Mer        'PC
            .Col = 155
            .Value = gGetCaP2O5(aHoleData.Fcn.Ca,
                                aHoleData.Fcn.Bpl,
                                2)          'PC
            '-----
            'Data in columns 156 to 189 does not apply to composites (holes) at
            'this time (only splits)
            .Col = 156
            .Text = ""
            '-----
            'Changes 10/19/2011, lss
            .Col = 157
            .Value = aHoleData.HardpanFrom  'PC
            .Col = 158
            .Value = aHoleData.HardpanTo    'PC
            .Col = 159
            .Value = aHoleData.HardpanThck  'PC
            .Col = 160
            .Text = aHoleData.HardpanCode   'PC
            '-----
            'For ColIdx = 157 To 189
            For ColIdx = 161 To 189
                .Col = ColIdx
                .Value = 0
            Next ColIdx
            '-----
            .Col = 190
            .Text = aHoleData.MineableHole   'Mineable calc'd -- hole PC
            '-----
            'Data in columns 191 to 198 does not apply to composites (holes) at
            'this time (only splits)
            For ColIdx = 191 To 198
                .Col = ColIdx
                .Text = ""
            Next ColIdx
            '-----
            .Col = 199
            .Value = aHoleData.Cpb100.Tpa      '100%
            .Col = 200
            .Value = aHoleData.Cpb100.WtPct    '100%
            .Col = 201
            .Value = aHoleData.Cpb100.Bpl      '100%
            .Col = 202
            .Value = aHoleData.Cpb100.Ins      '100%
            .Col = 203
            .Value = aHoleData.Cpb100.Ia       '100%
            .Col = 204
            .Value = aHoleData.Cpb100.Fe       '100%
            .Col = 205
            .Value = aHoleData.Cpb100.Al       '100%
            .Col = 206
            .Value = aHoleData.Cpb100.Mg       '100%
            .Col = 207
            .Value = aHoleData.Cpb100.Ca       '100%
            .Col = 208
            .Value = aHoleData.Cpb100.Mer         '100%
            .Col = 209
            .Value = aHoleData.Cpb100.CaOP2O5        '100%
            '-----
            .Col = 210
            .Value = aHoleData.Fpb100.Tpa      '100%
            .Col = 211
            .Value = aHoleData.Fpb100.WtPct    '100%
            .Col = 212
            .Value = aHoleData.Fpb100.Bpl      '100%
            .Col = 213
            .Value = aHoleData.Fpb100.Ins      '100%
            .Col = 214
            .Value = aHoleData.Fpb100.Ia       '100%
            .Col = 215
            .Value = aHoleData.Fpb100.Fe       '100%
            .Col = 216
            .Value = aHoleData.Fpb100.Al       '100%
            .Col = 217
            .Value = aHoleData.Fpb100.Mg       '100%
            .Col = 218
            .Value = aHoleData.Fpb100.Ca       '100%
            .Col = 219
            .Value = aHoleData.Fpb100.Mer          '100%
            .Col = 220
            .Value = aHoleData.Fpb100.CaOP2O5    '100%
            '-----
            .Col = 221
            .Value = aHoleData.Ttl100.Tpa      '100%
            .Col = 222
            .Value = aHoleData.Ttl100.WtPct    '100%
            .Col = 223
            .Value = aHoleData.Ttl100.Bpl      '100%
            '-----
            .Col = 224
            .Value = aHoleData.Tfd100.Tpa      '100%
            .Col = 225
            .Value = aHoleData.Tfd100.WtPct    '100%
            .Col = 226
            .Value = aHoleData.Tfd100.Bpl      '100%
            '-----
            .Col = 227
            .Value = aHoleData.Tpr100.Tpa      '100%
            .Col = 228
            .Value = aHoleData.Tpr100.WtPct    '100%
            .Col = 229
            .Value = aHoleData.Tpr100.Bpl      '100%
            .Col = 230
            .Value = aHoleData.Tpr100.Ins      '100%
            .Col = 231
            .Value = aHoleData.Tpr100.Ia       '100%
            .Col = 232
            .Value = aHoleData.Tpr100.Fe       '100%
            .Col = 233
            .Value = aHoleData.Tpr100.Al       '100%
            .Col = 234
            .Value = aHoleData.Tpr100.Mg       '100%
            .Col = 235
            .Value = aHoleData.Tpr100.Ca       '100%
            .Col = 236
            .Value = aHoleData.Tpr100.Mer         '100%
            .Col = 237
            .Value = aHoleData.Tpr100.CaOP2O5      '100%
            '-----
            .Col = 238
            .Value = aHoleData.Ccn100.Tpa      '100%
            .Col = 239
            .Value = aHoleData.Ccn100.WtPct    '100%
            .Col = 240
            .Value = aHoleData.Ccn100.Bpl      '100%
            .Col = 241
            .Value = aHoleData.Ccn100.Ins      '100%
            .Col = 242
            .Value = aHoleData.Ccn100.Ia       '100%
            .Col = 243
            .Value = aHoleData.Ccn100.Fe       '100%
            .Col = 244
            .Value = aHoleData.Ccn100.Al       '100%
            .Col = 245
            .Value = aHoleData.Ccn100.Mg       '100%
            .Col = 246
            .Value = aHoleData.Ccn100.Ca       '100%
            .Col = 247
            .Value = aHoleData.Ccn100.Mer        '100%
            .Col = 248
            .Value = aHoleData.Ccn100.CaOP2O5         '100%
            '-----
            .Col = 249
            .Value = aHoleData.Fcn100.Tpa      '100%
            .Col = 250
            .Value = aHoleData.Fcn100.WtPct    '100%
            .Col = 251
            .Value = aHoleData.Fcn100.Bpl      '100%
            .Col = 252
            .Value = aHoleData.Fcn100.Ins      '100%
            .Col = 253
            .Value = aHoleData.Fcn100.Ia       '100%
            .Col = 254
            .Value = aHoleData.Fcn100.Fe       '100%
            .Col = 255
            .Value = aHoleData.Fcn100.Al       '100%
            .Col = 256
            .Value = aHoleData.Fcn100.Mg       '100%
            .Col = 257
            .Value = aHoleData.Fcn100.Ca       '100%
            .Col = 258
            .Value = gGetMer(aHoleData.Fcn100.Bpl,
                             aHoleData.Fcn100.Fe,
                             aHoleData.Fcn100.Al,
                             aHoleData.Fcn100.Mg,
                             2)                '100%
            .Col = 259
            .Value = gGetCaP2O5(aHoleData.Fcn100.Ca,
                                aHoleData.Fcn100.Bpl,
                                2)             '100%
            '-----
            .Col = 260
            .Value = aHoleData.Os100.Tpa       '100%
            .Col = 261
            .Value = aHoleData.Os100.WtPct     '100%
            .Col = 262
            .Value = aHoleData.Os100.Bpl       '100%
            .Col = 263
            .Value = aHoleData.Os100.Ins       '100%
            .Col = 264
            .Value = aHoleData.Os100.Ia        '100%
            .Col = 265
            .Value = aHoleData.Os100.Fe        '100%
            .Col = 266
            .Value = aHoleData.Os100.Al        '100%
            .Col = 267
            .Value = aHoleData.Os100.Mg        '100%
            .Col = 268
            .Value = aHoleData.Os100.Ca        '100%
            .Col = 269
            .Value = gGetMer(aHoleData.Os100.Bpl,
                             aHoleData.Os100.Fe,
                             aHoleData.Os100.Al,
                             aHoleData.Os100.Mg,
                             2)                '100%
            .Col = 270
            .Value = gGetCaP2O5(aHoleData.Os100.Ca,
                                aHoleData.Os100.Bpl,
                                2)             '100%
            '-----
            .Col = 271
            .Value = aHoleData.Tpb100.Tpa      '100%
            .Col = 272
            .Value = aHoleData.Tpb100.WtPct    '100%
            .Col = 273
            .Value = aHoleData.Tpb100.Bpl      '100%
            .Col = 274
            .Value = aHoleData.Tpb100.Ins      '100%
            .Col = 275
            .Value = aHoleData.Tpb100.Ia       '100%
            .Col = 276
            .Value = aHoleData.Tpb100.Fe       '100%
            .Col = 277
            .Value = aHoleData.Tpb100.Al       '100%
            .Col = 278
            .Value = aHoleData.Tpb100.Mg       '100%
            .Col = 279
            .Value = aHoleData.Tpb100.Ca       '100%
            .Col = 280
            .Value = gGetMer(aHoleData.Tpb100.Bpl,
                             aHoleData.Tpb100.Fe,
                             aHoleData.Tpb100.Al,
                             aHoleData.Tpb100.Mg,
                             2)                '100%
            .Col = 281
            .Value = gGetCaP2O5(aHoleData.Tpb100.Ca,
                                aHoleData.Tpb100.Bpl,
                                2)             '100%
            '-----
            .Col = 282
            .Value = aHoleData.Ip100.Tpa       '100%
            .Col = 283
            .Value = aHoleData.Ip100.WtPct     '100%
            .Col = 284
            .Value = aHoleData.Ip100.Bpl       '100%
            .Col = 285
            .Value = aHoleData.Ip100.Ins       '100%
            .Col = 286
            .Value = aHoleData.Ip100.Ia        '100%
            .Col = 287
            .Value = aHoleData.Ip100.Fe        '100%
            .Col = 288
            .Value = aHoleData.Ip100.Al        '100%
            .Col = 289
            .Value = aHoleData.Ip100.Mg        '100%
            .Col = 290
            .Value = aHoleData.Ip100.Ca        '100%
            .Col = 291
            .Value = gGetMer(aHoleData.Ip100.Bpl,
                             aHoleData.Ip100.Fe,
                             aHoleData.Ip100.Al,
                             aHoleData.Ip100.Mg,
                             2)                '100%
            .Col = 292
            .Value = gGetCaP2O5(aHoleData.Ip100.Ca,
                                aHoleData.Ip100.Bpl,
                                2)             '100%
            '-----
            .Col = 293
            .Value = aHoleData.Tcn100.Tpa      '100%
            .Col = 294
            .Value = aHoleData.Tcn100.WtPct    '100%
            .Col = 295
            .Value = aHoleData.Tcn100.Bpl      '100%
            .Col = 296
            .Value = aHoleData.Tcn100.Ins      '100%
            .Col = 297
            .Value = aHoleData.Tcn100.Ia       '100%
            .Col = 298
            .Value = aHoleData.Tcn100.Fe       '100%
            .Col = 299
            .Value = aHoleData.Tcn100.Al       '100%
            .Col = 300
            .Value = aHoleData.Tcn100.Mg       '100%
            .Col = 301
            .Value = aHoleData.Tcn100.Ca       '100%
            .Col = 302
            .Value = gGetMer(aHoleData.Tcn100.Bpl,
                             aHoleData.Tcn100.Fe,
                             aHoleData.Tcn100.Al,
                             aHoleData.Tcn100.Mg,
                             2)                '100%
            .Col = 303
            .Value = gGetCaP2O5(aHoleData.Tcn100.Ca,
                                aHoleData.Tcn100.Bpl,
                                2)             '100%
            '-----
            .Col = 304
            .Value = aHoleData.Cfd100.Tpa      '100%
            .Col = 305
            .Value = aHoleData.Cfd100.WtPct    '100%
            .Col = 306
            .Value = aHoleData.Cfd100.Bpl      '100%
            '-----
            .Col = 307
            .Value = aHoleData.Ffd100.Tpa      '100%
            .Col = 308
            .Value = aHoleData.Ffd100.WtPct    '100%
            .Col = 309
            .Value = aHoleData.Ffd100.Bpl      '100%
            '-----
            .Col = 310
            .Value = aHoleData.Wcl100.Tpa      '100%
            .Col = 311
            .Value = aHoleData.Wcl100.WtPct    '100%
            .Col = 312
            .Value = aHoleData.Wcl100.Bpl      '100%
            '-----
            .Col = 313
            .Text = aHoleData.MineableHole100     'Mineable calc'd -- hole 100%
            .Col = 314
            .Value = aHoleData.MtxTpaPc           'PC
            '-----
            .Col = 315
            .Value = aHoleData.MtxxOnSpec100      '100%  Split
            .Col = 316
            .Value = aHoleData.TotxOnSpec100      '100%  Split
            .Col = 317
            .Value = aHoleData.MtxxAll100         '100%  Split
            .Col = 318
            .Value = aHoleData.TotxAll100         '100%  Split
            '-----
            .Col = 319
            .Value = aHoleData.CpbOnSpec         'PC  Hole
            .Col = 320
            .Value = aHoleData.FpbOnSpec         'PC  Hole
            .Col = 321
            .Value = aHoleData.TpbOnSpec         'PC  Hole
            .Col = 322
            .Value = aHoleData.CcnOnSpec         'PC  Hole
            .Col = 323
            .Value = aHoleData.FcnOnSpec        'PC  Hole
            .Col = 324
            .Value = aHoleData.TcnOnSpec         'PC  Hole
            .Col = 325
            .Value = aHoleData.OsOnSpec          'PC  Hole
            .Col = 326
            .Value = aHoleData.IpOnSpec          'PC  Hole
            '-----
            .Col = 327
            .Value = aHoleData.MtxxOnSpecPcHole   'PC  Hole
            .Col = 328
            .Value = aHoleData.TotxOnSpecPcHole   'PC  Hole
            .Col = 329
            .Value = aHoleData.MtxxAllPcHole      'PC  Hole
            .Col = 330
            .Value = aHoleData.TotxAllPcHole      'PC  Hole
            '-----
            .Col = 331
            .Value = aHoleData.MtxxOnSpec100Hole  '100  Hole
            .Col = 332
            .Value = aHoleData.TotxOnSpec100Hole  '100  Hole
            .Col = 333
            .Value = aHoleData.MtxxAll100Hole     '100  Hole
            .Col = 334
            .Value = aHoleData.TotxAll100Hole     '100  Hole
            '-----
            .Col = 335
            .Value = aHoleData.MtxPctMoist
            .Col = 336
            .Value = aHoleData.MtxPctSol
            '-----
            'Off-spec pebble MgO plant
            'Off-spec pebble MgO plant
            'Off-spec pebble MgO plant

            'Off-spec MgO pebble plant input  PC  Hole
            .Col = 347
            .Value = aHoleData.MgPltInp.Tpa
            .Col = 348
            .Value = aHoleData.MgPltInp.WtPct
            .Col = 349
            .Value = aHoleData.MgPltInp.Bpl
            .Col = 350
            .Value = aHoleData.MgPltInp.Ins
            .Col = 351
            .Value = aHoleData.MgPltInp.Ia
            .Col = 352
            .Value = aHoleData.MgPltInp.Fe
            .Col = 353
            .Value = aHoleData.MgPltInp.Al
            .Col = 354
            .Value = aHoleData.MgPltInp.Mg
            .Col = 355
            .Value = aHoleData.MgPltInp.Ca
            .Col = 356
            .Value = gGetMer(aHoleData.MgPltInp.Bpl,
                             aHoleData.MgPltInp.Fe,
                             aHoleData.MgPltInp.Al,
                             aHoleData.MgPltInp.Mg,
                             2)
            .Col = 357
            .Value = gGetCaP2O5(aHoleData.MgPltInp.Ca,
                                aHoleData.MgPltInp.Bpl,
                                2)

            'Off-spec MgO pebble plant reject  PC  Hole
            .Col = 358
            .Value = aHoleData.MgPltRej.Tpa
            .Col = 359
            .Value = aHoleData.MgPltRej.WtPct
            .Col = 360
            .Value = aHoleData.MgPltRej.Bpl
            .Col = 361
            .Value = aHoleData.MgPltRej.Ins
            .Col = 362
            .Value = aHoleData.MgPltRej.Ia
            .Col = 363
            .Value = aHoleData.MgPltRej.Fe
            .Col = 364
            .Value = aHoleData.MgPltRej.Al
            .Col = 365
            .Value = aHoleData.MgPltRej.Mg
            .Col = 366
            .Value = aHoleData.MgPltRej.Ca
            .Col = 367
            .Value = gGetMer(aHoleData.MgPltRej.Bpl,
                             aHoleData.MgPltRej.Fe,
                             aHoleData.MgPltRej.Al,
                             aHoleData.MgPltRej.Mg,
                             2)
            .Col = 368
            .Value = gGetCaP2O5(aHoleData.MgPltRej.Ca,
                                aHoleData.MgPltRej.Bpl,
                                2)

            'Off-spec MgO pebble plant product  PC  Hole
            .Col = 369
            .Value = aHoleData.MgPltProd.Tpa
            .Col = 370
            .Value = aHoleData.MgPltProd.WtPct
            .Col = 371
            .Value = aHoleData.MgPltProd.Bpl
            .Col = 372
            .Value = aHoleData.MgPltProd.Ins
            .Col = 373
            .Value = aHoleData.MgPltProd.Ia
            .Col = 374
            .Value = aHoleData.MgPltProd.Fe
            .Col = 375
            .Value = aHoleData.MgPltProd.Al
            .Col = 376
            .Value = aHoleData.MgPltProd.Mg
            .Col = 377
            .Value = aHoleData.MgPltProd.Ca
            .Col = 378
            .Value = gGetMer(aHoleData.MgPltProd.Bpl,
                             aHoleData.MgPltProd.Fe,
                             aHoleData.MgPltProd.Al,
                             aHoleData.MgPltProd.Mg,
                             2)
            .Col = 379
            .Value = gGetCaP2O5(aHoleData.MgPltProd.Ca,
                                aHoleData.MgPltProd.Bpl,
                                2)

            'Off-spec MgO pebble plant input  100% Hole
            .Col = 380
            .Value = aHoleData.MgPltInp100.Tpa
            .Col = 381
            .Value = aHoleData.MgPltInp100.WtPct
            .Col = 382
            .Value = aHoleData.MgPltInp100.Bpl
            .Col = 383
            .Value = aHoleData.MgPltInp100.Ins
            .Col = 384
            .Value = aHoleData.MgPltInp100.Ia
            .Col = 385
            .Value = aHoleData.MgPltInp100.Fe
            .Col = 386
            .Value = aHoleData.MgPltInp100.Al
            .Col = 387
            .Value = aHoleData.MgPltInp100.Mg
            .Col = 388
            .Value = aHoleData.MgPltInp100.Ca
            .Col = 389
            .Value = gGetMer(aHoleData.MgPltInp100.Bpl,
                             aHoleData.MgPltInp100.Fe,
                             aHoleData.MgPltInp100.Al,
                             aHoleData.MgPltInp100.Mg,
                             2)
            .Col = 390
            .Value = gGetCaP2O5(aHoleData.MgPltInp100.Ca,
                                aHoleData.MgPltInp100.Bpl,
                                2)

            'Off-spec MgO pebble plant reject  100% Hole
            .Col = 391
            .Value = aHoleData.MgPltRej100.Tpa
            .Col = 392
            .Value = aHoleData.MgPltRej100.WtPct
            .Col = 393
            .Value = aHoleData.MgPltRej100.Bpl
            .Col = 394
            .Value = aHoleData.MgPltRej100.Ins
            .Col = 395
            .Value = aHoleData.MgPltRej100.Ia
            .Col = 396
            .Value = aHoleData.MgPltRej100.Fe
            .Col = 397
            .Value = aHoleData.MgPltRej100.Al
            .Col = 398
            .Value = aHoleData.MgPltRej100.Mg
            .Col = 399
            .Value = aHoleData.MgPltRej100.Ca
            .Col = 400
            .Value = gGetMer(aHoleData.MgPltRej100.Bpl,
                             aHoleData.MgPltRej100.Fe,
                             aHoleData.MgPltRej100.Al,
                             aHoleData.MgPltRej100.Mg,
                             2)
            .Col = 401
            .Value = gGetCaP2O5(aHoleData.MgPltRej100.Ca,
                                aHoleData.MgPltRej100.Bpl,
                                2)

            'Off-spec MgO pebble plant product  100% Hole
            .Col = 402
            .Value = aHoleData.MgPltProd100.Tpa
            .Col = 403
            .Value = aHoleData.MgPltProd100.WtPct
            .Col = 404
            .Value = aHoleData.MgPltProd100.Bpl
            .Col = 405
            .Value = aHoleData.MgPltProd100.Ins
            .Col = 406
            .Value = aHoleData.MgPltProd100.Ia
            .Col = 407
            .Value = aHoleData.MgPltProd100.Fe
            .Col = 408
            .Value = aHoleData.MgPltProd100.Al
            .Col = 409
            .Value = aHoleData.MgPltProd100.Mg
            .Col = 410
            .Value = aHoleData.MgPltProd100.Ca
            .Col = 411
            .Value = gGetMer(aHoleData.MgPltProd100.Bpl,
                             aHoleData.MgPltProd100.Fe,
                             aHoleData.MgPltProd100.Al,
                             aHoleData.MgPltProd100.Mg,
                             2)
            .Col = 412
            .Value = gGetCaP2O5(aHoleData.MgPltProd100.Ca,
                                aHoleData.MgPltProd100.Bpl,
                                2)

            'Off-spec MgO pebble plant total concentrate  100% Hole
            .Col = 435
            .Value = aHoleData.MgPltTcn100.Tpa
            .Col = 436
            .Value = aHoleData.MgPltTcn100.WtPct
            .Col = 437
            .Value = aHoleData.MgPltTcn100.Bpl
            .Col = 438
            .Value = aHoleData.MgPltTcn100.Ins
            .Col = 439
            .Value = aHoleData.MgPltTcn100.Ia
            .Col = 440
            .Value = aHoleData.MgPltTcn100.Fe
            .Col = 441
            .Value = aHoleData.MgPltTcn100.Al
            .Col = 442
            .Value = aHoleData.MgPltTcn100.Mg
            .Col = 443
            .Value = aHoleData.MgPltTcn100.Ca
            .Col = 444
            .Value = gGetMer(aHoleData.MgPltTcn100.Bpl,
                             aHoleData.MgPltTcn100.Fe,
                             aHoleData.MgPltTcn100.Al,
                             aHoleData.MgPltTcn100.Mg,
                             2)
            .Col = 445
            .Value = gGetCaP2O5(aHoleData.MgPltTcn100.Ca,
                                aHoleData.MgPltTcn100.Bpl,
                                2)

            'Off-spec MgO pebble plant total product  100% Hole
            .Col = 446
            .Value = aHoleData.MgPltTpr100.Tpa
            .Col = 447
            .Value = aHoleData.MgPltTpr100.WtPct
            .Col = 448
            .Value = aHoleData.MgPltTpr100.Bpl
            .Col = 449
            .Value = aHoleData.MgPltTpr100.Ins
            .Col = 450
            .Value = aHoleData.MgPltTpr100.Ia
            .Col = 451
            .Value = aHoleData.MgPltTpr100.Fe
            .Col = 452
            .Value = aHoleData.MgPltTpr100.Al
            .Col = 453
            .Value = aHoleData.MgPltTpr100.Mg
            .Col = 454
            .Value = aHoleData.MgPltTpr100.Ca
            .Col = 455
            .Value = gGetMer(aHoleData.MgPltTpr100.Bpl,
                             aHoleData.MgPltTpr100.Fe,
                             aHoleData.MgPltTpr100.Al,
                             aHoleData.MgPltTpr100.Mg,
                             2)
            .Col = 456
            .Value = gGetCaP2O5(aHoleData.MgPltTpr100.Ca,
                                aHoleData.MgPltTpr100.Bpl,
                                2)

            '03/24/2011**, lss
            .Col = 815
            .Value = aHoleData.MgPltInp100.FeAdj    '100
            .Col = 816
            .Value = aHoleData.MgPltInp100.IaAdj    '100
            .Col = 817
            .Value = aHoleData.MgPltRej100.FeAdj    '100
            .Col = 818
            .Value = aHoleData.MgPltRej100.IaAdj    '100
            .Col = 819
            .Value = aHoleData.MgPltProd100.FeAdj   '100
            .Col = 820
            .Value = aHoleData.MgPltProd100.IaAdj   '100
            .Col = 821
            .Value = aHoleData.MgPltTcn100.FeAdj    '100
            .Col = 822
            .Value = aHoleData.MgPltTcn100.IaAdj    '100
            .Col = 823
            .Value = aHoleData.MgPltTpr100.FeAdj    '100
            .Col = 824
            .Value = aHoleData.MgPltTpr100.IaAdj    '100

            'Off-spec MgO pebble plant total concentrate  PC Hole
            .Col = 413
            .Value = aHoleData.MgPltTcn.Tpa
            .Col = 414
            .Value = aHoleData.MgPltTcn.WtPct
            .Col = 415
            .Value = aHoleData.MgPltTcn.Bpl
            .Col = 416
            .Value = aHoleData.MgPltTcn.Ins
            .Col = 417
            .Value = aHoleData.MgPltTcn.Ia
            .Col = 418
            .Value = aHoleData.MgPltTcn.Fe
            .Col = 419
            .Value = aHoleData.MgPltTcn.Al
            .Col = 420
            .Value = aHoleData.MgPltTcn.Mg
            .Col = 421
            .Value = aHoleData.MgPltTcn.Ca
            .Col = 422
            .Value = gGetMer(aHoleData.MgPltTcn.Bpl,
                             aHoleData.MgPltTcn.Fe,
                             aHoleData.MgPltTcn.Al,
                             aHoleData.MgPltTcn.Mg,
                             2)
            .Col = 423
            .Value = gGetCaP2O5(aHoleData.MgPltTcn.Ca,
                                aHoleData.MgPltTcn.Bpl,
                                2)

            'Off-spec MgO pebble plant total product  PC Hole
            .Col = 424
            .Value = aHoleData.MgPltTpr.Tpa
            .Col = 425
            .Value = aHoleData.MgPltTpr.WtPct
            .Col = 426
            .Value = aHoleData.MgPltTpr.Bpl
            .Col = 427
            .Value = aHoleData.MgPltTpr.Ins
            .Col = 428
            .Value = aHoleData.MgPltTpr.Ia
            .Col = 429
            .Value = aHoleData.MgPltTpr.Fe
            .Col = 430
            .Value = aHoleData.MgPltTpr.Al
            .Col = 431
            .Value = aHoleData.MgPltTpr.Mg
            .Col = 432
            .Value = aHoleData.MgPltTpr.Ca
            .Col = 433
            .Value = gGetMer(aHoleData.MgPltTpr.Bpl,
                             aHoleData.MgPltTpr.Fe,
                             aHoleData.MgPltTpr.Al,
                             aHoleData.MgPltTpr.Mg,
                             2)
            .Col = 434
            .Value = gGetCaP2O5(aHoleData.MgPltTpr.Ca,
                                aHoleData.MgPltTpr.Bpl,
                                2)

            '03/24/2011**, lss
            .Col = 805
            .Value = aHoleData.MgPltInp.FeAdj    'PC
            .Col = 806
            .Value = aHoleData.MgPltInp.IaAdj    'PC
            .Col = 807
            .Value = aHoleData.MgPltRej.FeAdj    'PC
            .Col = 808
            .Value = aHoleData.MgPltRej.IaAdj    'PC
            .Col = 809
            .Value = aHoleData.MgPltProd.FeAdj   'PC
            .Col = 810
            .Value = aHoleData.MgPltProd.IaAdj   'PC
            .Col = 811
            .Value = aHoleData.MgPltTcn.FeAdj    'PC
            .Col = 812
            .Value = aHoleData.MgPltTcn.IaAdj    'PC
            .Col = 813
            .Value = aHoleData.MgPltTpr.FeAdj    'PC
            .Col = 814
            .Value = aHoleData.MgPltTpr.IaAdj    'PC

            'Total pebble rejected at the washer.
            'Currently in Sub AssignCompositedHoleData
            .Col = 457
            .Value = aHoleData.TpbRej.Tpa
            .Col = 458
            .Value = aHoleData.TpbRej.Bpl
            .Col = 459
            .Value = aHoleData.TpbRej.Ins
            .Col = 460
            .Value = aHoleData.TpbRej.Ia
            .Col = 461
            .Value = aHoleData.TpbRej.Fe
            .Col = 462
            .Value = aHoleData.TpbRej.Al
            .Col = 463
            .Value = aHoleData.TpbRej.Mg
            .Col = 464
            .Value = aHoleData.TpbRej.Ca
            '-----
            .Col = 465
            .Value = aHoleData.TpbRej100.Tpa
            .Col = 466
            .Value = aHoleData.TpbRej100.Bpl
            .Col = 467
            .Value = aHoleData.TpbRej100.Ins
            .Col = 468
            .Value = aHoleData.TpbRej100.Ia
            .Col = 469
            .Value = aHoleData.TpbRej100.Fe
            .Col = 470
            .Value = aHoleData.TpbRej100.Al
            .Col = 471
            .Value = aHoleData.TpbRej100.Mg
            .Col = 472
            .Value = aHoleData.TpbRej100.Ca

            'Fe adjust stuff
            .Col = 473
            .Value = aHoleData.Os.FeAdj
            .Col = 474
            .Value = aHoleData.Os.IaAdj
            .Col = 475
            .Value = gGetMer(aHoleData.Os.Bpl,
                             aHoleData.Os.FeAdj,
                             aHoleData.Os.Al,
                             aHoleData.Os.Mg,
                             2)
            .Col = 476
            .Value = aHoleData.Cpb.FeAdj
            .Col = 477
            .Value = aHoleData.Cpb.IaAdj
            .Col = 478
            .Value = gGetMer(aHoleData.Cpb.Bpl,
                             aHoleData.Cpb.FeAdj,
                             aHoleData.Cpb.Al,
                             aHoleData.Cpb.Mg,
                             2)
            .Col = 479
            .Value = aHoleData.Fpb.FeAdj
            .Col = 480
            .Value = aHoleData.Fpb.IaAdj
            .Col = 481
            .Value = gGetMer(aHoleData.Fpb.Bpl,
                             aHoleData.Fpb.FeAdj,
                             aHoleData.Fpb.Al,
                             aHoleData.Fpb.Mg,
                             2)
            .Col = 482
            .Value = aHoleData.Tpb.FeAdj
            .Col = 483
            .Value = aHoleData.Tpb.IaAdj
            .Col = 484
            .Value = gGetMer(aHoleData.Tpb.Bpl,
                             aHoleData.Tpb.FeAdj,
                             aHoleData.Tpb.Al,
                             aHoleData.Tpb.Mg,
                             2)
            .Col = 485
            .Value = aHoleData.Ip.FeAdj
            .Col = 486
            .Value = aHoleData.Ip.IaAdj
            .Col = 487
            .Value = gGetMer(aHoleData.Ip.Bpl,
                             aHoleData.Ip.FeAdj,
                             aHoleData.Ip.Al,
                             aHoleData.Ip.Mg,
                             2)
            .Col = 488
            .Value = aHoleData.Ccn.FeAdj
            .Col = 489
            .Value = aHoleData.Ccn.IaAdj
            .Col = 490
            .Value = gGetMer(aHoleData.Ccn.Bpl,
                             aHoleData.Ccn.FeAdj,
                             aHoleData.Ccn.Al,
                             aHoleData.Ccn.Mg,
                             2)
            .Col = 491
            .Value = aHoleData.Fcn.FeAdj
            .Col = 492
            .Value = aHoleData.Fcn.IaAdj
            .Col = 493
            .Value = gGetMer(aHoleData.Fcn.Bpl,
                             aHoleData.Fcn.FeAdj,
                             aHoleData.Fcn.Al,
                             aHoleData.Fcn.Mg,
                             2)
            .Col = 494
            .Value = aHoleData.Tcn.FeAdj
            .Col = 495
            .Value = aHoleData.Tcn.IaAdj
            .Col = 496
            .Value = gGetMer(aHoleData.Tcn.Bpl,
                             aHoleData.Tcn.FeAdj,
                             aHoleData.Tcn.Al,
                             aHoleData.Tcn.Mg,
                             2)
            .Col = 497
            .Value = aHoleData.Tpr.FeAdj
            .Col = 498
            .Value = aHoleData.Tpr.IaAdj
            .Col = 499
            .Value = gGetMer(aHoleData.Tpr.Bpl,
                             aHoleData.Tpr.FeAdj,
                             aHoleData.Tpr.Al,
                             aHoleData.Tpr.Mg,
                             2)
            .Col = 500
            .Value = aHoleData.TpbRej.FeAdj
            .Col = 501
            .Value = aHoleData.TpbRej.IaAdj
            '-----
            .Col = 502
            .Value = aHoleData.Os100.FeAdj
            .Col = 503
            .Value = aHoleData.Os100.IaAdj
            .Col = 504
            .Value = gGetMer(aHoleData.Os100.Bpl,
                             aHoleData.Os100.FeAdj,
                             aHoleData.Os100.Al,
                             aHoleData.Os100.Mg,
                             2)
            .Col = 505
            .Value = aHoleData.Cpb100.FeAdj
            .Col = 506
            .Value = aHoleData.Cpb100.IaAdj
            .Col = 507
            .Value = gGetMer(aHoleData.Cpb100.Bpl,
                             aHoleData.Cpb100.FeAdj,
                             aHoleData.Cpb100.Al,
                             aHoleData.Cpb100.Mg,
                             2)
            .Col = 508
            .Value = aHoleData.Fpb100.FeAdj
            .Col = 509
            .Value = aHoleData.Fpb100.IaAdj
            .Col = 510
            .Value = gGetMer(aHoleData.Fpb100.Bpl,
                             aHoleData.Fpb100.FeAdj,
                             aHoleData.Fpb100.Al,
                             aHoleData.Fpb100.Mg,
                             2)
            .Col = 511
            .Value = aHoleData.Tpb100.FeAdj
            .Col = 512
            .Value = aHoleData.Tpb100.IaAdj
            .Col = 513
            .Value = gGetMer(aHoleData.Tpb100.Bpl,
                             aHoleData.Tpb100.FeAdj,
                             aHoleData.Tpb100.Al,
                             aHoleData.Tpb100.Mg,
                             2)
            .Col = 514
            .Value = aHoleData.Ip100.FeAdj
            .Col = 515
            .Value = aHoleData.Ip100.IaAdj
            .Col = 516
            .Value = gGetMer(aHoleData.Ip100.Bpl,
                             aHoleData.Ip100.FeAdj,
                             aHoleData.Ip100.Al,
                             aHoleData.Ip100.Mg,
                             2)
            .Col = 517
            .Value = aHoleData.Ccn100.FeAdj
            .Col = 518
            .Value = aHoleData.Ccn100.IaAdj
            .Col = 519
            .Value = gGetMer(aHoleData.Ccn100.Bpl,
                             aHoleData.Ccn100.FeAdj,
                             aHoleData.Ccn100.Al,
                             aHoleData.Ccn100.Mg,
                             2)
            .Col = 520
            .Value = aHoleData.Fcn100.FeAdj
            .Col = 521
            .Value = aHoleData.Fcn100.IaAdj
            .Col = 522
            .Value = gGetMer(aHoleData.Fcn100.Bpl,
                             aHoleData.Fcn100.FeAdj,
                             aHoleData.Fcn100.Al,
                             aHoleData.Fcn100.Mg,
                             2)
            .Col = 523
            .Value = aHoleData.Tcn100.FeAdj
            .Col = 524
            .Value = aHoleData.Tcn100.IaAdj
            .Col = 525
            .Value = gGetMer(aHoleData.Tcn100.Bpl,
                             aHoleData.Tcn100.FeAdj,
                             aHoleData.Tcn100.Al,
                             aHoleData.Tcn100.Mg,
                             2)
            .Col = 526
            .Value = aHoleData.Tpr100.FeAdj
            .Col = 527
            .Value = aHoleData.Tpr100.IaAdj
            .Col = 528
            .Value = gGetMer(aHoleData.Tpr100.Bpl,
                             aHoleData.Tpr100.FeAdj,
                             aHoleData.Tpr100.Al,
                             aHoleData.Tpr100.Mg,
                             2)
            .Col = 529
            .Value = aHoleData.TpbRej100.FeAdj
            .Col = 530
            .Value = aHoleData.TpbRej100.IaAdj

            'Total concentrate rejected somewhere.
            '09/11/2009, lss -- Added the following.
            'Currently in Sub AssignCompositedHoleData
            .Col = 531
            .Value = aHoleData.TcnRej.Tpa
            .Col = 532
            .Value = aHoleData.TcnRej.Bpl
            .Col = 533
            .Value = aHoleData.TcnRej.Ins
            .Col = 534
            .Value = aHoleData.TcnRej.Ia
            .Col = 535
            .Value = aHoleData.TcnRej.Fe
            .Col = 536
            .Value = aHoleData.TcnRej.Al
            .Col = 537
            .Value = aHoleData.TcnRej.Mg
            .Col = 538
            .Value = aHoleData.TcnRej.Ca
            '-----
            .Col = 539
            .Value = aHoleData.TcnRej100.Tpa
            .Col = 540
            .Value = aHoleData.TcnRej100.Bpl
            .Col = 541
            .Value = aHoleData.TcnRej100.Ins
            .Col = 542
            .Value = aHoleData.TcnRej100.Ia
            .Col = 543
            .Value = aHoleData.TcnRej100.Fe
            .Col = 544
            .Value = aHoleData.TcnRej100.Al
            .Col = 545
            .Value = aHoleData.TcnRej100.Mg
            .Col = 546
            .Value = aHoleData.TcnRej100.Ca
            '-----
            .Col = 547
            .Value = aHoleData.TcnRej.FeAdj
            .Col = 548
            .Value = aHoleData.TcnRej.IaAdj
            '-----
            .Col = 549
            .Value = aHoleData.TcnRej100.FeAdj
            .Col = 550
            .Value = aHoleData.TcnRej100.IaAdj
            '----
            'Currently in Sub AssignCompositedHoleData

            PlaceDoloflotPltInReview(aSsCompReview,
                                     aHoleData,
                                     .Row,
                                     "Fine pebble")

            PlaceDoloflotPltInReview(aSsCompReview,
                                     aHoleData,
                                     .Row,
                                     "IP")
            '-----
            .Col = 719
            .Value = aHoleData.DfTcn.Tpa
            .Col = 720
            .Value = aHoleData.DfTcn.WtPct
            .Col = 721
            .Value = aHoleData.DfTcn.Bpl
            .Col = 722
            .Value = aHoleData.DfTcn.Ins
            .Col = 723
            .Value = aHoleData.DfTcn.Ia
            .Col = 724
            .Value = aHoleData.DfTcn.Fe
            .Col = 725
            .Value = aHoleData.DfTcn.Al
            .Col = 726
            .Value = aHoleData.DfTcn.Mg
            .Col = 727
            .Value = aHoleData.DfTcn.Ca
            .Col = 728
            .Value = gGetMer(aHoleData.DfTcn.Bpl,
                             aHoleData.DfTcn.Fe,
                             aHoleData.DfTcn.Al,
                             aHoleData.DfTcn.Mg,
                             2)
            .Col = 729
            .Value = gGetCaP2O5(aHoleData.DfTcn.Ca,
                                aHoleData.DfTcn.Bpl,
                                2)

            .Col = 730
            .Value = aHoleData.DfTcn.FeAdj
            .Col = 731
            .Value = aHoleData.DfTcn.IaAdj
            .Col = 732
            .Value = gGetMer(aHoleData.DfTcn.Bpl,
                             aHoleData.DfTcn.FeAdj,
                             aHoleData.DfTcn.Al,
                             aHoleData.DfTcn.Mg,
                             2)
            '-----
            'Currently in Function DetermineSplitTpaMisc.
            .Col = 733
            .Value = aHoleData.DfTpr.Tpa
            .Col = 734
            .Value = aHoleData.DfTpr.WtPct
            .Col = 735
            .Value = aHoleData.DfTpr.Bpl
            .Col = 736
            .Value = aHoleData.DfTpr.Ins
            .Col = 737
            .Value = aHoleData.DfTpr.Ia
            .Col = 738
            .Value = aHoleData.DfTpr.Fe
            .Col = 739
            .Value = aHoleData.DfTpr.Al
            .Col = 740
            .Value = aHoleData.DfTpr.Mg
            .Col = 741
            .Value = aHoleData.DfTpr.Ca
            .Col = 742
            .Value = gGetMer(aHoleData.DfTpr.Bpl,
                             aHoleData.DfTpr.Fe,
                             aHoleData.DfTpr.Al,
                             aHoleData.DfTpr.Mg,
                             2)
            .Col = 743
            .Value = gGetCaP2O5(aHoleData.DfTpr.Ca,
                                aHoleData.DfTpr.Bpl,
                                2)

            .Col = 744
            .Value = aHoleData.DfTpr.FeAdj
            .Col = 745
            .Value = aHoleData.DfTpr.IaAdj
            .Col = 746
            .Value = gGetMer(aHoleData.DfTpr.Bpl,
                             aHoleData.DfTpr.FeAdj,
                             aHoleData.DfTpr.Al,
                             aHoleData.DfTpr.Mg,
                             2)
            '-----
            .Col = 747
            .Value = aHoleData.DfTcn100.Tpa
            .Col = 748
            .Value = aHoleData.DfTcn100.WtPct
            .Col = 749
            .Value = aHoleData.DfTcn100.Bpl
            .Col = 750
            .Value = aHoleData.DfTcn100.Ins
            .Col = 751
            .Value = aHoleData.DfTcn100.Ia
            .Col = 752
            .Value = aHoleData.DfTcn100.Fe
            .Col = 753
            .Value = aHoleData.DfTcn100.Al
            .Col = 754
            .Value = aHoleData.DfTcn100.Mg
            .Col = 755
            .Value = aHoleData.DfTcn100.Ca
            .Col = 756
            .Value = gGetMer(aHoleData.DfTcn100.Bpl,
                             aHoleData.DfTcn100.Fe,
                             aHoleData.DfTcn100.Al,
                             aHoleData.DfTcn100.Mg,
                             2)
            .Col = 757
            .Value = gGetCaP2O5(aHoleData.DfTcn100.Ca,
                                aHoleData.DfTcn100.Bpl,
                                2)

            .Col = 758
            .Value = aHoleData.DfTcn100.FeAdj
            .Col = 759
            .Value = aHoleData.DfTcn100.IaAdj
            .Col = 760
            .Value = gGetMer(aHoleData.DfTcn100.Bpl,
                             aHoleData.DfTcn100.FeAdj,
                             aHoleData.DfTcn100.Al,
                             aHoleData.DfTcn100.Mg,
                             2)
            '-----
            .Col = 761
            .Value = aHoleData.DfTpr100.Tpa
            .Col = 762
            .Value = aHoleData.DfTpr100.WtPct
            .Col = 763
            .Value = aHoleData.DfTpr100.Bpl
            .Col = 764
            .Value = aHoleData.DfTpr100.Ins
            .Col = 765
            .Value = aHoleData.DfTpr100.Ia
            .Col = 766
            .Value = aHoleData.DfTpr100.Fe
            .Col = 767
            .Value = aHoleData.DfTpr100.Al
            .Col = 768
            .Value = aHoleData.DfTpr100.Mg
            .Col = 769
            .Value = aHoleData.DfTpr100.Ca
            .Col = 770
            .Value = gGetMer(aHoleData.DfTpr100.Bpl,
                             aHoleData.DfTpr100.Fe,
                             aHoleData.DfTpr100.Al,
                             aHoleData.DfTpr100.Mg,
                             2)
            .Col = 771
            .Value = gGetCaP2O5(aHoleData.DfTpr100.Ca,
                                aHoleData.DfTpr100.Bpl,
                                2)

            .Col = 772
            .Value = aHoleData.DfTpr100.FeAdj
            .Col = 773
            .Value = aHoleData.DfTpr100.IaAdj
            .Col = 774
            .Value = gGetMer(aHoleData.DfTpr100.Bpl,
                             aHoleData.DfTpr100.FeAdj,
                             aHoleData.DfTpr100.Al,
                             aHoleData.DfTpr100.Mg,
                             2)

            '-----
            'Currently in Public Sub AssignCompositedHoleData
            .Col = 777
            .Value = aHoleData.CpbRej.Tpa      'PC
            .Col = 778
            .Value = aHoleData.CpbRej.WtPct    'PC
            .Col = 779
            .Value = aHoleData.CpbRej.Bpl      'PC
            .Col = 780
            .Value = aHoleData.CpbRej.Ins      'PC
            .Col = 781
            .Value = aHoleData.CpbRej.Ia       'PC
            .Col = 782
            .Value = aHoleData.CpbRej.Fe       'PC
            .Col = 783
            .Value = aHoleData.CpbRej.Al       'PC
            .Col = 784
            .Value = aHoleData.CpbRej.Mg       'PC
            .Col = 785
            .Value = aHoleData.CpbRej.Ca       'PC
            .Col = 786
            .Value = gGetMer(aHoleData.CpbRej.Bpl,
                             aHoleData.CpbRej.Fe,
                             aHoleData.CpbRej.Al,
                             aHoleData.CpbRej.Mg,
                             2)             'PC
            .Col = 787
            .Value = gGetCaP2O5(aHoleData.CpbRej.Ca,
                                aHoleData.CpbRej.Bpl,
                                2)          'PC
            .Col = 788
            .Value = aHoleData.CpbRej.FeAdj
            .Col = 789
            .Value = aHoleData.CpbRej.IaAdj
            .Col = 790
            .Value = gGetMer(aHoleData.CpbRej.Bpl,
                             aHoleData.CpbRej.FeAdj,
                             aHoleData.CpbRej.Al,
                             aHoleData.CpbRej.Mg,
                             2)
            '-----
            .Col = 791
            .Value = aHoleData.CpbRej100.Tpa    '100
            .Col = 792
            .Value = aHoleData.CpbRej100.WtPct    '100
            .Col = 793
            .Value = aHoleData.CpbRej100.Bpl      '100
            .Col = 794
            .Value = aHoleData.CpbRej100.Ins      '100
            .Col = 795
            .Value = aHoleData.CpbRej100.Ia       '100
            .Col = 796
            .Value = aHoleData.CpbRej100.Fe       '100
            .Col = 797
            .Value = aHoleData.CpbRej100.Al       '100
            .Col = 798
            .Value = aHoleData.CpbRej100.Mg       '100
            .Col = 799
            .Value = aHoleData.CpbRej100.Ca       '100
            .Col = 800
            .Value = gGetMer(aHoleData.CpbRej100.Bpl,
                             aHoleData.CpbRej100.Fe,
                             aHoleData.CpbRej100.Al,
                             aHoleData.CpbRej100.Mg,
                             2)             '100
            .Col = 801
            .Value = gGetCaP2O5(aHoleData.CpbRej100.Ca,
                                aHoleData.CpbRej100.Bpl,
                                2)          '100
            .Col = 802
            .Value = aHoleData.CpbRej100.FeAdj
            .Col = 803
            .Value = aHoleData.CpbRej100.IaAdj
            .Col = 804
            .Value = gGetMer(aHoleData.CpbRej100.Bpl,
                             aHoleData.CpbRej100.FeAdj,
                             aHoleData.CpbRej100.Al,
                             aHoleData.CpbRej100.Mg,
                             2)
        End With
    End Sub

    Public Sub CalcDataFromSumDataComp(ByRef aHoleData As gRawProspSplRdctnType,
                                   ByRef aSumData As gRawProspSplRdctnSumType,
                                   ByVal aRcvryParamsData As gDataRdctnParamsType,
                                   ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                   ByVal aWhichToCalc As String,
                                   ByVal aSpl1Depth As Single)

        Dim MtxYds As Double
        Dim OvbYds As Double
        Dim ItbYds As Double
        Dim TotYds As Double

        Dim InclCpb As Boolean
        Dim InclFpb As Boolean
        Dim InclOs As Boolean
        Dim InclCcn As Boolean
        Dim InclFcn As Boolean
        Dim InclIp As Boolean

        InclIp = True

        'aWhichToCalc will be "ProdCoeff', "100%" or "Both".

        'Matrix "X" and Total "X" comments
        '---------------------------------
        'Calculate Matrix "X" All PC and Total "X" All PC for the Hole
        'aHoleData.MtxxAllPcHole and aHoleData.TotxAllPcHole

        'Calculate Matrix "X" All 100 and Total "X" All 100 for the Hole
        'aHoleData.MtxxAll100Hole and aHoleData.TotxAll100Hole

        'InclCpb, InclFpb, InclOs will be used to determine whether to include
        'the Cpb, Fpb or Os in the total pebble.
        InclCpb = False
        InclFpb = False
        InclOs = False
        InclCcn = False
        InclFcn = False

        'Coarse pebble
        If Not aRecoveryParams.EnterCoarsePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then 'aRcvryParamsData.InclCpbAlways Then
            'Include the Cpb no matter what.
            InclCpb = True
        Else
            If aRecoveryParams.EnterTotalPebbleRejectValue Then
                'Include the Fpb if the Tpb quality is OK.
                If aHoleData.TpbOnSpec = "No" Then
                    InclCpb = False
                Else
                    InclCpb = True
                End If
            Else
                'Include the Cpb if the quality is OK.
                'Have to selectively include the Cpb.
                If aHoleData.CpbOnSpec = "Yes" Or aHoleData.CpbOnSpec = "ND" Then
                    InclCpb = True
                End If
            End If
        End If
        'End If

        'Temp Fix!!!

        'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
        '------------------------------------------
        'Currently in Public Sub CalcDataFromSumDataComp

        If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
            InclCpb = True
            InclFpb = True
        End If

        'Fine pebble
        If Not aRecoveryParams.EnterFinePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
            'Include the Fpb no matter what.
            InclFpb = True
        Else
            If aRecoveryParams.EnterTotalPebbleRejectValue Then
                'Include the Fpb if the Tpb quality is OK.
                If aHoleData.TpbOnSpec = "No" Then
                    InclFpb = False
                Else
                    InclFpb = True
                End If
            Else
                'Include the Cpb if the quality is OK.
                'Have to selectively include the Cpb.
                If aHoleData.FpbOnSpec = "Yes" Or aHoleData.FpbOnSpec = "ND" Then
                    InclFpb = True
                End If
            End If
        End If
        'End If

        'Oversize
        If aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize Then ' aRcvryParamsData.InclOsAlways Then
            'Include the Os no matter what.
            InclOs = True
        Else
            InclOs = False
            'If aRcvryParamsData.InclOsNever Then
            '    'Exclude the Os no matter what.
            '    InclOs = False
            'Else
            '    'Include the Os if the quality is OK.
            '    'Need to use .OsMinHole here
            '    If aHoleData.OsMinHole = "Yes" Or aHoleData.OsMinHole = "ND" Then
            '        InclOs = True
            '    End If
            'End If
        End If
        'Coarse concentrate
        If aRcvryParamsData.CanSelectRejectTcn Then
            'Include the Ccn if the quality is OK.
            'Need to use .CcnMinHole here
            If aHoleData.CcnOnSpec = "Yes" Or aHoleData.CcnOnSpec = "ND" Then
                InclCcn = True
            End If
        Else
            InclCcn = True
        End If

        'Fine concentrate
        If aRcvryParamsData.CanSelectRejectTcn Then
            'Include the Fcn if the quality is OK.
            'Need to use .FcnMinHole here
            If aHoleData.FcnOnSpec = "Yes" Or aHoleData.FcnOnSpec = "ND" Then
                InclFcn = True
            End If
        Else
            InclFcn = True
        End If

        With aHoleData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff
                'ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff  ProdCoeff

                'Oversize PC
                .Os.Tpa = aSumData.Os.Tpa
                If aSumData.Os.TwBpl <> 0 Then
                    .Os.Bpl = Round(aSumData.Os.BplTons / aSumData.Os.TwBpl, 1)
                Else
                    .Os.Bpl = 0
                End If
                If aSumData.Os.TwIns <> 0 Then
                    .Os.Ins = Round(aSumData.Os.InsTons / aSumData.Os.TwIns, 1)
                Else
                    .Os.Ins = 0
                End If
                If aSumData.Os.TwIa <> 0 Then
                    .Os.Ia = Round(aSumData.Os.IaTons / aSumData.Os.TwIa, 2)
                Else
                    .Os.Ia = 0
                End If
                If aSumData.Os.TwIaAdj <> 0 Then
                    .Os.IaAdj = Round(aSumData.Os.IaAdjTons / aSumData.Os.TwIaAdj, 2)
                Else
                    .Os.IaAdj = 0
                End If
                If aSumData.Os.TwFe <> 0 Then
                    .Os.Fe = Round(aSumData.Os.FeTons / aSumData.Os.TwFe, 2)
                Else
                    .Os.Fe = 0
                End If
                If aSumData.Os.TwFeAdj <> 0 Then
                    .Os.FeAdj = Round(aSumData.Os.FeAdjTons / aSumData.Os.TwFeAdj, 2)
                Else
                    .Os.FeAdj = 0
                End If
                If aSumData.Os.TwAl <> 0 Then
                    .Os.Al = Round(aSumData.Os.AlTons / aSumData.Os.TwAl, 2)
                Else
                    .Os.Al = 0
                End If
                If aSumData.Os.TwMg <> 0 Then
                    .Os.Mg = Round(aSumData.Os.MgTons / aSumData.Os.TwMg, 2)
                Else
                    .Os.Mg = 0
                End If
                If aSumData.Os.TwCa <> 0 Then
                    .Os.Ca = Round(aSumData.Os.CaTons / aSumData.Os.TwCa, 1)
                Else
                    .Os.Ca = 0
                End If

                'Coarse pebble PC
                .Cpb.Tpa = aSumData.Cpb.Tpa
                If aSumData.Cpb.TwBpl <> 0 Then
                    .Cpb.Bpl = Round(aSumData.Cpb.BplTons / aSumData.Cpb.TwBpl, 1)
                Else
                    .Cpb.Bpl = 0
                End If
                If aSumData.Cpb.TwIns <> 0 Then
                    .Cpb.Ins = Round(aSumData.Cpb.InsTons / aSumData.Cpb.TwIns, 1)
                Else
                    .Cpb.Ins = 0
                End If
                If aSumData.Cpb.TwIa <> 0 Then
                    .Cpb.Ia = Round(aSumData.Cpb.IaTons / aSumData.Cpb.TwIa, 2)
                Else
                    .Cpb.Ia = 0
                End If
                If aSumData.Cpb.TwIaAdj <> 0 Then
                    .Cpb.IaAdj = Round(aSumData.Cpb.IaAdjTons / aSumData.Cpb.TwIaAdj, 2)
                Else
                    .Cpb.IaAdj = 0
                End If
                If aSumData.Cpb.TwFe <> 0 Then
                    .Cpb.Fe = Round(aSumData.Cpb.FeTons / aSumData.Cpb.TwFe, 2)
                Else
                    .Cpb.Fe = 0
                End If
                If aSumData.Cpb.TwFeAdj <> 0 Then
                    .Cpb.FeAdj = Round(aSumData.Cpb.FeAdjTons / aSumData.Cpb.TwFeAdj, 2)
                Else
                    .Cpb.FeAdj = 0
                End If
                If aSumData.Cpb.TwAl <> 0 Then
                    .Cpb.Al = Round(aSumData.Cpb.AlTons / aSumData.Cpb.TwAl, 2)
                Else
                    .Cpb.Al = 0
                End If
                If aSumData.Cpb.TwMg <> 0 Then
                    .Cpb.Mg = Round(aSumData.Cpb.MgTons / aSumData.Cpb.TwMg, 2)
                Else
                    .Cpb.Mg = 0
                End If
                If aSumData.Cpb.TwCa <> 0 Then
                    .Cpb.Ca = Round(aSumData.Cpb.CaTons / aSumData.Cpb.TwCa, 1)
                Else
                    .Cpb.Ca = 0
                End If

                'Coarse pebble reject PC
                .CpbRej.Tpa = aSumData.CpbRej.Tpa
                If aSumData.CpbRej.TwBpl <> 0 Then
                    .CpbRej.Bpl = Round(aSumData.CpbRej.BplTons / aSumData.CpbRej.TwBpl, 1)
                Else
                    .CpbRej.Bpl = 0
                End If
                If aSumData.CpbRej.TwIns <> 0 Then
                    .CpbRej.Ins = Round(aSumData.CpbRej.InsTons / aSumData.CpbRej.TwIns, 1)
                Else
                    .CpbRej.Ins = 0
                End If
                If aSumData.CpbRej.TwIa <> 0 Then
                    .CpbRej.Ia = Round(aSumData.CpbRej.IaTons / aSumData.CpbRej.TwIa, 2)
                Else
                    .CpbRej.Ia = 0
                End If
                If aSumData.CpbRej.TwIaAdj <> 0 Then
                    .CpbRej.IaAdj = Round(aSumData.CpbRej.IaAdjTons / aSumData.CpbRej.TwIaAdj, 2)
                Else
                    .CpbRej.IaAdj = 0
                End If
                If aSumData.CpbRej.TwFe <> 0 Then
                    .CpbRej.Fe = Round(aSumData.CpbRej.FeTons / aSumData.CpbRej.TwFe, 2)
                Else
                    .CpbRej.Fe = 0
                End If
                If aSumData.CpbRej.TwFeAdj <> 0 Then
                    .CpbRej.FeAdj = Round(aSumData.CpbRej.FeAdjTons / aSumData.CpbRej.TwFeAdj, 2)
                Else
                    .CpbRej.FeAdj = 0
                End If
                If aSumData.CpbRej.TwAl <> 0 Then
                    .CpbRej.Al = Round(aSumData.CpbRej.AlTons / aSumData.CpbRej.TwAl, 2)
                Else
                    .CpbRej.Al = 0
                End If
                If aSumData.CpbRej.TwMg <> 0 Then
                    .CpbRej.Mg = Round(aSumData.CpbRej.MgTons / aSumData.CpbRej.TwMg, 2)
                Else
                    .CpbRej.Mg = 0
                End If
                If aSumData.CpbRej.TwCa <> 0 Then
                    .CpbRej.Ca = Round(aSumData.CpbRej.CaTons / aSumData.CpbRej.TwCa, 1)
                Else
                    .CpbRej.Ca = 0
                End If

                'Fine pebble PC
                .Fpb.Tpa = aSumData.Fpb.Tpa
                If aSumData.Fpb.TwBpl <> 0 Then
                    .Fpb.Bpl = Round(aSumData.Fpb.BplTons / aSumData.Fpb.TwBpl, 1)
                Else
                    .Fpb.Bpl = 0
                End If
                If aSumData.Fpb.TwIns <> 0 Then
                    .Fpb.Ins = Round(aSumData.Fpb.InsTons / aSumData.Fpb.TwIns, 1)
                Else
                    .Fpb.Ins = 0
                End If
                If aSumData.Fpb.TwIa <> 0 Then
                    .Fpb.Ia = Round(aSumData.Fpb.IaTons / aSumData.Fpb.TwIa, 2)
                Else
                    .Fpb.Ia = 0
                End If
                If aSumData.Fpb.TwIaAdj <> 0 Then
                    .Fpb.IaAdj = Round(aSumData.Fpb.IaAdjTons / aSumData.Fpb.TwIaAdj, 2)
                Else
                    .Fpb.IaAdj = 0
                End If
                If aSumData.Fpb.TwFe <> 0 Then
                    .Fpb.Fe = Round(aSumData.Fpb.FeTons / aSumData.Fpb.TwFe, 2)
                Else
                    .Fpb.Fe = 0
                End If
                If aSumData.Fpb.TwFeAdj <> 0 Then
                    .Fpb.FeAdj = Round(aSumData.Fpb.FeAdjTons / aSumData.Fpb.TwFeAdj, 2)
                Else
                    .Fpb.FeAdj = 0
                End If
                If aSumData.Fpb.TwAl <> 0 Then
                    .Fpb.Al = Round(aSumData.Fpb.AlTons / aSumData.Fpb.TwAl, 2)
                Else
                    .Fpb.Al = 0
                End If
                If aSumData.Fpb.TwMg <> 0 Then
                    .Fpb.Mg = Round(aSumData.Fpb.MgTons / aSumData.Fpb.TwMg, 2)
                Else
                    .Fpb.Mg = 0
                End If
                If aSumData.Fpb.TwCa <> 0 Then
                    .Fpb.Ca = Round(aSumData.Fpb.CaTons / aSumData.Fpb.TwCa, 1)
                Else
                    .Fpb.Ca = 0
                End If

                'Total pebble PC rejected at washer
                'Currently in Sub CalcDataFromSumDataComp
                .TpbRej.Tpa = aSumData.TpbRej.Tpa
                If aSumData.TpbRej.TwBpl <> 0 Then
                    .TpbRej.Bpl = Round(aSumData.TpbRej.BplTons / aSumData.TpbRej.TwBpl, 1)
                Else
                    .TpbRej.Bpl = 0
                End If
                If aSumData.TpbRej.TwIns <> 0 Then
                    .TpbRej.Ins = Round(aSumData.TpbRej.InsTons / aSumData.TpbRej.TwIns, 1)
                Else
                    .TpbRej.Ins = 0
                End If
                If aSumData.TpbRej.TwIa <> 0 Then
                    .TpbRej.Ia = Round(aSumData.TpbRej.IaTons / aSumData.TpbRej.TwIa, 2)
                Else
                    .TpbRej.Ia = 0
                End If
                If aSumData.TpbRej.TwIaAdj <> 0 Then
                    .TpbRej.IaAdj = Round(aSumData.TpbRej.IaAdjTons / aSumData.TpbRej.TwIaAdj, 2)
                Else
                    .TpbRej.IaAdj = 0
                End If
                If aSumData.TpbRej.TwFe <> 0 Then
                    .TpbRej.Fe = Round(aSumData.TpbRej.FeTons / aSumData.TpbRej.TwFe, 2)
                Else
                    .TpbRej.Fe = 0
                End If
                If aSumData.TpbRej.TwFeAdj <> 0 Then
                    .TpbRej.FeAdj = Round(aSumData.TpbRej.FeAdjTons / aSumData.TpbRej.TwFeAdj, 2)
                Else
                    .TpbRej.FeAdj = 0
                End If
                If aSumData.TpbRej.TwAl <> 0 Then
                    .TpbRej.Al = Round(aSumData.TpbRej.AlTons / aSumData.TpbRej.TwAl, 2)
                Else
                    .TpbRej.Al = 0
                End If
                If aSumData.TpbRej.TwMg <> 0 Then
                    .TpbRej.Mg = Round(aSumData.TpbRej.MgTons / aSumData.TpbRej.TwMg, 2)
                Else
                    .TpbRej.Mg = 0
                End If
                If aSumData.TpbRej.TwCa <> 0 Then
                    .TpbRej.Ca = Round(aSumData.TpbRej.CaTons / aSumData.TpbRej.TwCa, 1)
                Else
                    .TpbRej.Ca = 0
                End If

                'IP PC
                .Ip.Tpa = aSumData.Ip.Tpa
                If aSumData.Ip.TwBpl <> 0 Then
                    .Ip.Bpl = Round(aSumData.Ip.BplTons / aSumData.Ip.TwBpl, 1)
                Else
                    .Ip.Bpl = 0
                End If
                If aSumData.Ip.TwIns <> 0 Then
                    .Ip.Ins = Round(aSumData.Ip.InsTons / aSumData.Ip.TwIns, 1)
                Else
                    .Ip.Ins = 0
                End If
                If aSumData.Ip.TwIa <> 0 Then
                    .Ip.Ia = Round(aSumData.Ip.IaTons / aSumData.Ip.TwIa, 2)
                Else
                    .Ip.Ia = 0
                End If
                If aSumData.Ip.TwIaAdj <> 0 Then
                    .Ip.IaAdj = Round(aSumData.Ip.IaAdjTons / aSumData.Ip.TwIaAdj, 2)
                Else
                    .Ip.IaAdj = 0
                End If
                If aSumData.Ip.TwFe <> 0 Then
                    .Ip.Fe = Round(aSumData.Ip.FeTons / aSumData.Ip.TwFe, 2)
                Else
                    .Ip.Fe = 0
                End If
                If aSumData.Ip.TwFeAdj <> 0 Then
                    .Ip.FeAdj = Round(aSumData.Ip.FeAdjTons / aSumData.Ip.TwFeAdj, 2)
                Else
                    .Ip.FeAdj = 0
                End If
                If aSumData.Ip.TwAl <> 0 Then
                    .Ip.Al = Round(aSumData.Ip.AlTons / aSumData.Ip.TwAl, 2)
                Else
                    .Ip.Al = 0
                End If
                If aSumData.Ip.TwMg <> 0 Then
                    .Ip.Mg = Round(aSumData.Ip.MgTons / aSumData.Ip.TwMg, 2)
                Else
                    .Ip.Mg = 0
                End If
                If aSumData.Ip.TwCa <> 0 Then
                    .Ip.Ca = Round(aSumData.Ip.CaTons / aSumData.Ip.TwCa, 1)
                Else
                    .Ip.Ca = 0
                End If

                'Coarse concentrate PC
                .Ccn.Tpa = aSumData.Ccn.Tpa
                If aSumData.Ccn.TwBpl <> 0 Then
                    .Ccn.Bpl = Round(aSumData.Ccn.BplTons / aSumData.Ccn.TwBpl, 1)
                Else
                    .Ccn.Bpl = 0
                End If
                If aSumData.Ccn.TwIns <> 0 Then
                    .Ccn.Ins = Round(aSumData.Ccn.InsTons / aSumData.Ccn.TwIns, 1)
                Else
                    .Ccn.Ins = 0
                End If
                If aSumData.Ccn.TwIa <> 0 Then
                    .Ccn.Ia = Round(aSumData.Ccn.IaTons / aSumData.Ccn.TwIa, 2)
                Else
                    .Ccn.Ia = 0
                End If
                If aSumData.Ccn.TwIaAdj <> 0 Then
                    .Ccn.IaAdj = Round(aSumData.Ccn.IaAdjTons / aSumData.Ccn.TwIaAdj, 2)
                Else
                    .Ccn.IaAdj = 0
                End If
                If aSumData.Ccn.TwFe <> 0 Then
                    .Ccn.Fe = Round(aSumData.Ccn.FeTons / aSumData.Ccn.TwFe, 2)
                Else
                    .Ccn.Fe = 0
                End If
                If aSumData.Ccn.TwFeAdj <> 0 Then
                    .Ccn.FeAdj = Round(aSumData.Ccn.FeAdjTons / aSumData.Ccn.TwFeAdj, 2)
                Else
                    .Ccn.FeAdj = 0
                End If
                If aSumData.Ccn.TwAl <> 0 Then
                    .Ccn.Al = Round(aSumData.Ccn.AlTons / aSumData.Ccn.TwAl, 2)
                Else
                    .Ccn.Al = 0
                End If
                If aSumData.Ccn.TwMg <> 0 Then
                    .Ccn.Mg = Round(aSumData.Ccn.MgTons / aSumData.Ccn.TwMg, 2)
                Else
                    .Ccn.Mg = 0
                End If
                If aSumData.Ccn.TwCa <> 0 Then
                    .Ccn.Ca = Round(aSumData.Ccn.CaTons / aSumData.Ccn.TwCa, 1)
                Else
                    .Ccn.Ca = 0
                End If

                'Fine concentrate PC
                .Fcn.Tpa = aSumData.Fcn.Tpa
                If aSumData.Fcn.TwBpl <> 0 Then
                    .Fcn.Bpl = Round(aSumData.Fcn.BplTons / aSumData.Fcn.TwBpl, 1)
                Else
                    .Fcn.Bpl = 0
                End If
                If aSumData.Fcn.TwIns <> 0 Then
                    .Fcn.Ins = Round(aSumData.Fcn.InsTons / aSumData.Fcn.TwIns, 1)
                Else
                    .Fcn.Ins = 0
                End If
                If aSumData.Fcn.TwIa <> 0 Then
                    .Fcn.Ia = Round(aSumData.Fcn.IaTons / aSumData.Fcn.TwIa, 2)
                Else
                    .Fcn.Ia = 0
                End If
                If aSumData.Fcn.TwIaAdj <> 0 Then
                    .Fcn.IaAdj = Round(aSumData.Fcn.IaAdjTons / aSumData.Fcn.TwIaAdj, 2)
                Else
                    .Fcn.IaAdj = 0
                End If
                If aSumData.Fcn.TwFe <> 0 Then
                    .Fcn.Fe = Round(aSumData.Fcn.FeTons / aSumData.Fcn.TwFe, 2)
                Else
                    .Fcn.Fe = 0
                End If
                If aSumData.Fcn.TwFeAdj <> 0 Then
                    .Fcn.FeAdj = Round(aSumData.Fcn.FeAdjTons / aSumData.Fcn.TwFeAdj, 2)
                Else
                    .Fcn.FeAdj = 0
                End If
                If aSumData.Fcn.TwAl <> 0 Then
                    .Fcn.Al = Round(aSumData.Fcn.AlTons / aSumData.Fcn.TwAl, 2)
                Else
                    .Fcn.Al = 0
                End If
                If aSumData.Fcn.TwMg <> 0 Then
                    .Fcn.Mg = Round(aSumData.Fcn.MgTons / aSumData.Fcn.TwMg, 2)
                Else
                    .Fcn.Mg = 0
                End If
                If aSumData.Fcn.TwCa <> 0 Then
                    .Fcn.Ca = Round(aSumData.Fcn.CaTons / aSumData.Fcn.TwCa, 1)
                Else
                    .Fcn.Ca = 0
                End If

                'Total concentrate PC
                aSumData.Tcn.Tpa = aSumData.Ccn.Tpa + aSumData.Fcn.Tpa

                'Total concentrate PC rejected somewhere
                '09/11/2009, lss -- Added the following.
                .TcnRej.Tpa = aSumData.TcnRej.Tpa
                If aSumData.TcnRej.TwBpl <> 0 Then
                    .TcnRej.Bpl = Round(aSumData.TcnRej.BplTons / aSumData.TcnRej.TwBpl, 1)
                Else
                    .TcnRej.Bpl = 0
                End If
                If aSumData.TcnRej.TwIns <> 0 Then
                    .TcnRej.Ins = Round(aSumData.TcnRej.InsTons / aSumData.TcnRej.TwIns, 1)
                Else
                    .TcnRej.Ins = 0
                End If
                If aSumData.TcnRej.TwIa <> 0 Then
                    .TcnRej.Ia = Round(aSumData.TcnRej.IaTons / aSumData.TcnRej.TwIa, 2)
                Else
                    .TcnRej.Ia = 0
                End If
                If aSumData.TcnRej.TwIaAdj <> 0 Then
                    .TcnRej.IaAdj = Round(aSumData.TcnRej.IaAdjTons / aSumData.TcnRej.TwIaAdj, 2)
                Else
                    .TcnRej.IaAdj = 0
                End If
                If aSumData.TcnRej.TwFe <> 0 Then
                    .TcnRej.Fe = Round(aSumData.TcnRej.FeTons / aSumData.TcnRej.TwFe, 2)
                Else
                    .TcnRej.Fe = 0
                End If
                If aSumData.TcnRej.TwFeAdj <> 0 Then
                    .TcnRej.FeAdj = Round(aSumData.TcnRej.FeAdjTons / aSumData.TcnRej.TwFeAdj, 2)
                Else
                    .TcnRej.FeAdj = 0
                End If
                If aSumData.TcnRej.TwAl <> 0 Then
                    .TcnRej.Al = Round(aSumData.TcnRej.AlTons / aSumData.TcnRej.TwAl, 2)
                Else
                    .TcnRej.Al = 0
                End If
                If aSumData.TcnRej.TwMg <> 0 Then
                    .TcnRej.Mg = Round(aSumData.TcnRej.MgTons / aSumData.TcnRej.TwMg, 2)
                Else
                    .TcnRej.Mg = 0
                End If
                If aSumData.TcnRej.TwCa <> 0 Then
                    .TcnRej.Ca = Round(aSumData.TcnRej.CaTons / aSumData.TcnRej.TwCa, 1)
                Else
                    .TcnRej.Ca = 0
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'Off-spec pebble MgO plant input PC
                    .MgPltInp.Tpa = aSumData.MgPltInp.Tpa
                    If aSumData.MgPltInp.TwBpl <> 0 Then
                        .MgPltInp.Bpl = Round(aSumData.MgPltInp.BplTons / aSumData.MgPltInp.TwBpl, 1)
                    Else
                        .MgPltInp.Bpl = 0
                    End If
                    If aSumData.MgPltInp.TwIns <> 0 Then
                        .MgPltInp.Ins = Round(aSumData.MgPltInp.InsTons / aSumData.MgPltInp.TwIns, 1)
                    Else
                        .MgPltInp.Ins = 0
                    End If
                    If aSumData.MgPltInp.TwIa <> 0 Then
                        .MgPltInp.Ia = Round(aSumData.MgPltInp.IaTons / aSumData.MgPltInp.TwIa, 2)
                    Else
                        .MgPltInp.Ia = 0
                    End If
                    If aSumData.MgPltInp.TwFe <> 0 Then
                        .MgPltInp.Fe = Round(aSumData.MgPltInp.FeTons / aSumData.MgPltInp.TwFe, 2)
                    Else
                        .MgPltInp.Fe = 0
                    End If

                    'Currently in Sub CalcDataFromSumDataComp.
                    '03/24/2011**, lss New
                    If aSumData.MgPltInp.TwIaAdj <> 0 Then
                        .MgPltInp.IaAdj = Round(aSumData.MgPltInp.IaAdjTons / aSumData.MgPltInp.TwIaAdj, 2)
                    Else
                        .MgPltInp.IaAdj = 0
                    End If
                    If aSumData.MgPltInp.TwFeAdj <> 0 Then
                        .MgPltInp.FeAdj = Round(aSumData.MgPltInp.FeAdjTons / aSumData.MgPltInp.TwFeAdj, 2)
                    Else
                        .MgPltInp.FeAdj = 0
                    End If

                    If aSumData.MgPltInp.TwAl <> 0 Then
                        .MgPltInp.Al = Round(aSumData.MgPltInp.AlTons / aSumData.MgPltInp.TwAl, 2)
                    Else
                        .MgPltInp.Al = 0
                    End If
                    If aSumData.MgPltInp.TwMg <> 0 Then
                        .MgPltInp.Mg = Round(aSumData.MgPltInp.MgTons / aSumData.MgPltInp.TwMg, 2)
                    Else
                        .MgPltInp.Mg = 0
                    End If
                    If aSumData.MgPltInp.TwCa <> 0 Then
                        .MgPltInp.Ca = Round(aSumData.MgPltInp.CaTons / aSumData.MgPltInp.TwCa, 1)
                    Else
                        .MgPltInp.Ca = 0
                    End If

                    'Off-spec pebble MgO plant reject PC
                    .MgPltRej.Tpa = aSumData.MgPltRej.Tpa
                    If aSumData.MgPltRej.TwBpl <> 0 Then
                        .MgPltRej.Bpl = Round(aSumData.MgPltRej.BplTons / aSumData.MgPltRej.TwBpl, 1)
                    Else
                        .MgPltRej.Bpl = 0
                    End If
                    If aSumData.MgPltRej.TwIns <> 0 Then
                        .MgPltRej.Ins = Round(aSumData.MgPltRej.InsTons / aSumData.MgPltRej.TwIns, 1)
                    Else
                        .MgPltRej.Ins = 0
                    End If
                    If aSumData.MgPltRej.TwIa <> 0 Then
                        .MgPltRej.Ia = Round(aSumData.MgPltRej.IaTons / aSumData.MgPltRej.TwIa, 2)
                    Else
                        .MgPltRej.Ia = 0
                    End If
                    If aSumData.MgPltRej.TwFe <> 0 Then
                        .MgPltRej.Fe = Round(aSumData.MgPltRej.FeTons / aSumData.MgPltRej.TwFe, 2)
                    Else
                        .MgPltRej.Fe = 0
                    End If

                    '03/24/2011**, lss New
                    If aSumData.MgPltRej.TwIaAdj <> 0 Then
                        .MgPltRej.IaAdj = Round(aSumData.MgPltRej.IaAdjTons / aSumData.MgPltRej.TwIaAdj, 2)
                    Else
                        .MgPltRej.IaAdj = 0
                    End If
                    If aSumData.MgPltRej.TwFeAdj <> 0 Then
                        .MgPltRej.FeAdj = Round(aSumData.MgPltRej.FeAdjTons / aSumData.MgPltRej.TwFeAdj, 2)
                    Else
                        .MgPltRej.FeAdj = 0
                    End If

                    If aSumData.MgPltRej.TwAl <> 0 Then
                        .MgPltRej.Al = Round(aSumData.MgPltRej.AlTons / aSumData.MgPltRej.TwAl, 2)
                    Else
                        .MgPltRej.Al = 0
                    End If
                    If aSumData.MgPltRej.TwMg <> 0 Then
                        .MgPltRej.Mg = Round(aSumData.MgPltRej.MgTons / aSumData.MgPltRej.TwMg, 2)
                    Else
                        .MgPltRej.Mg = 0
                    End If
                    If aSumData.MgPltRej.TwCa <> 0 Then
                        .MgPltRej.Ca = Round(aSumData.MgPltRej.CaTons / aSumData.MgPltRej.TwCa, 1)
                    Else
                        .MgPltRej.Ca = 0
                    End If

                    'Off-spec pebble MgO plant product PC
                    .MgPltProd.Tpa = aSumData.MgPltProd.Tpa
                    If aSumData.MgPltProd.TwBpl <> 0 Then
                        .MgPltProd.Bpl = Round(aSumData.MgPltProd.BplTons / aSumData.MgPltProd.TwBpl, 1)
                    Else
                        .MgPltProd.Bpl = 0
                    End If
                    If aSumData.MgPltProd.TwIns <> 0 Then
                        .MgPltProd.Ins = Round(aSumData.MgPltProd.InsTons / aSumData.MgPltProd.TwIns, 1)
                    Else
                        .MgPltProd.Ins = 0
                    End If
                    If aSumData.MgPltProd.TwIa <> 0 Then
                        .MgPltProd.Ia = Round(aSumData.MgPltProd.IaTons / aSumData.MgPltProd.TwIa, 2)
                    Else
                        .MgPltProd.Ia = 0
                    End If
                    If aSumData.MgPltProd.TwFe <> 0 Then
                        .MgPltProd.Fe = Round(aSumData.MgPltProd.FeTons / aSumData.MgPltProd.TwFe, 2)
                    Else
                        .MgPltProd.Fe = 0
                    End If

                    '03/24/2011**, lss
                    If aSumData.MgPltProd.TwIaAdj <> 0 Then
                        .MgPltProd.IaAdj = Round(aSumData.MgPltProd.IaAdjTons / aSumData.MgPltProd.TwIaAdj, 2)
                    Else
                        .MgPltProd.IaAdj = 0
                    End If
                    If aSumData.MgPltProd.TwFeAdj <> 0 Then
                        .MgPltProd.FeAdj = Round(aSumData.MgPltProd.FeAdjTons / aSumData.MgPltProd.TwFeAdj, 2)
                    Else
                        .MgPltProd.FeAdj = 0
                    End If

                    If aSumData.MgPltProd.TwAl <> 0 Then
                        .MgPltProd.Al = Round(aSumData.MgPltProd.AlTons / aSumData.MgPltProd.TwAl, 2)
                    Else
                        .MgPltProd.Al = 0
                    End If
                    If aSumData.MgPltProd.TwMg <> 0 Then
                        .MgPltProd.Mg = Round(aSumData.MgPltProd.MgTons / aSumData.MgPltProd.TwMg, 2)
                    Else
                        .MgPltProd.Mg = 0
                    End If
                    If aSumData.MgPltProd.TwCa <> 0 Then
                        .MgPltProd.Ca = Round(aSumData.MgPltProd.CaTons / aSumData.MgPltProd.TwCa, 1)
                    Else
                        .MgPltProd.Ca = 0
                    End If
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Public Sub CalcDataFromSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    'Doloflot plant fine pebble input PC
                    .DfFpbInp.Tpa = aSumData.DfFpbInp.Tpa
                    If aSumData.DfFpbInp.TwBpl <> 0 Then
                        .DfFpbInp.Bpl = Round(aSumData.DfFpbInp.BplTons / aSumData.DfFpbInp.TwBpl, 1)
                    Else
                        .DfFpbInp.Bpl = 0
                    End If
                    If aSumData.DfFpbInp.TwIns <> 0 Then
                        .DfFpbInp.Ins = Round(aSumData.DfFpbInp.InsTons / aSumData.DfFpbInp.TwIns, 1)
                    Else
                        .DfFpbInp.Ins = 0
                    End If
                    If aSumData.DfFpbInp.TwIa <> 0 Then
                        .DfFpbInp.Ia = Round(aSumData.DfFpbInp.IaTons / aSumData.DfFpbInp.TwIa, 2)
                    Else
                        .DfFpbInp.Ia = 0
                    End If
                    If aSumData.DfFpbInp.TwFe <> 0 Then
                        .DfFpbInp.Fe = Round(aSumData.DfFpbInp.FeTons / aSumData.DfFpbInp.TwFe, 2)
                    Else
                        .DfFpbInp.Fe = 0
                    End If
                    If aSumData.DfFpbInp.TwFeAdj <> 0 Then
                        .DfFpbInp.FeAdj = Round(aSumData.DfFpbInp.FeAdjTons / aSumData.DfFpbInp.TwFeAdj, 2)
                    Else
                        .DfFpbInp.FeAdj = 0
                    End If
                    If aSumData.DfFpbInp.TwAl <> 0 Then
                        .DfFpbInp.Al = Round(aSumData.DfFpbInp.AlTons / aSumData.DfFpbInp.TwAl, 2)
                    Else
                        .DfFpbInp.Al = 0
                    End If
                    If aSumData.DfFpbInp.TwMg <> 0 Then
                        .DfFpbInp.Mg = Round(aSumData.DfFpbInp.MgTons / aSumData.DfFpbInp.TwMg, 2)
                    Else
                        .DfFpbInp.Mg = 0
                    End If
                    If aSumData.DfFpbInp.TwCa <> 0 Then
                        .DfFpbInp.Ca = Round(aSumData.DfFpbInp.CaTons / aSumData.DfFpbInp.TwCa, 1)
                    Else
                        .DfFpbInp.Ca = 0
                    End If

                    'Doloflot plant fine pebble reject PC -- no "reject" for Doloflot plant!

                    'Doloflot plant fine pebble product PC
                    .DfFpbProd.Tpa = aSumData.DfFpbProd.Tpa
                    If aSumData.DfFpbProd.TwBpl <> 0 Then
                        .DfFpbProd.Bpl = Round(aSumData.DfFpbProd.BplTons / aSumData.DfFpbProd.TwBpl, 1)
                    Else
                        .DfFpbProd.Bpl = 0
                    End If
                    If aSumData.DfFpbProd.TwIns <> 0 Then
                        .DfFpbProd.Ins = Round(aSumData.DfFpbProd.InsTons / aSumData.DfFpbProd.TwIns, 1)
                    Else
                        .DfFpbProd.Ins = 0
                    End If
                    If aSumData.DfFpbProd.TwIa <> 0 Then
                        .DfFpbProd.Ia = Round(aSumData.DfFpbProd.IaTons / aSumData.DfFpbProd.TwIa, 2)
                    Else
                        .DfFpbProd.Ia = 0
                    End If
                    If aSumData.DfFpbProd.TwFe <> 0 Then
                        .DfFpbProd.Fe = Round(aSumData.DfFpbProd.FeTons / aSumData.DfFpbProd.TwFe, 2)
                    Else
                        .DfFpbProd.Fe = 0
                    End If
                    If aSumData.DfFpbProd.TwFeAdj <> 0 Then
                        .DfFpbProd.FeAdj = Round(aSumData.DfFpbProd.FeAdjTons / aSumData.DfFpbProd.TwFeAdj, 2)
                    Else
                        .DfFpbProd.FeAdj = 0
                    End If
                    If aSumData.DfFpbProd.TwAl <> 0 Then
                        .DfFpbProd.Al = Round(aSumData.DfFpbProd.AlTons / aSumData.DfFpbProd.TwAl, 2)
                    Else
                        .DfFpbProd.Al = 0
                    End If
                    If aSumData.DfFpbProd.TwMg <> 0 Then
                        .DfFpbProd.Mg = Round(aSumData.DfFpbProd.MgTons / aSumData.DfFpbProd.TwMg, 2)
                    Else
                        .DfFpbProd.Mg = 0
                    End If
                    If aSumData.DfFpbProd.TwCa <> 0 Then
                        .DfFpbProd.Ca = Round(aSumData.DfFpbProd.CaTons / aSumData.DfFpbProd.TwCa, 1)
                    Else
                        .DfFpbProd.Ca = 0
                    End If
                End If
                '-----
                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    'Doloflot plant IP input PC
                    .DfIpInp.Tpa = aSumData.DfIpInp.Tpa
                    If aSumData.DfIpInp.TwBpl <> 0 Then
                        .DfIpInp.Bpl = Round(aSumData.DfIpInp.BplTons / aSumData.DfIpInp.TwBpl, 1)
                    Else
                        .DfIpInp.Bpl = 0
                    End If
                    If aSumData.DfIpInp.TwIns <> 0 Then
                        .DfIpInp.Ins = Round(aSumData.DfIpInp.InsTons / aSumData.DfIpInp.TwIns, 1)
                    Else
                        .DfIpInp.Ins = 0
                    End If
                    If aSumData.DfIpInp.TwIa <> 0 Then
                        .DfIpInp.Ia = Round(aSumData.DfIpInp.IaTons / aSumData.DfIpInp.TwIa, 2)
                    Else
                        .DfIpInp.Ia = 0
                    End If
                    If aSumData.DfIpInp.TwFe <> 0 Then
                        .DfIpInp.Fe = Round(aSumData.DfIpInp.FeTons / aSumData.DfIpInp.TwFe, 2)
                    Else
                        .DfIpInp.Fe = 0
                    End If
                    If aSumData.DfIpInp.TwFeAdj <> 0 Then
                        .DfIpInp.FeAdj = Round(aSumData.DfIpInp.FeAdjTons / aSumData.DfIpInp.TwFeAdj, 2)
                    Else
                        .DfIpInp.FeAdj = 0
                    End If
                    If aSumData.DfIpInp.TwAl <> 0 Then
                        .DfIpInp.Al = Round(aSumData.DfIpInp.AlTons / aSumData.DfIpInp.TwAl, 2)
                    Else
                        .DfIpInp.Al = 0
                    End If
                    If aSumData.DfIpInp.TwMg <> 0 Then
                        .DfIpInp.Mg = Round(aSumData.DfIpInp.MgTons / aSumData.DfIpInp.TwMg, 2)
                    Else
                        .DfIpInp.Mg = 0
                    End If
                    If aSumData.DfIpInp.TwCa <> 0 Then
                        .DfIpInp.Ca = Round(aSumData.DfIpInp.CaTons / aSumData.DfIpInp.TwCa, 1)
                    Else
                        .DfIpInp.Ca = 0
                    End If

                    'Doloflot plant IP reject PC -- no "reject" for Doloflot plant!

                    'Doloflot plant IP product PC
                    .DfIpProd.Tpa = aSumData.DfIpProd.Tpa
                    If aSumData.DfIpProd.TwBpl <> 0 Then
                        .DfIpProd.Bpl = Round(aSumData.DfIpProd.BplTons / aSumData.DfIpProd.TwBpl, 1)
                    Else
                        .DfIpProd.Bpl = 0
                    End If
                    If aSumData.DfIpProd.TwIns <> 0 Then
                        .DfIpProd.Ins = Round(aSumData.DfIpProd.InsTons / aSumData.DfIpProd.TwIns, 1)
                    Else
                        .DfIpProd.Ins = 0
                    End If
                    If aSumData.DfIpProd.TwIa <> 0 Then
                        .DfIpProd.Ia = Round(aSumData.DfIpProd.IaTons / aSumData.DfIpProd.TwIa, 2)
                    Else
                        .DfIpProd.Ia = 0
                    End If
                    If aSumData.DfIpProd.TwFe <> 0 Then
                        .DfIpProd.Fe = Round(aSumData.DfIpProd.FeTons / aSumData.DfIpProd.TwFe, 2)
                    Else
                        .DfIpProd.Fe = 0
                    End If
                    If aSumData.DfIpProd.TwFeAdj <> 0 Then
                        .DfIpProd.FeAdj = Round(aSumData.DfIpProd.FeAdjTons / aSumData.DfIpProd.TwFeAdj, 2)
                    Else
                        .DfIpProd.FeAdj = 0
                    End If
                    If aSumData.DfIpProd.TwAl <> 0 Then
                        .DfIpProd.Al = Round(aSumData.DfIpProd.AlTons / aSumData.DfIpProd.TwAl, 2)
                    Else
                        .DfIpProd.Al = 0
                    End If
                    If aSumData.DfIpProd.TwMg <> 0 Then
                        .DfIpProd.Mg = Round(aSumData.DfIpProd.MgTons / aSumData.DfIpProd.TwMg, 2)
                    Else
                        .DfIpProd.Mg = 0
                    End If
                    If aSumData.DfIpProd.TwCa <> 0 Then
                        .DfIpProd.Ca = Round(aSumData.DfIpProd.CaTons / aSumData.DfIpProd.TwCa, 1)
                    Else
                        .DfIpProd.Ca = 0
                    End If
                End If

                'In ProdCoeff stuff still
                'In ProdCoeff stuff still
                'In ProdCoeff stuff still

                'Currently in Public Sub CalcDataFromSumDataComp()

                'Waste clay PC
                .Wcl.Tpa = aSumData.Wcl.Tpa
                If aSumData.Wcl.TwBpl <> 0 Then
                    .Wcl.Bpl = Round(aSumData.Wcl.BplTons / aSumData.Wcl.TwBpl, 1)
                Else
                    .Wcl.Bpl = 0
                End If

                'Coarse feed PC
                .Cfd.Tpa = aSumData.Cfd.Tpa
                If aSumData.Cfd.TwBpl <> 0 Then
                    .Cfd.Bpl = Round(aSumData.Cfd.BplTons / aSumData.Cfd.TwBpl, 1)
                Else
                    .Cfd.Bpl = 0
                End If

                'Fine feed PC
                .Ffd.Tpa = aSumData.Ffd.Tpa
                If aSumData.Ffd.TwBpl <> 0 Then
                    .Ffd.Bpl = Round(aSumData.Ffd.BplTons / aSumData.Ffd.TwBpl, 1)
                Else
                    .Ffd.Bpl = 0
                End If

                'Matrix PC
                .MtxTpaPc = aSumData.MtxTPA

                'In ProdCoeff
                'Will calculate the matrix density here as well -- based on lab densities.
                'This value should be good for either 100%Prospect or ProdCoeff
                If aSumData.MtxFt <> 0 Then
                    .MtxDensity = Round(aSumData.MtxDensityFt / aSumData.MtxFt, 1)
                Else
                    .MtxDensity = 0
                End If

                'Will calculate the matrix %solids and matrix %moisture
                'here as well.
                '10/02/2013, lss
                'Since the MtxTpaWet is a 100%Prospect number I am going to use .MtxTpa100 here.
                'It was -- .MtxPctSol = Round(aSumData.MtxTPA / aSumData.MtxTpaWet * 100, 1)

                If aSumData.MtxTpaWet <> 0 Then
                    .MtxPctSol = Round(aSumData.MtxTpa100 / aSumData.MtxTpaWet * 100, 1)
                Else
                    .MtxPctSol = 0
                End If
                .MtxPctMoist = Round(100 - .MtxPctSol, 1)

                'We are currently in Sub CalcDataFromSumDataComp.

                'Total pebble PC
                CalcTotPbSpec(aHoleData,
                              "ProdCoeff",
                              InclCpb,
                              InclFpb,
                              0,
                              False,
                              False)


                'Total concentrate PC
                If aRcvryParamsData.CanSelectRejectTcn Then
                    CalcTotCnSpec(aHoleData,
                                  "ProdCoeff",
                                  InclCcn,
                                  InclFcn,
                                  "Hole",
                                  0,
                                  aRcvryParamsData.CanSelectRejectTcn,
                                  False)
                Else
                    CalcTotCn(aHoleData, "ProdCoeff")
                End If

                'Total product PC
                'Note: If Off-spec pebble MgO plant exists and has product we will
                '      NOT include it in this total product value.
                aHoleData.Tpr = CalcTotPrSpecCatalog(aHoleData,
                              InclOs,
                              InclIp)

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    CalcTcnPlusMgPltProd(aHoleData,
                                     "ProdCoeff",
                                     "Hole",
                                     0)

                    CalcTprPlusMgPltProd(aHoleData,
                                         "ProdCoeff",
                                         "Hole",
                                         0)
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Public Sub CalcDataFromSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    CalcTcnPlusDoloflotProd(aHoleData,
                                            "ProdCoeff",
                                            "Hole",
                                            0)

                    CalcTprPlusDoloflotProd(aHoleData,
                                            "ProdCoeff",
                                            "Hole",
                                            0)
                End If

                'Total feed PC
                .Tfd.Tpa = .Cfd.Tpa + .Ffd.Tpa
                .Tfd.Bpl = gGetTotalValue(.Cfd.Bpl, .Cfd.Tpa, .Ffd.Bpl, .Ffd.Tpa, 1)

                'Total tails PC
                .Ttl.Tpa = aSumData.Ttl.Tpa
                If aSumData.Ttl.TwBpl <> 0 Then
                    .Ttl.Bpl = Round(aSumData.Ttl.BplTons / aSumData.Ttl.TwBpl, 1)
                Else
                    .Ttl.Bpl = 0
                End If

                'Calculate Matrix "X" All PC and Total "X" All PC for the Hole
                'Calculate Matrix "X" All PC and Total "X" All PC for the Hole
                'Calculate Matrix "X" All PC and Total "X" All PC for the Hole

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO and DOLOFLOT PLANT ONA
                '-----------------------------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'Matrix "X" "All" PC
                    MtxYds = Round(.MtxThk * 43560 / 27, 0)
                    If .MgPltTpr.Tpa <> 0 Then
                        .MtxxAllPcHole = Round(MtxYds / .MgPltTpr.Tpa, 2)
                    Else
                        .MtxxAllPcHole = 0
                    End If

                    'Total "X" "All" PC
                    TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                    If .MgPltTpr.Tpa <> 0 Then
                        .TotxAllPcHole = Round(TotYds / .MgPltTpr.Tpa, 2)
                    Else
                        .TotxAllPcHole = 0
                    End If
                Else
                    If aRcvryParamsData.UseDoloflotPlant2010 Then
                        'Matrix "X" "All" PC
                        MtxYds = Round(.MtxThk * 43560 / 27, 0)
                        If .DfTpr.Tpa <> 0 Then
                            .MtxxAllPcHole = Round(MtxYds / .DfTpr.Tpa, 2)
                        Else
                            .MtxxAllPcHole = 0
                        End If

                        'Total "X" "All" PC
                        TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                        If .DfTpr.Tpa <> 0 Then
                            .TotxAllPcHole = Round(TotYds / .DfTpr.Tpa, 2)
                        Else
                            .TotxAllPcHole = 0
                        End If
                    Else
                        'Matrix "X" "All" PC
                        MtxYds = Round(.MtxThk * 43560 / 27, 0)
                        If .Tpr.Tpa <> 0 Then
                            .MtxxAllPcHole = Round(MtxYds / .Tpr.Tpa, 2)
                        Else
                            .MtxxAllPcHole = 0
                        End If

                        'Total "X" "All" PC
                        TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                        If .Tpr.Tpa <> 0 Then
                            .TotxAllPcHole = Round(TotYds / .Tpr.Tpa, 2)
                        Else
                            .TotxAllPcHole = 0
                        End If
                    End If
                End If

                'Weight% PC
                If aSumData.MtxTPA <> 0 Then
                    .Cpb.WtPct = Round(aSumData.Cpb.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Cpb.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .CpbRej.WtPct = Round(aSumData.CpbRej.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .CpbRej.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Fpb.WtPct = Round(aSumData.Fpb.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Fpb.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Os.WtPct = Round(aSumData.Os.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Os.WtPct = 0
                End If

                .Tpb.WtPct = IIf(InclCpb = True, .Cpb.WtPct, 0) + IIf(InclFpb = True, .Fpb.WtPct, 0)

                If aSumData.MtxTPA <> 0 Then
                    .Ip.WtPct = Round(aSumData.Ip.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Ip.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Ccn.WtPct = Round(aSumData.Ccn.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Ccn.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Fcn.WtPct = Round(aSumData.Fcn.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Fcn.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Tcn.WtPct = Round(aSumData.Tcn.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Tcn.WtPct = 0
                End If

                .Tpr.WtPct = .Tpb.WtPct + .Tcn.WtPct +
                         IIf(InclOs = True, .Os.WtPct, 0) +
                         .Ip.WtPct

                If aSumData.MtxTPA <> 0 Then
                    .Ttl.WtPct = Round(aSumData.Ttl.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Ttl.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Wcl.WtPct = Round(aSumData.Wcl.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Wcl.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Cfd.WtPct = Round(aSumData.Cfd.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Cfd.WtPct = 0
                End If

                If aSumData.MtxTPA <> 0 Then
                    .Ffd.WtPct = Round(aSumData.Ffd.Tpa / aSumData.MtxTPA * 100, 2)
                Else
                    .Ffd.WtPct = 0
                End If

                .Tfd.WtPct = .Cfd.WtPct + .Ffd.WtPct

                'Hole mineability  PC
                If aSumData.NumMineableSplits > 0 Then
                    If aSumData.NumMineableSplitsForced = 0 Then
                        .MineableCalcd = "M"
                        .MineableHole = "M"
                        .MineableHole100 = "M"
                    Else
                        .MineableCalcd = "MF"
                        .MineableHole = "MF"
                        .MineableHole100 = "MF"
                    End If
                Else
                    .MineableCalcd = "U"
                    .MineableHole = "U"
                    .MineableHole100 = "U"

                    'The overburden thickness in aHoleData.OvbThk is currently the depth
                    'to the bottom of the last split.
                    'We need to set the overburden thickness to the top of the 1st split
                    'since this is an unmineable hole.
                    .OvbThk = aSpl1Depth   'This is the depth to the top of the 1st split
                End If

                'End of ProdCoeff  End of ProdCoeff  End of ProdCoeff  End of ProdCoeff
                'End of ProdCoeff  End of ProdCoeff  End of ProdCoeff  End of ProdCoeff
                'End of ProdCoeff  End of ProdCoeff  End of ProdCoeff  End of ProdCoeff
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%
                '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%
                '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%

                'Oversize 100%
                .Os100.Tpa = aSumData.Os100.Tpa
                If aSumData.Os100.TwBpl <> 0 Then
                    .Os100.Bpl = Round(aSumData.Os100.BplTons / aSumData.Os100.TwBpl, 1)
                Else
                    .Os100.Bpl = 0
                End If
                If aSumData.Os100.TwIns <> 0 Then
                    .Os100.Ins = Round(aSumData.Os100.InsTons / aSumData.Os100.TwIns, 1)
                Else
                    .Os100.Ins = 0
                End If
                If aSumData.Os100.TwIa <> 0 Then
                    .Os100.Ia = Round(aSumData.Os100.IaTons / aSumData.Os100.TwIa, 2)
                Else
                    .Os100.Ia = 0
                End If
                If aSumData.Os100.TwIaAdj <> 0 Then
                    .Os100.IaAdj = Round(aSumData.Os100.IaAdjTons / aSumData.Os100.TwIaAdj, 2)
                Else
                    .Os100.IaAdj = 0
                End If
                If aSumData.Os100.TwFe <> 0 Then
                    .Os100.Fe = Round(aSumData.Os100.FeTons / aSumData.Os100.TwFe, 2)
                Else
                    .Os100.Fe = 0
                End If
                If aSumData.Os100.TwFeAdj <> 0 Then
                    .Os100.FeAdj = Round(aSumData.Os100.FeAdjTons / aSumData.Os100.TwFeAdj, 2)
                Else
                    .Os100.FeAdj = 0
                End If
                If aSumData.Os100.TwAl <> 0 Then
                    .Os100.Al = Round(aSumData.Os100.AlTons / aSumData.Os100.TwAl, 2)
                Else
                    .Os100.Al = 0
                End If
                If aSumData.Os100.TwMg <> 0 Then
                    .Os100.Mg = Round(aSumData.Os100.MgTons / aSumData.Os100.TwMg, 2)
                Else
                    .Os100.Mg = 0
                End If
                If aSumData.Os100.TwCa <> 0 Then
                    .Os100.Ca = Round(aSumData.Os100.CaTons / aSumData.Os100.TwCa, 1)
                Else
                    .Os100.Ca = 0
                End If

                'Coarse pebble 100%
                .Cpb100.Tpa = aSumData.Cpb100.Tpa
                If aSumData.Cpb100.TwBpl <> 0 Then
                    .Cpb100.Bpl = Round(aSumData.Cpb100.BplTons / aSumData.Cpb100.TwBpl, 1)
                Else
                    .Cpb100.Bpl = 0
                End If
                If aSumData.Cpb100.TwIns <> 0 Then
                    .Cpb100.Ins = Round(aSumData.Cpb100.InsTons / aSumData.Cpb100.TwIns, 1)
                Else
                    .Cpb100.Ins = 0
                End If
                If aSumData.Cpb100.TwIa <> 0 Then
                    .Cpb100.Ia = Round(aSumData.Cpb100.IaTons / aSumData.Cpb100.TwIa, 2)
                Else
                    .Cpb100.Ia = 0
                End If
                If aSumData.Cpb100.TwIaAdj <> 0 Then
                    .Cpb100.IaAdj = Round(aSumData.Cpb100.IaAdjTons / aSumData.Cpb100.TwIaAdj, 2)
                Else
                    .Cpb100.IaAdj = 0
                End If
                If aSumData.Cpb100.TwFe <> 0 Then
                    .Cpb100.Fe = Round(aSumData.Cpb100.FeTons / aSumData.Cpb100.TwFe, 2)
                Else
                    .Cpb100.Fe = 0
                End If
                If aSumData.Cpb100.TwFeAdj <> 0 Then
                    .Cpb100.FeAdj = Round(aSumData.Cpb100.FeAdjTons / aSumData.Cpb100.TwFeAdj, 2)
                Else
                    .Cpb100.FeAdj = 0
                End If
                If aSumData.Cpb100.TwAl <> 0 Then
                    .Cpb100.Al = Round(aSumData.Cpb100.AlTons / aSumData.Cpb100.TwAl, 2)
                Else
                    .Cpb100.Al = 0
                End If
                If aSumData.Cpb100.TwMg <> 0 Then
                    .Cpb100.Mg = Round(aSumData.Cpb100.MgTons / aSumData.Cpb100.TwMg, 2)
                Else
                    .Cpb100.Mg = 0
                End If
                If aSumData.Cpb100.TwCa <> 0 Then
                    .Cpb100.Ca = Round(aSumData.Cpb100.CaTons / aSumData.Cpb100.TwCa, 1)
                Else
                    .Cpb100.Ca = 0
                End If

                'Coarse pebble reject 100%
                .CpbRej100.Tpa = aSumData.CpbRej100.Tpa
                If aSumData.CpbRej100.TwBpl <> 0 Then
                    .CpbRej100.Bpl = Round(aSumData.CpbRej100.BplTons / aSumData.CpbRej100.TwBpl, 1)
                Else
                    .CpbRej100.Bpl = 0
                End If
                If aSumData.CpbRej100.TwIns <> 0 Then
                    .CpbRej100.Ins = Round(aSumData.CpbRej100.InsTons / aSumData.CpbRej100.TwIns, 1)
                Else
                    .CpbRej100.Ins = 0
                End If
                If aSumData.CpbRej100.TwIa <> 0 Then
                    .CpbRej100.Ia = Round(aSumData.CpbRej100.IaTons / aSumData.CpbRej100.TwIa, 2)
                Else
                    .CpbRej100.Ia = 0
                End If
                If aSumData.CpbRej100.TwIaAdj <> 0 Then
                    .CpbRej100.IaAdj = Round(aSumData.CpbRej100.IaAdjTons / aSumData.CpbRej100.TwIaAdj, 2)
                Else
                    .CpbRej100.IaAdj = 0
                End If
                If aSumData.CpbRej100.TwFe <> 0 Then
                    .CpbRej100.Fe = Round(aSumData.CpbRej100.FeTons / aSumData.CpbRej100.TwFe, 2)
                Else
                    .CpbRej100.Fe = 0
                End If
                If aSumData.CpbRej100.TwFeAdj <> 0 Then
                    .CpbRej100.FeAdj = Round(aSumData.CpbRej100.FeAdjTons / aSumData.CpbRej100.TwFeAdj, 2)
                Else
                    .CpbRej100.FeAdj = 0
                End If
                If aSumData.CpbRej100.TwAl <> 0 Then
                    .CpbRej100.Al = Round(aSumData.CpbRej100.AlTons / aSumData.CpbRej100.TwAl, 2)
                Else
                    .CpbRej100.Al = 0
                End If
                If aSumData.CpbRej100.TwMg <> 0 Then
                    .CpbRej100.Mg = Round(aSumData.CpbRej100.MgTons / aSumData.CpbRej100.TwMg, 2)
                Else
                    .CpbRej100.Mg = 0
                End If
                If aSumData.CpbRej100.TwCa <> 0 Then
                    .CpbRej100.Ca = Round(aSumData.CpbRej100.CaTons / aSumData.CpbRej100.TwCa, 1)
                Else
                    .CpbRej100.Ca = 0
                End If

                'Fine pebble 100%
                .Fpb100.Tpa = aSumData.Fpb100.Tpa
                If aSumData.Fpb100.TwBpl <> 0 Then
                    .Fpb100.Bpl = Round(aSumData.Fpb100.BplTons / aSumData.Fpb100.TwBpl, 1)
                Else
                    .Fpb100.Bpl = 0
                End If
                If aSumData.Fpb100.TwIns <> 0 Then
                    .Fpb100.Ins = Round(aSumData.Fpb100.InsTons / aSumData.Fpb100.TwIns, 1)
                Else
                    .Fpb100.Ins = 0
                End If
                If aSumData.Fpb100.TwIa <> 0 Then
                    .Fpb100.Ia = Round(aSumData.Fpb100.IaTons / aSumData.Fpb100.TwIa, 2)
                Else
                    .Fpb100.Ia = 0
                End If
                If aSumData.Fpb100.TwIaAdj <> 0 Then
                    .Fpb100.IaAdj = Round(aSumData.Fpb100.IaAdjTons / aSumData.Fpb100.TwIaAdj, 2)
                Else
                    .Fpb100.IaAdj = 0
                End If
                If aSumData.Fpb100.TwFe <> 0 Then
                    .Fpb100.Fe = Round(aSumData.Fpb100.FeTons / aSumData.Fpb100.TwFe, 2)
                Else
                    .Fpb100.Fe = 0
                End If
                If aSumData.Fpb100.TwFeAdj <> 0 Then
                    .Fpb100.FeAdj = Round(aSumData.Fpb100.FeAdjTons / aSumData.Fpb100.TwFeAdj, 2)
                Else
                    .Fpb100.FeAdj = 0
                End If
                If aSumData.Fpb100.TwAl <> 0 Then
                    .Fpb100.Al = Round(aSumData.Fpb100.AlTons / aSumData.Fpb100.TwAl, 2)
                Else
                    .Fpb100.Al = 0
                End If
                If aSumData.Fpb100.TwMg <> 0 Then
                    .Fpb100.Mg = Round(aSumData.Fpb100.MgTons / aSumData.Fpb100.TwMg, 2)
                Else
                    .Fpb100.Mg = 0
                End If
                If aSumData.Fpb100.TwCa <> 0 Then
                    .Fpb100.Ca = Round(aSumData.Fpb100.CaTons / aSumData.Fpb100.TwCa, 1)
                Else
                    .Fpb100.Ca = 0
                End If

                'Total pebble 100% rejected at washer
                .TpbRej100.Tpa = aSumData.TpbRej100.Tpa
                If aSumData.TpbRej100.TwBpl <> 0 Then
                    .TpbRej100.Bpl = Round(aSumData.TpbRej100.BplTons / aSumData.TpbRej100.TwBpl, 1)
                Else
                    .TpbRej100.Bpl = 0
                End If
                If aSumData.TpbRej100.TwIns <> 0 Then
                    .TpbRej100.Ins = Round(aSumData.TpbRej100.InsTons / aSumData.TpbRej100.TwIns, 1)
                Else
                    .TpbRej100.Ins = 0
                End If
                If aSumData.TpbRej100.TwIa <> 0 Then
                    .TpbRej100.Ia = Round(aSumData.TpbRej100.IaTons / aSumData.TpbRej100.TwIa, 2)
                Else
                    .TpbRej100.Ia = 0
                End If
                If aSumData.TpbRej100.TwIaAdj <> 0 Then
                    .TpbRej100.IaAdj = Round(aSumData.TpbRej100.IaAdjTons / aSumData.TpbRej100.TwIaAdj, 2)
                Else
                    .TpbRej100.IaAdj = 0
                End If
                If aSumData.TpbRej100.TwFe <> 0 Then
                    .TpbRej100.Fe = Round(aSumData.TpbRej100.FeTons / aSumData.TpbRej100.TwFe, 2)
                Else
                    .TpbRej100.Fe = 0
                End If
                If aSumData.TpbRej100.TwFeAdj <> 0 Then
                    .TpbRej100.FeAdj = Round(aSumData.TpbRej100.FeAdjTons / aSumData.TpbRej100.TwFeAdj, 2)
                Else
                    .TpbRej100.FeAdj = 0
                End If
                If aSumData.TpbRej100.TwAl <> 0 Then
                    .TpbRej100.Al = Round(aSumData.TpbRej100.AlTons / aSumData.TpbRej100.TwAl, 2)
                Else
                    .TpbRej100.Al = 0
                End If
                If aSumData.TpbRej100.TwMg <> 0 Then
                    .TpbRej100.Mg = Round(aSumData.TpbRej100.MgTons / aSumData.TpbRej100.TwMg, 2)
                Else
                    .TpbRej100.Mg = 0
                End If
                If aSumData.TpbRej100.TwCa <> 0 Then
                    .TpbRej100.Ca = Round(aSumData.TpbRej100.CaTons / aSumData.TpbRej100.TwCa, 1)
                Else
                    .TpbRej100.Ca = 0
                End If

                'IP 100%
                .Ip100.Tpa = aSumData.Ip100.Tpa
                If aSumData.Ip100.TwBpl <> 0 Then
                    .Ip100.Bpl = Round(aSumData.Ip100.BplTons / aSumData.Ip100.TwBpl, 1)
                Else
                    .Ip100.Bpl = 0
                End If
                If aSumData.Ip100.TwIns <> 0 Then
                    .Ip100.Ins = Round(aSumData.Ip100.InsTons / aSumData.Ip100.TwIns, 1)
                Else
                    .Ip100.Ins = 0
                End If
                If aSumData.Ip100.TwIa <> 0 Then
                    .Ip100.Ia = Round(aSumData.Ip100.IaTons / aSumData.Ip100.TwIa, 2)
                Else
                    .Ip100.Ia = 0
                End If
                If aSumData.Ip100.TwIaAdj <> 0 Then
                    .Ip100.IaAdj = Round(aSumData.Ip100.IaAdjTons / aSumData.Ip100.TwIaAdj, 2)
                Else
                    .Ip100.IaAdj = 0
                End If
                If aSumData.Ip100.TwFe <> 0 Then
                    .Ip100.Fe = Round(aSumData.Ip100.FeTons / aSumData.Ip100.TwFe, 2)
                Else
                    .Ip100.Fe = 0
                End If
                If aSumData.Ip100.TwFeAdj <> 0 Then
                    .Ip100.FeAdj = Round(aSumData.Ip100.FeAdjTons / aSumData.Ip100.TwFeAdj, 2)
                Else
                    .Ip100.FeAdj = 0
                End If
                If aSumData.Ip100.TwAl <> 0 Then
                    .Ip100.Al = Round(aSumData.Ip100.AlTons / aSumData.Ip100.TwAl, 2)
                Else
                    .Ip100.Al = 0
                End If
                If aSumData.Ip100.TwMg <> 0 Then
                    .Ip100.Mg = Round(aSumData.Ip100.MgTons / aSumData.Ip100.TwMg, 2)
                Else
                    .Ip100.Mg = 0
                End If
                If aSumData.Ip100.TwCa <> 0 Then
                    .Ip100.Ca = Round(aSumData.Ip100.CaTons / aSumData.Ip100.TwCa, 1)
                Else
                    .Ip100.Ca = 0
                End If

                'Coarse concentrate 100%
                .Ccn100.Tpa = aSumData.Ccn100.Tpa
                If aSumData.Ccn100.TwBpl <> 0 Then
                    .Ccn100.Bpl = Round(aSumData.Ccn100.BplTons / aSumData.Ccn100.TwBpl, 1)
                Else
                    .Ccn100.Bpl = 0
                End If
                If aSumData.Ccn100.TwIns <> 0 Then
                    .Ccn100.Ins = Round(aSumData.Ccn100.InsTons / aSumData.Ccn100.TwIns, 1)
                Else
                    .Ccn100.Ins = 0
                End If
                If aSumData.Ccn100.TwIa <> 0 Then
                    .Ccn100.Ia = Round(aSumData.Ccn100.IaTons / aSumData.Ccn100.TwIa, 2)
                Else
                    .Ccn100.Ia = 0
                End If
                If aSumData.Ccn100.TwIaAdj <> 0 Then
                    .Ccn100.IaAdj = Round(aSumData.Ccn100.IaAdjTons / aSumData.Ccn100.TwIaAdj, 2)
                Else
                    .Ccn100.IaAdj = 0
                End If
                If aSumData.Ccn100.TwFe <> 0 Then
                    .Ccn100.Fe = Round(aSumData.Ccn100.FeTons / aSumData.Ccn100.TwFe, 2)
                Else
                    .Ccn100.Fe = 0
                End If
                If aSumData.Ccn100.TwFeAdj <> 0 Then
                    .Ccn100.FeAdj = Round(aSumData.Ccn100.FeAdjTons / aSumData.Ccn100.TwFeAdj, 2)
                Else
                    .Ccn100.FeAdj = 0
                End If
                If aSumData.Ccn100.TwAl <> 0 Then
                    .Ccn100.Al = Round(aSumData.Ccn100.AlTons / aSumData.Ccn100.TwAl, 2)
                Else
                    .Ccn100.Al = 0
                End If
                If aSumData.Ccn100.TwMg <> 0 Then
                    .Ccn100.Mg = Round(aSumData.Ccn100.MgTons / aSumData.Ccn100.TwMg, 2)
                Else
                    .Ccn100.Mg = 0
                End If
                If aSumData.Ccn100.TwCa <> 0 Then
                    .Ccn100.Ca = Round(aSumData.Ccn100.CaTons / aSumData.Ccn100.TwCa, 1)
                Else
                    .Ccn100.Ca = 0
                End If

                'Fine concentrate 100%
                .Fcn100.Tpa = aSumData.Fcn100.Tpa
                If aSumData.Fcn100.TwBpl <> 0 Then
                    .Fcn100.Bpl = Round(aSumData.Fcn100.BplTons / aSumData.Fcn100.TwBpl, 1)
                Else
                    .Fcn100.Bpl = 0
                End If
                If aSumData.Fcn100.TwIns <> 0 Then
                    .Fcn100.Ins = Round(aSumData.Fcn100.InsTons / aSumData.Fcn100.TwIns, 1)
                Else
                    .Fcn100.Ins = 0
                End If
                If aSumData.Fcn100.TwIa <> 0 Then
                    .Fcn100.Ia = Round(aSumData.Fcn100.IaTons / aSumData.Fcn100.TwIa, 2)
                Else
                    .Fcn100.Ia = 0
                End If
                If aSumData.Fcn100.TwIaAdj <> 0 Then
                    .Fcn100.IaAdj = Round(aSumData.Fcn100.IaAdjTons / aSumData.Fcn100.TwIaAdj, 2)
                Else
                    .Fcn100.IaAdj = 0
                End If
                If aSumData.Fcn100.TwFe <> 0 Then
                    .Fcn100.Fe = Round(aSumData.Fcn100.FeTons / aSumData.Fcn100.TwFe, 2)
                Else
                    .Fcn100.Fe = 0
                End If
                If aSumData.Fcn100.TwFeAdj <> 0 Then
                    .Fcn100.FeAdj = Round(aSumData.Fcn100.FeAdjTons / aSumData.Fcn100.TwFeAdj, 2)
                Else
                    .Fcn100.FeAdj = 0
                End If
                If aSumData.Fcn100.TwAl <> 0 Then
                    .Fcn100.Al = Round(aSumData.Fcn100.AlTons / aSumData.Fcn100.TwAl, 2)
                Else
                    .Fcn100.Al = 0
                End If
                If aSumData.Fcn100.TwMg <> 0 Then
                    .Fcn100.Mg = Round(aSumData.Fcn100.MgTons / aSumData.Fcn100.TwMg, 2)
                Else
                    .Fcn100.Mg = 0
                End If
                If aSumData.Fcn100.TwCa <> 0 Then
                    .Fcn100.Ca = Round(aSumData.Fcn100.CaTons / aSumData.Fcn100.TwCa, 1)
                Else
                    .Fcn100.Ca = 0
                End If

                'Total concentrate 100% rejected somewhere
                '09/11/2009, lss -- Added the following
                .TcnRej100.Tpa = aSumData.TcnRej100.Tpa
                If aSumData.TcnRej100.TwBpl <> 0 Then
                    .TcnRej100.Bpl = Round(aSumData.TcnRej100.BplTons / aSumData.TcnRej100.TwBpl, 1)
                Else
                    .TcnRej100.Bpl = 0
                End If
                If aSumData.TcnRej100.TwIns <> 0 Then
                    .TcnRej100.Ins = Round(aSumData.TcnRej100.InsTons / aSumData.TcnRej100.TwIns, 1)
                Else
                    .TcnRej100.Ins = 0
                End If
                If aSumData.TcnRej100.TwIa <> 0 Then
                    .TcnRej100.Ia = Round(aSumData.TcnRej100.IaTons / aSumData.TcnRej100.TwIa, 2)
                Else
                    .TcnRej100.Ia = 0
                End If
                If aSumData.TcnRej100.TwIaAdj <> 0 Then
                    .TcnRej100.IaAdj = Round(aSumData.TcnRej100.IaAdjTons / aSumData.TcnRej100.TwIaAdj, 2)
                Else
                    .TcnRej100.IaAdj = 0
                End If
                If aSumData.TcnRej100.TwFe <> 0 Then
                    .TcnRej100.Fe = Round(aSumData.TcnRej100.FeTons / aSumData.TcnRej100.TwFe, 2)
                Else
                    .TcnRej100.Fe = 0
                End If
                If aSumData.TcnRej100.TwFeAdj <> 0 Then
                    .TcnRej100.FeAdj = Round(aSumData.TcnRej100.FeAdjTons / aSumData.TcnRej100.TwFeAdj, 2)
                Else
                    .TcnRej100.FeAdj = 0
                End If
                If aSumData.TcnRej100.TwAl <> 0 Then
                    .TcnRej100.Al = Round(aSumData.TcnRej100.AlTons / aSumData.TcnRej100.TwAl, 2)
                Else
                    .TcnRej100.Al = 0
                End If
                If aSumData.TcnRej100.TwMg <> 0 Then
                    .TcnRej100.Mg = Round(aSumData.TcnRej100.MgTons / aSumData.TcnRej100.TwMg, 2)
                Else
                    .TcnRej100.Mg = 0
                End If
                If aSumData.TcnRej100.TwCa <> 0 Then
                    .TcnRej100.Ca = Round(aSumData.TcnRej100.CaTons / aSumData.TcnRej100.TwCa, 1)
                Else
                    .TcnRej100.Ca = 0
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'Off-spec pebble MgO plant input 100
                    .MgPltInp100.Tpa = aSumData.MgPltInp100.Tpa
                    If aSumData.MgPltInp100.TwBpl <> 0 Then
                        .MgPltInp100.Bpl = Round(aSumData.MgPltInp100.BplTons / aSumData.MgPltInp100.TwBpl, 1)
                    Else
                        .MgPltInp100.Bpl = 0
                    End If
                    If aSumData.MgPltInp100.TwIns <> 0 Then
                        .MgPltInp100.Ins = Round(aSumData.MgPltInp100.InsTons / aSumData.MgPltInp100.TwIns, 1)
                    Else
                        .MgPltInp100.Ins = 0
                    End If
                    If aSumData.MgPltInp100.TwIa <> 0 Then
                        .MgPltInp100.Ia = Round(aSumData.MgPltInp100.IaTons / aSumData.MgPltInp100.TwIa, 2)
                    Else
                        .MgPltInp100.Ia = 0
                    End If
                    If aSumData.MgPltInp100.TwFe <> 0 Then
                        .MgPltInp100.Fe = Round(aSumData.MgPltInp100.FeTons / aSumData.MgPltInp100.TwFe, 2)
                    Else
                        .MgPltInp100.Fe = 0
                    End If

                    '03/24/2011**, lss
                    If aSumData.MgPltInp100.TwIaAdj <> 0 Then
                        .MgPltInp100.IaAdj = Round(aSumData.MgPltInp100.IaAdjTons /
                                         aSumData.MgPltInp100.TwIaAdj, 2)
                    Else
                        .MgPltInp100.IaAdj = 0
                    End If
                    If aSumData.MgPltInp100.TwFeAdj <> 0 Then
                        .MgPltInp100.FeAdj = Round(aSumData.MgPltInp100.FeAdjTons /
                                         aSumData.MgPltInp100.TwFeAdj, 2)
                    Else
                        .MgPltInp100.FeAdj = 0
                    End If

                    If aSumData.MgPltInp100.TwAl <> 0 Then
                        .MgPltInp100.Al = Round(aSumData.MgPltInp100.AlTons / aSumData.MgPltInp100.TwAl, 2)
                    Else
                        .MgPltInp100.Al = 0
                    End If
                    If aSumData.MgPltInp100.TwMg <> 0 Then
                        .MgPltInp100.Mg = Round(aSumData.MgPltInp100.MgTons / aSumData.MgPltInp100.TwMg, 2)
                    Else
                        .MgPltInp100.Mg = 0
                    End If
                    If aSumData.MgPltInp100.TwCa <> 0 Then
                        .MgPltInp100.Ca = Round(aSumData.MgPltInp100.CaTons / aSumData.MgPltInp100.TwCa, 1)
                    Else
                        .MgPltInp100.Ca = 0
                    End If

                    'Off-spec pebble MgO plant reject 100
                    .MgPltRej100.Tpa = aSumData.MgPltRej100.Tpa
                    If aSumData.MgPltRej100.TwBpl <> 0 Then
                        .MgPltRej100.Bpl = Round(aSumData.MgPltRej100.BplTons / aSumData.MgPltRej100.TwBpl, 1)
                    Else
                        .MgPltRej100.Bpl = 0
                    End If
                    If aSumData.MgPltRej100.TwIns <> 0 Then
                        .MgPltRej100.Ins = Round(aSumData.MgPltRej100.InsTons / aSumData.MgPltRej100.TwIns, 1)
                    Else
                        .MgPltRej100.Ins = 0
                    End If
                    If aSumData.MgPltRej100.TwIa <> 0 Then
                        .MgPltRej100.Ia = Round(aSumData.MgPltRej100.IaTons / aSumData.MgPltRej100.TwIa, 2)
                    Else
                        .MgPltRej100.Ia = 0
                    End If
                    If aSumData.MgPltRej100.TwFe <> 0 Then
                        .MgPltRej100.Fe = Round(aSumData.MgPltRej100.FeTons / aSumData.MgPltRej100.TwFe, 2)
                    Else
                        .MgPltRej100.Fe = 0
                    End If

                    '03/24/2011**, lss
                    If aSumData.MgPltRej100.TwIaAdj <> 0 Then
                        .MgPltRej100.IaAdj = Round(aSumData.MgPltRej100.IaAdjTons /
                                      aSumData.MgPltRej100.TwIaAdj, 2)
                    Else
                        .MgPltRej100.IaAdj = 0
                    End If
                    If aSumData.MgPltRej100.TwFeAdj <> 0 Then
                        .MgPltRej100.FeAdj = Round(aSumData.MgPltRej100.FeAdjTons /
                                         aSumData.MgPltRej100.TwFeAdj, 2)
                    Else
                        .MgPltRej100.FeAdj = 0
                    End If

                    If aSumData.MgPltRej100.TwAl <> 0 Then
                        .MgPltRej100.Al = Round(aSumData.MgPltRej100.AlTons / aSumData.MgPltRej100.TwAl, 2)
                    Else
                        .MgPltRej100.Al = 0
                    End If
                    If aSumData.MgPltRej100.TwMg <> 0 Then
                        .MgPltRej100.Mg = Round(aSumData.MgPltRej100.MgTons / aSumData.MgPltRej100.TwMg, 2)
                    Else
                        .MgPltRej100.Mg = 0
                    End If
                    If aSumData.MgPltRej100.TwCa <> 0 Then
                        .MgPltRej100.Ca = Round(aSumData.MgPltRej100.CaTons / aSumData.MgPltRej100.TwCa, 1)
                    Else
                        .MgPltRej100.Ca = 0
                    End If

                    'Off-spec pebble MgO plant product 100
                    .MgPltProd100.Tpa = aSumData.MgPltProd100.Tpa
                    If aSumData.MgPltProd100.TwBpl <> 0 Then
                        .MgPltProd100.Bpl = Round(aSumData.MgPltProd100.BplTons / aSumData.MgPltProd100.TwBpl, 1)
                    Else
                        .MgPltProd100.Bpl = 0
                    End If
                    If aSumData.MgPltProd100.TwIns <> 0 Then
                        .MgPltProd100.Ins = Round(aSumData.MgPltProd100.InsTons / aSumData.MgPltProd100.TwIns, 1)
                    Else
                        .MgPltProd100.Ins = 0
                    End If
                    If aSumData.MgPltProd100.TwIa <> 0 Then
                        .MgPltProd100.Ia = Round(aSumData.MgPltProd100.IaTons / aSumData.MgPltProd100.TwIa, 2)
                    Else
                        .MgPltProd100.Ia = 0
                    End If
                    If aSumData.MgPltProd100.TwFe <> 0 Then
                        .MgPltProd100.Fe = Round(aSumData.MgPltProd100.FeTons / aSumData.MgPltProd100.TwFe, 2)
                    Else
                        .MgPltProd100.Fe = 0
                    End If

                    '/03/24/2010*, lss
                    If aSumData.MgPltProd100.TwIaAdj <> 0 Then
                        .MgPltProd100.IaAdj = Round(aSumData.MgPltProd100.IaAdjTons /
                                       aSumData.MgPltProd100.TwIaAdj, 2)
                    Else
                        .MgPltProd100.IaAdj = 0
                    End If
                    If aSumData.MgPltProd100.TwFeAdj <> 0 Then
                        .MgPltProd100.FeAdj = Round(aSumData.MgPltProd100.FeAdjTons /
                                       aSumData.MgPltProd100.TwFeAdj, 2)
                    Else
                        .MgPltProd100.FeAdj = 0
                    End If

                    If aSumData.MgPltProd100.TwAl <> 0 Then
                        .MgPltProd100.Al = Round(aSumData.MgPltProd100.AlTons / aSumData.MgPltProd100.TwAl, 2)
                    Else
                        .MgPltProd100.Al = 0
                    End If
                    If aSumData.MgPltProd100.TwMg <> 0 Then
                        .MgPltProd100.Mg = Round(aSumData.MgPltProd100.MgTons / aSumData.MgPltProd100.TwMg, 2)
                    Else
                        .MgPltProd100.Mg = 0
                    End If
                    If aSumData.MgPltProd100.TwCa <> 0 Then
                        .MgPltProd100.Ca = Round(aSumData.MgPltProd100.CaTons / aSumData.MgPltProd100.TwCa, 1)
                    Else
                        .MgPltProd100.Ca = 0
                    End If
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Public Sub CalcDataFromSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    'Doloflot plant fine pebble input 100
                    .DfFpbInp100.Tpa = aSumData.DfFpbInp100.Tpa
                    If aSumData.DfFpbInp100.TwBpl <> 0 Then
                        .DfFpbInp100.Bpl = Round(aSumData.DfFpbInp100.BplTons / aSumData.DfFpbInp100.TwBpl, 1)
                    Else
                        .DfFpbInp100.Bpl = 0
                    End If
                    If aSumData.DfFpbInp100.TwIns <> 0 Then
                        .DfFpbInp100.Ins = Round(aSumData.DfFpbInp100.InsTons / aSumData.DfFpbInp100.TwIns, 1)
                    Else
                        .DfFpbInp100.Ins = 0
                    End If
                    If aSumData.DfFpbInp100.TwIa <> 0 Then
                        .DfFpbInp100.Ia = Round(aSumData.DfFpbInp100.IaTons / aSumData.DfFpbInp100.TwIa, 2)
                    Else
                        .DfFpbInp100.Ia = 0
                    End If
                    If aSumData.DfFpbInp100.TwFe <> 0 Then
                        .DfFpbInp100.Fe = Round(aSumData.DfFpbInp100.FeTons / aSumData.DfFpbInp100.TwFe, 2)
                    Else
                        .DfFpbInp100.Fe = 0
                    End If
                    If aSumData.DfFpbInp100.TwFeAdj <> 0 Then
                        .DfFpbInp100.FeAdj = Round(aSumData.DfFpbInp100.FeAdjTons / aSumData.DfFpbInp100.TwFeAdj, 2)
                    Else
                        .DfFpbInp100.FeAdj = 0
                    End If
                    If aSumData.DfFpbInp100.TwAl <> 0 Then
                        .DfFpbInp100.Al = Round(aSumData.DfFpbInp100.AlTons / aSumData.DfFpbInp100.TwAl, 2)
                    Else
                        .DfFpbInp100.Al = 0
                    End If
                    If aSumData.DfFpbInp100.TwMg <> 0 Then
                        .DfFpbInp100.Mg = Round(aSumData.DfFpbInp100.MgTons / aSumData.DfFpbInp100.TwMg, 2)
                    Else
                        .DfFpbInp100.Mg = 0
                    End If
                    If aSumData.DfFpbInp100.TwCa <> 0 Then
                        .DfFpbInp100.Ca = Round(aSumData.DfFpbInp100.CaTons / aSumData.DfFpbInp100.TwCa, 1)
                    Else
                        .DfFpbInp100.Ca = 0
                    End If

                    'Doloflot plant fine pebble reject 100 -- no "reject" for Doloflot plant!

                    'Doloflot plant fine pebble product 100
                    .DfFpbProd100.Tpa = aSumData.DfFpbProd100.Tpa
                    If aSumData.DfFpbProd100.TwBpl <> 0 Then
                        .DfFpbProd100.Bpl = Round(aSumData.DfFpbProd100.BplTons / aSumData.DfFpbProd100.TwBpl, 1)
                    Else
                        .DfFpbProd100.Bpl = 0
                    End If
                    If aSumData.DfFpbProd100.TwIns <> 0 Then
                        .DfFpbProd100.Ins = Round(aSumData.DfFpbProd100.InsTons / aSumData.DfFpbProd100.TwIns, 1)
                    Else
                        .DfFpbProd100.Ins = 0
                    End If
                    If aSumData.DfFpbProd100.TwIa <> 0 Then
                        .DfFpbProd100.Ia = Round(aSumData.DfFpbProd100.IaTons / aSumData.DfFpbProd100.TwIa, 2)
                    Else
                        .DfFpbProd100.Ia = 0
                    End If
                    If aSumData.DfFpbProd100.TwFe <> 0 Then
                        .DfFpbProd100.Fe = Round(aSumData.DfFpbProd100.FeTons / aSumData.DfFpbProd100.TwFe, 2)
                    Else
                        .DfFpbProd100.Fe = 0
                    End If
                    If aSumData.DfFpbProd100.TwFeAdj <> 0 Then
                        .DfFpbProd100.FeAdj = Round(aSumData.DfFpbProd100.FeAdjTons / aSumData.DfFpbProd100.TwFeAdj, 2)
                    Else
                        .DfFpbProd100.FeAdj = 0
                    End If
                    If aSumData.DfFpbProd100.TwAl <> 0 Then
                        .DfFpbProd100.Al = Round(aSumData.DfFpbProd100.AlTons / aSumData.DfFpbProd100.TwAl, 2)
                    Else
                        .DfFpbProd100.Al = 0
                    End If
                    If aSumData.DfFpbProd100.TwMg <> 0 Then
                        .DfFpbProd100.Mg = Round(aSumData.DfFpbProd100.MgTons / aSumData.DfFpbProd100.TwMg, 2)
                    Else
                        .DfFpbProd100.Mg = 0
                    End If
                    If aSumData.DfFpbProd100.TwCa <> 0 Then
                        .DfFpbProd100.Ca = Round(aSumData.DfFpbProd100.CaTons / aSumData.DfFpbProd100.TwCa, 1)
                    Else
                        .DfFpbProd100.Ca = 0
                    End If
                End If
                '-----
                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    'Doloflot plant IP input PC
                    .DfIpInp100.Tpa = aSumData.DfIpInp100.Tpa
                    If aSumData.DfIpInp100.TwBpl <> 0 Then
                        .DfIpInp100.Bpl = Round(aSumData.DfIpInp100.BplTons / aSumData.DfIpInp100.TwBpl, 1)
                    Else
                        .DfIpInp100.Bpl = 0
                    End If
                    If aSumData.DfIpInp100.TwIns <> 0 Then
                        .DfIpInp100.Ins = Round(aSumData.DfIpInp100.InsTons / aSumData.DfIpInp100.TwIns, 1)
                    Else
                        .DfIpInp100.Ins = 0
                    End If
                    If aSumData.DfIpInp100.TwIa <> 0 Then
                        .DfIpInp100.Ia = Round(aSumData.DfIpInp100.IaTons / aSumData.DfIpInp100.TwIa, 2)
                    Else
                        .DfIpInp100.Ia = 0
                    End If
                    If aSumData.DfIpInp100.TwFe <> 0 Then
                        .DfIpInp100.Fe = Round(aSumData.DfIpInp100.FeTons / aSumData.DfIpInp100.TwFe, 2)
                    Else
                        .DfIpInp100.Fe = 0
                    End If
                    If aSumData.DfIpInp100.TwFeAdj <> 0 Then
                        .DfIpInp100.FeAdj = Round(aSumData.DfIpInp100.FeAdjTons / aSumData.DfIpInp100.TwFeAdj, 2)
                    Else
                        .DfIpInp100.FeAdj = 0
                    End If
                    If aSumData.DfIpInp100.TwAl <> 0 Then
                        .DfIpInp100.Al = Round(aSumData.DfIpInp100.AlTons / aSumData.DfIpInp100.TwAl, 2)
                    Else
                        .DfIpInp100.Al = 0
                    End If
                    If aSumData.DfIpInp100.TwMg <> 0 Then
                        .DfIpInp100.Mg = Round(aSumData.DfIpInp100.MgTons / aSumData.DfIpInp100.TwMg, 2)
                    Else
                        .DfIpInp100.Mg = 0
                    End If
                    If aSumData.DfIpInp100.TwCa <> 0 Then
                        .DfIpInp100.Ca = Round(aSumData.DfIpInp100.CaTons / aSumData.DfIpInp100.TwCa, 1)
                    Else
                        .DfIpInp100.Ca = 0
                    End If

                    'Doloflot plant IP reject PC -- no "reject" for Doloflot plant!

                    'Doloflot plant IP product PC
                    .DfIpProd100.Tpa = aSumData.DfIpProd100.Tpa
                    If aSumData.DfIpProd100.TwBpl <> 0 Then
                        .DfIpProd100.Bpl = Round(aSumData.DfIpProd100.BplTons / aSumData.DfIpProd100.TwBpl, 1)
                    Else
                        .DfIpProd100.Bpl = 0
                    End If
                    If aSumData.DfIpProd100.TwIns <> 0 Then
                        .DfIpProd100.Ins = Round(aSumData.DfIpProd100.InsTons / aSumData.DfIpProd100.TwIns, 1)
                    Else
                        .DfIpProd100.Ins = 0
                    End If
                    If aSumData.DfIpProd100.TwIa <> 0 Then
                        .DfIpProd100.Ia = Round(aSumData.DfIpProd100.IaTons / aSumData.DfIpProd100.TwIa, 2)
                    Else
                        .DfIpProd100.Ia = 0
                    End If
                    If aSumData.DfIpProd100.TwFe <> 0 Then
                        .DfIpProd100.Fe = Round(aSumData.DfIpProd100.FeTons / aSumData.DfIpProd100.TwFe, 2)
                    Else
                        .DfIpProd100.Fe = 0
                    End If
                    If aSumData.DfIpProd100.TwFeAdj <> 0 Then
                        .DfIpProd100.FeAdj = Round(aSumData.DfIpProd100.FeAdjTons / aSumData.DfIpProd100.TwFeAdj, 2)
                    Else
                        .DfIpProd100.FeAdj = 0
                    End If
                    If aSumData.DfIpProd100.TwAl <> 0 Then
                        .DfIpProd100.Al = Round(aSumData.DfIpProd100.AlTons / aSumData.DfIpProd100.TwAl, 2)
                    Else
                        .DfIpProd100.Al = 0
                    End If
                    If aSumData.DfIpProd100.TwMg <> 0 Then
                        .DfIpProd100.Mg = Round(aSumData.DfIpProd100.MgTons / aSumData.DfIpProd100.TwMg, 2)
                    Else
                        .DfIpProd100.Mg = 0
                    End If
                    If aSumData.DfIpProd100.TwCa <> 0 Then
                        .DfIpProd100.Ca = Round(aSumData.DfIpProd100.CaTons / aSumData.DfIpProd100.TwCa, 1)
                    Else
                        .DfIpProd100.Ca = 0
                    End If
                End If

                'Total concentrate 100%
                aSumData.Tcn100.Tpa = aSumData.Ccn100.Tpa + aSumData.Fcn100.Tpa

                'Waste clay 100%
                .Wcl100.Tpa = aSumData.Wcl100.Tpa
                If aSumData.Wcl100.TwBpl <> 0 Then
                    .Wcl100.Bpl = Round(aSumData.Wcl100.BplTons / aSumData.Wcl100.TwBpl, 1)
                Else
                    .Wcl100.Bpl = 0
                End If

                'Coarse feed 100%
                .Cfd100.Tpa = aSumData.Cfd100.Tpa
                If aSumData.Cfd100.TwBpl <> 0 Then
                    .Cfd100.Bpl = Round(aSumData.Cfd100.BplTons / aSumData.Cfd100.TwBpl, 1)
                Else
                    .Cfd100.Bpl = 0
                End If

                'Fine feed 100%
                .Ffd100.Tpa = aSumData.Ffd100.Tpa
                If aSumData.Ffd100.TwBpl <> 0 Then
                    .Ffd100.Bpl = Round(aSumData.Ffd100.BplTons / aSumData.Ffd100.TwBpl, 1)
                Else
                    .Ffd100.Bpl = 0
                End If

                'Matrix 100%
                .MtxTPA = aSumData.MtxTpa100

                'Will calculate the matrix density here as well. PC
                If aSumData.MtxFt <> 0 Then
                    .MtxDensity = Round(aSumData.MtxDensityFt / aSumData.MtxFt, 1)
                Else
                    .MtxDensity = 0
                End If

                'We are currently in Sub CalcDataFromSumDataComp.

                'Total pebble 100%
                CalcTotPbSpec(aHoleData,
                              "100%",
                              InclCpb,
                              InclFpb,
                              0,
                              False,
                              False)

                If aRcvryParamsData.CanSelectRejectTcn = True Then
                    CalcTotCnSpec(aHoleData,
                                  "100%",
                                  InclCcn,
                                  InclFcn,
                                  "Hole",
                                  0,
                                  aRcvryParamsData.CanSelectRejectTcn,
                                  False)
                Else
                    'Total concentrate 100%
                    CalcTotCn(aHoleData, "100%")
                End If

                'Total product 100%
                'Note: If Off-spec pebble MgO plant exists and has product we will
                '      NOT include it in this total product value.
                aHoleData.Tpr100 = CalcTotPrSpec100(aHoleData,
                              InclOs,
                              InclIp)

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    CalcTcnPlusMgPltProd(aHoleData,
                                         "100%",
                                         "Hole",
                                         0)

                    CalcTprPlusMgPltProd(aHoleData,
                                         "100%",
                                         "Hole",
                                         0)
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Public Sub CalcDataFromSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    CalcTcnPlusDoloflotProd(aHoleData,
                                            "100%",
                                            "Hole",
                                            0)

                    CalcTprPlusDoloflotProd(aHoleData,
                                            "100%",
                                            "Hole",
                                            0)
                End If

                'Total feed 100%
                .Tfd100.Tpa = .Cfd100.Tpa + .Ffd100.Tpa
                .Tfd100.Bpl = gGetTotalValue(.Cfd100.Bpl, .Cfd100.Tpa, .Ffd100.Bpl, .Ffd100.Tpa, 1)

                'Total tails 100%
                .Ttl100.Tpa = aSumData.Ttl100.Tpa
                If aSumData.Ttl100.TwBpl <> 0 Then
                    .Ttl100.Bpl = Round(aSumData.Ttl100.BplTons / aSumData.Ttl100.TwBpl, 1)
                Else
                    .Ttl100.Bpl = 0
                End If

                'Calculate Matrix "X" All 100 and Total "X" All 100 for the Hole
                'Calculate Matrix "X" All 100 and Total "X" All 100 for the Hole
                'Calculate Matrix "X" All 100 and Total "X" All 100 for the Hole

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO and DOLOFLOT PLANT ONA
                '-----------------------------------------------------------------
                'Currently in Public Sub CalcDataFromSumDataComp
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'Matrix "X" "All" 100%
                    MtxYds = Round(.MtxThk * 43560 / 27, 0)
                    If .MgPltTpr100.Tpa <> 0 Then
                        .MtxxAll100Hole = Round(MtxYds / .MgPltTpr100.Tpa, 2)
                    Else
                        .MtxxAll100Hole = 0
                    End If

                    'Total "X" "All" 100%
                    TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                    If .MgPltTpr100.Tpa <> 0 Then
                        .TotxAll100Hole = Round(TotYds / .MgPltTpr100.Tpa, 2)
                    Else
                        .TotxAll100Hole = 0
                    End If
                Else
                    If aRcvryParamsData.UseDoloflotPlant2010 Then
                        'Matrix "X" "All" 100%
                        MtxYds = Round(.MtxThk * 43560 / 27, 0)
                        If .DfTpr100.Tpa <> 0 Then
                            .MtxxAll100Hole = Round(MtxYds / .DfTpr100.Tpa, 2)
                        Else
                            .MtxxAll100Hole = 0
                        End If

                        'Total "X" "All" 100%
                        TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                        If .DfTpr100.Tpa <> 0 Then
                            .TotxAll100Hole = Round(TotYds / .DfTpr100.Tpa, 2)
                        Else
                            .TotxAll100Hole = 0
                        End If
                    Else
                        'Matrix "X" "All" 100%
                        MtxYds = Round(.MtxThk * 43560 / 27, 0)
                        If .Tpr100.Tpa <> 0 Then
                            .MtxxAll100Hole = Round(MtxYds / .Tpr100.Tpa, 2)
                        Else
                            .MtxxAll100Hole = 0
                        End If

                        'Total "X" "All" 100%
                        TotYds = Round((.OvbThk + .MtxThk + .ItbThk) * 43560 / 27, 0)
                        If .Tpr100.Tpa <> 0 Then
                            .TotxAll100Hole = Round(TotYds / .Tpr100.Tpa, 2)
                        Else
                            .TotxAll100Hole = 0
                        End If
                    End If
                End If

                'Weight% 100%
                If aSumData.MtxTpa100 <> 0 Then
                    .Cpb100.WtPct = Round(aSumData.Cpb100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Cpb100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .CpbRej100.WtPct = Round(aSumData.CpbRej100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .CpbRej100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Fpb100.WtPct = Round(aSumData.Fpb100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Fpb100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Os100.WtPct = Round(aSumData.Os100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Os100.WtPct = 0
                End If

                .Tpb100.WtPct = IIf(InclCpb = True, .Cpb100.WtPct, 0) + IIf(InclFpb = True, .Fpb100.WtPct, 0)

                If aSumData.MtxTpa100 <> 0 Then
                    .Ip100.WtPct = Round(aSumData.Ip100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Ip100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Ccn100.WtPct = Round(aSumData.Ccn100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Ccn100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Fcn100.WtPct = Round(aSumData.Fcn100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Fcn100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Tcn100.WtPct = Round(aSumData.Tcn100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Tcn100.WtPct = 0
                End If

                .Tpr100.WtPct = .Tpb100.WtPct + .Tcn100.WtPct +
                            IIf(InclOs = True, .Os100.WtPct, 0) +
                            .Ip100.WtPct

                If aSumData.MtxTpa100 <> 0 Then
                    .Ttl100.WtPct = Round(aSumData.Ttl100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Ttl100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Wcl100.WtPct = Round(aSumData.Wcl100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Wcl100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Cfd100.WtPct = Round(aSumData.Cfd100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Cfd100.WtPct = 0
                End If

                If aSumData.MtxTpa100 <> 0 Then
                    .Ffd100.WtPct = Round(aSumData.Ffd100.Tpa / aSumData.MtxTpa100 * 100, 2)
                Else
                    .Ffd100.WtPct = 0
                End If

                .Tfd100.WtPct = .Cfd100.WtPct + .Ffd100.WtPct
            End If

            'New DfpFco
            If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                CalcOffSpecPbPltHoleWtPcts(aHoleData, aWhichToCalc)
            End If
            If aRcvryParamsData.UseDoloflotPlant2010 Then
                CalcDoloflotPltHoleWtPcts(aHoleData, aWhichToCalc)
            End If
            'Sheryl Start

            Dim allproductscat As New List(Of mProdInfoType)
            With allproductscat
                .Add(aHoleData.Cpb)
                .Add(aHoleData.Fpb)
                .Add(aHoleData.Ip)
                .Add(aHoleData.Ccn)
                .Add(aHoleData.Fcn)

            End With

            aHoleData.ATpr = CalcTotPrSpec(allproductscat, False)

            aHoleData.ATpr.WtPct = aSumData.HoleAtprWtPct

            'Sheryl End
        End With
    End Sub


    Public Sub ZeroRdctnData(ByRef aRdctnData As gRawProspSplRdctnType)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        With aRdctnData
            .Township = 0
            .Range = 0
            .Section = 0
            .HoleLocation = ""
            .SplitNumber = 0
            .ProspDate = ""
            .MineableCalcd = ""
            .MineableOride = ""
            .Forty = 0
            .Xcoord = 0         '10
            .Ycoord = 0
            .Elevation = 0
            .Ownership = ""
            .MinedOutStatus = 0
            .HoleType = 0
            .ExpDrill = ""
            .TotDepth = 0
            .SplitDepthTop = 0
            .SplitDepthBot = 0
            .SplitThck = 0      '20
            .Override = ""
            .Key = 0
            .cClass = ""
            .Bed = ""
            .Level = ""
            .Horizon = ""
            '-----
            .MtxxOnSpec = 0
            .TotxOnSpec = 0
            .MtxxAll = 0
            .TotxAll = 0        '30
            '-----
            .MtxxOnSpec100 = 0
            .TotxOnSpec100 = 0
            .MtxxAll100 = 0
            .TotxAll100 = 0
            '-----
            .MtxTPA = 0
            .MtxTpaPc = 0
            .MtxBPL = 0
            .MtxDensity = 0
            '-----
            .SplitBarren = 0
            .MtxColor = ""      '40
            .DegConsol = ""
            .DigChar = ""
            .PumpChar = ""
            .Lithology = ""
            .PhosphColor = ""
            .SurvCaddHoleId = ""
            .HoleDesc = ""
            '-----
            .MtxPctMoist = 0
            .MtxPctSol = 0
            .FdPctMoist = 0     '50
            .FdPctSol = 0
            .MtxTotDryWt = 0
            .FdTotDryWt = 0
            '-----
            .OvbThk = 0
            .ItbThk = 0
            .MtxThk = 0
            .WstThk = 0
            '-----
            '-----Os, Os100   mProdInfoType
            .Os.Tpa = 0
            .Os.WtPct = 0
            .Os.Bpl = 0
            .Os.Ins = 0
            .Os.Ia = 0
            .Os.IaAdj = 0
            .Os.Fe = 0
            .Os.FeAdj = 0
            .Os.Al = 0
            .Os.Mg = 0
            .Os.Ca = 0
            '-----
            .Os100.Tpa = 0
            .Os100.WtPct = 0
            .Os100.Bpl = 0
            .Os100.Ins = 0
            .Os100.Ia = 0
            .Os100.IaAdj = 0
            .Os100.Fe = 0
            .Os100.FeAdj = 0
            .Os100.Al = 0
            .Os100.Mg = 0
            .Os100.Ca = 0
            '-----
            '-----Cpb, Cpb100   mProdInfoType
            .Cpb.Tpa = 0
            .Cpb.WtPct = 0
            .Cpb.Bpl = 0
            .Cpb.Ins = 0
            .Cpb.Ia = 0
            .Cpb.IaAdj = 0
            .Cpb.Fe = 0
            .Cpb.FeAdj = 0
            .Cpb.Al = 0
            .Cpb.Mg = 0
            .Cpb.Ca = 0
            '-----
            .Cpb100.Tpa = 0
            .Cpb100.WtPct = 0
            .Cpb100.Bpl = 0
            .Cpb100.Ins = 0
            .Cpb100.Ia = 0
            .Cpb100.IaAdj = 0
            .Cpb100.Fe = 0
            .Cpb100.FeAdj = 0
            .Cpb100.Al = 0
            .Cpb100.Mg = 0
            .Cpb100.Ca = 0
            '-----
            '-----Fpb, Fpb100   mProdInfoType
            .Fpb.Tpa = 0
            .Fpb.WtPct = 0
            .Fpb.Bpl = 0
            .Fpb.Ins = 0
            .Fpb.Ia = 0
            .Fpb.IaAdj = 0
            .Fpb.Fe = 0
            .Fpb.FeAdj = 0
            .Fpb.Al = 0
            .Fpb.Mg = 0
            .Fpb.Ca = 0
            '-----
            .Fpb100.Tpa = 0
            .Fpb100.WtPct = 0
            .Fpb100.Bpl = 0
            .Fpb100.Ins = 0
            .Fpb100.Ia = 0
            .Fpb100.IaAdj = 0
            .Fpb100.Fe = 0
            .Fpb100.FeAdj = 0
            .Fpb100.Al = 0
            .Fpb100.Mg = 0
            .Fpb100.Ca = 0
            '-----
            '-----Tpb, Tpb100   mProdInfoType
            .Tpb.Tpa = 0
            .Tpb.WtPct = 0
            .Tpb.Bpl = 0
            .Tpb.Ins = 0
            .Tpb.Ia = 0
            .Tpb.IaAdj = 0
            .Tpb.Fe = 0
            .Tpb.FeAdj = 0
            .Tpb.Al = 0
            .Tpb.Mg = 0
            .Tpb.Ca = 0
            '-----
            .Tpb100.Tpa = 0
            .Tpb100.WtPct = 0
            .Tpb100.Bpl = 0
            .Tpb100.Ins = 0
            .Tpb100.Ia = 0
            .Tpb100.IaAdj = 0
            .Tpb100.Fe = 0
            .Tpb100.FeAdj = 0
            .Tpb100.Al = 0
            .Tpb100.Mg = 0
            .Tpb100.Ca = 0
            '-----
            '-----Ip, Ip100   mProdInfoType
            .Ip.Tpa = 0
            .Ip.WtPct = 0
            .Ip.Bpl = 0
            .Ip.Ins = 0
            .Ip.Ia = 0
            .Ip.IaAdj = 0
            .Ip.Fe = 0
            .Ip.FeAdj = 0
            .Ip.Al = 0
            .Ip.Mg = 0
            .Ip.Ca = 0
            '-----
            .Ip100.Tpa = 0
            .Ip100.WtPct = 0
            .Ip100.Bpl = 0
            .Ip100.Ins = 0
            .Ip100.Ia = 0
            .Ip100.IaAdj = 0
            .Ip100.Fe = 0
            .Ip100.FeAdj = 0
            .Ip100.Al = 0
            .Ip100.Mg = 0
            .Ip100.Ca = 0
            '-----
            '-----Ccn, Ccn100   mProdInfoType
            .Ccn.Tpa = 0
            .Ccn.WtPct = 0
            .Ccn.Bpl = 0
            .Ccn.Ins = 0
            .Ccn.Ia = 0
            .Ccn.IaAdj = 0
            .Ccn.Fe = 0
            .Ccn.FeAdj = 0
            .Ccn.Al = 0
            .Ccn.Mg = 0
            .Ccn.Ca = 0
            '-----
            .Ccn100.Tpa = 0
            .Ccn100.WtPct = 0
            .Ccn100.Bpl = 0
            .Ccn100.Ins = 0
            .Ccn100.Ia = 0
            .Ccn100.IaAdj = 0
            .Ccn100.Fe = 0
            .Ccn100.FeAdj = 0
            .Ccn100.Al = 0
            .Ccn100.Mg = 0
            .Ccn100.Ca = 0
            '-----
            '-----Fcn, Fcn100   mProdInfoType
            .Fcn.Tpa = 0
            .Fcn.WtPct = 0
            .Fcn.Bpl = 0
            .Fcn.Ins = 0
            .Fcn.Ia = 0
            .Fcn.IaAdj = 0
            .Fcn.Fe = 0
            .Fcn.FeAdj = 0
            .Fcn.Al = 0
            .Fcn.Mg = 0
            .Fcn.Ca = 0
            '-----
            .Fcn100.Tpa = 0
            .Fcn100.WtPct = 0
            .Fcn100.Bpl = 0
            .Fcn100.Ins = 0
            .Fcn100.Ia = 0
            .Fcn100.IaAdj = 0
            .Fcn100.Fe = 0
            .Fcn100.FeAdj = 0
            .Fcn100.Al = 0
            .Fcn100.Mg = 0
            .Fcn100.Ca = 0
            '-----
            '-----Tcn, Tcn100   mProdInfoType
            .Tcn.Tpa = 0
            .Tcn.WtPct = 0
            .Tcn.Bpl = 0
            .Tcn.Ins = 0
            .Tcn.Ia = 0
            .Tcn.IaAdj = 0
            .Tcn.Fe = 0
            .Tcn.FeAdj = 0
            .Tcn.Al = 0
            .Tcn.Mg = 0
            .Tcn.Ca = 0
            '-----
            .Tcn100.Tpa = 0
            .Tcn100.WtPct = 0
            .Tcn100.Bpl = 0
            .Tcn100.Ins = 0
            .Tcn100.Ia = 0
            .Tcn100.IaAdj = 0
            .Tcn100.Fe = 0
            .Tcn100.FeAdj = 0
            .Tcn100.Al = 0
            .Tcn100.Mg = 0
            .Tcn100.Ca = 0
            '-----
            '-----Tpr, Tpr100   mProdInfoType
            .Tpr.Tpa = 0
            .Tpr.WtPct = 0
            .Tpr.Bpl = 0
            .Tpr.Ins = 0
            .Tpr.Ia = 0
            .Tpr.IaAdj = 0
            .Tpr.Fe = 0
            .Tpr.FeAdj = 0
            .Tpr.Al = 0
            .Tpr.Mg = 0
            .Tpr.Ca = 0
            '-----
            .Tpr100.Tpa = 0
            .Tpr100.WtPct = 0
            .Tpr100.Bpl = 0
            .Tpr100.Ins = 0
            .Tpr100.Ia = 0
            .Tpr100.IaAdj = 0
            .Tpr100.Fe = 0
            .Tpr100.FeAdj = 0
            .Tpr100.Al = 0
            .Tpr100.Mg = 0
            .Tpr100.Ca = 0
            '-----
            '-----Cfd, Cfd100   mFdTlInfoType
            .Cfd.Tpa = 0
            .Cfd.WtPct = 0
            .Cfd.Bpl = 0
            '-----
            .Cfd100.Tpa = 0
            .Cfd100.WtPct = 0
            .Cfd100.Bpl = 0
            '-----
            '-----Ffd, Ffd100   mFdTlInfoType
            .Ffd.Tpa = 0
            .Ffd.WtPct = 0
            .Ffd.Bpl = 0
            '-----
            .Ffd100.Tpa = 0
            .Ffd100.WtPct = 0
            .Ffd100.Bpl = 0
            '-----
            '-----Tfd, Tfd100   mFdTlInfoType
            .Tfd.Tpa = 0
            .Tfd.WtPct = 0
            .Tfd.Bpl = 0
            '-----
            .Tfd100.Tpa = 0
            .Tfd100.WtPct = 0
            .Tfd100.Bpl = 0
            '-----
            '-----Wcl, Wcl100   mFdTlInfoType
            .Wcl.Tpa = 0
            .Wcl.WtPct = 0
            .Wcl.Bpl = 0
            '-----
            .Wcl100.Tpa = 0
            .Wcl100.WtPct = 0
            .Wcl100.Bpl = 0
            '-----
            '-----TlCrs, TlFne, Ttl, TlCrs100, TlFne100, Ttl100   mFdTlInfoType
            .TlCrs.Tpa = 0
            .TlCrs.WtPct = 0
            .TlCrs.Bpl = 0
            '-----
            .TlFne.Tpa = 0
            .TlFne.WtPct = 0
            .TlFne.Bpl = 0
            '-----
            .Ttl.Tpa = 0
            .Ttl.WtPct = 0
            .Ttl.Bpl = 0
            '-----
            .TlCrs100.Tpa = 0
            .TlCrs100.WtPct = 0
            .TlCrs100.Bpl = 0
            '-----
            .TlFne100.Tpa = 0
            .TlFne100.WtPct = 0
            .TlFne100.Bpl = 0
            '-----
            .Ttl100.Tpa = 0
            .Ttl100.WtPct = 0
            .Ttl100.Bpl = 0
            '-----
            .MineableHole = ""
            .MineableHole100 = ""
            '-----
            .CpbOnSpec = ""
            .FpbOnSpec = ""
            .TpbOnSpec = ""
            .CcnOnSpec = ""
            .FcnOnSpec = ""
            .TcnOnSpec = ""
            .OsOnSpec = ""
            .IpOnSpec = ""
            '-----
            .CpbMinHole = ""
            .FpbMinHole = ""
            .TpbMinHole = ""
            .CcnMinHole = ""
            .FcnMinHole = ""
            .TcnMinHole = ""
            .OsMinHole = ""
            .IpMinHole = ""
            '-----
            .MtxxOnSpec100Hole = 0
            .TotxOnSpec100Hole = 0
            .MtxxAll100Hole = 0
            .TotxAll100Hole = 0
            '-----
            .MtxxOnSpecPcHole = 0
            .TotxOnSpecPcHole = 0
            .MtxxAllPcHole = 0
            .TotxAllPcHole = 0
            '-----
            .Aoi = 0
            '-----
            'Currently in Sub ZeroRdctnData.
            '-----MgPltInp, MgPltInp100   mProdInfoType
            .MgPltInp.Tpa = 0
            .MgPltInp.WtPct = 0
            .MgPltInp.Bpl = 0
            .MgPltInp.Ins = 0
            .MgPltInp.Ia = 0
            .MgPltInp.Fe = 0
            .MgPltInp.Al = 0
            .MgPltInp.Mg = 0
            .MgPltInp.Ca = 0
            .MgPltInp.IaAdj = 0    '3/24/2011**, lss
            .MgPltInp.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltInp100.Tpa = 0
            .MgPltInp100.WtPct = 0
            .MgPltInp100.Bpl = 0
            .MgPltInp100.Ins = 0
            .MgPltInp100.Ia = 0
            .MgPltInp100.Fe = 0
            .MgPltInp100.Al = 0
            .MgPltInp100.Mg = 0
            .MgPltInp100.Ca = 0
            .MgPltInp100.IaAdj = 0    '3/24/2011**, lss
            .MgPltInp100.FeAdj = 0    '3/24/2011**, lss
            '-----
            '-----MgPltRej, MgPltRej100   mProdInfoType
            .MgPltRej.Tpa = 0
            .MgPltRej.WtPct = 0
            .MgPltRej.Bpl = 0
            .MgPltRej.Ins = 0
            .MgPltRej.Ia = 0
            .MgPltRej.Fe = 0
            .MgPltRej.Al = 0
            .MgPltRej.Mg = 0
            .MgPltRej.Ca = 0
            .MgPltRej.IaAdj = 0    '3/24/2011**, lss
            .MgPltRej.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltRej100.Tpa = 0
            .MgPltRej100.WtPct = 0
            .MgPltRej100.Bpl = 0
            .MgPltRej100.Ins = 0
            .MgPltRej100.Ia = 0
            .MgPltRej100.Fe = 0
            .MgPltRej100.Al = 0
            .MgPltRej100.Mg = 0
            .MgPltRej100.Ca = 0
            .MgPltRej100.IaAdj = 0    '3/24/2011**, lss
            .MgPltRej100.FeAdj = 0    '3/24/2011**, lss
            '-----
            '-----MgPltProd, MgPltProd100   mProdInfoType
            .MgPltProd.Tpa = 0
            .MgPltProd.WtPct = 0
            .MgPltProd.Bpl = 0
            .MgPltProd.Ins = 0
            .MgPltProd.Ia = 0
            .MgPltProd.Fe = 0
            .MgPltProd.Al = 0
            .MgPltProd.Mg = 0
            .MgPltProd.Ca = 0
            .MgPltProd.IaAdj = 0    '3/24/2011**, lss
            .MgPltProd.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltProd100.Tpa = 0
            .MgPltProd100.WtPct = 0
            .MgPltProd100.Bpl = 0
            .MgPltProd100.Ins = 0
            .MgPltProd100.Ia = 0
            .MgPltProd100.Fe = 0
            .MgPltProd100.Al = 0
            .MgPltProd100.Mg = 0
            .MgPltProd100.Ca = 0
            .MgPltProd100.IaAdj = 0    '3/24/2011**, lss
            .MgPltProd100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltTcn.Tpa = 0
            .MgPltTcn.WtPct = 0
            .MgPltTcn.Bpl = 0
            .MgPltTcn.Ins = 0
            .MgPltTcn.Ia = 0
            .MgPltTcn.Fe = 0
            .MgPltTcn.Al = 0
            .MgPltTcn.Mg = 0
            .MgPltTcn.Ca = 0
            .MgPltTcn.IaAdj = 0    '3/24/2011**, lss
            .MgPltTcn.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltTcn100.Tpa = 0
            .MgPltTcn100.WtPct = 0
            .MgPltTcn100.Bpl = 0
            .MgPltTcn100.Ins = 0
            .MgPltTcn100.Ia = 0
            .MgPltTcn100.Fe = 0
            .MgPltTcn100.Al = 0
            .MgPltTcn100.Mg = 0
            .MgPltTcn100.Ca = 0
            .MgPltTcn100.IaAdj = 0    '3/24/2011**, lss
            .MgPltTcn100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltTpr.Tpa = 0
            .MgPltTpr.WtPct = 0
            .MgPltTpr.Bpl = 0
            .MgPltTpr.Ins = 0
            .MgPltTpr.Ia = 0
            .MgPltTpr.Fe = 0
            .MgPltTpr.Al = 0
            .MgPltTpr.Mg = 0
            .MgPltTpr.Ca = 0
            .MgPltTpr.IaAdj = 0    '3/24/2011**, lss
            .MgPltTpr.FeAdj = 0    '3/24/2011**, lss
            '-----
            .MgPltTpr100.Tpa = 0
            .MgPltTpr100.WtPct = 0
            .MgPltTpr100.Bpl = 0
            .MgPltTpr100.Ins = 0
            .MgPltTpr100.Ia = 0
            .MgPltTpr100.Fe = 0
            .MgPltTpr100.Al = 0
            .MgPltTpr100.Mg = 0
            .MgPltTpr100.Ca = 0
            .MgPltTpr100.IaAdj = 0    '3/24/2011**, lss
            .MgPltTpr100.FeAdj = 0    '3/24/2011**, lss
            '-----
            '-----TpbRej, TpbRej100   mProdInfoType
            .TpbRej.Tpa = 0
            .TpbRej.WtPct = 0
            .TpbRej.Bpl = 0
            .TpbRej.Ins = 0
            .TpbRej.Ia = 0
            .TpbRej.IaAdj = 0
            .TpbRej.Fe = 0
            .TpbRej.FeAdj = 0
            .TpbRej.Al = 0
            .TpbRej.Mg = 0
            .TpbRej.Ca = 0
            '-----
            .TpbRej100.Tpa = 0
            .TpbRej100.WtPct = 0
            .TpbRej100.Bpl = 0
            .TpbRej100.Ins = 0
            .TpbRej100.Ia = 0
            .TpbRej100.IaAdj = 0
            .TpbRej100.Fe = 0
            .TpbRej100.FeAdj = 0
            .TpbRej100.Al = 0
            .TpbRej100.Mg = 0
            .TpbRej100.Ca = 0
            '-----
            '-----TcnRej, TcnRej100   mProdInfoType
            'Currently in Sub ZeroRdctnData
            .TcnRej.Tpa = 0
            .TcnRej.WtPct = 0
            .TcnRej.Bpl = 0
            .TcnRej.Ins = 0
            .TcnRej.Ia = 0
            .TcnRej.IaAdj = 0
            .TcnRej.Fe = 0
            .TcnRej.FeAdj = 0
            .TcnRej.Al = 0
            .TcnRej.Mg = 0
            .TcnRej.Ca = 0
            '-----
            .TcnRej100.Tpa = 0
            .TcnRej100.WtPct = 0
            .TcnRej100.Bpl = 0
            .TcnRej100.Ins = 0
            .TcnRej100.Ia = 0
            .TcnRej100.IaAdj = 0
            .TcnRej100.Fe = 0
            .TcnRej100.FeAdj = 0
            .TcnRej100.Al = 0
            .TcnRej100.Mg = 0
            .TcnRej100.Ca = 0
            '-----
            'DOLOFLOT STUFF
            .DfFpbInp.Tpa = 0
            .DfFpbInp.WtPct = 0
            .DfFpbInp.Bpl = 0
            .DfFpbInp.Ins = 0
            .DfFpbInp.Ia = 0
            .DfFpbInp.Fe = 0
            .DfFpbInp.Al = 0
            .DfFpbInp.Mg = 0
            .DfFpbInp.Ca = 0
            .DfFpbInp.IaAdj = 0    '3/24/2011**, lss
            .DfFpbInp.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfFpbProd.Tpa = 0
            .DfFpbProd.WtPct = 0
            .DfFpbProd.Bpl = 0
            .DfFpbProd.Ins = 0
            .DfFpbProd.Ia = 0
            .DfFpbProd.Fe = 0
            .DfFpbProd.Al = 0
            .DfFpbProd.Mg = 0
            .DfFpbProd.Ca = 0
            .DfFpbProd.IaAdj = 0    '3/24/2011**, lss
            .DfFpbProd.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfFpbInp100.Tpa = 0
            .DfFpbInp100.WtPct = 0
            .DfFpbInp100.Bpl = 0
            .DfFpbInp100.Ins = 0
            .DfFpbInp100.Ia = 0
            .DfFpbInp100.Fe = 0
            .DfFpbInp100.Al = 0
            .DfFpbInp100.Mg = 0
            .DfFpbInp100.Ca = 0
            .DfFpbInp100.IaAdj = 0    '3/24/2011**, lss
            .DfFpbInp100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfFpbProd100.Tpa = 0
            .DfFpbProd100.WtPct = 0
            .DfFpbProd100.Bpl = 0
            .DfFpbProd100.Ins = 0
            .DfFpbProd100.Ia = 0
            .DfFpbProd100.Fe = 0
            .DfFpbProd100.Al = 0
            .DfFpbProd100.Mg = 0
            .DfFpbProd100.Ca = 0
            .DfFpbProd100.IaAdj = 0    '3/24/2011**, lss
            .DfFpbProd100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfIpInp.Tpa = 0
            .DfIpInp.WtPct = 0
            .DfIpInp.Bpl = 0
            .DfIpInp.Ins = 0
            .DfIpInp.Ia = 0
            .DfIpInp.Fe = 0
            .DfIpInp.Al = 0
            .DfIpInp.Mg = 0
            .DfIpInp.Ca = 0
            .DfIpInp.IaAdj = 0    '3/24/2011**, lss
            .DfIpInp.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfIpProd.Tpa = 0
            .DfIpProd.WtPct = 0
            .DfIpProd.Bpl = 0
            .DfIpProd.Ins = 0
            .DfIpProd.Ia = 0
            .DfIpProd.Fe = 0
            .DfIpProd.Al = 0
            .DfIpProd.Mg = 0
            .DfIpProd.Ca = 0
            .DfIpProd.IaAdj = 0    '3/24/2011**, lss
            .DfIpProd.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfIpInp100.Tpa = 0
            .DfIpInp100.WtPct = 0
            .DfIpInp100.Bpl = 0
            .DfIpInp100.Ins = 0
            .DfIpInp100.Ia = 0
            .DfIpInp100.Fe = 0
            .DfIpInp100.Al = 0
            .DfIpInp100.Mg = 0
            .DfIpInp100.Ca = 0
            .DfIpInp100.IaAdj = 0    '3/24/2011**, lss
            .DfIpInp100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfIpProd100.Tpa = 0
            .DfIpProd100.WtPct = 0
            .DfIpProd100.Bpl = 0
            .DfIpProd100.Ins = 0
            .DfIpProd100.Ia = 0
            .DfIpProd100.Fe = 0
            .DfIpProd100.Al = 0
            .DfIpProd100.Mg = 0
            .DfIpProd100.Ca = 0
            .DfIpProd100.IaAdj = 0    '3/24/2011**, lss
            .DfIpProd100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfTcn.Tpa = 0
            .DfTcn.WtPct = 0
            .DfTcn.Bpl = 0
            .DfTcn.Ins = 0
            .DfTcn.Ia = 0
            .DfTcn.Fe = 0
            .DfTcn.Al = 0
            .DfTcn.Mg = 0
            .DfTcn.Ca = 0
            .DfTcn.IaAdj = 0    '3/24/2011**, lss
            .DfTcn.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfTpr.Tpa = 0
            .DfTpr.WtPct = 0
            .DfTpr.Bpl = 0
            .DfTpr.Ins = 0
            .DfTpr.Ia = 0
            .DfTpr.Fe = 0
            .DfTpr.Al = 0
            .DfTpr.Mg = 0
            .DfTpr.Ca = 0
            .DfTpr.IaAdj = 0    '3/24/2011**, lss
            .DfTpr.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfTcn100.Tpa = 0
            .DfTcn100.WtPct = 0
            .DfTcn100.Bpl = 0
            .DfTcn100.Ins = 0
            .DfTcn100.Ia = 0
            .DfTcn100.Fe = 0
            .DfTcn100.Al = 0
            .DfTcn100.Mg = 0
            .DfTcn100.Ca = 0
            .DfTcn100.IaAdj = 0    '3/24/2011**, lss
            .DfTcn100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .DfTpr100.Tpa = 0
            .DfTpr100.WtPct = 0
            .DfTpr100.Bpl = 0
            .DfTpr100.Ins = 0
            .DfTpr100.Ia = 0
            .DfTpr100.Fe = 0
            .DfTpr100.Al = 0
            .DfTpr100.Mg = 0
            .DfTpr100.Ca = 0
            .DfTpr100.IaAdj = 0    '3/24/2011**, lss
            .DfTpr100.FeAdj = 0    '3/24/2011**, lss
            '-----
            .FpbMgoOffSpec = ""
            .IpMgoOffSpec = ""
            '-----
            'Changes 10/19/2011, lss
            .HardpanFrom = 0
            .HardpanTo = 0
            .HardpanThck = 0
            .HardpanCode = ""
        End With
    End Sub

    Public Function GetTextFileHeaderSurvCadd() As String

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim HdrTxt As String
        '12/06/2007, lss
        'Updated the header per Gary Gavie.
        '02/11/2008, lss
        'Updated the header per Gary Gavie.
        '09/16/2009, lss
        'Added (forgot to add them before):
        '1) MI_FEOA
        '2) MR_FEOA
        '3) MP_FEOA
        '4) OS_FEOA
        '5) PC_FEOA
        '6) PF_FEOA
        '7) PT_FEOA
        '8) IP_FEOA
        '9) CN_FEOA

        '  1) HOLEID
        '  2) XCOORD
        '  3) YCOORD
        '  4) DATE
        '  5) OWN
        '  6) MINOUT
        '  7) TYPE
        '  8) EXPAND
        '  9) ELEV
        ' 10) TDD
        ' 11) TWP
        ' 12) RNG
        ' 13) SEC
        ' 14) FTY
        ' 15) HOLE
        ' 16) SPLNO
        ' 17) FROM
        ' 18) TO
        ' 19) SPLTK
        ' 20) MINE
        ' 21) ORIDE
        ' 22) ORID
        ' 23) ORDATE
        ' 24) KEY
        ' 25) CLASS
        ' 26) BED
        ' 27) LEVEL
        ' 28) HZCODE
        ' 29) MYPT_ST
        ' 30) TYPT_ST
        ' 31) MYPT_AT
        ' 32) TYPT_AT
        ' 33) HD_TPA   Was MT_TPA
        ' 34) HD_BPL   Was MT_BPL
        ' 35) HD_DEN   Was MT_DEN
        '-----
        '-----Doloflot plant, fine pebble input
        ' 36) DF_TPA
        ' 37) DF_PCT
        ' 38) DF_BPL
        ' 39) DF_INS
        ' 40) DF_IA
        ' 41) DF_FEO
        ' 42) DF_FEOA
        ' 43) DF_ALO
        ' 44) DF_MGO
        ' 45) DF_CPR
        '-----Doloflot plant, IP input
        ' 46) DI_TPA
        ' 47) DI_PCT
        ' 48) DI_BPL
        ' 49) DI_INS
        ' 50) DI_IA
        ' 51) DI_FEO
        ' 52) DI_FEOA
        ' 53) DI_ALO
        ' 54) DI_MGO
        ' 55) DI_CPR
        '-----Doloflot plant, Total input
        ' 56) DT_TPA
        ' 57) DT_PCT
        ' 58) DT_BPL
        ' 59) DT_INS
        ' 60) DT_IA
        ' 61) DT_FEO
        ' 62) DT_FEOA
        ' 63) DT_ALO
        ' 64) DT_MGO
        ' 65) DT_CPR
        '-----Doloflot plant, Total product
        ' 66) DP_TPA
        ' 67) DP_PCT
        ' 68) DP_BPL
        ' 69) DP_INS
        ' 70) DP_IA
        ' 71) DP_FEO
        ' 72) DP_FEOA
        ' 73) DP_ALO
        ' 74) DP_MGO
        ' 75) DP_CPR
        '-----
        ' 76) MI_TPA
        ' 77) MI_PCT
        ' 78) MI_BPL
        ' 79) MI_INS
        ' 80) MI_IA
        ' 81) MI_FEO
        ' 82) MI_FEOA     New -- 07/29/2009, lss (1)
        ' 83) MI_ALO
        ' 84) MI_MGO
        ' 85) MI_CPR
        '-----
        ' 86) MR_TPA
        ' 87) MR_PCT
        ' 88) MR_BPL
        ' 89) MR_INS
        ' 90) MR_IA
        ' 91) MR_FEO
        ' 92) MR_FEOA     New -- 07/29/2009, lss (2)
        ' 93) MR_ALO
        ' 94) MR_MGO
        ' 95) MR_CPR
        '-----
        ' 96) MP_TPA
        ' 97) MP_PCT
        ' 98) MP_BPL
        ' 99) MP_INS
        '100) MP_IA
        '101) MP_FEO
        '102) MP_FEOA     New -- 07/29/2009, lss (3)
        '103) MP_ALO
        '104) MP_MGO
        '105) MP_CPR
        '-----
        '106) OS_TPA
        '107) OS_PCT
        '108) OS_BPL
        '109) OS_INS
        '110) OS_IA
        '111) OS_FEO
        '112) OS_FEOA     New -- 07/29/2009, lss (4)
        '113) OS_ALO
        '114) OS_MGO
        '115) OS_CPR
        '-----Coarse pebble reject (Sort of Doloflot plant related)
        '116) PR_TPA
        '117) PR_PCT
        '118) PR_BPL
        '119) PR_INS
        '120) PR_IA
        '121) PR_FEO
        '122) PR_FEOA     New -- 07/29/2009, lss (5)
        '123) PR_ALO
        '124) PR_MGO
        '125) PR_CPR
        '-----
        '126) PC_TPA
        '127) PC_PCT
        '128) PC_BPL
        '129) PC_INS
        '130) PC_IA
        '131) PC_FEO
        '132) PC_FEOA     New -- 07/29/2009, lss (5)
        '133) PC_ALO
        '134) PC_MGO
        '135) PC_CPR
        '-----
        '136) PF_TPA
        '137) PF_PCT
        '138) PF_BPL
        '139) PF_INS
        '140) PF_IA
        '141) PF_FEO
        '142) PF_FEOA     New -- 07/29/2009, lss (6)
        '143) PF_ALO
        '144) PF_MGO
        '145) PF_CPR
        '-----
        '146) PT_TPA
        '147) PT_PCT
        '148) PT_BPL
        '149) PT_INS
        '150) PT_IA
        '151) PT_FEO
        '152) PT_FEOA     New -- 07/29/2009, lss (7)
        '153) PT_ALO
        '154) PT_MGO
        '155) PT_CPR
        '-----
        '156) IP_TPA
        '157) IP_PCT
        '158) IP_BPL
        '159) IP_INS
        '160) IP_IA
        '161) IP_FEO
        '162) IP_FEOA     New -- 07/29/2009, lss (8)
        '163) IP_ALO
        '164) IP_MGO
        '165) IP_CPR
        '-----
        '166) CN_TPA
        '167) CN_PCT
        '168) CN_BPL
        '169) CN_INS
        '170) CN_IA
        '171) CN_FEO
        '172) CN_FEOA     New -- 07/29/2009, lss (9)
        '173) CN_ALO
        '174) CN_MGO
        '175) CN_CPR
        '-----
        '176) FC_TPA
        '177) FC_PCT
        '178) FC_BPL
        '-----
        '179) FF_TPA
        '180) FF_PCT
        '181) FF_BPL
        '-----
        '182) FT_TPA
        '183) FT_PCT
        '184) FT_BPL
        '-----
        '185) WC_TPA
        '186) WC_PCT
        '187) WC_BPL
        '-----
        '188) MTXCLR
        '189) CONS
        '190) DIG
        '191) PUMP
        '192) LITH
        '193) PHOSCLR
        '-----
        '194) HP_FROM
        '195) HP_TO
        '196) HP_TK
        '197) HP_HARD

        HdrTxt = "HOLEID, XCOORD, YCOORD, DATE, OWN, MINOUT, TYPE, EXPAND, ELEV, TDD, " &
             "TWP, RNG, SEC, FTY, HOLE, SPLNO, FROM, TO, " &
             "SPLTK, MINE, ORIDE, ORID, ORDATE, KEY, CLASS, BED, LEVEL, HZCODE, " &
             "MYPT_ST, TYPT_ST, MYPT_AT, TYPT_AT, HD_TPA, HD_BPL, HD_DEN, "

        HdrTxt = HdrTxt &
             "DF_TPA, DF_PCT, DF_BPL, DF_INS, DF_IA, DF_FEO, DF_FEOA, DF_ALO, DF_MGO, DF_CPR, " &
             "DI_TPA, DI_PCT, DI_BPL, DI_INS, DI_IA, DI_FEO, DI_FEOA, DI_ALO, DI_MGO, DI_CPR, " &
             "DT_TPA, DT_PCT, DT_BPL, DT_INS, DT_IA, DT_FEO, DT_FEOA, DT_ALO, DT_MGO, DT_CPR, " &
             "DP_TPA, DP_PCT, DP_BPL, DP_INS, DP_IA, DP_FEO, DP_FEOA, DP_ALO, DP_MGO, DP_CPR, "

        HdrTxt = HdrTxt &
             "MI_TPA, MI_PCT, MI_BPL, MI_INS, MI_IA, MI_FEO, MI_FEOA, MI_ALO, MI_MGO, MI_CPR, " &
             "MR_TPA, MR_PCT, MR_BPL, MR_INS, MR_IA, MR_FEO, MR_FEOA, MR_ALO, MR_MGO, MR_CPR, " &
             "MP_TPA, MP_PCT, MP_BPL, MP_INS, MP_IA, MP_FEO, MP_FEOA, MP_ALO, MP_MGO, MP_CPR, "

        HdrTxt = HdrTxt &
             "OS_TPA, OS_PCT, OS_BPL, OS_INS, OS_IA, OS_FEO, OS_FEOA, OS_ALO, OS_MGO, OS_CPR, " &
             "PR_TPA, PR_PCT, PR_BPL, PR_INS, PR_IA, PR_FEO, PR_FEOA, PR_ALO, PR_MGO, PR_CPR, " &
             "PC_TPA, PC_PCT, PC_BPL, PC_INS, PC_IA, PC_FEO, PC_FEOA, PC_ALO, PC_MGO, PC_CPR, " &
             "PF_TPA, PF_PCT, PF_BPL, PF_INS, PF_IA, PF_FEO, PF_FEOA, PF_ALO, PF_MGO, PF_CPR, " &
             "PT_TPA, PT_PCT, PT_BPL, PT_INS, PT_IA, PT_FEO, PT_FEOA, PT_ALO, PT_MGO, PT_CPR, " &
             "IP_TPA, IP_PCT, IP_BPL, IP_INS, IP_IA, IP_FEO, IP_FEOA, IP_ALO, IP_MGO, IP_CPR, " &
             "CN_TPA, CN_PCT, CN_BPL, CN_INS, CN_IA, CN_FEO, CN_FEOA, CN_ALO, CN_MGO, CN_CPR, " &
             "FC_TPA, FC_PCT, FC_BPL, " &
             "FF_TPA, FF_PCT, FF_BPL, FT_TPA, FT_PCT, FT_BPL, WC_TPA, WC_PCT, WC_BPL, MTXCLR, CONS, " &
             "DIG, PUMP, LITH, PHOSCLR, HP_FROM, HP_TO, HP_TK, HP_HARD"

        GetTextFileHeaderSurvCadd = HdrTxt
    End Function

    Private Function ProcessForHoleMineability(ByRef aSsSplitReview As AxvaSpread,
                                               ByVal aRcvryParamsData As gDataRdctnParamsType,
                                               ByVal aRcvryProdQual As ViewModels.ProductRecoveryDefinition,
                                               ByVal IsIPDistributedTo As Boolean,
                                               ByVal aScope As String) As Boolean

        Dim ThisTwp As Integer
        Dim ThisRge As Integer
        Dim ThisSec As Integer
        Dim ThisHole As String
        Dim HoleMineability As String

        Dim RowIdx As Long
        Dim RowIdx2 As Long
        Dim SplIdx As Integer
        Dim RowBeg As Long
        Dim RowEnd As Long
        Dim Sdata As New gRawProspSplRdctnType()
        Dim SplCnt As Integer

        'Will assume that we will never have more than 30 splits for a hole.
        'Dim HoleSpl(0 To 30) As gRawProspSplRdctnType

        Dim HoleSpl As New List(Of gRawProspSplRdctnType)

        Try

            ThisTwp = 0
            ThisRge = 0
            ThisSec = 0
            ThisHole = ""
            SplCnt = 0
            RowBeg = 1
            RowEnd = 1

            'Will process all of the splits in aSsSplitReview a hole at a
            'time.  Assume that they will be in the proper order (Split#1, Split#2,
            'Split#3, Split#4, etc.).
            'Will get all of the splits for a hole and place the data in
            'HoleSpl() -- thus we will be processing the splits one hole at a time.

            With aSsSplitReview
                For RowIdx = 1 To .MaxRows
                    .Row = RowIdx
                    'Need to get the split data that is in this row.
                    Sdata = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)

                    'See if the hole has changed!
                    If (Sdata.Township <> ThisTwp Or Sdata.Range <> ThisRge Or
                    Sdata.Section <> ThisSec Or Sdata.HoleLocation <> ThisHole) And
                    ThisHole <> "" Then
                        'The hole has changed -- have all of the splits in HoleSpl()
                        'Need to determine if this hole is mineable.


                        'GetHoleMineabilitySimp will return True or False (indicating
                        'whether the hole is mineable based on ProdCoeff data).
                        HoleMineability = GetHoleMineabilitySimp(HoleSpl,
                                                                 aRcvryParamsData,
                                                                 aRcvryProdQual,
                                                                 IsIPDistributedTo,
                                                                 aScope)


                        'Need to place this info in aSsSplitReview.
                        'Both MineableHole and MineableHole100 have been marked in
                        'the HoleSpl() data (for both ProdCoeff and 100%).  The hole
                        'product mineabilities have been marked also.

                        SplCnt = 0
                        For RowIdx2 = RowBeg To RowEnd
                            aSsSplitReview.Row = RowIdx2
                            aSsSplitReview.Col = 190   'Mineability for this split at
                            'the hole level.

                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).MineableHole       'ProdCoeff

                            aSsSplitReview.Col = 313
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).MineableHole100    '100%

                            aSsSplitReview.Col = 319
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).CpbMinHole         'ProdCoeff
                            aSsSplitReview.Col = 320
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).FpbMinHole         'ProdCoeff
                            aSsSplitReview.Col = 321
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).TpbMinHole         'ProdCoeff
                            aSsSplitReview.Col = 322
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).CcnMinHole         'ProdCoeff
                            aSsSplitReview.Col = 323
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).FcnMinHole         'ProdCoeff
                            aSsSplitReview.Col = 324
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).TcnMinHole         'ProdCoeff
                            aSsSplitReview.Col = 325
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).OsMinHole          'ProdCoeff
                            aSsSplitReview.Col = 326
                            aSsSplitReview.Text = HoleSpl.Item(SplCnt).IpMinHole          'ProdCoeff

                            aSsSplitReview.Col = 327
                            aSsSplitReview.Value = HoleSpl.Item(SplCnt).MtxxOnSpecPcHole  'PC  Hole
                            aSsSplitReview.Col = 328
                            aSsSplitReview.Value = HoleSpl.Item(SplCnt).TotxOnSpecPcHole  'PC  Hole

                            aSsSplitReview.Col = 331
                            aSsSplitReview.Value = HoleSpl.Item(SplCnt).MtxxOnSpec100Hole '100%  Hole
                            aSsSplitReview.Col = 332
                            aSsSplitReview.Value = HoleSpl.Item(SplCnt).TotxOnSpec100Hole '100%  Hole

                            SplCnt = SplCnt + 1
                        Next RowIdx2

                        'Clear out the split data.
                        'For SplIdx = 1 To 30
                        '    ZeroRdctnData(HoleSpl(SplIdx))
                        'Next SplIdx
                        HoleSpl.Clear()
                        SplCnt = 0
                        RowBeg = RowIdx
                    End If

                    'Add this split to HoleSpl()
                    SplCnt = SplCnt + 1
                    HoleSpl.Add(Sdata)
                    RowEnd = RowIdx
                    '-----
                    ThisTwp = Sdata.Township
                    ThisRge = Sdata.Range
                    ThisSec = Sdata.Section
                    ThisHole = Sdata.HoleLocation
                Next RowIdx
            End With

            'Process the last hole!

            'GetHoleMineabilitySimp will return True or False.
            HoleMineability = GetHoleMineabilitySimp(HoleSpl,
                                                     aRcvryParamsData,
                                                     aRcvryProdQual,
                                                     IsIPDistributedTo,
                                                     aScope)


            'Need to place this info in aSsSplitReview.
            'Both MineableHole and MineableHole100 have been marked in
            'the HoleSpl() data (for both ProdCoeff and 100%).  The hole
            'product mineabilities have been marked also.

            SplCnt = 0
            For RowIdx2 = RowBeg To RowEnd
                aSsSplitReview.Row = RowIdx2
                aSsSplitReview.Col = 190   'Mineability for this split at
                'the hole level.

                aSsSplitReview.Text = HoleSpl.Item(SplCnt).MineableHole       'ProdCoeff

                aSsSplitReview.Col = 313
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).MineableHole100    '100%

                aSsSplitReview.Col = 319
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).CpbMinHole         'ProdCoeff
                aSsSplitReview.Col = 320
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).FpbMinHole         'ProdCoeff
                aSsSplitReview.Col = 321
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).TpbMinHole         'ProdCoeff
                aSsSplitReview.Col = 322
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).CcnMinHole         'ProdCoeff
                aSsSplitReview.Col = 323
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).FcnMinHole         'ProdCoeff
                aSsSplitReview.Col = 324
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).TcnMinHole         'ProdCoeff
                aSsSplitReview.Col = 325
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).OsMinHole          'ProdCoeff
                aSsSplitReview.Col = 326
                aSsSplitReview.Text = HoleSpl.Item(SplCnt).IpMinHole          'ProdCoeff

                aSsSplitReview.Col = 327
                aSsSplitReview.Value = HoleSpl.Item(SplCnt).MtxxOnSpecPcHole  'PC  Hole
                aSsSplitReview.Col = 328
                aSsSplitReview.Value = HoleSpl.Item(SplCnt).TotxOnSpecPcHole  'PC  Hole

                aSsSplitReview.Col = 331
                aSsSplitReview.Value = HoleSpl.Item(SplCnt).MtxxOnSpec100Hole '100%  Hole
                aSsSplitReview.Col = 332
                aSsSplitReview.Value = HoleSpl.Item(SplCnt).TotxOnSpec100Hole '100%  Hole
                SplCnt = SplCnt + 1
            Next RowIdx2

            'The process went OK!
            Return True

        Catch ex As Exception
            MsgBox("Error determining hole mineability." & vbCrLf &
               Err.Description,
               vbOKOnly + vbExclamation,
               "Data Process Error")
            'The process did not go OK!
            Return False
        End Try
    End Function

    Private Function ProcessForHoleMineability2(ByRef aHoles As List(Of Hole),
                                               ByVal aRcvryParamsData As gDataRdctnParamsType,
                                               ByVal aRcvryProdQual As ViewModels.ProductRecoveryDefinition,
                                               ByVal IsIPDistributedTo As Boolean,
                                               ByVal aScope As String) As Boolean

        Try

            'Will process all of the splits in aSsSplitReview a hole at a
            'time.  Assume that they will be in the proper order (Split#1, Split#2,
            'Split#3, Split#4, etc.).
            'Will get all of the splits for a hole and place the data in
            'HoleSpl() -- thus we will be processing the splits one hole at a time.

            Dim SplIdx As Integer
            For Each Hole As Hole In aHoles
                Dim MaxTotDepth As Single
                Dim SplMineability As String
                Dim TopMinSpl As Integer = 0
                Dim BotMinSpl As Integer = 0
                Dim TopSpl As Integer = 0
                Dim BotSpl As Integer = 0
                Dim SumData As gRawProspSplRdctnSumType
                Dim HoleMineable As Boolean
                Dim ForcedTheHoleMineable As Boolean
                Dim TotYds As Single
                Dim TotPr As Integer
                Dim TotxCalcPc As Single
                Dim TotxCalc100 As Single

                SplIdx = 1
                For Each Split As gRawProspSplRdctnType In Hole.Splits
                    'HoleMineability = GetHoleMineabilitySimp(HoleSpl, aRcvryParamsData, aRcvryProdQual, IsIPDistributedTo, aScope)
                    MaxTotDepth = aRcvryProdQual.MiniabilityParamaters.MaxTotDepthHole
                    If MaxTotDepth = 0 Then
                        MaxTotDepth = 9999
                    End If
                    If Split.HoleLocation = "" Then
                        Exit For
                    End If
                    If Split.MineableOride <> "C" Then
                        SplMineability = Split.MineableOride     'Will be "M" or "U"
                    Else
                        'User has not set an override mineability for this split!
                        'Will use the mineability set by the split reduction.
                        SplMineability = Split.MineableCalcd
                    End If
                    If SplMineability = "M" And Split.SplitDepthTop < MaxTotDepth Then
                        If TopMinSpl = 0 Then
                            TopMinSpl = SplIdx
                        End If
                        BotMinSpl = SplIdx
                    End If
                    If TopSpl = 0 Then
                        TopSpl = SplIdx
                    End If
                    BotSpl = SplIdx
                    SplIdx += 1
                Next

                For SplIdx = 1 To BotMinSpl
                    If Hole.Splits.Item(SplIdx - 1).HoleLocation = "" Then
                        Exit For
                    End If

                    'This proc will sum split data based on DataType (either
                    'ProdCoeff or 100%).  In this case we will only use
                    'ProdCoeff.
                    '(Summing mineable splits to get hole total - will then
                    'determine whether the hole is mineable).
                    'We are currently in GetHoleMineabilitySimp.
                    AddSplToHoleSumDataMineable(Hole.Splits.Item(SplIdx - 1),
                                                SumData,
                                                aRcvryParamsData,
                                                aRcvryProdQual,
                                                SplIdx,
                                                TopMinSpl,
                                                BotMinSpl)
                Next SplIdx

                'Split summing complete -- now determine hole mineability
                'First need to get the calculated hole data from the summed
                'split data.
                Hole.Data.Section = Hole.Splits(0).Section
                Hole.Data.Township = Hole.Splits(0).Township
                Hole.Data.Range = Hole.Splits(0).Range
                Hole.Data.HoleLocation = Hole.Splits(0).HoleLocation

                'Calculating data from sum -- this is ProdCoeff data.
                'We are currently in Function GetHoleMineabilitySimp
                'The 4th parameter indicates whether the Mtx & Ovb thicknesses
                'should be adjusted per the user.  The 5th parameter is set to
                '"ProdCoeff" since we will determine hole mineability based on
                'the "ProdCoeff" data.
                CalcDataFromSumDataMineable(Hole.Data,
                                            SumData,
                                            aRcvryParamsData)

                'Finally DetermineHoleMineability will return whether or not the hole
                'is mineable.

                'Dim IsIPDistributedTo As Boolean = False
                'IsIPDistributedTo = MatlDistributedTo(aSsProdDist, "IP")
                HoleMineable = DetermineHoleMineability(Hole.Data,
                                                        SumData,
                                                        aRcvryParamsData,
                                                        aRcvryProdQual,
                                                        IsIPDistributedTo)

                If Not HoleMineable Then
                    'Need to mark in ssCompErrors.
                    MarkCompError(Hole.Data, aScope)
                End If

                'Hole mineability determination completed.  If the hole is unmineable
                'then mark every split as unmineable (do the same for both .MineableHole
                'and .MineableHole100).

                ForcedTheHoleMineable = False
                If HoleMineable Then
                    'Keep all split mineabilities as they were originally determined.
                    For SplIdx = 1 To BotSpl
                        Hole.Splits.Item(SplIdx - 1).MineableHole = Hole.Splits.Item(SplIdx - 1).MineableCalcd
                        Hole.Splits.Item(SplIdx - 1).MineableHole100 = Hole.Splits.Item(SplIdx - 1).MineableCalcd
                    Next SplIdx
                Else
                    'Mark all splits as unmineable (for both .MineableHole and
                    '.MineableHole100).
                    For SplIdx = 1 To BotSpl
                        Hole.Splits.Item(SplIdx - 1).MineableHole = "U"
                        Hole.Splits.Item(SplIdx - 1).MineableHole100 = "U"
                    Next SplIdx
                    If aRcvryParamsData.MineFirstSpl = 1 Then
                        'Need to set the first split mineable if the user selected this
                        'option on the Mineability tab on frmProspDataReduction.
                        '(chkNoUnmineableHoles).  Will call this a "forced" mineability.
                        Hole.Splits.Item(TopSpl - 1).MineableHole = "MF"
                        Hole.Splits.Item(TopSpl - 1).MineableHole100 = "MF"
                        ForcedTheHoleMineable = True
                    End If
                End If

                'From DetermineHoleMineability also have:
                '1) aHoleData.MtxxOnSpecPcHole = MtxxPc    'ProdCoeff
                '2) aHoleData.TotxOnSpecPcHole = TotxPc    'ProdCoeff
                '3) aHoleData.MtxxOnSpec100Hole = Mtxx100  '100%
                '4) aHoleData.TotxOnSpec100Hole = Totx100  '100%

                'Capture the hole product mineability -- will be placed in each split
                'for the hole.
                'Capture the OnSpec Product Mtx"X" and Tot"X" values as well.

                If Not ForcedTheHoleMineable Then
                    For SplIdx = 1 To BotSpl
                        Hole.Splits.Item(SplIdx - 1).CpbMinHole = Hole.Data.CpbOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).FpbMinHole = Hole.Data.FpbOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).TpbMinHole = Hole.Data.TpbOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).CcnMinHole = Hole.Data.CcnOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).FcnMinHole = Hole.Data.FcnOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).TcnMinHole = Hole.Data.TcnOnSpec    'Hole
                        Hole.Splits.Item(SplIdx - 1).OsMinHole = Hole.Data.OsOnSpec      'Hole
                        Hole.Splits.Item(SplIdx - 1).IpMinHole = Hole.Data.IpOnSpec      'Hole
                        '-----
                        Hole.Splits.Item(SplIdx - 1).MtxxOnSpecPcHole = Hole.Data.MtxxOnSpecPcHole    'PC    Hole
                        Hole.Splits.Item(SplIdx - 1).TotxOnSpecPcHole = Hole.Data.TotxOnSpecPcHole    'PC    Hole
                        Hole.Splits.Item(SplIdx - 1).MtxxOnSpec100Hole = Hole.Data.MtxxOnSpec100Hole  '100%  Hole
                        Hole.Splits.Item(SplIdx - 1).TotxOnSpec100Hole = Hole.Data.TotxOnSpec100Hole  '100%  Hole
                    Next SplIdx
                Else
                    'This hole has been "forced" to be minable -- the first split is set to mineable!
                    For SplIdx = 1 To BotSpl
                        'Have forced the first split to be mineable!
                        'The first split should "represent" the hole now.
                        Hole.Splits.Item(SplIdx - 1).CpbMinHole = Hole.Splits.Item(0).CpbOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).FpbMinHole = Hole.Splits.Item(0).FpbOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).TpbMinHole = Hole.Splits.Item(0).TpbOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).CcnMinHole = Hole.Splits.Item(0).CcnOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).FcnMinHole = Hole.Splits.Item(0).FcnOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).TcnMinHole = Hole.Splits.Item(0).TcnOnSpec   'Split #1
                        Hole.Splits.Item(SplIdx - 1).OsMinHole = Hole.Splits.Item(0).OsOnSpec     'Split #1
                        Hole.Splits.Item(SplIdx - 1).IpMinHole = Hole.Splits.Item(0).IpOnSpec     'Split #1
                        '-----
                        'Currently in Function GetHoleMineabilitySimp
                        'Need to calculate the Total "X" values for Split #1 since Total "X" values
                        'are not available with the splits.
                        TotYds = Round((Hole.Splits.Item(0).SplitDepthTop + Hole.Splits.Item(0).SplitThck) * 43560 / 27, 0)
                        TotPr = 0
                        If Hole.Splits.Item(0).CpbOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Cpb.Tpa
                        End If
                        If Hole.Splits.Item(0).FpbOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Fpb.Tpa
                        End If
                        If Hole.Splits.Item(0).CcnOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Ccn.Tpa
                        End If
                        If Hole.Splits.Item(0).FcnOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Fcn.Tpa
                        End If
                        If Hole.Splits.Item(0).OsOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Os.Tpa
                        End If
                        If Hole.Splits.Item(0).IpOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Ip.Tpa
                        End If
                        If TotPr <> 0 Then
                            TotxCalcPc = Round(TotYds / TotPr, 2)
                        Else
                            TotxCalcPc = 0
                        End If

                        TotPr = 0
                        If Hole.Splits.Item(0).CpbOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Cpb100.Tpa
                        End If
                        If Hole.Splits.Item(0).FpbOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Fpb100.Tpa
                        End If
                        If Hole.Splits.Item(0).CcnOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Ccn100.Tpa
                        End If
                        If Hole.Splits.Item(0).FcnOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Fcn100.Tpa
                        End If
                        If Hole.Splits.Item(0).OsOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Os100.Tpa
                        End If
                        If Hole.Splits.Item(0).IpOnSpec = "Yes" Then
                            TotPr = TotPr + Hole.Splits.Item(0).Ip100.Tpa
                        End If
                        If TotPr <> 0 Then
                            TotxCalc100 = Round(TotYds / TotPr, 2)
                        Else
                            TotxCalc100 = 0
                        End If

                        'Hole.Splits.Item(0).TotxOnSpec and Hole.Splits.Item(0).TotxOnSpec100 will be zero here!
                        'Therefore we recalculated them both above (TotxCalcPc & TotxCalc100)!

                        Hole.Splits.Item(SplIdx - 1).MtxxOnSpecPcHole = Hole.Splits.Item(0).MtxxOnSpec       'PC    Split #1
                        Hole.Splits.Item(SplIdx - 1).TotxOnSpecPcHole = TotxCalcPc                   'PC    Split #1
                        Hole.Splits.Item(SplIdx - 1).MtxxOnSpec100Hole = Hole.Splits.Item(0).MtxxOnSpec100   '100%  Split #1
                        Hole.Splits.Item(SplIdx - 1).TotxOnSpec100Hole = TotxCalc100                 '100%  Split #1
                    Next SplIdx
                End If


            Next



            'Need to place this info in aSsSplitReview.
            'Both MineableHole and MineableHole100 have been marked in
            'the HoleSpl() data (for both ProdCoeff and 100%).  The hole
            'product mineabilities have been marked also.
            'With aSsSplitReview
            '    SplCnt = 0
            '    For RowIdx2 = RowBeg To RowEnd
            '        .Row = RowIdx2
            '        .Col = 190   'Mineability for this split at
            '        'the hole level.
            '        SplCnt = SplCnt + 1
            '        .Text = HoleSpl(SplCnt).MineableHole       'ProdCoeff

            '        .Col = 313
            '        .Text = HoleSpl(SplCnt).MineableHole100    '100%

            '        .Col = 319
            '        .Text = HoleSpl(SplCnt).CpbMinHole         'ProdCoeff
            '        .Col = 320
            '        .Text = HoleSpl(SplCnt).FpbMinHole         'ProdCoeff
            '        .Col = 321
            '        .Text = HoleSpl(SplCnt).TpbMinHole         'ProdCoeff
            '        .Col = 322
            '        .Text = HoleSpl(SplCnt).CcnMinHole         'ProdCoeff
            '        .Col = 323
            '        .Text = HoleSpl(SplCnt).FcnMinHole         'ProdCoeff
            '        .Col = 324
            '        .Text = HoleSpl(SplCnt).TcnMinHole         'ProdCoeff
            '        .Col = 325
            '        .Text = HoleSpl(SplCnt).OsMinHole          'ProdCoeff
            '        .Col = 326
            '        .Text = HoleSpl(SplCnt).IpMinHole          'ProdCoeff

            '        .Col = 327
            '        .Value = HoleSpl(SplCnt).MtxxOnSpecPcHole  'PC  Hole
            '        .Col = 328
            '        .Value = HoleSpl(SplCnt).TotxOnSpecPcHole  'PC  Hole

            '        .Col = 331
            '        .Value = HoleSpl(SplCnt).MtxxOnSpec100Hole '100%  Hole
            '        .Col = 332
            '        .Value = HoleSpl(SplCnt).TotxOnSpec100Hole '100%  Hole
            '    Next RowIdx2
            'End With


            Return True

        Catch ex As Exception
            MsgBox("Error determining hole mineability." & vbCrLf &
               Err.Description,
               vbOKOnly + vbExclamation,
               "Data Process Error")
            'The process did not go OK!
            Return False
        End Try
    End Function



    Private Function GetHoleMineabilitySimp(ByRef aHoleSpl As List(Of gRawProspSplRdctnType),
                                            ByVal aRcvryParamsData As gDataRdctnParamsType,
                                            ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                            ByVal IsIPDistributedTo As Boolean,
                                            ByVal aScope As String) As Boolean

        Dim SplIdx As Integer
        Dim TopMinSpl As Integer
        Dim BotMinSpl As Integer
        Dim TopSpl As Integer
        Dim BotSpl As Integer
        Dim SumData As gRawProspSplRdctnSumType
        Dim HoleData As New gRawProspSplRdctnType()
        Dim HoleMineable As Boolean
        Dim SplMineability As String
        Dim ForcedTheHoleMineable As Boolean
        Dim TotYds As Single
        Dim TotPr As Integer
        Dim TotxCalcPc As Single
        Dim TotxCalc100 As Single
        Dim MaxTotDepth As Single

        'Simple version of determining hole mineabilities!

        'This is a "simple" version for determining hole mineabilities.  It
        'merely adds the splits that were determined previously to be mineable
        'together and then checks to see if that summation is mineable.
        'This is what the mainframe did.  A more complicated (real world)
        'version of this proc is really needed.

        'Hole mineability parameters selected by user:
        'aRcvryParamsData.MinItbThk
        'aRcvryParamsData.MinOreThk
        'aRcvryParamsData.ClPctMaxHole
        'aRcvryParamsData.MtxxMaxHole
        'aRcvryParamsData.TotxMaxHole
        'aRcvryParamsData.TotPrTpaMinHole
        'aRcvryParamsData.MineFirstSpl

        'In aRcvryProdQual() hole data is:
        'Item8   Coarse pebble
        'Item9   Fine pebble
        'Item10  IP
        'Item11  Fine concentrate
        'Item12  Coarse concentrate
        'Item13  Total pebble
        'Item14  Total concentrate

        'Will assume that if any product quality parameter other than
        'minimum BPL is greater than or equal to 99.9 then user doesn't
        'care what that value is (Fe2O3, Al2O3, IA, MgO, CaO, MER, CaO/P2O5).

        'Calculates Mtx "X" OnSpec PC Hole and Tot "X" OnSpec PC Hole
        'Calculates Mtx "X" OnSpec 100 Hole and Tot "X" OnSpec 100 Hole
        'aHoleSpl(SplIdx).MtxxOnSpecPcHole = HoleData.MtxxOnSpecPcHole    'PC    Hole
        'aHoleSpl(SplIdx).TotxOnSpecPcHole = HoleData.TotxOnSpecPcHole    'PC    Hole
        'aHoleSpl(SplIdx).MtxxOnSpec100Hole = HoleData.MtxxOnSpec100Hole  '100%  Hole
        'aHoleSpl(SplIdx).TotxOnSpec100Hole = HoleData.TotxOnSpec100Hole  '100%  Hole

        HoleMineable = False
        TopMinSpl = -1
        BotMinSpl = -1
        TopSpl = -1
        BotSpl = -1
        ZeroRdctnSumData(SumData)
        MaxTotDepth = aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole
        If MaxTotDepth = 0 Then
            MaxTotDepth = 9999
        End If

        'First need to know the first and last mineable splits that have been
        'marked previously as mineable (MineableCalcd).
        SplIdx = 0
        For Each Spl As gRawProspSplRdctnType In aHoleSpl
            If Spl.HoleLocation = "" Then
                Exit For
            End If
            If Spl.MineableOride <> "C" Then
                SplMineability = Spl.MineableOride     'Will be "M" or "U"
            Else
                'User has not set an override mineability for this split!
                'Will use the mineability set by the split reduction.
                SplMineability = Spl.MineableCalcd
            End If
            If SplMineability = "M" And Spl.SplitDepthTop < MaxTotDepth Then
                If TopMinSpl = -1 Then
                    TopMinSpl = SplIdx
                End If
                BotMinSpl = SplIdx
            End If
            If TopSpl = -1 Then
                TopSpl = SplIdx
            End If
            BotSpl = SplIdx
            SplIdx += 1
        Next

        'For SplIdx = 1 To 30
        '    If aHoleSpl(SplIdx).HoleLocation = "" Then
        '        Exit For
        '    End If

        '    If aHoleSpl(SplIdx).MineableOride <> "C" Then
        '        SplMineability = aHoleSpl(SplIdx).MineableOride     'Will be "M" or "U"
        '    Else
        '        'User has not set an override mineability for this split!
        '        'Will use the mineability set by the split reduction.
        '        SplMineability = aHoleSpl(SplIdx).MineableCalcd
        '    End If

        '    If SplMineability = "M" And aHoleSpl(SplIdx).SplitDepthTop < MaxTotDepth Then
        '        If TopMinSpl = -1 Then
        '            TopMinSpl = SplIdx
        '        End If
        '        BotMinSpl = SplIdx
        '    End If

        '    If TopSpl = -1 Then
        '        TopSpl = SplIdx
        '    End If
        '    BotSpl = SplIdx
        'Next SplIdx

        'Sum up the mineable splits in aHoleSpl.
        'Will only sum to the bottom mineable split -- anything below that
        'doesn't matter.
        'Hole mineabilities are determined using "ProdCoeff" data.

        ZeroRdctnSumData(SumData)

        For SplIdx = 0 To BotMinSpl
            If aHoleSpl.Item(SplIdx).HoleLocation = "" Then
                Exit For
            End If

            'This proc will sum split data based on DataType (either
            'ProdCoeff or 100%).  In this case we will only use
            'ProdCoeff.
            '(Summing mineable splits to get hole total - will then
            'determine whether the hole is mineable).
            'We are currently in GetHoleMineabilitySimp.
            AddSplToHoleSumDataMineable(aHoleSpl.Item(SplIdx),
                                        SumData,
                                        aRcvryParamsData, aRecoveryParams,
                                        SplIdx,
                                        TopMinSpl,
                                        BotMinSpl)
        Next SplIdx

        'Split summing complete -- now determine hole mineability
        'First need to get the calculated hole data from the summed
        'split data.
        HoleData.Section = aHoleSpl.Item(0).Section
        HoleData.Township = aHoleSpl.Item(0).Township
        HoleData.Range = aHoleSpl.Item(0).Range
        HoleData.HoleLocation = aHoleSpl.Item(0).HoleLocation

        'Calculating data from sum -- this is ProdCoeff data.
        'We are currently in Function GetHoleMineabilitySimp
        'The 4th parameter indicates whether the Mtx & Ovb thicknesses
        'should be adjusted per the user.  The 5th parameter is set to
        '"ProdCoeff" since we will determine hole mineability based on
        'the "ProdCoeff" data.
        CalcDataFromSumDataMineable(HoleData,
                                    SumData,
                                    aRcvryParamsData)

        'Finally DetermineHoleMineability will return whether or not the hole
        'is mineable.

        'Dim IsIPDistributedTo As Boolean = False
        'IsIPDistributedTo = MatlDistributedTo(aSsProdDist, "IP")
        HoleMineable = DetermineHoleMineability(HoleData,
                                                SumData,
                                                aRcvryParamsData,
                                                aRecoveryParams,
                                                IsIPDistributedTo)

        If Not HoleMineable Then
            'Need to mark in ssCompErrors.
            MarkCompError(HoleData, aScope)
        End If

        'Hole mineability determination completed.  If the hole is unmineable
        'then mark every split as unmineable (do the same for both .MineableHole
        'and .MineableHole100).

        ForcedTheHoleMineable = False
        If HoleMineable Then
            'Keep all split mineabilities as they were originally determined.
            For SplIdx = 0 To BotSpl
                aHoleSpl.Item(SplIdx).MineableHole = aHoleSpl.Item(SplIdx).MineableCalcd
                aHoleSpl.Item(SplIdx).MineableHole100 = aHoleSpl.Item(SplIdx).MineableCalcd
            Next SplIdx
        Else
            'Mark all splits as unmineable (for both .MineableHole and
            '.MineableHole100).
            For SplIdx = 0 To BotSpl
                aHoleSpl.Item(SplIdx).MineableHole = "U"
                aHoleSpl.Item(SplIdx).MineableHole100 = "U"
            Next SplIdx
            If aRcvryParamsData.MineFirstSpl = 1 Then
                'Need to set the first split mineable if the user selected this
                'option on the Mineability tab on frmProspDataReduction.
                '(chkNoUnmineableHoles).  Will call this a "forced" mineability.
                aHoleSpl(TopSpl).MineableHole = "MF"
                aHoleSpl(TopSpl).MineableHole100 = "MF"
                ForcedTheHoleMineable = True
            End If
        End If

        'From DetermineHoleMineability also have:
        '1) aHoleData.MtxxOnSpecPcHole = MtxxPc    'ProdCoeff
        '2) aHoleData.TotxOnSpecPcHole = TotxPc    'ProdCoeff
        '3) aHoleData.MtxxOnSpec100Hole = Mtxx100  '100%
        '4) aHoleData.TotxOnSpec100Hole = Totx100  '100%

        'Capture the hole product mineability -- will be placed in each split
        'for the hole.
        'Capture the OnSpec Product Mtx"X" and Tot"X" values as well.

        If Not ForcedTheHoleMineable Then
            For SplIdx = 0 To BotSpl
                aHoleSpl.Item(SplIdx).CpbMinHole = HoleData.CpbOnSpec    'Hole
                aHoleSpl.Item(SplIdx).FpbMinHole = HoleData.FpbOnSpec    'Hole
                aHoleSpl.Item(SplIdx).TpbMinHole = HoleData.TpbOnSpec    'Hole
                aHoleSpl.Item(SplIdx).CcnMinHole = HoleData.CcnOnSpec    'Hole
                aHoleSpl.Item(SplIdx).FcnMinHole = HoleData.FcnOnSpec    'Hole
                aHoleSpl.Item(SplIdx).TcnMinHole = HoleData.TcnOnSpec    'Hole
                aHoleSpl.Item(SplIdx).OsMinHole = HoleData.OsOnSpec      'Hole
                aHoleSpl.Item(SplIdx).IpMinHole = HoleData.IpOnSpec      'Hole
                '-----
                aHoleSpl.Item(SplIdx).MtxxOnSpecPcHole = HoleData.MtxxOnSpecPcHole    'PC    Hole
                aHoleSpl.Item(SplIdx).TotxOnSpecPcHole = HoleData.TotxOnSpecPcHole    'PC    Hole
                aHoleSpl.Item(SplIdx).MtxxOnSpec100Hole = HoleData.MtxxOnSpec100Hole  '100%  Hole
                aHoleSpl.Item(SplIdx).TotxOnSpec100Hole = HoleData.TotxOnSpec100Hole  '100%  Hole
            Next SplIdx
        Else
            'This hole has been "forced" to be minable -- the first split is set to mineable!
            For SplIdx = 0 To BotSpl
                'Have forced the first split to be mineable!
                'The first split should "represent" the hole now.
                aHoleSpl.Item(SplIdx).CpbMinHole = aHoleSpl(1).CpbOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).FpbMinHole = aHoleSpl(1).FpbOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).TpbMinHole = aHoleSpl(1).TpbOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).CcnMinHole = aHoleSpl(1).CcnOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).FcnMinHole = aHoleSpl(1).FcnOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).TcnMinHole = aHoleSpl(1).TcnOnSpec   'Split #1
                aHoleSpl.Item(SplIdx).OsMinHole = aHoleSpl(1).OsOnSpec     'Split #1
                aHoleSpl.Item(SplIdx).IpMinHole = aHoleSpl(1).IpOnSpec     'Split #1
                '-----
                'Currently in Function GetHoleMineabilitySimp
                'Need to calculate the Total "X" values for Split #1 since Total "X" values
                'are not available with the splits.
                TotYds = Round((aHoleSpl.Item(0).SplitDepthTop + aHoleSpl.Item(0).SplitThck) * 43560 / 27, 0)
                TotPr = 0
                If aHoleSpl.Item(0).CpbOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Cpb.Tpa
                End If
                If aHoleSpl.Item(0).FpbOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Fpb.Tpa
                End If
                If aHoleSpl.Item(0).CcnOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Ccn.Tpa
                End If
                If aHoleSpl.Item(0).FcnOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Fcn.Tpa
                End If
                If aHoleSpl.Item(0).OsOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Os.Tpa
                End If
                If aHoleSpl.Item(0).IpOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Ip.Tpa
                End If
                If TotPr <> 0 Then
                    TotxCalcPc = Round(TotYds / TotPr, 2)
                Else
                    TotxCalcPc = 0
                End If

                TotPr = 0
                If aHoleSpl.Item(0).CpbOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Cpb100.Tpa
                End If
                If aHoleSpl.Item(0).FpbOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Fpb100.Tpa
                End If
                If aHoleSpl.Item(0).CcnOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Ccn100.Tpa
                End If
                If aHoleSpl.Item(0).FcnOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Fcn100.Tpa
                End If
                If aHoleSpl.Item(0).OsOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Os100.Tpa
                End If
                If aHoleSpl.Item(0).IpOnSpec = "Yes" Then
                    TotPr = TotPr + aHoleSpl.Item(0).Ip100.Tpa
                End If
                If TotPr <> 0 Then
                    TotxCalc100 = Round(TotYds / TotPr, 2)
                Else
                    TotxCalc100 = 0
                End If

                'aHoleSpl(1).TotxOnSpec and aHoleSpl(1).TotxOnSpec100 will be zero here!
                'Therefore we recalculated them both above (TotxCalcPc & TotxCalc100)!

                aHoleSpl.Item(SplIdx).MtxxOnSpecPcHole = aHoleSpl.Item(0).MtxxOnSpec       'PC    Split #1
                aHoleSpl.Item(SplIdx).TotxOnSpecPcHole = TotxCalcPc                   'PC    Split #1
                aHoleSpl.Item(SplIdx).MtxxOnSpec100Hole = aHoleSpl.Item(0).MtxxOnSpec100   '100%  Split #1
                aHoleSpl.Item(SplIdx).TotxOnSpec100Hole = TotxCalc100                 '100%  Split #1
            Next SplIdx
        End If

        'Return the hole mineability status (hole mineability based on
        'ProdCoeff data).
        Return HoleMineable
    End Function

    Public Function AddSplToHoleSumDataMineable(ByRef aSplData As gRawProspSplRdctnType,
                                                ByRef aSumData As gRawProspSplRdctnSumType,
                                                ByVal aRcvryParamsData As gDataRdctnParamsType,
                                                ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                                ByVal aSplIdx As Integer,
                                                ByVal aTopMinSpl As Integer,
                                                ByVal aBotMinSpl As Integer) As Boolean

        Dim SplMineability As String
        Dim InclCnAlways As Boolean
        Dim CorrFactor As Single
        Dim AdjSplThk As Single
        Dim CorrTpa As Double

        'This split summing is used by the function that determines if
        'a hole is mineable -- Function GetHoleMineabilitySimp.

        'Determine if this split is mineable!

        'Have to consider:
        'aRcvryParamsData.MinItbThk

        'Don't have any functionality to really handle this by user input.
        'Will set to True for now since we always assume that we will mine
        'the concentrate as we move south -- only the pebble will create
        'problems!

        'Only splits above and including the bottom minable split will be processed here!

        InclCnAlways = True

        If aSplData.MineableOride <> "C" Then
            SplMineability = aSplData.MineableOride     'Will be "M" or "U"
        Else
            'User has not set an override mineability for this split!
            'Will use the mineability set by this reduction.
            SplMineability = aSplData.MineableCalcd
        End If

        'May have to override split mineability if this is an interburden!
        'If it is too thin then it cannot be physically removed when mining
        'so we will force it to be mineable.
        If aSplIdx >= aTopMinSpl And aSplIdx < aBotMinSpl And SplMineability = "U" And
        aSplData.SplitThck < aRecoveryParams.MiniabilityParamaters.MinItbThkHole Then
            'This interburden is too small -- it needs to be made mineable!
            SplMineability = "M"
            aSplData.MineableCalcd = "M"
        End If

        'Will only worry about summing waste thickness and matrix thickness here.
        '(ie. will not worry about overburden and interburden thickness).
        With aSplData
            'US 6280 Mtx X Not Calculating Correctly in QA
            'If aSplIdx = 0 Then
            If aSplIdx = 1 Then

                'Capture the depth to the first split as "overburden".
                aSumData.WstThk = aSumData.WstThk + .SplitDepthTop
                aSumData.OvbThk = aSumData.OvbThk + .SplitDepthTop
            End If

            If SplMineability = "M" Then
                'The split thickness is aSplData.SplitThck.  We may not be able to mine
                'all of it aRcvryParamsData.MaxTotDepthSpl and aRcvryParamsData.MaxTotDepthModeSpl
                'have been set by the user!
                CorrFactor = 1
                AdjSplThk = aSplData.SplitThck
                If aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole <> 0 Then
                    If aSplData.SplitDepthTop < aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                        If aSplData.SplitDepthBot > aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                            'Determine the amount of this split that we can mine!
                            If aRecoveryParams.MiniabilityParamaters.IsMaxTotDepthHoleModeAbsoluteStop Then
                                AdjSplThk = aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole - aSplData.SplitDepthTop
                                If aSplData.SplitThck <> 0 Then
                                    CorrFactor = Round(AdjSplThk / aSplData.SplitThck, 4)
                                Else
                                    CorrFactor = 0
                                End If
                            Else    '"Finish split"
                                AdjSplThk = aSplData.SplitThck
                                CorrFactor = 0
                            End If
                        End If
                    Else
                        'All of this split is below aRcvryParamsData.MaxTotDepthSpl -- there is
                        'nothing in this split that we can mine!
                        'This split has probably already been set as unmineable thus this code
                        'won't run!
                        CorrFactor = 0
                        AdjSplThk = 0
                    End If
                End If

                aSumData.MtxThk = aSumData.MtxThk + AdjSplThk
            Else
                'This split will either be part of the overburden or part of the interburden.
                'It will also be part of the waste (overburden + interburden).
                'In the special case where the split is below the .MaxTotDepthSpl then it
                'will not be interburden since it won't be mined.

                'If aSplIdx <> 1 And aSplIdx < aTopMinSpl Then
                If aSplIdx < aTopMinSpl Then
                    'Unmineable split at top of hole -- need to add to overburden (and waste)!
                    aSumData.OvbThk = aSumData.OvbThk + .SplitThck
                    aSumData.WstThk = aSumData.WstThk + .SplitThck
                End If

                If aSplIdx >= aTopMinSpl And aSplIdx < aBotMinSpl Then
                    'Unmineable interburden -- maybe!
                    '09/02/2008, lss  Changed this code -- need to handle interburdens that are beneath
                    'the max mining depth correctly (MaxTotDepthSpl).
                    'If this interburden is below the MaxTotDepthSpl then there will be no
                    'minable splits below it thus this interburden will never be mined!
                    If .SplitDepthBot < aRecoveryParams.MiniabilityParamaters.MaxTotDepthHole Then
                        aSumData.ItbThk = aSumData.ItbThk + .SplitThck
                        aSumData.WstThk = aSumData.WstThk + .SplitThck
                    End If
                End If
            End If
        End With

        'Need to consider the following "special" recovery parameters when summing splits.
        '1) aRcvryParamsData.InclCpbAlways
        '2) aRcvryParamsData.InclCpbNever
        '3) aRcvryParamsData.InclFpbAlways
        '4) aRcvryParamsData.InclFpbNever
        '5) aRcvryParamsData.InclOsAlways
        '6) aRcvryParamsData.InclOsNever

        If SplMineability = "M" Then
            'Will only sum up on-spec "ProdCoeff" TPA's!  However if the user has designated
            'OS, Cpb, Fpb to always be included we must add them in regardless of whether
            'they are mineable or not.
            With aSplData
                'Oversize  ProdCoeff
                If (.OsOnSpec = "Yes" Or .OsOnSpec = "ND" Or aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize) And Not aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize Then
                    CorrTpa = Round(.Os.Tpa * CorrFactor, 0)
                    aSumData.Os.Tpa = aSumData.Os.Tpa + CorrTpa
                    If .Os.Bpl > 0 Then
                        aSumData.Os.TwBpl = aSumData.Os.TwBpl + CorrTpa
                    End If
                    If .Os.Ins > 0 Then
                        aSumData.Os.TwIns = aSumData.Os.TwIns + CorrTpa
                    End If
                    If .Os.Ia > 0 Then
                        aSumData.Os.TwIa = aSumData.Os.TwIa + CorrTpa
                    End If
                    If .Os.IaAdj > 0 Then
                        aSumData.Os.TwIaAdj = aSumData.Os.TwIaAdj + CorrTpa
                    End If
                    If .Os.Fe > 0 Then
                        aSumData.Os.TwFe = aSumData.Os.TwFe + CorrTpa
                    End If
                    If .Os.FeAdj > 0 Then
                        aSumData.Os.TwFeAdj = aSumData.Os.TwFeAdj + CorrTpa
                    End If
                    If .Os.Al > 0 Then
                        aSumData.Os.TwAl = aSumData.Os.TwAl + CorrTpa
                    End If
                    If .Os.Mg > 0 Then
                        aSumData.Os.TwMg = aSumData.Os.TwMg + CorrTpa
                    End If
                    If .Os.Ca > 0 Then
                        aSumData.Os.TwCa = aSumData.Os.TwCa + CorrTpa
                    End If
                    aSumData.Os.BplTons = aSumData.Os.BplTons + CorrTpa * .Os.Bpl
                    aSumData.Os.InsTons = aSumData.Os.InsTons + CorrTpa * .Os.Ins
                    aSumData.Os.IaTons = aSumData.Os.IaTons + CorrTpa * .Os.Ia
                    aSumData.Os.IaTons = aSumData.Os.IaTons + CorrTpa * .Os.Ia
                    aSumData.Os.IaAdjTons = aSumData.Os.IaAdjTons + CorrTpa * .Os.IaAdj
                    aSumData.Os.FeTons = aSumData.Os.FeTons + CorrTpa * .Os.Fe
                    aSumData.Os.FeAdjTons = aSumData.Os.FeAdjTons + CorrTpa * .Os.FeAdj
                    aSumData.Os.AlTons = aSumData.Os.AlTons + CorrTpa * .Os.Al
                    aSumData.Os.MgTons = aSumData.Os.MgTons + CorrTpa * .Os.Mg
                    aSumData.Os.CaTons = aSumData.Os.CaTons + CorrTpa * .Os.Ca
                End If
                '-----
                'Coarse pebble  ProdCoeff
                If (.CpbOnSpec = "Yes" Or .CpbOnSpec = "ND" Or Not aRecoveryParams.EnterCoarsePebbleRejectValue) Then ' And Not aRcvryParamsData.InclCpbNever Then
                    CorrTpa = Round(.Cpb.Tpa * CorrFactor, 0)
                    aSumData.Cpb.Tpa = aSumData.Cpb.Tpa + CorrTpa
                    If .Cpb.Bpl > 0 Then
                        aSumData.Cpb.TwBpl = aSumData.Cpb.TwBpl + CorrTpa
                    End If
                    If .Cpb.Ins > 0 Then
                        aSumData.Cpb.TwIns = aSumData.Cpb.TwIns + CorrTpa
                    End If
                    If .Cpb.Ia > 0 Then
                        aSumData.Cpb.TwIa = aSumData.Cpb.TwIa + CorrTpa
                    End If
                    If .Cpb.IaAdj > 0 Then
                        aSumData.Cpb.TwIaAdj = aSumData.Cpb.TwIaAdj + CorrTpa
                    End If
                    If .Cpb.Fe > 0 Then
                        aSumData.Cpb.TwFe = aSumData.Cpb.TwFe + CorrTpa
                    End If
                    If .Cpb.FeAdj > 0 Then
                        aSumData.Cpb.TwFeAdj = aSumData.Cpb.TwFeAdj + CorrTpa
                    End If
                    If .Cpb.Al > 0 Then
                        aSumData.Cpb.TwAl = aSumData.Cpb.TwAl + CorrTpa
                    End If
                    If .Cpb.Mg > 0 Then
                        aSumData.Cpb.TwMg = aSumData.Cpb.TwMg + CorrTpa
                    End If
                    If .Cpb.Ca > 0 Then
                        aSumData.Cpb.TwCa = aSumData.Cpb.TwCa + CorrTpa
                    End If
                    aSumData.Cpb.BplTons = aSumData.Cpb.BplTons + CorrTpa * .Cpb.Bpl
                    aSumData.Cpb.InsTons = aSumData.Cpb.InsTons + CorrTpa * .Cpb.Ins
                    aSumData.Cpb.IaTons = aSumData.Cpb.IaTons + CorrTpa * .Cpb.Ia
                    aSumData.Cpb.IaAdjTons = aSumData.Cpb.IaAdjTons + CorrTpa * .Cpb.IaAdj
                    aSumData.Cpb.FeTons = aSumData.Cpb.FeTons + CorrTpa * .Cpb.Fe
                    aSumData.Cpb.FeAdjTons = aSumData.Cpb.FeAdjTons + CorrTpa * .Cpb.FeAdj
                    aSumData.Cpb.AlTons = aSumData.Cpb.AlTons + CorrTpa * .Cpb.Al
                    aSumData.Cpb.MgTons = aSumData.Cpb.MgTons + CorrTpa * .Cpb.Mg
                    aSumData.Cpb.CaTons = aSumData.Cpb.CaTons + CorrTpa * .Cpb.Ca
                End If
                '-----
                'Fine pebble  ProdCoeff
                If (.FpbOnSpec = "Yes" Or .FpbOnSpec = "ND" Or Not aRecoveryParams.EnterFinePebbleRejectValue) Then 'And Not aRcvryParamsData.InclFpbNever Then
                    CorrTpa = Round(.Fpb.Tpa * CorrFactor, 0)
                    aSumData.Fpb.Tpa = aSumData.Fpb.Tpa + CorrTpa
                    If .Fpb.Bpl > 0 Then
                        aSumData.Fpb.TwBpl = aSumData.Fpb.TwBpl + CorrTpa
                    End If
                    If .Fpb.Ins > 0 Then
                        aSumData.Fpb.TwIns = aSumData.Fpb.TwIns + CorrTpa
                    End If
                    If .Fpb.Ia > 0 Then
                        aSumData.Fpb.TwIa = aSumData.Fpb.TwIa + CorrTpa
                    End If
                    If .Fpb.IaAdj > 0 Then
                        aSumData.Fpb.TwIaAdj = aSumData.Fpb.TwIaAdj + CorrTpa
                    End If
                    If .Fpb.Fe > 0 Then
                        aSumData.Fpb.TwFe = aSumData.Fpb.TwFe + CorrTpa
                    End If
                    If .Fpb.FeAdj > 0 Then
                        aSumData.Fpb.TwFeAdj = aSumData.Fpb.TwFeAdj + CorrTpa
                    End If
                    If .Fpb.Al > 0 Then
                        aSumData.Fpb.TwAl = aSumData.Fpb.TwAl + CorrTpa
                    End If
                    If .Fpb.Mg > 0 Then
                        aSumData.Fpb.TwMg = aSumData.Fpb.TwMg + CorrTpa
                    End If
                    If .Fpb.Ca > 0 Then
                        aSumData.Fpb.TwCa = aSumData.Fpb.TwCa + CorrTpa
                    End If
                    aSumData.Fpb.BplTons = aSumData.Fpb.BplTons + CorrTpa * .Fpb.Bpl
                    aSumData.Fpb.InsTons = aSumData.Fpb.InsTons + CorrTpa * .Fpb.Ins
                    aSumData.Fpb.IaTons = aSumData.Fpb.IaTons + CorrTpa * .Fpb.Ia
                    aSumData.Fpb.IaAdjTons = aSumData.Fpb.IaAdjTons + CorrTpa * .Fpb.IaAdj
                    aSumData.Fpb.FeTons = aSumData.Fpb.FeTons + CorrTpa * .Fpb.Fe
                    aSumData.Fpb.FeAdjTons = aSumData.Fpb.FeAdjTons + CorrTpa * .Fpb.FeAdj
                    aSumData.Fpb.AlTons = aSumData.Fpb.AlTons + CorrTpa * .Fpb.Al
                    aSumData.Fpb.MgTons = aSumData.Fpb.MgTons + CorrTpa * .Fpb.Mg
                    aSumData.Fpb.CaTons = aSumData.Fpb.CaTons + CorrTpa * .Fpb.Ca
                End If

                'IP  ProdCoeff
                If .IpOnSpec = "Yes" Or .IpOnSpec = "ND" Or Not aRecoveryParams.EnterIPRejectValue Then
                    CorrTpa = Round(.Ip.Tpa * CorrFactor, 0)
                    aSumData.Ip.Tpa = aSumData.Ip.Tpa + CorrTpa
                    If .Ip.Bpl > 0 Then
                        aSumData.Ip.TwBpl = aSumData.Ip.TwBpl + CorrTpa
                    End If
                    If .Ip.Ins > 0 Then
                        aSumData.Ip.TwIns = aSumData.Ip.TwIns + CorrTpa
                    End If
                    If .Ip.Ia > 0 Then
                        aSumData.Ip.TwIa = aSumData.Ip.TwIa + CorrTpa
                    End If
                    If .Ip.IaAdj > 0 Then
                        aSumData.Ip.TwIaAdj = aSumData.Ip.TwIaAdj + CorrTpa
                    End If
                    If .Ip.Fe > 0 Then
                        aSumData.Ip.TwFe = aSumData.Ip.TwFe + CorrTpa
                    End If
                    If .Ip.FeAdj > 0 Then
                        aSumData.Ip.TwFeAdj = aSumData.Ip.TwFeAdj + CorrTpa
                    End If
                    If .Ip.Al > 0 Then
                        aSumData.Ip.TwAl = aSumData.Ip.TwAl + CorrTpa
                    End If
                    If .Ip.Mg > 0 Then
                        aSumData.Ip.TwMg = aSumData.Ip.TwMg + CorrTpa
                    End If
                    If .Ip.Ca > 0 Then
                        aSumData.Ip.TwCa = aSumData.Ip.TwCa + CorrTpa
                    End If
                    aSumData.Ip.BplTons = aSumData.Ip.BplTons + CorrTpa * .Ip.Bpl
                    aSumData.Ip.InsTons = aSumData.Ip.InsTons + CorrTpa * .Ip.Ins
                    aSumData.Ip.IaTons = aSumData.Ip.IaTons + CorrTpa * .Ip.Ia
                    aSumData.Ip.IaTons = aSumData.Ip.IaTons + CorrTpa * .Ip.Ia
                    aSumData.Ip.IaAdjTons = aSumData.Ip.IaAdjTons + CorrTpa * .Ip.IaAdj
                    aSumData.Ip.FeTons = aSumData.Ip.FeTons + CorrTpa * .Ip.Fe
                    aSumData.Ip.FeAdjTons = aSumData.Ip.FeAdjTons + CorrTpa * .Ip.FeAdj
                    aSumData.Ip.AlTons = aSumData.Ip.AlTons + CorrTpa * .Ip.Al
                    aSumData.Ip.MgTons = aSumData.Ip.MgTons + CorrTpa * .Ip.Mg
                    aSumData.Ip.CaTons = aSumData.Ip.CaTons + CorrTpa * .Ip.Ca
                End If
                '-----
                'Coarse concentrate  ProdCoeff
                If .CcnOnSpec = "Yes" Or .CcnOnSpec = "ND" Or InclCnAlways Then
                    CorrTpa = Round(.Ccn.Tpa * CorrFactor, 0)
                    aSumData.Ccn.Tpa = aSumData.Ccn.Tpa + CorrTpa
                    If .Ccn.Bpl > 0 Then
                        aSumData.Ccn.TwBpl = aSumData.Ccn.TwBpl + CorrTpa
                    End If
                    If .Ccn.Ins > 0 Then
                        aSumData.Ccn.TwIns = aSumData.Ccn.TwIns + CorrTpa
                    End If
                    If .Ccn.Ia > 0 Then
                        aSumData.Ccn.TwIa = aSumData.Ccn.TwIa + CorrTpa
                    End If
                    If .Ccn.IaAdj > 0 Then
                        aSumData.Ccn.TwIaAdj = aSumData.Ccn.TwIaAdj + CorrTpa
                    End If
                    If .Ccn.Fe > 0 Then
                        aSumData.Ccn.TwFe = aSumData.Ccn.TwFe + CorrTpa
                    End If
                    If .Ccn.FeAdj > 0 Then
                        aSumData.Ccn.TwFeAdj = aSumData.Ccn.TwFeAdj + CorrTpa
                    End If
                    If .Ccn.Al > 0 Then
                        aSumData.Ccn.TwAl = aSumData.Ccn.TwAl + CorrTpa
                    End If
                    If .Ccn.Mg > 0 Then
                        aSumData.Ccn.TwMg = aSumData.Ccn.TwMg + CorrTpa
                    End If
                    If .Ccn.Ca > 0 Then
                        aSumData.Ccn.TwCa = aSumData.Ccn.TwCa + CorrTpa
                    End If
                    aSumData.Ccn.BplTons = aSumData.Ccn.BplTons + CorrTpa * .Ccn.Bpl
                    aSumData.Ccn.InsTons = aSumData.Ccn.InsTons + CorrTpa * .Ccn.Ins
                    aSumData.Ccn.IaTons = aSumData.Ccn.IaTons + CorrTpa * .Ccn.Ia
                    aSumData.Ccn.IaAdjTons = aSumData.Ccn.IaAdjTons + CorrTpa * .Ccn.IaAdj
                    aSumData.Ccn.FeTons = aSumData.Ccn.FeTons + CorrTpa * .Ccn.Fe
                    aSumData.Ccn.FeAdjTons = aSumData.Ccn.FeAdjTons + CorrTpa * .Ccn.FeAdj
                    aSumData.Ccn.AlTons = aSumData.Ccn.AlTons + CorrTpa * .Ccn.Al
                    aSumData.Ccn.MgTons = aSumData.Ccn.MgTons + CorrTpa * .Ccn.Mg
                    aSumData.Ccn.CaTons = aSumData.Ccn.CaTons + CorrTpa * .Ccn.Ca
                End If

                'Fine concentrate  ProdCoeff
                If .FcnOnSpec = "Yes" Or .FcnOnSpec = "ND" Or InclCnAlways Then
                    CorrTpa = Round(.Fcn.Tpa * CorrFactor, 0)
                    aSumData.Fcn.Tpa = aSumData.Fcn.Tpa + CorrTpa
                    If .Fcn.Bpl > 0 Then
                        aSumData.Fcn.TwBpl = aSumData.Fcn.TwBpl + CorrTpa
                    End If
                    If .Fcn.Ins > 0 Then
                        aSumData.Fcn.TwIns = aSumData.Fcn.TwIns + CorrTpa
                    End If
                    If .Fcn.Ia > 0 Then
                        aSumData.Fcn.TwIa = aSumData.Fcn.TwIa + CorrTpa
                    End If
                    If .Fcn.IaAdj > 0 Then
                        aSumData.Fcn.TwIaAdj = aSumData.Fcn.TwIaAdj + CorrTpa
                    End If
                    If .Fcn.Fe > 0 Then
                        aSumData.Fcn.TwFe = aSumData.Fcn.TwFe + CorrTpa
                    End If
                    If .Fcn.FeAdj > 0 Then
                        aSumData.Fcn.TwFeAdj = aSumData.Fcn.TwFeAdj + CorrTpa
                    End If
                    If .Fcn.Al > 0 Then
                        aSumData.Fcn.TwAl = aSumData.Fcn.TwAl + CorrTpa
                    End If
                    If .Fcn.Mg > 0 Then
                        aSumData.Fcn.TwMg = aSumData.Fcn.TwMg + CorrTpa
                    End If
                    If .Fcn.Ca > 0 Then
                        aSumData.Fcn.TwCa = aSumData.Fcn.TwCa + CorrTpa
                    End If
                    aSumData.Fcn.BplTons = aSumData.Fcn.BplTons + CorrTpa * .Fcn.Bpl
                    aSumData.Fcn.InsTons = aSumData.Fcn.InsTons + CorrTpa * .Fcn.Ins
                    aSumData.Fcn.IaTons = aSumData.Fcn.IaTons + CorrTpa * .Fcn.Ia
                    aSumData.Fcn.IaAdjTons = aSumData.Fcn.IaAdjTons + CorrTpa * .Fcn.IaAdj
                    aSumData.Fcn.FeTons = aSumData.Fcn.FeTons + CorrTpa * .Fcn.Fe
                    aSumData.Fcn.FeAdjTons = aSumData.Fcn.FeAdjTons + CorrTpa * .Fcn.FeAdj
                    aSumData.Fcn.AlTons = aSumData.Fcn.AlTons + CorrTpa * .Fcn.Al
                    aSumData.Fcn.MgTons = aSumData.Fcn.MgTons + CorrTpa * .Fcn.Mg
                    aSumData.Fcn.CaTons = aSumData.Fcn.CaTons + CorrTpa * .Fcn.Ca
                End If

                'Waste clay  ProdCoeff
                CorrTpa = Round(.Wcl.Tpa * CorrFactor, 0)
                aSumData.Wcl.Tpa = aSumData.Wcl.Tpa + CorrTpa
                If .Wcl.Bpl > 0 Then
                    aSumData.Wcl.TwBpl = aSumData.Wcl.TwBpl + CorrTpa
                End If
                aSumData.Wcl.BplTons = aSumData.Wcl.BplTons + CorrTpa * .Wcl.Bpl

                'Coarse feed  ProdCoeff
                CorrTpa = Round(.Cfd.Tpa * CorrFactor, 0)
                aSumData.Cfd.Tpa = aSumData.Cfd.Tpa + CorrTpa
                If .Cfd.Bpl > 0 Then
                    aSumData.Cfd.TwBpl = aSumData.Cfd.TwBpl + CorrTpa
                End If
                aSumData.Cfd.BplTons = aSumData.Cfd.BplTons + CorrTpa * .Cfd.Bpl

                'Fine feed  ProdCoeff
                CorrTpa = Round(.Ffd.Tpa * CorrFactor, 0)
                aSumData.Ffd.Tpa = aSumData.Ffd.Tpa + CorrTpa
                If .Ffd.Bpl > 0 Then
                    aSumData.Ffd.TwBpl = aSumData.Ffd.TwBpl + CorrTpa
                End If
                aSumData.Ffd.BplTons = aSumData.Ffd.BplTons + CorrTpa * .Ffd.Bpl

                'Total tails  ProdCoeff
                CorrTpa = Round(.Ttl.Tpa * CorrFactor, 0)
                aSumData.Ttl.Tpa = aSumData.Ttl.Tpa + CorrTpa
                If .Ttl.Bpl > 0 Then
                    aSumData.Ttl.TwBpl = aSumData.Ttl.TwBpl + CorrTpa
                End If
                aSumData.Ttl.BplTons = aSumData.Ttl.BplTons + CorrTpa * .Ttl.Bpl

                'Matrix  ProdCoeff
                CorrTpa = Round(.MtxTpaPc * CorrFactor, 0)
                aSumData.MtxTPA = aSumData.MtxTPA + CorrTpa

                aSumData.MtxFt = aSumData.MtxFt + AdjSplThk
                aSumData.MtxDensityFt = aSumData.MtxDensityFt + .MtxDensity * AdjSplThk

                'Sum number of mineable splits.
                aSumData.NumMineableSplits = aSumData.NumMineableSplits + 1

                'If the mine has a Off-spec pebble MgO plant then we have some more
                'work to do!

                'OFFSPEC PEBBLE PLANT  PC
                '--------------------
                'Currently in Public Function AddSplToHoleSumDataMineable
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    'Off-spec pebble MgO plant input  ProdCoeff
                    CorrTpa = Round(.MgPltInp.Tpa * CorrFactor, 0)
                    aSumData.MgPltInp.Tpa = aSumData.MgPltInp.Tpa + CorrTpa
                    If .MgPltInp.Bpl > 0 Then
                        aSumData.MgPltInp.TwBpl = aSumData.MgPltInp.TwBpl + CorrTpa
                    End If
                    If .MgPltInp.Ins > 0 Then
                        aSumData.MgPltInp.TwIns = aSumData.MgPltInp.TwIns + CorrTpa
                    End If
                    If .MgPltInp.Ia > 0 Then
                        aSumData.MgPltInp.TwIa = aSumData.MgPltInp.TwIa + CorrTpa
                    End If
                    If .MgPltInp.Fe > 0 Then
                        aSumData.MgPltInp.TwFe = aSumData.MgPltInp.TwFe + CorrTpa
                    End If

                    'Currently in Function AddSplToHoleSumDataMineable.
                    '03/24/2011**, lss
                    If .MgPltInp.IaAdj > 0 Then
                        aSumData.MgPltInp.TwIaAdj = aSumData.MgPltInp.TwIaAdj + CorrTpa
                    End If
                    If .MgPltInp.FeAdj > 0 Then
                        aSumData.MgPltInp.TwFeAdj = aSumData.MgPltInp.TwFeAdj + CorrTpa
                    End If

                    If .MgPltInp.Al > 0 Then
                        aSumData.MgPltInp.TwAl = aSumData.MgPltInp.TwAl + CorrTpa
                    End If
                    If .MgPltInp.Mg > 0 Then
                        aSumData.MgPltInp.TwMg = aSumData.MgPltInp.TwMg + CorrTpa
                    End If
                    If .MgPltInp.Ca > 0 Then
                        aSumData.MgPltInp.TwCa = aSumData.MgPltInp.TwCa + CorrTpa
                    End If
                    aSumData.MgPltInp.BplTons = aSumData.MgPltInp.BplTons + CorrTpa * .MgPltInp.Bpl
                    aSumData.MgPltInp.InsTons = aSumData.MgPltInp.InsTons + CorrTpa * .MgPltInp.Ins
                    aSumData.MgPltInp.IaTons = aSumData.MgPltInp.IaTons + CorrTpa * .MgPltInp.Ia
                    aSumData.MgPltInp.FeTons = aSumData.MgPltInp.FeTons + CorrTpa * .MgPltInp.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltInp.IaAdjTons = aSumData.MgPltInp.IaAdjTons + CorrTpa * .MgPltInp.IaAdj
                    aSumData.MgPltInp.FeAdjTons = aSumData.MgPltInp.FeAdjTons + CorrTpa * .MgPltInp.FeAdj

                    aSumData.MgPltInp.AlTons = aSumData.MgPltInp.AlTons + CorrTpa * .MgPltInp.Al
                    aSumData.MgPltInp.MgTons = aSumData.MgPltInp.MgTons + CorrTpa * .MgPltInp.Mg
                    aSumData.MgPltInp.CaTons = aSumData.MgPltInp.CaTons + CorrTpa * .MgPltInp.Ca

                    'Off-spec pebble MgO plant reject  ProdCoeff
                    CorrTpa = Round(.MgPltRej.Tpa * CorrFactor, 0)
                    aSumData.MgPltRej.Tpa = aSumData.MgPltRej.Tpa + CorrTpa
                    If .MgPltRej.Bpl > 0 Then
                        aSumData.MgPltRej.TwBpl = aSumData.MgPltRej.TwBpl + CorrTpa
                    End If
                    If .MgPltRej.Ins > 0 Then
                        aSumData.MgPltRej.TwIns = aSumData.MgPltRej.TwIns + CorrTpa
                    End If
                    If .MgPltRej.Ia > 0 Then
                        aSumData.MgPltRej.TwIa = aSumData.MgPltRej.TwIa + CorrTpa
                    End If
                    If .MgPltRej.Fe > 0 Then
                        aSumData.MgPltRej.TwFe = aSumData.MgPltRej.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss
                    If .MgPltRej.IaAdj > 0 Then
                        aSumData.MgPltRej.TwIaAdj = aSumData.MgPltRej.TwIaAdj + CorrTpa
                    End If
                    If .MgPltRej.FeAdj > 0 Then
                        aSumData.MgPltRej.TwFeAdj = aSumData.MgPltRej.TwFeAdj + CorrTpa
                    End If

                    If .MgPltRej.Al > 0 Then
                        aSumData.MgPltRej.TwAl = aSumData.MgPltRej.TwAl + CorrTpa
                    End If
                    If .MgPltRej.Mg > 0 Then
                        aSumData.MgPltRej.TwMg = aSumData.MgPltRej.TwMg + CorrTpa
                    End If
                    If .MgPltRej.Ca > 0 Then
                        aSumData.MgPltRej.TwCa = aSumData.MgPltRej.TwCa + CorrTpa
                    End If
                    aSumData.MgPltRej.BplTons = aSumData.MgPltRej.BplTons + CorrTpa * .MgPltRej.Bpl
                    aSumData.MgPltRej.InsTons = aSumData.MgPltRej.InsTons + CorrTpa * .MgPltRej.Ins
                    aSumData.MgPltRej.IaTons = aSumData.MgPltRej.IaTons + CorrTpa * .MgPltRej.Ia
                    aSumData.MgPltRej.FeTons = aSumData.MgPltRej.FeTons + CorrTpa * .MgPltRej.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltRej.IaAdjTons = aSumData.MgPltRej.IaAdjTons + CorrTpa * .MgPltRej.IaAdj
                    aSumData.MgPltRej.FeAdjTons = aSumData.MgPltRej.FeAdjTons + CorrTpa * .MgPltRej.FeAdj

                    aSumData.MgPltRej.AlTons = aSumData.MgPltRej.AlTons + CorrTpa * .MgPltRej.Al
                    aSumData.MgPltRej.MgTons = aSumData.MgPltRej.MgTons + CorrTpa * .MgPltRej.Mg
                    aSumData.MgPltRej.CaTons = aSumData.MgPltRej.CaTons + CorrTpa * .MgPltRej.Ca

                    'Off-spec pebble MgO plant output  ProdCoeff
                    CorrTpa = Round(.MgPltProd.Tpa * CorrFactor, 0)
                    aSumData.MgPltProd.Tpa = aSumData.MgPltProd.Tpa + CorrTpa
                    If .MgPltProd.Bpl > 0 Then
                        aSumData.MgPltProd.TwBpl = aSumData.MgPltProd.TwBpl + CorrTpa
                    End If
                    If .MgPltProd.Ins > 0 Then
                        aSumData.MgPltProd.TwIns = aSumData.MgPltProd.TwIns + CorrTpa
                    End If
                    If .MgPltProd.Ia > 0 Then
                        aSumData.MgPltProd.TwIa = aSumData.MgPltProd.TwIa + CorrTpa
                    End If
                    If .MgPltProd.Fe > 0 Then
                        aSumData.MgPltProd.TwFe = aSumData.MgPltProd.TwFe + CorrTpa
                    End If

                    '03/24/2011**, lss
                    If .MgPltProd.IaAdj > 0 Then
                        aSumData.MgPltProd.TwIaAdj = aSumData.MgPltProd.TwIaAdj + CorrTpa
                    End If
                    If .MgPltProd.FeAdj > 0 Then
                        aSumData.MgPltProd.TwFeAdj = aSumData.MgPltProd.TwFeAdj + CorrTpa
                    End If

                    If .MgPltProd.Al > 0 Then
                        aSumData.MgPltProd.TwAl = aSumData.MgPltProd.TwAl + CorrTpa
                    End If
                    If .MgPltProd.Mg > 0 Then
                        aSumData.MgPltProd.TwMg = aSumData.MgPltProd.TwMg + CorrTpa
                    End If
                    If .MgPltProd.Ca > 0 Then
                        aSumData.MgPltProd.TwCa = aSumData.MgPltProd.TwCa + CorrTpa
                    End If
                    aSumData.MgPltProd.BplTons = aSumData.MgPltProd.BplTons + CorrTpa * .MgPltProd.Bpl
                    aSumData.MgPltProd.InsTons = aSumData.MgPltProd.InsTons + CorrTpa * .MgPltProd.Ins
                    aSumData.MgPltProd.IaTons = aSumData.MgPltProd.IaTons + CorrTpa * .MgPltProd.Ia
                    aSumData.MgPltProd.FeTons = aSumData.MgPltProd.FeTons + CorrTpa * .MgPltProd.Fe

                    '03/24/2011**, lss
                    aSumData.MgPltProd.IaAdjTons = aSumData.MgPltProd.IaAdjTons + CorrTpa * .MgPltProd.IaAdj
                    aSumData.MgPltProd.FeAdjTons = aSumData.MgPltProd.FeAdjTons + CorrTpa * .MgPltProd.FeAdj

                    aSumData.MgPltProd.AlTons = aSumData.MgPltProd.AlTons + CorrTpa * .MgPltProd.Al
                    aSumData.MgPltProd.MgTons = aSumData.MgPltProd.MgTons + CorrTpa * .MgPltProd.Mg
                    aSumData.MgPltProd.CaTons = aSumData.MgPltProd.CaTons + CorrTpa * .MgPltProd.Ca
                End If

                'Doloflot plant
                'Doloflot plant
                'Doloflot plant

                'DOLOFLOT PLANT  PC
                '--------------
                'Currently in Public Sub AddSplToHoleSumDataComp

                If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                    CorrTpa = Round(.DfFpbInp.Tpa * CorrFactor, 0)
                    'Doloflot plant fine pebble input  ProdCoeff
                    aSumData.DfFpbInp.Tpa = aSumData.DfFpbInp.Tpa + CorrTpa
                    If .DfFpbInp.Bpl > 0 Then
                        aSumData.DfFpbInp.TwBpl = aSumData.DfFpbInp.TwBpl + CorrTpa
                    End If
                    If .DfFpbInp.Ins > 0 Then
                        aSumData.DfFpbInp.TwIns = aSumData.DfFpbInp.TwIns + CorrTpa
                    End If
                    If .DfFpbInp.Ia > 0 Then
                        aSumData.DfFpbInp.TwIa = aSumData.DfFpbInp.TwIa + CorrTpa
                    End If
                    If .DfFpbInp.Fe > 0 Then
                        aSumData.DfFpbInp.TwFe = aSumData.DfFpbInp.TwFe + CorrTpa
                    End If
                    If .DfFpbInp.Al > 0 Then
                        aSumData.DfFpbInp.TwAl = aSumData.DfFpbInp.TwAl + CorrTpa
                    End If
                    If .DfFpbInp.Mg > 0 Then
                        aSumData.DfFpbInp.TwMg = aSumData.DfFpbInp.TwMg + CorrTpa
                    End If
                    If .DfFpbInp.Ca > 0 Then
                        aSumData.DfFpbInp.TwCa = aSumData.DfFpbInp.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbInp.BplTons = aSumData.DfFpbInp.BplTons + CorrTpa * .DfFpbInp.Bpl
                    aSumData.DfFpbInp.InsTons = aSumData.DfFpbInp.InsTons + CorrTpa * .DfFpbInp.Ins
                    aSumData.DfFpbInp.IaTons = aSumData.DfFpbInp.IaTons + CorrTpa * .DfFpbInp.Ia
                    aSumData.DfFpbInp.FeTons = aSumData.DfFpbInp.FeTons + CorrTpa * .DfFpbInp.Fe
                    aSumData.DfFpbInp.AlTons = aSumData.DfFpbInp.AlTons + CorrTpa * .DfFpbInp.Al
                    aSumData.DfFpbInp.MgTons = aSumData.DfFpbInp.MgTons + CorrTpa * .DfFpbInp.Mg
                    aSumData.DfFpbInp.CaTons = aSumData.DfFpbInp.CaTons + CorrTpa * .DfFpbInp.Ca

                    'Doloflot plant fine pebble reject  ProdCoeff -- No reject for Doloflot plant!

                    'Doloflot plant fine pebble product  ProdCoeff
                    CorrTpa = Round(.DfFpbProd.Tpa * CorrFactor, 0)
                    aSumData.DfFpbProd.Tpa = aSumData.DfFpbProd.Tpa + CorrTpa
                    If .DfFpbProd.Bpl > 0 Then
                        aSumData.DfFpbProd.TwBpl = aSumData.DfFpbProd.TwBpl + CorrTpa
                    End If
                    If .DfFpbProd.Ins > 0 Then
                        aSumData.DfFpbProd.TwIns = aSumData.DfFpbProd.TwIns + CorrTpa
                    End If
                    If .DfFpbProd.Ia > 0 Then
                        aSumData.DfFpbProd.TwIa = aSumData.DfFpbProd.TwIa + CorrTpa
                    End If
                    If .DfFpbProd.Fe > 0 Then
                        aSumData.DfFpbProd.TwFe = aSumData.DfFpbProd.TwFe + CorrTpa
                    End If
                    If .DfFpbProd.Al > 0 Then
                        aSumData.DfFpbProd.TwAl = aSumData.DfFpbProd.TwAl + CorrTpa
                    End If
                    If .DfFpbProd.Mg > 0 Then
                        aSumData.DfFpbProd.TwMg = aSumData.DfFpbProd.TwMg + CorrTpa
                    End If
                    If .DfFpbProd.Ca > 0 Then
                        aSumData.DfFpbProd.TwCa = aSumData.DfFpbProd.TwCa + CorrTpa
                    End If
                    aSumData.DfFpbProd.BplTons = aSumData.DfFpbProd.BplTons + CorrTpa * .DfFpbProd.Bpl
                    aSumData.DfFpbProd.InsTons = aSumData.DfFpbProd.InsTons + CorrTpa * .DfFpbProd.Ins
                    aSumData.DfFpbProd.IaTons = aSumData.DfFpbProd.IaTons + CorrTpa * .DfFpbProd.Ia
                    aSumData.DfFpbProd.FeTons = aSumData.DfFpbProd.FeTons + CorrTpa * .DfFpbProd.Fe
                    aSumData.DfFpbProd.AlTons = aSumData.DfFpbProd.AlTons + CorrTpa * .DfFpbProd.Al
                    aSumData.DfFpbProd.MgTons = aSumData.DfFpbProd.MgTons + CorrTpa * .DfFpbProd.Mg
                    aSumData.DfFpbProd.CaTons = aSumData.DfFpbProd.CaTons + CorrTpa * .DfFpbProd.Ca
                    '-----
                    CorrTpa = Round(.DfIpInp.Tpa * CorrFactor, 0)
                    'Doloflot plant IP input  ProdCoeff
                    aSumData.DfIpInp.Tpa = aSumData.DfIpInp.Tpa + CorrTpa
                    If .DfIpInp.Bpl > 0 Then
                        aSumData.DfIpInp.TwBpl = aSumData.DfIpInp.TwBpl + CorrTpa
                    End If
                    If .DfIpInp.Ins > 0 Then
                        aSumData.DfIpInp.TwIns = aSumData.DfIpInp.TwIns + CorrTpa
                    End If
                    If .DfIpInp.Ia > 0 Then
                        aSumData.DfIpInp.TwIa = aSumData.DfIpInp.TwIa + CorrTpa
                    End If
                    If .DfIpInp.Fe > 0 Then
                        aSumData.DfIpInp.TwFe = aSumData.DfIpInp.TwFe + CorrTpa
                    End If
                    If .DfIpInp.Al > 0 Then
                        aSumData.DfIpInp.TwAl = aSumData.DfIpInp.TwAl + CorrTpa
                    End If
                    If .DfIpInp.Mg > 0 Then
                        aSumData.DfIpInp.TwMg = aSumData.DfIpInp.TwMg + CorrTpa
                    End If
                    If .DfIpInp.Ca > 0 Then
                        aSumData.DfIpInp.TwCa = aSumData.DfIpInp.TwCa + CorrTpa
                    End If
                    aSumData.DfIpInp.BplTons = aSumData.DfIpInp.BplTons + CorrTpa * .DfIpInp.Bpl
                    aSumData.DfIpInp.InsTons = aSumData.DfIpInp.InsTons + CorrTpa * .DfIpInp.Ins
                    aSumData.DfIpInp.IaTons = aSumData.DfIpInp.IaTons + CorrTpa * .DfIpInp.Ia
                    aSumData.DfIpInp.FeTons = aSumData.DfIpInp.FeTons + CorrTpa * .DfIpInp.Fe
                    aSumData.DfIpInp.AlTons = aSumData.DfIpInp.AlTons + CorrTpa * .DfIpInp.Al
                    aSumData.DfIpInp.MgTons = aSumData.DfIpInp.MgTons + CorrTpa * .DfIpInp.Mg
                    aSumData.DfIpInp.CaTons = aSumData.DfIpInp.CaTons + CorrTpa * .DfIpInp.Ca

                    'Doloflot plant IP reject  ProdCoeff -- No reject for Doloflot plant!

                    'Doloflot plant IP product  ProdCoeff
                    CorrTpa = Round(.DfIpProd.Tpa * CorrFactor, 0)
                    aSumData.DfIpProd.Tpa = aSumData.DfIpProd.Tpa + CorrTpa
                    If .DfIpProd.Bpl > 0 Then
                        aSumData.DfIpProd.TwBpl = aSumData.DfIpProd.TwBpl + CorrTpa
                    End If
                    If .DfIpProd.Ins > 0 Then
                        aSumData.DfIpProd.TwIns = aSumData.DfIpProd.TwIns + CorrTpa
                    End If
                    If .DfIpProd.Ia > 0 Then
                        aSumData.DfIpProd.TwIa = aSumData.DfIpProd.TwIa + CorrTpa
                    End If
                    If .DfIpProd.Fe > 0 Then
                        aSumData.DfIpProd.TwFe = aSumData.DfIpProd.TwFe + CorrTpa
                    End If
                    If .DfIpProd.Al > 0 Then
                        aSumData.DfIpProd.TwAl = aSumData.DfIpProd.TwAl + CorrTpa
                    End If
                    If .DfIpProd.Mg > 0 Then
                        aSumData.DfIpProd.TwMg = aSumData.DfIpProd.TwMg + CorrTpa
                    End If
                    If .DfIpProd.Ca > 0 Then
                        aSumData.DfIpProd.TwCa = aSumData.DfIpProd.TwCa + CorrTpa
                    End If
                    aSumData.DfIpProd.BplTons = aSumData.DfIpProd.BplTons + CorrTpa * .DfIpProd.Bpl
                    aSumData.DfIpProd.InsTons = aSumData.DfIpProd.InsTons + CorrTpa * .DfIpProd.Ins
                    aSumData.DfIpProd.IaTons = aSumData.DfIpProd.IaTons + CorrTpa * .DfIpProd.Ia
                    aSumData.DfIpProd.FeTons = aSumData.DfIpProd.FeTons + CorrTpa * .DfIpProd.Fe
                    aSumData.DfIpProd.AlTons = aSumData.DfIpProd.AlTons + CorrTpa * .DfIpProd.Al
                    aSumData.DfIpProd.MgTons = aSumData.DfIpProd.MgTons + CorrTpa * .DfIpProd.Mg
                    aSumData.DfIpProd.CaTons = aSumData.DfIpProd.CaTons + CorrTpa * .DfIpProd.Ca
                End If
            End With

            With aSplData
                'Oversize  100%
                If (.OsOnSpec = "Yes" Or .OsOnSpec = "ND") And aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize Then
                    CorrTpa = Round(.Os100.Tpa * CorrFactor, 0)
                    aSumData.Os100.Tpa = aSumData.Os100.Tpa + CorrTpa
                End If
                '-----
                'Coarse pebble  100%
                If .CpbOnSpec = "Yes" Or .CpbOnSpec = "ND" Or Not aRecoveryParams.EnterCoarsePebbleRejectValue Then
                    CorrTpa = Round(.Cpb100.Tpa * CorrFactor, 0)
                    aSumData.Cpb100.Tpa = aSumData.Cpb100.Tpa + CorrTpa
                End If
                '-----
                'Fine pebble  100%
                If .FpbOnSpec = "Yes" Or .FpbOnSpec = "ND" Or Not aRecoveryParams.EnterFinePebbleRejectValue Then
                    CorrTpa = Round(.Fpb100.Tpa * CorrFactor, 0)
                    aSumData.Fpb100.Tpa = aSumData.Fpb100.Tpa + CorrTpa
                End If
                '-----
                'IP  100%
                If .IpOnSpec = "Yes" Or .IpOnSpec = "ND" Or Not aRecoveryParams.EnterIPRejectValue Then
                    CorrTpa = Round(.Ip100.Tpa * CorrFactor, 0)
                    aSumData.Ip100.Tpa = aSumData.Ip100.Tpa + CorrTpa
                End If
                '-----
                'Coarse concentrate  100%
                If .CcnOnSpec = "Yes" Or .CcnOnSpec = "ND" Then
                    CorrTpa = Round(.Ccn100.Tpa * CorrFactor, 0)
                    aSumData.Ccn100.Tpa = aSumData.Ccn100.Tpa + CorrTpa
                End If
                '-----
                'Fine concentrate  100%
                If .FcnOnSpec = "Yes" Or .FcnOnSpec = "ND" Then
                    CorrTpa = Round(.Fcn100.Tpa * CorrFactor, 0)
                    aSumData.Fcn100.Tpa = aSumData.Fcn100.Tpa + CorrTpa
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO   100%
                '------------------------------------------
                'Currently in Public Function AddSplToHoleSumDataMineable
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant = True Or
                aRcvryParamsData.UseDoloflotPlantFco = True Then
                    CorrTpa = Round(.MgPltInp100.Tpa * CorrFactor, 0)
                    aSumData.MgPltInp100.Tpa = aSumData.MgPltInp100.Tpa + CorrTpa

                    CorrTpa = Round(.MgPltRej100.Tpa * CorrFactor, 0)
                    aSumData.MgPltRej100.Tpa = aSumData.MgPltRej100.Tpa + CorrTpa

                    CorrTpa = Round(.MgPltProd100.Tpa * CorrFactor, 0)
                    aSumData.MgPltProd100.Tpa = aSumData.MgPltProd100.Tpa + CorrTpa
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA  100%
                '------------------
                'Currently in Public Function AddSplToHoleSumDataMineable
                'Doloflot plant does not have reject.

                If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                    CorrTpa = Round(.DfFpbInp100.Tpa * CorrFactor, 0)
                    aSumData.DfFpbInp100.Tpa = aSumData.DfFpbInp100.Tpa + CorrTpa

                    CorrTpa = Round(.DfFpbProd100.Tpa * CorrFactor, 0)
                    aSumData.DfFpbProd100.Tpa = aSumData.DfFpbProd100.Tpa + CorrTpa
                    '-----
                    CorrTpa = Round(.DfIpInp100.Tpa * CorrFactor, 0)
                    aSumData.DfIpInp100.Tpa = aSumData.DfIpInp100.Tpa + CorrTpa

                    CorrTpa = Round(.DfIpProd100.Tpa * CorrFactor, 0)
                    aSumData.DfIpProd100.Tpa = aSumData.DfIpProd100.Tpa + CorrTpa
                End If
            End With
        End If
    End Function

    Private Function DetermineHoleMineability(ByRef aHoleData As gRawProspSplRdctnType,
                                              ByRef aSumData As gRawProspSplRdctnSumType,
                                              ByVal aRcvryParamsData As gDataRdctnParamsType,
                                              ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition,
                                              ByVal aIsIPDistributedTo As Boolean) As Boolean

        Dim UserHasDefinedCpb As Boolean
        Dim UserHasDefinedFpb As Boolean
        Dim UserHasDefinedTpb As Boolean
        'Dim UserHasDefinedCcn As Boolean
        'Dim UserHasDefinedFcn As Boolean
        Dim UserHasDefinedTcn As Boolean
        Dim UserHasDefinedIp As Boolean

        'Dim MtxThk As Single
        Dim WstThk As Single
        Dim OvbThk As Single
        Dim ItbThk As Single

        Dim MtxYdsPc As Double
        Dim MtxYds100 As Double
        Dim OvbYdsPc As Double
        Dim OvbYds100 As Double
        Dim ItbYdsPc As Double
        Dim ItbYds100 As Double
        Dim TotYdsPc As Double
        Dim TotYds100 As Double

        Dim MineableProdTpaPc As Double
        Dim MineableProdTpa100 As Double

        Dim MtxxPc As Single
        Dim TotxPc As Single
        Dim Mtxx100 As Single
        Dim Totx100 As Single

        Dim UseHoleMaxMtxx As Boolean

        Dim Result As Boolean = True

        Try
            'Parameters selected by the user:

            'Hole mineability parameters selected by user:
            'aRcvryParamsData.MinItbThk
            'aRcvryParamsData.MinOreThk
            'aRcvryParamsData.ClPctMaxHole
            'aRcvryParamsData.MtxxMaxHole
            'aRcvryParamsData.TotxMaxHole
            'aRcvryParamsData.TotPrTpaMinHole
            'aRcvryParamsData.MineFirstSpl

            'In aRcvryProdQual() hole data is:
            'Item8   Coarse pebble
            'Item9   Fine pebble
            'Item10  IP
            'Item11  Coarse concentrate
            'Item12  Fine concentrate
            'Item13  Total pebble
            'Item14  Total concentrate

            'Will assume that if any product quality parameter other than
            'minimum BPL is greater than or equal to 99.9 then user doesn't
            'care what that value is (Fe2O3, Al2O3, IA, MgO, CaO, MER, CaO/P2O5).

            '01/23/2008, lss
            'Per Gary Gavie and Allen Truesdell -- we will no longer use the
            'Maximum Matrix-X parameter to determine hole mineability!
            UseHoleMaxMtxx = False

            'Summed waste thickness and matrix thicknesses are in aSumData.
            'Overburden and interburden thicknesses are there as well.
            'MtxThk = aSumData.MtxThk
            WstThk = aSumData.WstThk
            OvbThk = aSumData.OvbThk
            ItbThk = aSumData.ItbThk

            UserHasDefinedCpb = False
            UserHasDefinedFpb = False
            UserHasDefinedTpb = False
            'UserHasDefinedCcn = False
            'UserHasDefinedFcn = False
            UserHasDefinedTcn = False
            UserHasDefinedIp = False

            'Will determine mineability of the various products (Cpb, Fpb, IP,
            'Ccn, Fcn) to determine an "On-Spec" Matrix "X" and "Total "X" for
            'the hole.  This will be one of the determining factors in whether
            'the hole is mineable or unmineable.

            'Four things determine hole mineability:
            '1) Matrix "X" & "Total "X"
            '2) %Clay
            '3) Total product TPA
            '4) Matrix thickness

            With aHoleData
                .CpbOnSpec = "ND"
                .FpbOnSpec = "ND"
                .TpbOnSpec = "ND"
                .CcnOnSpec = "ND"
                .FcnOnSpec = "ND"
                .TcnOnSpec = "ND"
                .OsOnSpec = "ND"
                .IpOnSpec = "ND"

                'Coarse pebble
                UserHasDefinedCpb = aRecoveryParams.HoleQualitySpecifications.Any(Function(s) s.CoarsePebbleValue.HasValue)

                .Cpb.ProdType = ProductType.CPb
                SetProductMiniabilityByLimits(.Cpb, aRecoveryParams.HoleQualitySpecifications, .Cpb.Fe, ProductType.CPb)
                Select Case .Cpb.IsOnSpec
                    Case True
                        .CpbOnSpec = "Yes"
                    Case False
                        .CpbOnSpec = "No"
                    Case Else
                        .CpbOnSpec = "ND"
                End Select

                ''Coarse pebble quality problems -- Item8
                'For Each item In aRecoveryParams.HoleQualitySpecifications
                '    Select Case item.Element
                '        Case Element.BPL.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Bpl < item.CoarsePebbleValue.Value And
                '                .Cpb.Bpl <> 0 Then
                '                .Cpb.BplOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.FE2O3.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Fe > item.CoarsePebbleValue.Value Then
                '                .Cpb.FeOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.AL2O3.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Al > item.CoarsePebbleValue.Value Then
                '                .Cpb.AlOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.IA.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Ia > item.CoarsePebbleValue.Value Then
                '                .Cpb.IaOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.MGO.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Mg > item.CoarsePebbleValue.Value Then
                '                .Cpb.MgOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.CAO.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Ca > item.CoarsePebbleValue.Value Then
                '                .Cpb.CaOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.MER.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Mer > item.CoarsePebbleValue.Value Then
                '                .Cpb.MerOffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.CAOP2O5.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.CaOP2O5 > item.CoarsePebbleValue.Value Then
                '                .Cpb.CaOP2O5OffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '        Case Element.FE2O3P2O5.DisplayName
                '            If item.CoarsePebbleValue.HasValue AndAlso .Cpb.Fe2O3P2O5 > item.CoarsePebbleValue.Value Then
                '                .Cpb.Fe2O3P2O5OffSpecFlag = True
                '                .CpbOnSpec = "No"
                '            End If
                '    End Select
                'Next

                If UserHasDefinedCpb And .CpbOnSpec <> "No" Then
                    .CpbOnSpec = "Yes"
                    .Cpb.IsOnSpec = True
                End If

                'If there is no analysis for coarse pebble then set coarse pebble
                'mineability to "No"
                If .Cpb.Bpl = 0 And .Cpb.Fe = 0 And .Cpb.Al = 0 And .Cpb.Ia = 0 And
                .Cpb.Mg = 0 And .Cpb.Ca = 0 Then
                    .CpbOnSpec = "No"
                    .Cpb.BplOffSpecFlag = True
                    .Cpb.FeOffSpecFlag = True
                    .Cpb.AlOffSpecFlag = True
                    .Cpb.IaOffSpecFlag = True
                    .Cpb.MgOffSpecFlag = True
                    .Cpb.CaOffSpecFlag = True
                    .Cpb.MerOffSpecFlag = True
                    .Cpb.CaOP2O5OffSpecFlag = True
                    .Cpb.Fe2O3P2O5OffSpecFlag = True
                End If

                If UserHasDefinedCpb = True And .CpbOnSpec <> "No" Then
                    .CpbOnSpec = "Yes"
                End If

                'Fine pebble
                UserHasDefinedFpb = aRecoveryParams.HoleQualitySpecifications.Any(Function(s) s.FinePebbleValue.HasValue)

                'Fine pebble quality problems -- Item9
                For Each item In aRecoveryParams.HoleQualitySpecifications
                    Select Case item.Element
                        Case Element.BPL.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Bpl < item.FinePebbleValue.Value And
                                .Fpb.Bpl <> 0 Then
                                .Fpb.BplOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.FE2O3.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Fe > item.FinePebbleValue.Value Then
                                .Fpb.FeOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.AL2O3.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Al > item.FinePebbleValue.Value Then
                                .Fpb.AlOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.IA.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Ia > item.FinePebbleValue.Value Then
                                .Fpb.IaOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.MGO.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Mg > item.FinePebbleValue.Value Then
                                .Fpb.MgOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.CAO.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Ca > item.FinePebbleValue.Value Then
                                .Fpb.CaOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.MER.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.Mer > item.FinePebbleValue.Value Then
                                .Fpb.MerOffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                        Case Element.CAOP2O5.DisplayName
                            If item.FinePebbleValue.HasValue AndAlso .Fpb.CaOP2O5 > item.FinePebbleValue.Value Then
                                .Fpb.CaOP2O5OffSpecFlag = True
                                .FpbOnSpec = "No"
                            End If
                    End Select
                Next

                'If there is no analysis for fine pebble then set fine pebble
                'mineability to "No"
                If .Fpb.Bpl = 0 And .Fpb.Fe = 0 And .Fpb.Al = 0 And .Fpb.Ia = 0 And
                .Fpb.Mg = 0 And .Fpb.Ca = 0 Then
                    .FpbOnSpec = "No"
                    .Fpb.BplOffSpecFlag = True
                    .Fpb.FeOffSpecFlag = True
                    .Fpb.AlOffSpecFlag = True
                    .Fpb.IaOffSpecFlag = True
                    .Fpb.MgOffSpecFlag = True
                    .Fpb.CaOffSpecFlag = True
                    .Fpb.MerOffSpecFlag = True
                    .Fpb.CaOP2O5OffSpecFlag = True
                    .Fpb.Fe2O3P2O5OffSpecFlag = True
                End If
                If UserHasDefinedFpb = True And .FpbOnSpec <> "No" Then
                    .FpbOnSpec = "Yes"
                End If

                'IP
                If aIsIPDistributedTo Then
                    UserHasDefinedIp = aRecoveryParams.HoleQualitySpecifications.Any(Function(s) s.IpValue.HasValue)

                    'IP quality problems -- Item10
                    For Each item In aRecoveryParams.HoleQualitySpecifications
                        Select Case item.Element
                            Case Element.BPL.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Bpl < item.IpValue.Value And
                                .Ip.Bpl <> 0 Then
                                    .Ip.BplOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.FE2O3.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Fe > item.IpValue.Value Then
                                    .Ip.FeOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.AL2O3.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Al > item.IpValue.Value Then
                                    .Ip.AlOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.IA.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Ia > item.IpValue.Value Then
                                    .Ip.IaOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.MGO.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Mg > item.IpValue.Value Then
                                    .Ip.MgOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.CAO.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Ca > item.IpValue.Value Then
                                    .Ip.CaOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.MER.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.Mer > item.IpValue.Value Then
                                    .Ip.MerOffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                            Case Element.CAOP2O5.DisplayName
                                If item.IpValue.HasValue AndAlso .Ip.CaOP2O5 > item.IpValue.Value Then
                                    .Ip.CaOP2O5OffSpecFlag = True
                                    .IpOnSpec = "No"
                                End If
                        End Select
                    Next
                    'If there is no analysis for IP then set IP
                    'mineability to "No"
                    If .Ip.Bpl = 0 And .Ip.Fe = 0 And .Ip.Al = 0 And .Ip.Ia = 0 And
                    .Ip.Mg = 0 And .Ip.Ca = 0 Then
                        .IpOnSpec = "No"
                        .Ip.BplOffSpecFlag = True
                        .Ip.FeOffSpecFlag = True
                        .Ip.AlOffSpecFlag = True
                        .Ip.IaOffSpecFlag = True
                        .Ip.MgOffSpecFlag = True
                        .Ip.CaOffSpecFlag = True
                        .Ip.MerOffSpecFlag = True
                        .Ip.CaOP2O5OffSpecFlag = True
                        .Ip.Fe2O3P2O5OffSpecFlag = True
                    End If

                    If UserHasDefinedIp = True And .IpOnSpec <> "No" Then
                        .IpOnSpec = "Yes"
                    End If
                Else
                    .IpOnSpec = ""
                End If


                UserHasDefinedTpb = aRecoveryParams.HoleQualitySpecifications.Any(Function(s) s.PebbleValue.HasValue)

                ''Total pebble quality problems -- Item13
                For Each item In aRecoveryParams.HoleQualitySpecifications
                    Select Case item.Element
                        Case Element.BPL.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Bpl < item.PebbleValue.Value And
                            .Tpb.Bpl <> 0 Then
                                .Tpb.BplOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                            'End If
                        Case Element.FE2O3.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Fe > item.PebbleValue.Value Then
                                .Tpb.FeOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.AL2O3.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Al > item.PebbleValue.Value Then
                                .Tpb.AlOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.IA.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Ia > item.PebbleValue.Value Then
                                .Tpb.IaOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.MGO.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Mg > item.PebbleValue.Value Then
                                .Tpb.MgOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.CAO.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Ca > item.PebbleValue.Value Then
                                .Tpb.CaOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.MER.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.Mer > item.PebbleValue.Value Then
                                .Tpb.MerOffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                        Case Element.CAOP2O5.DisplayName
                            If item.PebbleValue.HasValue AndAlso .Tpb.CaOP2O5 > item.PebbleValue.Value Then
                                .Tpb.CaOP2O5OffSpecFlag = True
                                .TpbOnSpec = "No"
                            End If
                    End Select
                Next

                'If there is no analysis for total pebble then set total pebble
                'mineability to "No"
                If .Tpb.Bpl = 0 And .Tpb.Fe = 0 And .Tpb.Al = 0 And .Tpb.Ia = 0 And
                .Tpb.Mg = 0 And .Tpb.Ca = 0 Then
                    .TpbOnSpec = "No"
                    .Tpb.BplOffSpecFlag = True
                    .Tpb.FeOffSpecFlag = True
                    .Tpb.AlOffSpecFlag = True
                    .Tpb.IaOffSpecFlag = True
                    .Tpb.MgOffSpecFlag = True
                    .Tpb.CaOffSpecFlag = True
                    .Tpb.MerOffSpecFlag = True
                    .Tpb.CaOP2O5OffSpecFlag = True
                    .Tpb.Fe2O3P2O5OffSpecFlag = True
                End If

                If UserHasDefinedTpb = True And .TpbOnSpec <> "No" Then
                    .TpbOnSpec = "Yes"
                End If

                'Added this 07/28/2009, lss
                'If the user has not defined mineability criteria for total pebble,
                'coarse pebble or fine pebble then by default the total pebble must
                'be mineable analysis-wise!!
                If UserHasDefinedTpb = False And UserHasDefinedCpb = False And
                UserHasDefinedFpb = False And .TpbOnSpec <> "No" Then
                    .TpbOnSpec = "Yes"
                End If

                'Total concentrate
                UserHasDefinedTcn = aRecoveryParams.HoleQualitySpecifications.Any(Function(s) s.ConcentrateValue.HasValue)

                ''Total concentrate quality problems -- Item14
                For Each item In aRecoveryParams.HoleQualitySpecifications
                    Select Case item.Element
                        Case Element.BPL.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Bpl < item.ConcentrateValue.Value And
                                .Tcn.Bpl <> 0 Then
                                .Tcn.BplOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.FE2O3.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Fe > item.ConcentrateValue.Value Then
                                .Tcn.FeOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.AL2O3.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Al > item.ConcentrateValue.Value Then
                                .Tcn.AlOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.IA.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Ia > item.ConcentrateValue.Value Then
                                .Tcn.IaOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.MGO.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Mg > item.ConcentrateValue.Value Then
                                .Tcn.MgOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.CAO.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Ca > item.ConcentrateValue.Value Then
                                .Tcn.CaOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.MER.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.Mer > item.ConcentrateValue.Value Then
                                .Tcn.MerOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                        Case Element.CAOP2O5.DisplayName
                            If item.ConcentrateValue.HasValue AndAlso .Tcn.CaOP2O5 > item.ConcentrateValue.Value Then
                                .Tcn.CaOffSpecFlag = True
                                .TcnOnSpec = "No"
                            End If
                    End Select
                Next

                'If there is no analysis for total concentrate then set total concentrate
                'mineability to "No"
                If .Tcn.Bpl = 0 And .Tcn.Fe = 0 And .Tcn.Al = 0 And .Tcn.Ia = 0 And
                .Tcn.Mg = 0 And .Tcn.Ca = 0 Then
                    .TcnOnSpec = "No"
                    .Tcn.BplOffSpecFlag = True
                    .Tcn.FeOffSpecFlag = True
                    .Tcn.AlOffSpecFlag = True
                    .Tcn.IaOffSpecFlag = True
                    .Tcn.MgOffSpecFlag = True
                    .Tcn.CaOffSpecFlag = True
                    .Tcn.MerOffSpecFlag = True
                    .Tcn.CaOP2O5OffSpecFlag = True
                    .Tcn.Fe2O3P2O5OffSpecFlag = True
                End If

                If UserHasDefinedTcn And .TcnOnSpec <> "No" Then
                    .TcnOnSpec = "Yes"
                End If

                'Added this 07/28/2009, lss
                'If the user has not defined mineability criteria for total concentrate,
                'coarse concentrate or fine concentrate then by default the total concentrate must
                'be mineable analysis-wise!!
                'If UserHasDefinedTcn = False And UserHasDefinedCcn = False And UserHasDefinedFcn = False And .TcnMinHole <> "No" Then
                '    .TcnMinHole = "Yes"
                'End If

                'As soon as the user has defined any hole mineability analysis
                'standards for total pebble then this will supercede any
                'hole mineability standards set by the user for coarse pebble or
                'fine pebble.
                If UserHasDefinedTpb = True Then
                    If .TpbOnSpec = "Yes" Then
                        .CpbOnSpec = "Yes"
                        .FpbOnSpec = "Yes"
                    End If
                    If .TpbOnSpec = "No" Then
                        .CpbOnSpec = "No"
                        .FpbOnSpec = "No"
                    End If
                Else
                    'Will set total pebble hole mineability based on fine and
                    'coarse pebble hole mineability.
                    If UserHasDefinedTpb = False Then
                        If .CpbOnSpec = "Yes" And .FpbOnSpec = "Yes" Then
                            .TpbOnSpec = "Yes"
                        Else
                            '07/28/2009, lss
                            'Added If UserHasDefinedCpb = False And UserHasDefinedFpb = False Then
                            If UserHasDefinedCpb = False And UserHasDefinedFpb = False Then
                                .TpbOnSpec = "Yes"
                            Else
                                '06/24/2010, lss
                                'Removed the following line.
                                '.TpbMinHole = "No"
                                'Check this!!!
                                'The user has defined Cpb or Fpb and not Tpb so lets leave it as
                                '"ND" if it was "ND"!!
                                If .TpbOnSpec <> "ND" Then
                                    .TpbOnSpec = "No"
                                End If
                            End If
                        End If
                    End If
                End If


                '01/16/2008, lss
                'Actually will not process the composite (hole) through the Off-spec pebble
                'MgO plant at this time -- the splits will stand on there own.  Will keep\
                'this code remarked out in here -- may come back to it later.

                '' 'If the mine has an Off-spec pebble plant then we need to do further processing
                '' 'here!  If the total pebble is off-spec then we might be able to run it
                '' 'through the Off-spec pebble plant.
                '' If aRcvryParamsData.MineHasOffSpecPbPlt = True Then
                ''    If .TpbMinHole <> "Yes" Then
                ''        'The total pebble is off-spec and the mine has an off-spec pebble MgO
                ''        'processing plant.
                ''        OffSpecPbPltProcess aRcvryParamsData,
                ''                            aRcvryProdQual(),
                ''                            aHoleData,
                ''                            "ProdCoeff"
                ''
                ''        OffSpecPbPltProcess aRcvryParamsData,
                ''                            aRcvryProdQual(),
                ''                            aHoleData,
                ''                            "100%"
                ''
                ''        'Add the Off-spec pebble MgO plant product (if any) as to the total product
                ''        'so it can be used in determining "On Spec Matrix "X".
                ''   ''     MineableProdTpaPc = MineableProdTpaPc + .MgPltProd.Tpa
                ''   ''     MineableProdTpa100 = MineableProdTpa100 + .MgPltProd100.Tpa
                ''    End If
                ''End If

                'We are currently in Function DetermineHoleMineability().

                'Need Matrix "X" and Total "X" to determine hole mineability!

                'Matrix "X"  Based on Mineable product PC TPA's determined above
                'Will adjust the matrix yards if necessary before we determine
                'the Matrix "X".

                'Need to correct the matrix yards here for volume recovery factors.
                'Volume recovery factors
                'aRcvryParamsData.MineVolRcvryFa
                'aRcvryParamsData.MineVolRcvryCf
                'aRcvryParamsData.MineVolRcvryMode  "Linear model" or "Footage adjustment"
                'aRcvryParamsData.MineVolRcvryVf

                'Will also determine 100% Matrix "X" here also!  Matrix yards for this
                'calculation will not be adjusted!

                'If aRcvryParamsData.MineVolRcvryMode = "Linear model" Then
                'Only have constant factor -- variable factor not available
                MtxYdsPc = Round(aSumData.MtxThk * 43560 / 27, 0)
                MtxYds100 = Round(aSumData.MtxThk * 43560 / 27, 0)
                If aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf IsNot Nothing Then
                    If aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value > 0 AndAlso aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value < 100 Then
                        MtxYdsPc = Round(MtxYdsPc * (aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value / 100), 0)
                    End If
                End If
                'If aRcvryParamsData.MineVolRcvryMode = "Footage adjustment" Then
                '    MtxYdsPc = Round((aSumData.MtxThk + aRcvryParamsData.MineVolRcvryFa) * 43560 / 27, 0)
                'End If
                'End If

                'Need to correct the overburden yards here for volume recovery factors.
                'Volume recovery factors
                'aRcvryParamsData.OvbVolRcvryFa
                'aRcvryParamsData.OvbVolRcvryCf
                'aRcvryParamsData.OvbVolRcvryMode  "Linear model" or "Footage adjustment"
                'aRcvryParamsData.OvbVolRcvryVf

                ''If aRcvryParamsData.OvbVolRcvryMode = "Linear model" Then
                ''Only have constant factor -- variable factor not available
                'OvbYdsPc = Round(OvbThk * 43560 / 27, 0)
                'OvbYds100 = Round(OvbThk * 43560 / 27, 0)
                'If aRecoveryParams.RecoveryDilutionParamaters.OvbVolRcvryCf IsNot Nothing Then
                '    If aRecoveryParams.RecoveryDilutionParamaters.OvbVolRcvryCf.Value > 0 AndAlso aRecoveryParams.RecoveryDilutionParamaters.OvbVolRcvryCf.Value < 100 Then
                '        OvbYdsPc = Round(OvbYdsPc * (aRecoveryParams.RecoveryDilutionParamaters.OvbVolRcvryCf.Value / 100), 0)
                '    End If
                'End If
                ''End If
                ''If aRcvryParamsData.OvbVolRcvryMode = "Footage adjustment" Then
                ''    OvbYdsPc = Round((OvbThk + aRcvryParamsData.OvbVolRcvryFa) * 43560 / 27, 0)
                ''    OvbYds100 = Round(OvbThk * 43560 / 27, 0)
                ''End If

                'US 6280 Mtx X Not Calculating Correctly in QA
                If aRcvryParamsData.OvbVolRcvryMode = "Linear model" Then
                    'Only have constant factor -- variable factor not available
                    OvbYdsPc = Round(OvbThk * 43560 / 27, 0)
                    OvbYds100 = Round(OvbThk * 43560 / 27, 0)
                    If aRcvryParamsData.OvbVolRcvryCf <> 0 Then
                        OvbYdsPc = Round(OvbYdsPc * (aRcvryParamsData.OvbVolRcvryCf / 100), 0)
                    End If
                End If
                If aRcvryParamsData.OvbVolRcvryMode = "Footage adjustment" Then
                    OvbYdsPc = Round((OvbThk + aRcvryParamsData.OvbVolRcvryFa) * 43560 / 27, 0)
                    OvbYds100 = Round(OvbThk * 43560 / 27, 0)
                End If


                'Have matrix and overburden yards -- need interburden yards also.
                'Will not screw around with them.
                ItbYdsPc = Round(ItbThk * 43560 / 27, 0)
                ItbYds100 = Round(ItbThk * 43560 / 27, 0)

                TotYdsPc = MtxYdsPc + OvbYdsPc + ItbYdsPc
                TotYds100 = MtxYds100 + OvbYds100 + ItbYds100

                'Need to determine the "On spec" product tons to use to calculate
                'the Mtx "X" (Cpb, Fpb, IP, Ccn, Fcn).  We determined mineability
                'for the various products above.
                MineableProdTpaPc = 0
                MineableProdTpa100 = 0

                'Coarse pebble  Coarse pebble
                'Coarse pebble  Coarse pebble
                'Coarse pebble  Coarse pebble

                'Only determining on-spec Matrix "X" and Total "X" here so will not worry about
                'parameters like:
                '1) aRcvryParamsData.InclCpbAlways
                '2) aRcvryParamsData.InclCpbNever
                '3) aRcvryParamsData.InclFpbAlways
                '4) aRcvryParamsData.InclFpbNever
                '5) aRcvryParamsData.InclOsAlways
                '6) aRcvryParamsData.InclOsNever

                If UserHasDefinedTpb = True Then
                    If .TpbOnSpec = "Yes" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Cpb.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Cpb100.Tpa
                    End If
                Else
                    If .CpbOnSpec = "Yes" Or .CpbOnSpec = "ND" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Cpb.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Cpb100.Tpa
                    End If
                End If

                'Fine pebble  Fine pebble
                'Fine pebble  Fine pebble
                'Fine pebble  Fine pebble

                If UserHasDefinedTpb = True Then
                    If .TpbOnSpec = "Yes" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Fpb.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Fpb100.Tpa
                    End If
                Else
                    If .FpbOnSpec = "Yes" Or .FpbOnSpec = "ND" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Fpb.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Fpb100.Tpa
                    End If
                End If

                'IP  IP
                'IP  IP
                'IP  IP

                If .IpOnSpec = "Yes" Or .IpOnSpec = "ND" Then
                    MineableProdTpaPc = MineableProdTpaPc + .Ip.Tpa
                    MineableProdTpa100 = MineableProdTpa100 + .Ip100.Tpa
                End If

                'Coarse concentrate  Coarse concentrate
                'Coarse concentrate  Coarse concentrate
                'Coarse concentrate  Coarse concentrate

                If UserHasDefinedTcn Then
                    If .TcnOnSpec = "Yes" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Ccn.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Ccn100.Tpa
                    End If
                Else
                    If .CcnOnSpec = "Yes" Or .CcnOnSpec = "ND" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Ccn.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Ccn100.Tpa
                    End If
                End If

                'Fine concentrate  Fine concentrate
                'Fine concentrate  Fine concentrate
                'Fine concentrate  Fine concentrate

                If UserHasDefinedTcn Then
                    If .TcnOnSpec = "Yes" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Fcn.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Fcn100.Tpa
                    End If
                Else
                    If .FcnOnSpec = "Yes" Or .FcnOnSpec = "ND" Then
                        MineableProdTpaPc = MineableProdTpaPc + .Fcn.Tpa
                        MineableProdTpa100 = MineableProdTpa100 + .Fcn100.Tpa
                    End If
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Function DetermineHoleMineability
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    MineableProdTpaPc = MineableProdTpaPc + .MgPltProd.Tpa
                    MineableProdTpa100 = MineableProdTpa100 + .MgPltProd100.Tpa
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Function DetermineHoleMineability

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    MineableProdTpaPc = MineableProdTpaPc + .DfFpbProd.Tpa + .DfIpProd.Tpa
                    MineableProdTpa100 = MineableProdTpa100 + .DfFpbProd100.Tpa + .DfIpProd100.Tpa
                End If

                'Have summed up all of the on-spec product for the hole (both ProdCoeff
                'and 100%).
                'Now determine the "On Spec" Matrix "X" for this split (ProdCoeff).
                If MineableProdTpaPc <> 0 Then
                    MtxxPc = Round(MtxYdsPc / MineableProdTpaPc, 2)
                Else
                    MtxxPc = 0
                End If
                'Now determine the "On Spec" Total "X" for this split (ProdCoeff).
                If MineableProdTpaPc <> 0 Then
                    TotxPc = Round(TotYdsPc / MineableProdTpaPc, 2)
                Else
                    TotxPc = 0
                End If

                '01/23/2008, lss
                'Per Gary Gavie and Allen Truesdell -- we will no longer use the
                'Maximum Matrix-X parameter to determine hole mineability!
                If UseHoleMaxMtxx = True Then
                    'If MtxxPc > aRcvryParamsData.MtxxMaxHole Or MtxxPc = 0 Then
                    If MtxxPc > aRecoveryParams.MiniabilityParamaters.MaxMtxXHole Or MtxxPc = 0 Then
                        .MtxXUnMineFlag = True
                        'This hole is not mineable!
                        Result = False
                    End If
                End If

                'If TotxPc > aRcvryParamsData.TotxMaxHole Or TotxPc = 0 Then
                If TotxPc > aRecoveryParams.MiniabilityParamaters.MaxTotXHole Or TotxPc = 0 Then
                    .TotXUnMineFlag = True
                    'This hole is not mineable!
                    Result = False
                End If

                'Currently in Function DetermineHoleMineability

                'This is the "On spec" Matrix "X" and Total "X" using ProdCoeff
                'data -- will place these values in aHoleData.
                .MtxxOnSpecPcHole = MtxxPc    'ProdCoeff
                .TotxOnSpecPcHole = TotxPc    'ProdCoeff

                'Now determine the "On Spec" Matrix "X" for this split (100%).
                If MineableProdTpa100 <> 0 Then
                    Mtxx100 = Round(MtxYds100 / MineableProdTpa100, 2)
                Else
                    Mtxx100 = 0
                End If
                'Now determine the "On Spec" Total "X" for this split (100%).
                If MineableProdTpa100 <> 0 Then
                    Totx100 = Round(TotYds100 / MineableProdTpa100, 2)
                Else
                    Totx100 = 0
                End If

                'Currently in Sub DetermineHoleMineability
                .MtxxOnSpec100Hole = Mtxx100  '100%
                .TotxOnSpec100Hole = Totx100  '100%

                'Will not determine the "All" Matrix "X" and "Total "X" values
                'for this hole here (ProdCoeff or 100%).

                '%Clay  Use ProdCoeff data to determine mineability
                'If .Wcl.WtPct > aRcvryParamsData.ClPctMaxHole Then
                If .Wcl.WtPct > aRecoveryParams.MiniabilityParamaters.MaxClayTotPrHole Then
                    .PctWclUnMineFlag = True
                    Result = False
                End If

                'Total product TPA  Use ProdCoeff data to determine mineability
                'If MineableProdTpaPc < aRcvryParamsData.TotPrTpaMinHole Then
                If MineableProdTpaPc < aRecoveryParams.MiniabilityParamaters.MinTotPrTpaHole Then
                    .TprTpaUnMineFlag = True
                    Result = False
                End If

                'Matrix thickness  Use ProdCoeff data to determine mineability
                'If aSumData.MtxThk < aRcvryParamsData.MinOreThk Then
                If aSumData.MtxThk < aRecoveryParams.MiniabilityParamaters.MinMtxThkHole Then
                    .MtxThkUnMineFlag = True
                    Result = False
                End If
            End With

            'If Result = False Then
            '    'Need to mark in ssCompErrors.
            '    MarkCompError(aHoleData,
            '              aScope)
            'End If
            Return Result
        Catch ex As Exception
            Result = False
            MsgBox("Error determining hole mineability." & vbCrLf &
                       ex.Message,
                       vbOKOnly + vbExclamation,
                       "Data Process Error")
            Return Result
        End Try

    End Function

    Private Sub MarkCompError(ByVal aHoleData As gRawProspSplRdctnType,
                              ByVal aScope As String)

        'Will place this data in ssCompErrors on frmProspDataReduction
        'This subroutine is called by Function DetermineHoleMineability.

        If aScope = "Batch" Then
            'frmMDIMain.frmPDR = frmProspDataReduction
            With frmMDIMain.frmPDR.ssCompErrors
                .MaxRows = .MaxRows + 1
                .Row = .MaxRows
                .Col = 1
                .Text = gGetHoleLocationTrs(aHoleData.Section,
                                            aHoleData.Township,
                                            aHoleData.Range,
                                            aHoleData.HoleLocation)
                .Col = 2
                .Value = aHoleData.MtxxOnSpecPcHole
                If aHoleData.MtxXUnMineFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 3
                .Value = aHoleData.TotxOnSpecPcHole
                If aHoleData.TotXUnMineFlag = True Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 4
                .Value = aHoleData.Ip.Bpl
                If aHoleData.Ip.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 5
                .Value = aHoleData.Ip.Ia
                If aHoleData.Ip.IaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 6
                .Value = aHoleData.Ip.Fe
                If aHoleData.Ip.FeOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 7
                .Value = aHoleData.Ip.Al
                If aHoleData.Ip.AlOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 8
                .Value = aHoleData.Ip.Mg
                If aHoleData.Ip.MgOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 9
                .Value = aHoleData.Ip.Ca
                If aHoleData.Ip.CaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 10
                .Value = aHoleData.Ip.Mer
                If aHoleData.Ip.MerOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 11
                .Value = aHoleData.Ip.CaOP2O5
                If aHoleData.Ip.CaOP2O5OffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                '-----
                .Col = 12
                .Value = aHoleData.Wcl.WtPct
                If aHoleData.PctWclUnMineFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 13
                .Value = aHoleData.Cpb.Bpl
                If aHoleData.Cpb.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 14
                .Value = aHoleData.Cpb.Ia
                If aHoleData.Cpb.IaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 15
                .Value = aHoleData.Cpb.Fe
                If aHoleData.Cpb.FeOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 16
                .Value = aHoleData.Cpb.Al
                If aHoleData.Cpb.AlOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 17
                .Value = aHoleData.Cpb.Mg
                If aHoleData.Cpb.MgOffSpecFlag = True Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 18
                .Value = aHoleData.Cpb.Ca
                If aHoleData.Cpb.CaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 19
                .Value = aHoleData.Cpb.Mer
                If aHoleData.Cpb.MerOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 20
                .Value = aHoleData.Cpb.CaOP2O5
                If aHoleData.Cpb.CaOP2O5OffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 21
                .Value = aHoleData.Fpb.Bpl
                If aHoleData.Fpb.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 22
                .Value = aHoleData.Fpb.Ia
                If aHoleData.Fpb.IaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 23
                .Value = aHoleData.Fpb.Fe
                If aHoleData.Fpb.FeOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 24
                .Value = aHoleData.Fpb.Al
                If aHoleData.Fpb.AlOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 25
                .Value = aHoleData.Fpb.Mg
                If aHoleData.Fpb.MgOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 26
                .Value = aHoleData.Fpb.Ca
                If aHoleData.Fpb.CaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 27
                .Value = aHoleData.Fpb.Mer
                If aHoleData.Fpb.MerOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 28
                .Value = aHoleData.Fpb.CaOP2O5
                If aHoleData.Fpb.CaOP2O5OffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 29
                .Value = aHoleData.Tpr.Tpa
                If aHoleData.TprTpaUnMineFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 30
                .Value = aHoleData.Ccn.Bpl
                If aHoleData.Ccn.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 31
                .Value = aHoleData.Ccn.Ia
                If aHoleData.Ccn.IaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 32
                .Value = aHoleData.Ccn.Fe
                If aHoleData.Ccn.FeOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 33
                .Value = aHoleData.Ccn.Al
                If aHoleData.Ccn.AlOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 34
                .Value = aHoleData.Ccn.Mg
                If aHoleData.Ccn.MgOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 35
                .Value = aHoleData.Ccn.Ca
                If aHoleData.Ccn.CaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 36
                .Value = aHoleData.Ccn.Mer
                If aHoleData.Ccn.MerOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 37
                .Value = aHoleData.Ccn.CaOP2O5
                If aHoleData.Ccn.CaOP2O5OffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                '-----
                .Col = 38
                .Value = aHoleData.Fcn.Bpl
                If aHoleData.Fcn.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 39
                .Value = aHoleData.Fcn.Ia
                If aHoleData.Fcn.IaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 40
                .Value = aHoleData.Fcn.Fe
                If aHoleData.Fcn.FeOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 41
                .Value = aHoleData.Fcn.Al
                If aHoleData.Fcn.AlOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 42
                .Value = aHoleData.Fcn.Mg
                If aHoleData.Fcn.MgOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 43
                .Value = aHoleData.Fcn.Ca
                If aHoleData.Fcn.CaOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 44
                .Value = aHoleData.Fcn.Mer
                If aHoleData.Fcn.MerOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 45
                .Value = aHoleData.Fcn.CaOP2O5
                If aHoleData.Fcn.CaOP2O5OffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If

                .Col = 46
                .Value = aHoleData.MtxThk
                If aHoleData.MtxThkUnMineFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                'US 5845/OPS1-119 Tpb And Tpr On Spec? Check boxes, Color Not always working
                .Col = 47
                .Value = aHoleData.Tpb.Bpl
                If aHoleData.Tpb.BplOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
                .Col = 48
                .Value = aHoleData.Tpb.Mg
                If aHoleData.Tpb.MgOffSpecFlag Then
                    .ForeColor = Color.DarkRed
                    .FontBold = True
                End If
            End With

        End If


    End Sub

    Public Function CreateAndSaveMoisTextFile(ByVal aProspDatasetTextFileName As String,
                                              ByVal Splits As List(Of gRawProspSplRdctnType),
                                              ByVal Holes As List(Of gRawProspSplRdctnType),
                                              ByVal a100Pct As Integer,
                                              ByVal aProdCoeff As Integer,
                                              ByVal aInclMgPlt As Integer,
                                              ByVal aNoReview As Boolean,
                                              ByVal aHoleCnt As Long) As Boolean


        Try

            Dim CurrHoleLocation As String = String.Empty
            Dim ThisHoleLocation As String = String.Empty
            Dim DataType As String = String.Empty

            If a100Pct = 1 Then
                DataType = "100%"
            End If
            If aProdCoeff = 1 Then
                DataType = "PC"
            End If

            'MOIS text transfer file is based on the IMC RAR transfer text file
            'format -- Holes and splits combined.

            'Check text file name.
            If Trim(aProspDatasetTextFileName) = "" Or
                Mid(aProspDatasetTextFileName,
                    Len(aProspDatasetTextFileName)) = "\" Then

                MsgBox("You must enter a text file name." +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")

                Return False
            End If

            'Check to see if user has generated any data.
            If Splits.Count = 0 Then
                MsgBox("You have not generated any reduced prospect data!" +
                        Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                        vbExclamation, "Error Saving Data")

                Return False
            End If

            'Put a header row in the text file -- don't really need it but will
            'put it in so that it matches with the IMC RAR text file format!
            If aHoleCnt = 1 Then
                Dim HdrLine As String = String.Empty
                If aInclMgPlt = 0 Then
                    HdrLine = "S----------------S X-----COORD Y-----COORD SC TN RG FY HOLE SPL M  ELEVTN   FROM     TO OVBTH MTXTH WTETH TOTTH TP--TPA TP-PCT TPBPL TP-IA TPINS TPCPR TPMGO TP-FE TP-AL TP-CD TF--TPA TF-PCT TFBPL TC--TPA TC-PCT TCBPL TC-IA TCINS TCCPR TCMGO TC-FE TC-AL TC-CD TS--TPA TS-PCT TSBPL   MYPT   TYPT DENSTY PTPT FTPT CTPT STPT O LITHOL       PDTE CP--TPA CP-PCT CPBPL CP-IA CPINS CPCPR CPMGO CP-FE CP-AL CP-CD FP--TPA FP-PCT FPBPL FP-IA FPINS FPCPR FPMGO FP-FE FP-AL FP-CD CF--TPA CF-PCT CFBPL FF--TPA FF-PCT FFBPL  MYPTA  TYPTA MPCTSOL MTXTPA OSTPA"
                Else
                    HdrLine = "S----------------S X-----COORD Y-----COORD SC TN RG FY HOLE SPL M  ELEVTN   FROM     TO OVBTH MTXTH WTETH TOTTH TP--TPA TP-PCT TPBPL TP-IA TPINS TPCPR TPMGO TP-FE TP-AL TP-CD TF--TPA TF-PCT TFBPL TC--TPA TC-PCT TCBPL TC-IA TCINS TCCPR TCMGO TC-FE TC-AL TC-CD TS--TPA TS-PCT TSBPL   MYPT   TYPT DENSTY PTPT FTPT CTPT STPT O LITHOL       PDTE CP--TPA CP-PCT CPBPL CP-IA CPINS CPCPR CPMGO CP-FE CP-AL CP-CD FP--TPA FP-PCT FPBPL FP-IA FPINS FPCPR FPMGO FP-FE FP-AL FP-CD CF--TPA CF-PCT CFBPL FF--TPA FF-PCT FFBPL  MYPTA  TYPTA MPCTSOL MTXTPA OSTPA MI--TPA MI-PCT MIBPL MI-IA MIINS MICPR MIMGO MI-FE MI-AL MI-CD MR--TPA MR-PCT MRBPL MR-IA MRINS MRCPR MRMGO MR-FE MR-AL MR-CD MP--TPA MP-PCT MPBPL MP-IA MPINS MPCPR MPMGO MP-FE MP-AL MP-CD"
                End If
                gOutputLines.Add(HdrLine)
            End If

            Dim HoleData As gRawProspSplRdctnType
            Dim HoleLine As String

            'Process thru aSsSplitReview
            For Each SplitData As gRawProspSplRdctnType In Splits
                ThisHoleLocation = SplitData.HoleLocation

                If Not CurrHoleLocation.Equals(String.Empty) AndAlso Not ThisHoleLocation.Equals(CurrHoleLocation) Then
                    HoleData = Holes.Find(Function(x) x.HoleLocation.Contains(CurrHoleLocation))
                    'Add a hole row to the MOIS transfer file (HLE)
                    HoleLine = AddMoisTextFileHole(HoleData,
                                         DataType,
                                         aInclMgPlt)
                    gOutputLines.Add(HoleLine)
                End If

                'Add a split row to the MOIS transfer file (Snn - S01, S02, S03...)
                Dim SplitLine As String = AddMoisTextFileSplit(SplitData,
                                     DataType,
                                     aInclMgPlt)

                gOutputLines.Add(SplitLine)

                CurrHoleLocation = ThisHoleLocation
            Next

            'Get the last hole data
            HoleData = Holes.Find(Function(x) x.HoleLocation.Contains(CurrHoleLocation))
            'Add a hole row to the MOIS transfer file (HLE)
            HoleLine = AddMoisTextFileHole(HoleData,
                                         DataType,
                                         aInclMgPlt)
            gOutputLines.Add(HoleLine)

            Return True

        Catch ex As Exception
            MsgBox("Error creating MOIS transfer text file." & vbCrLf &
                          Err.Description,
                          vbOKOnly + vbExclamation,
                          "MOIS Transfer Text File Error")
            Return False
        End Try

    End Function

    Private Function DetermineSplitTpaMisc(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                           ByVal aRcvryParamsData As gDataRdctnParamsType,
                                           ByVal aRecoveryParams As ViewModels.ProductRecoveryDefinition) As Boolean

        Dim TotalProdTpa As Single
        Dim MtxYds As Single
        Dim MtxX As Single
        Dim InclCpb As Boolean = False
        Dim InclFpb As Boolean = False
        Dim InclOs As Boolean = False
        Dim InclCcn As Boolean = False
        Dim InclFcn As Boolean = False
        Dim InclIp As Boolean
        Dim ThisSplit As Integer


        Try
            ThisSplit = aRdctnCalcData.SplitNumber

            'Parameters selected by the user:

            'aRcvryParamsData.InclCpbAlways
            'aRcvryParamsData.InclFpbAlways
            'aRcvryParamsData.InclOsAlways

            'aRcvryParamsData.InclCpbNever
            'aRcvryParamsData.InclFpbNever
            'aRcvryParamsData.InclOsNever

            'aRcvryParamsData.CanSelectRejectTpb
            'aRcvryParamsData.CanSelectRejectTcn

            'These values are set in aRedctnCalcData:
            '.CpbMin   Is the coarse pebble mineable (Yes, No, ND)?
            '.FpbMin   Is the fine pebble mineable (Yes, No, ND)?
            '.TpbMin   Is the total pebble mineable (Yes, No, ND)?
            '.CcnMin   Is the coarse concentrate mineable (Yes, No, ND)?
            '.FcnMin   Is the fine concentrate mineable (Yes, No, ND)?
            '.TcnMin   Is the total concentrate mineable (Yes, No, ND)?
            '.OsMin    Is the oversize mineable (Yes, No, ND)?
            '.IpMin    Is the IP mineable (Yes, No, ND)?
            '-----
            '.FpbMgoOffSpec  Is the fine pebble MgO offspec? (Yes, No. ND)?
            '.IpMgoOffSpec   Is the IP MgO offspec? (Yes, No. ND)?

            'Will adjust the matrix yards before we determine the Matrix "X".

            'Need to correct the matrix yards here for volume recovery factors.
            'Volume recovery factors
            'aRcvryParamsData.MineVolRcvryFa
            'aRcvryParamsData.MineVolRcvryCf
            'aRcvryParamsData.MineVolRcvryMode  "Linear model" or "Footage adjustment"
            'aRcvryParamsData.MineVolRcvryVf

            With aRdctnCalcData
                'If aRcvryParamsData.MineVolRcvryMode = "Linear model" Then
                'Only have constant factor -- variable factor not available
                MtxYds = Round(.SplitThck * 43560 / 27, 0)
                'If aRcvryParamsData.MineVolRcvryCf <> 0 Then
                If aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value <> 0 Then
                    MtxYds = Round(MtxYds * (aRecoveryParams.RecoveryDilutionParamaters.MineVolRcvryCf.Value / 100), 0)
                End If
                'If aRcvryParamsData.MineVolRcvryMode = "Footage adjustment" Then
                '    MtxYds = Round((.SplitThck + aRcvryParamsData.MineVolRcvryFa) * 43560 / 27, 0)
                'End If
                'End If

                '100% 100% 100% 100% 100% 100%
                '100% 100% 100% 100% 100% 100%
                '100% 100% 100% 100% 100% 100%

                'Need to determine the "All" product tons to use to calculate
                'the Mtx "X" (Cpb, Fpb, IP, Ccn, Fcn).
                TotalProdTpa = 0

                'Typically InclIp is always true unless there is a Doloflot plant.
                'InclIp = True

                'Will be determining Mtx "X" All -- this represents the Mtx "X" for what
                'we are actually going to mine and send to the plant!

                'DOLOFLOT PLANT  100%
                '--------------
                'Currently in Private Function DetermineSplitTpaMisc
                'Need something extra for the Doloflot plant
                'If the fine pebble is going to be processed by the Doloflot plant then
                'we cannot include it as normal pebble that has been forced to be mineable!
                'If there is a Doloflot plant then aRcvryParamsData.InclFpbAlways = True!

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    TotalProdTpa = TotalProdTpa + .DfFpbProd100.Tpa + .DfIpProd100.Tpa
                    If .FpbMgoOffSpec Then
                        'This fine pebble is going to be processed by the Doloflot plant and
                        'cannot be included here!
                        InclFpb = False
                    Else
                        InclFpb = True
                        TotalProdTpa = TotalProdTpa + .Fpb100.Tpa
                    End If
                    If .IpMgoOffSpec = "Yes" Then
                        'This IP is going to be processed by the Doloflot plant and
                        'cannot be included here!
                        InclIp = False
                    Else
                        InclIp = True
                        TotalProdTpa = TotalProdTpa + .Ip100.Tpa
                    End If
                Else
                    'Fine pebble
                    If Not aRecoveryParams.EnterFinePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                        'Include the Fpb no matter what.
                        InclFpb = True
                        TotalProdTpa = TotalProdTpa + .Fpb100.Tpa
                    Else
                        If aRecoveryParams.EnterTotalPebbleRejectValue Then
                            'Include the Fpb if the Tpb quality is OK.
                            If aRdctnCalcData.TpbOnSpecRej = "No" Then
                                InclFpb = False
                            Else
                                InclFpb = True
                                TotalProdTpa = TotalProdTpa + .Fpb100.Tpa
                            End If
                        ElseIf aRecoveryParams.EnterFinePebbleRejectValue Then
                            'Include the Fpb if the quality is OK.
                            If aRdctnCalcData.FpbOnSpec = "Yes" Or aRdctnCalcData.FpbOnSpec = "ND" Then
                                InclFpb = True
                                TotalProdTpa = TotalProdTpa + .Fpb100.Tpa
                            Else
                                InclFpb = False
                            End If
                        End If
                    End If
                    'IP
                    If Not aRecoveryParams.EnterIPRejectValue Then
                        InclIp = True
                        TotalProdTpa = TotalProdTpa + .Ip100.Tpa
                    Else
                        If aRdctnCalcData.IpOnSpec = "Yes" Or aRdctnCalcData.IpOnSpec = "ND" Then
                            InclIp = True
                            TotalProdTpa = TotalProdTpa + .Ip100.Tpa
                        Else
                            InclIp = False
                        End If
                    End If
                End If

                'Coarse pebble
                'If Not aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTpb Then
                If Not aRecoveryParams.EnterCoarsePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                    'Include the Cpb no matter what.
                    InclCpb = True
                    TotalProdTpa = TotalProdTpa + .Cpb100.Tpa
                Else
                    If aRecoveryParams.EnterTotalPebbleRejectValue Then
                        'Include the Cpb if the Tpb quality is OK.
                        If aRdctnCalcData.TpbOnSpecRej = "No" Then
                            InclCpb = False
                        Else
                            InclCpb = True
                            TotalProdTpa = TotalProdTpa + .Cpb100.Tpa
                        End If
                    ElseIf aRecoveryParams.EnterCoarsePebbleRejectValue Then
                        'Include the Cpb if the quality is OK.
                        If aRdctnCalcData.CpbOnSpec = "Yes" Or aRdctnCalcData.CpbOnSpec = "ND" Then
                            TotalProdTpa = TotalProdTpa + .Cpb100.Tpa
                            InclCpb = True
                        Else
                            InclCpb = False
                        End If
                    End If
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO  100%
                '------------------------------------------
                'Currently in Private Function DetermineSplitTpaMisc

                'Special addition for Off-spec pebble MgO plant!
                'New DfpFco
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    TotalProdTpa = TotalProdTpa + .MgPltProd100.Tpa
                    'If aRdctnCalcData.TpbOnSpecRej = "Yes" Then
                    '    InclCpb = True
                    '    InclFpb = True
                    'Else
                    '    'The total pebble is off-spec -- it will be handled by the Off-spec
                    '    'pebble MgO plant if possible.
                    '    InclCpb = False
                    '    InclFpb = False
                    'End If
                    If aRecoveryParams.EnterTotalPebbleRejectValue Then
                        'Include the Fpb if the Tpb quality is OK.
                        If aRdctnCalcData.TpbOnSpecRej = "No" Then
                            InclFpb = False
                        Else
                            InclFpb = True
                        End If
                    ElseIf aRecoveryParams.EnterFinePebbleRejectValue Then
                        'Include the Fpb if the quality is OK.
                        If aRdctnCalcData.FpbOnSpec = "Yes" Or aRdctnCalcData.FpbOnSpec = "ND" Then
                            InclFpb = True
                        Else
                            InclFpb = False
                        End If
                    End If
                End If

                'Oversize
                If aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize Then
                    InclOs = True
                    TotalProdTpa = TotalProdTpa + .Os100.Tpa
                Else
                    InclOs = False
                End If

                'Concentrate
                If aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTcn Then
                    'Include the coarse concentrate if the quality is OK.
                    If aRdctnCalcData.CcnOnSpec = "Yes" Or aRdctnCalcData.CcnOnSpec = "ND" Then
                        InclCcn = True
                        TotalProdTpa = TotalProdTpa + .Ccn100.Tpa
                    End If
                    'Include the fine concentrate if the quality is OK.
                    If aRdctnCalcData.FcnOnSpec = "Yes" Or aRdctnCalcData.FcnOnSpec = "ND" Then
                        TotalProdTpa = TotalProdTpa + .Fcn100.Tpa
                        InclFcn = True
                    End If
                Else
                    InclCcn = True
                    TotalProdTpa = TotalProdTpa + .Ccn100.Tpa
                    InclFcn = True
                    TotalProdTpa = TotalProdTpa + .Fcn100.Tpa
                End If

                'Now determine the "All" Matrix "X" for this split.
                If TotalProdTpa <> 0 Then
                    MtxX = Round(MtxYds / TotalProdTpa, 2)
                Else
                    MtxX = 0
                End If

                .MtxxAll100 = MtxX
                .TotxAll100 = 0
            End With

            'Need to calculate 100% total pebble and total product here.
            'Total pebble will reflect the possible exclusion of Cpb or Fpb.
            'Total product will reflect the possible exclusion of Cpb, Fpb, Os
            'Currently in Function DetermineSplitTpaMisc


            CalcTotPbSpec(aRdctnCalcData,
                      "100%",
                      InclCpb,
                      InclFpb,
                      aRdctnCalcData.SplitNumber,
                      aRecoveryParams.EnterTotalPebbleRejectValue OrElse aRecoveryParams.EnterCoarsePebbleRejectValue,
                      True)


            If aRcvryParamsData.CanSelectRejectTcn Then
                CalcTotCnSpec(aRdctnCalcData,
                          "100%",
                          InclCcn,
                          InclFcn,
                          "Split",
                          aRdctnCalcData.SplitNumber,
                          aRcvryParamsData.CanSelectRejectTcn,
                          True)
            End If

            'Calculate IP reject
            'If necessary -- calculate the total pebble rejected at the washer!
            If aRecoveryParams.EnterIPRejectValue Then
                With aRdctnCalcData
                    .IpRej.ProdType = ProductType.IPRej
                    If Not InclIp Then
                        'The IP has been rejected!
                        .IpRej.Tpa = .Ip100.Tpa
                        .IpRej.Bpl = .Ip100.Bpl
                        .IpRej.Ins = .Ip100.Ins
                        .IpRej.Ia = .Ip100.Ia
                        .IpRej.IaAdj = .Ip100.IaAdj
                        .IpRej.Ca = .Ip100.Ca
                        .IpRej.Fe = .Ip100.Fe
                        .IpRej.FeAdj = .Ip100.FeAdj
                        .IpRej.Al = .Ip100.Al
                        .IpRej.Mg = .Ip100.Mg
                        .IpRej.IsOnSpec = True
                    Else
                        .IpRej.Tpa = 0
                        .IpRej.Bpl = 0
                        .IpRej.Ins = 0
                        .IpRej.Ia = 0
                        .IpRej.IaAdj = 0
                        .IpRej.Ca = 0
                        .IpRej.Fe = 0
                        .IpRej.FeAdj = 0
                        .IpRej.Al = 0
                        .IpRej.Mg = 0
                        .IpRej.IsOnSpec = False
                    End If
                End With
            End If

            'Note: If Off-spec pebble MgO plant exists and has product we will
            '      NOT include it in this total product value.

            'Note: If Doloflot plant exists and has product we will
            '      NOT include it in this total product value.
            aRdctnCalcData.Tpr100 = CalcTotPrSpec100(aRdctnCalcData,
                      InclOs,
                      InclIp)


            'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
            '------------------------------------------
            'Currently in Private Function DetermineSplitTpaMisc
            'New DfpFco
            If aRcvryParamsData.UseOrigMgoPlant = True Or
            aRcvryParamsData.UseDoloflotPlantFco = True Then
                CalcTcnPlusMgPltProd(aRdctnCalcData,
                                 "100%",
                                 "Split",
                                 aRdctnCalcData.SplitNumber)

                CalcTprPlusMgPltProd(aRdctnCalcData,
                                 "100%",
                                 "Split",
                                 aRdctnCalcData.SplitNumber)
            End If

            'DOLOFLOT PLANT ONA
            '------------------
            'Currently in Private Function DetermineSplitTpaMisc

            If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                CalcTcnPlusDoloflotProd(aRdctnCalcData,
                                    "100%",
                                    "Split",
                                    aRdctnCalcData.SplitNumber)

                CalcTprPlusDoloflotProd(aRdctnCalcData,
                                    "100%",
                                    "Split",
                                    aRdctnCalcData.SplitNumber)
            End If

            'New DfpFco
            FinalWtPctCalcs(aRdctnCalcData, "100%", aRcvryParamsData.UseOrigMgoPlant,
                        aRcvryParamsData.UseDoloflotPlant2010,
                        aRcvryParamsData.UseDoloflotPlantFco)

            'ProdCoeff ProdCoeff ProdCoeff ProdCoeff
            'ProdCoeff ProdCoeff ProdCoeff ProdCoeff
            'ProdCoeff ProdCoeff ProdCoeff ProdCoeff

            With aRdctnCalcData
                'Need to determine the "On spec" product tons to use to calculate
                'the Mtx "X" (Cpb, Fpb, IP, Ccn, Fcn).

                TotalProdTpa = 0
                InclCpb = False
                InclFpb = False
                InclOs = False
                InclCcn = False
                InclFcn = False

                'Typically InclIp is always true unless there is a Doloflot plant.
                InclIp = False

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Private Function DetermineSplitTpaMisc
                'Need something extra for the Doloflot plant
                'If the fine pebble is going to be processed by the Doloflot plant then
                'we cannot include it as normal pebble that has been forced to be mineable!
                'If there is a Doloflot plant then aRcvryParamsData.InclFpbAlways = True!

                If aRcvryParamsData.UseDoloflotPlant2010 Then
                    TotalProdTpa = TotalProdTpa + .DfFpbProd.Tpa + .DfIpProd.Tpa
                    If .FpbMgoOffSpec = "Yes" Then
                        'This fine pebble is going to be processed by the Doloflot plant and
                        'cannot be included here!
                        InclFpb = False
                    Else
                        InclFpb = True
                        TotalProdTpa = TotalProdTpa + .Fpb.Tpa
                    End If
                    If .IpMgoOffSpec = "Yes" Then
                        'This IP is going to be processed by the Doloflot plant and
                        'cannot be included here!
                        InclIp = False
                    Else
                        InclIp = True
                        TotalProdTpa = TotalProdTpa + .Fpb.Tpa
                    End If
                Else
                    'Fine pebble
                    'If Not aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTpb Then
                    If Not aRecoveryParams.EnterFinePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                        'Include the Fpb no matter what.
                        InclFpb = True
                        TotalProdTpa = TotalProdTpa + .Fpb.Tpa
                    Else
                        If aRecoveryParams.EnterTotalPebbleRejectValue Then
                            'Include the Fpb if the Tpb quality is OK.
                            If aRdctnCalcData.TpbOnSpecRej = "No" Then
                                InclFpb = False
                            Else
                                InclFpb = True
                                TotalProdTpa = TotalProdTpa + .Fpb.Tpa
                            End If
                        ElseIf aRecoveryParams.EnterFinePebbleRejectValue Then
                            'Include the Fpb if the quality is OK.
                            If aRdctnCalcData.FpbOnSpec = "Yes" Or aRdctnCalcData.FpbOnSpec = "ND" Then
                                InclFpb = True
                                TotalProdTpa = TotalProdTpa + .Fpb.Tpa
                            Else
                                InclFpb = False
                            End If
                        End If
                    End If
                    If Not aRecoveryParams.EnterIPRejectValue Then
                        InclIp = True
                        TotalProdTpa = TotalProdTpa + .Ip.Tpa
                    Else
                        If aRdctnCalcData.IpOnSpec = "Yes" Or aRdctnCalcData.IpOnSpec = "ND" Then
                            InclIp = True
                            TotalProdTpa = TotalProdTpa + .Ip.Tpa
                        Else
                            InclIp = False
                        End If
                    End If
                End If

                'Coarse pebble
                'If Not aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTpb Then
                If Not aRecoveryParams.EnterCoarsePebbleRejectValue AndAlso Not aRecoveryParams.EnterTotalPebbleRejectValue Then
                    'Include the Cpb no matter what.
                    TotalProdTpa = TotalProdTpa + .Cpb.Tpa
                    InclCpb = True
                Else
                    If aRecoveryParams.EnterTotalPebbleRejectValue Then
                        'Include the Cpb if the Tpb quality is OK.
                        If aRdctnCalcData.TpbOnSpec = "No" Then
                            InclCpb = False
                        Else
                            InclCpb = True
                            TotalProdTpa = TotalProdTpa + .Cpb.Tpa
                        End If
                    ElseIf aRecoveryParams.EnterCoarsePebbleRejectValue Then
                        'Include the Cpb if the quality is OK.
                        If aRdctnCalcData.CpbOnSpec = "Yes" Or aRdctnCalcData.CpbOnSpec = "ND" Then
                            InclCpb = True
                            TotalProdTpa = TotalProdTpa + .Cpb.Tpa
                        Else
                            InclCpb = False
                        End If
                    End If
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Private Function DetermineSplitTpaMisc

                'Special addition for Off-spec pebble MgO plant!
                'New FcoDfp
                If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                    TotalProdTpa = TotalProdTpa + .MgPltProd.Tpa
                    If aRdctnCalcData.TpbOnSpec = "Yes" Then
                        InclCpb = True
                        InclFpb = True
                    Else
                        'The total pebble is off-spec -- it will be handled by the Off-spec
                        'pebble MgO plant if possible.
                        InclCpb = False
                        InclFpb = False
                    End If
                End If

                'Oversize
                If aRecoveryParams.MiniabilityParamaters.IncludeOffSpecOverSize Then
                    'Include the Os no matter what.
                    TotalProdTpa = TotalProdTpa + .Os.Tpa
                    InclOs = True
                Else
                    InclOs = False
                    'Include the Os if the quality is OK.
                    'If aRdctnCalcData.OsMin = "Yes" Or
                    '         aRdctnCalcData.OsOnSpec = "ND" Then
                    '    OnSpeceableProdTpa = OnSpeceableProdTpa + .Os.Tpa
                    '    InclOs = True
                    'End If
                End If

                'Concentrate
                If aRecoveryParams.MiniabilityParamaters.CanSelectivelyRejectTcn Then
                    'Include the coarse concentrate if the quality is OK.
                    If aRdctnCalcData.CcnOnSpec = "Yes" Or aRdctnCalcData.CcnOnSpec = "ND" Then
                        InclCcn = True
                        TotalProdTpa = TotalProdTpa + .Ccn.Tpa
                    End If
                    If aRdctnCalcData.FcnOnSpec = "Yes" Or aRdctnCalcData.FcnOnSpec = "ND" Then
                        InclFcn = True
                        TotalProdTpa = TotalProdTpa + .Fcn.Tpa
                    End If
                Else
                    InclCcn = True
                    TotalProdTpa = TotalProdTpa + .Ccn.Tpa
                    InclFcn = True
                    TotalProdTpa = TotalProdTpa + .Fcn.Tpa
                End If

                'Now determine the "All" Matrix "X" for this split.
                If TotalProdTpa <> 0 Then
                    MtxX = Round(MtxYds / TotalProdTpa, 2)
                Else
                    MtxX = 0
                End If

                .MtxxAll = MtxX
                .TotxAll = 0

                If MtxX < aRecoveryParams.MiniabilityParamaters.MaxMtxXSpl Or MtxX = 0 Then
                    .MtxxAllUnMineFlag = True
                    'SplitMineability = False

                End If
            End With



            'Need to calculate ProdCoeff total pebble and total product here.
            'Total pebble will reflect the possible exclusion of Cpb or Fpb.
            'Total product will reflect the possible exclusion of Cpb, Fpb, Os
            'Currently in Function DetermineSplitTpaMisc
            CalcTotPbSpec(aRdctnCalcData,
                      "ProdCoeff",
                      InclCpb,
                      InclFpb,
                      aRdctnCalcData.SplitNumber,
                      aRecoveryParams.EnterTotalPebbleRejectValue OrElse aRecoveryParams.EnterCoarsePebbleRejectValue,
                      True)

            If aRcvryParamsData.CanSelectRejectTcn = True Then
                CalcTotCnSpec(aRdctnCalcData,
                          "ProdCoeff",
                          InclCcn,
                          InclFcn,
                          "Split",
                          aRdctnCalcData.SplitNumber,
                          aRcvryParamsData.CanSelectRejectTcn,
                          True)
            End If

            aRdctnCalcData.Tpr = CalcTotPrSpecCatalog(aRdctnCalcData,
                      InclOs,
                      InclIp)

            'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
            '------------------------------------------
            'Currently in Private Function DetermineSplitTpaMisc
            'New DfpFco
            If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                CalcTcnPlusMgPltProd(aRdctnCalcData,
                                 "ProdCoeff",
                                 "Split",
                                 aRdctnCalcData.SplitNumber)

                CalcTprPlusMgPltProd(aRdctnCalcData,
                                 "ProdCoeff",
                                 "Split",
                                 aRdctnCalcData.SplitNumber)
            End If

            'DOLOFLOT PLANT ONA
            '------------------
            'Currently in Private Function DetermineSplitTpaMisc

            If aRcvryParamsData.UseDoloflotPlant2010 = True Then
                CalcTcnPlusDoloflotProd(aRdctnCalcData,
                                    "ProdCoeff",
                                    "Split",
                                    aRdctnCalcData.SplitNumber)

                CalcTprPlusDoloflotProd(aRdctnCalcData,
                                    "ProdCoeff",
                                    "Split",
                                    aRdctnCalcData.SplitNumber)
            End If

            'New DfpFco
            FinalWtPctCalcs(aRdctnCalcData, "ProdCoeff", aRcvryParamsData.UseOrigMgoPlant,
                        aRcvryParamsData.UseDoloflotPlant2010,
                        aRcvryParamsData.UseDoloflotPlantFco)

            'Need to place more data in ssSplitReview.

            Return True

        Catch ex As Exception
            MsgBox("Error determining miscellaneous data." & vbCrLf &
                   Err.Description,
                   vbOKOnly + vbExclamation,
                   "Data Process Error")
            Return False
        End Try

    End Function

    Private Sub SplitTpaMiscToSsSplitReview(ByRef aSsSplitReview As AxvaSpread,
                                            ByVal aRdctnCalcData As gRawProspSplRdctnType,
                                            ByVal aRcvryParamsData As gDataRdctnParamsType,
                                            ByVal aRow As Long
                                           )
        aSsSplitReview.Row = aRow
        With aSsSplitReview
            .Col = 317
            .Value = aRdctnCalcData.MtxxAll100     '100
            .Col = 318
            .Value = aRdctnCalcData.TotxAll100     '100
        End With
        With aSsSplitReview
            'Total pebble
            .SuspendLayout()
            .Col = 271
            .Value = aRdctnCalcData.Tpb100.Tpa     '100
            .Col = 272
            .Value = aRdctnCalcData.Tpb100.WtPct   '100
            .Col = 273
            .Value = aRdctnCalcData.Tpb100.Bpl     '100
            .Col = 274
            .Value = aRdctnCalcData.Tpb100.Ins     '100
            .Col = 275
            .Value = aRdctnCalcData.Tpb100.Ia      '100
            .Col = 276
            .Value = aRdctnCalcData.Tpb100.Fe      '100
            .Col = 277
            .Value = aRdctnCalcData.Tpb100.Al      '100
            .Col = 278
            .Value = aRdctnCalcData.Tpb100.Mg      '100
            .Col = 279
            .Value = aRdctnCalcData.Tpb100.Ca      '100
            .Col = 280
            .Value = aRdctnCalcData.Tpb100.Mer
            .Col = 281
            .Value = aRdctnCalcData.Tpb100.CaOP2O5

            If aRcvryParamsData.CanSelectRejectTcn Then
                'Total concentrate
                .Col = 293
                .Value = aRdctnCalcData.Tcn100.Tpa     '100
                .Col = 294
                .Value = aRdctnCalcData.Tcn100.WtPct   '100
                .Col = 295
                .Value = aRdctnCalcData.Tcn100.Bpl     '100
                .Col = 296
                .Value = aRdctnCalcData.Tcn100.Ins     '100
                .Col = 297
                .Value = aRdctnCalcData.Tcn100.Ia      '100
                .Col = 298
                .Value = aRdctnCalcData.Tcn100.Fe      '100
                .Col = 299
                .Value = aRdctnCalcData.Tcn100.Al      '100
                .Col = 300
                .Value = aRdctnCalcData.Tcn100.Mg      '100
                .Col = 301
                .Value = aRdctnCalcData.Tcn100.Ca      '100
                .Col = 302
                .Value = aRdctnCalcData.Tcn100.Mer
                .Col = 303
                .Value = aRdctnCalcData.Tcn100.CaOP2O5

                .Col = 523
                .Value = aRdctnCalcData.Tcn100.FeAdj    '100
                .Col = 524
                .Value = aRdctnCalcData.Tcn100.IaAdj    '100
                .Col = 525
                .Value = aRdctnCalcData.Tcn100.Mer
            End If

            'Total product
            .Col = 227
            .Value = aRdctnCalcData.Tpr100.Tpa     '100
            .Col = 228
            .Value = aRdctnCalcData.Tpr100.WtPct   '100
            .Col = 229
            .Value = aRdctnCalcData.Tpr100.Bpl     '100
            .Col = 230
            .Value = aRdctnCalcData.Tpr100.Ins     '100
            .Col = 231
            .Value = aRdctnCalcData.Tpr100.Ia      '100
            .Col = 232
            .Value = aRdctnCalcData.Tpr100.Fe      '100
            .Col = 233
            .Value = aRdctnCalcData.Tpr100.Al      '100
            .Col = 234
            .Value = aRdctnCalcData.Tpr100.Mg      '100
            .Col = 235
            .Value = aRdctnCalcData.Tpr100.Ca      '100
            .Col = 236
            .Value = aRdctnCalcData.Tpr100.Mer
            .Col = 237
            .Value = aRdctnCalcData.Tpr100.CaOP2O5

            'Weight%'s and Mtx TPA and Mtx"X" OnSpec
            .Col = 28
            .Value = aRdctnCalcData.MtxTPA
            .Col = 261
            .Value = aRdctnCalcData.Os100.WtPct
            .Col = 200
            .Value = aRdctnCalcData.Cpb100.WtPct
            .Col = 211
            .Value = aRdctnCalcData.Fpb100.WtPct
            .Col = 272
            .Value = aRdctnCalcData.Tpb100.WtPct
            .Col = 283
            .Value = aRdctnCalcData.Ip100.WtPct
            .Col = 239
            .Value = aRdctnCalcData.Ccn100.WtPct
            .Col = 250
            .Value = aRdctnCalcData.Fcn100.WtPct
            .Col = 294
            .Value = aRdctnCalcData.Tcn100.WtPct
            .Col = 228
            .Value = aRdctnCalcData.Tpr100.WtPct
            .Col = 222
            .Value = aRdctnCalcData.Ttl100.WtPct
            .Col = 311
            .Value = aRdctnCalcData.Wcl100.WtPct
            .Col = 305
            .Value = aRdctnCalcData.Cfd100.WtPct
            .Col = 308
            .Value = aRdctnCalcData.Ffd100.WtPct
            .Col = 225
            .Value = aRdctnCalcData.Tfd100.WtPct
            '-----
            'Off-spec pebble Mgo Plant  100%
            'Off-spec pebble Mgo Plant  100%
            'Off-spec pebble Mgo Plant  100%

            .Col = 381
            .Value = aRdctnCalcData.MgPltInp100.WtPct
            .Col = 392
            .Value = aRdctnCalcData.MgPltRej100.WtPct
            .Col = 403
            .Value = aRdctnCalcData.MgPltProd100.WtPct
            '-----
            .Col = 435
            .Value = aRdctnCalcData.MgPltTcn100.Tpa
            .Col = 436
            .Value = aRdctnCalcData.MgPltTcn100.WtPct
            .Col = 437
            .Value = aRdctnCalcData.MgPltTcn100.Bpl
            .Col = 438
            .Value = aRdctnCalcData.MgPltTcn100.Ins
            .Col = 439
            .Value = aRdctnCalcData.MgPltTcn100.Ia
            .Col = 440
            .Value = aRdctnCalcData.MgPltTcn100.Fe
            .Col = 441
            .Value = aRdctnCalcData.MgPltTcn100.Al
            .Col = 442
            .Value = aRdctnCalcData.MgPltTcn100.Mg
            .Col = 443
            .Value = aRdctnCalcData.MgPltTcn100.Ca
            .Col = 444
            .Value = aRdctnCalcData.MgPltTcn100.Mer
            .Col = 445
            .Value = aRdctnCalcData.MgPltTcn100.CaOP2O5
            '-----
            'Currently in Function DetermineSplitTpaMisc.
            .Col = 446
            .Value = aRdctnCalcData.MgPltTpr100.Tpa
            .Col = 447
            .Value = aRdctnCalcData.MgPltTpr100.WtPct
            .Col = 448
            .Value = aRdctnCalcData.MgPltTpr100.Bpl
            .Col = 449
            .Value = aRdctnCalcData.MgPltTpr100.Ins
            .Col = 450
            .Value = aRdctnCalcData.MgPltTpr100.Ia
            .Col = 451
            .Value = aRdctnCalcData.MgPltTpr100.Fe
            .Col = 452
            .Value = aRdctnCalcData.MgPltTpr100.Al
            .Col = 453
            .Value = aRdctnCalcData.MgPltTpr100.Mg
            .Col = 454
            .Value = aRdctnCalcData.MgPltTpr100.Ca
            .Col = 455
            .Value = aRdctnCalcData.MgPltTpr100.Mer
            .Col = 456
            .Value = aRdctnCalcData.MgPltTpr100.CaOP2O5

            '03/24/2011**, lss
            .Col = 821
            .Value = aRdctnCalcData.MgPltTcn100.FeAdj   '100
            .Col = 822
            .Value = aRdctnCalcData.MgPltTcn100.IaAdj   '100
            .Col = 823
            .Value = aRdctnCalcData.MgPltTpr100.FeAdj   '100
            .Col = 824
            .Value = aRdctnCalcData.MgPltTpr100.IaAdj   '100

            '-----
            .Col = 465
            .Value = aRdctnCalcData.TpbRej100.Tpa   '100
            .Col = 466
            .Value = aRdctnCalcData.TpbRej100.Bpl   '100
            .Col = 467
            .Value = aRdctnCalcData.TpbRej100.Ins   '100
            .Col = 468
            .Value = aRdctnCalcData.TpbRej100.Ia    '100
            .Col = 469
            .Value = aRdctnCalcData.TpbRej100.Fe    '100
            .Col = 470
            .Value = aRdctnCalcData.TpbRej100.Al    '100
            .Col = 471
            .Value = aRdctnCalcData.TpbRej100.Mg    '100
            .Col = 472
            .Value = aRdctnCalcData.TpbRej100.Ca    '100

            '-----
            'Fe adjusted stuff
            .Col = 511
            .Value = aRdctnCalcData.Tpb100.FeAdj    '100
            .Col = 512
            .Value = aRdctnCalcData.Tpb100.IaAdj    '100
            .Col = 513
            .Value = aRdctnCalcData.Tpb100.Mer

            .Col = 526
            .Value = aRdctnCalcData.Tpr100.FeAdj    '100
            .Col = 527
            .Value = aRdctnCalcData.Tpr100.IaAdj    '100
            .Col = 528
            .Value = aRdctnCalcData.Tpr100.Mer
            .Col = 529
            .Value = aRdctnCalcData.TpbRej100.FeAdj  '100
            .Col = 530
            .Value = aRdctnCalcData.TpbRej100.IaAdj  '100
            '-----
            .Col = 337
            .Value = aRdctnCalcData.IpRej100.Tpa
            .Col = 338
            .Value = aRdctnCalcData.IpRej100.Bpl
            .Col = 339
            .Value = aRdctnCalcData.IpRej100.Ins
            .Col = 340
            .Value = aRdctnCalcData.IpRej100.Ia
            .Col = 341
            .Value = aRdctnCalcData.IpRej100.Fe
            .Col = 342
            .Value = aRdctnCalcData.IpRej100.Al
            .Col = 343
            .Value = aRdctnCalcData.IpRej100.Mg
            .Col = 344
            .Value = aRdctnCalcData.IpRej100.Ca
            '-----
            '09/11/2009, lss -- Added the following
            'Currently in Function DetermineSplitTpaMisc
            .Col = 539
            .Value = aRdctnCalcData.TcnRej100.Tpa   '100
            .Col = 540
            .Value = aRdctnCalcData.TcnRej100.Bpl   '100
            .Col = 541
            .Value = aRdctnCalcData.TcnRej100.Ins   '100
            .Col = 542
            .Value = aRdctnCalcData.TcnRej100.Ia    '100
            .Col = 543
            .Value = aRdctnCalcData.TcnRej100.Fe    '100
            .Col = 544
            .Value = aRdctnCalcData.TcnRej100.Al    '100
            .Col = 545
            .Value = aRdctnCalcData.TcnRej100.Mg    '100
            .Col = 546
            .Value = aRdctnCalcData.TcnRej100.Ca    '100
            '-----
            .Col = 549
            .Value = aRdctnCalcData.TcnRej100.FeAdj  '100
            .Col = 550
            .Value = aRdctnCalcData.TcnRej100.IaAdj  '100
            '-----
            .Col = 791
            .Value = aRdctnCalcData.CpbRej100.Tpa   '100
            .Col = 792
            .Value = aRdctnCalcData.CpbRej100.WtPct '100
            .Col = 793
            .Value = aRdctnCalcData.CpbRej100.Bpl   '100
            .Col = 794
            .Value = aRdctnCalcData.CpbRej100.Ins   '100
            .Col = 795
            .Value = aRdctnCalcData.CpbRej100.Ia    '100
            .Col = 796
            .Value = aRdctnCalcData.CpbRej100.Fe    '100
            .Col = 797
            .Value = aRdctnCalcData.CpbRej100.Al    '100
            .Col = 798
            .Value = aRdctnCalcData.CpbRej100.Mg    '100
            .Col = 799
            .Value = aRdctnCalcData.CpbRej100.Ca    '100
            .Col = 800
            .Value = aRdctnCalcData.CpbRej100.Mer
            .Col = 801
            .Value = aRdctnCalcData.CpbRej100.CaOP2O5
            .Col = 802
            .Value = aRdctnCalcData.CpbRej100.FeAdj    '100
            .Col = 803
            .Value = aRdctnCalcData.CpbRej100.IaAdj    '100
            .Col = 804
            .Value = aRdctnCalcData.CpbRej100.Mer
            '----
            'Doloflot plant  100%
            'Doloflot plant  100%
            'Doloflot plant  100%
            'DOLOFLOT PLANT
            '--------------
            .Col = 636
            .Value = aRdctnCalcData.DfFpbInp100.WtPct
            .Col = 664
            .Value = aRdctnCalcData.DfFpbProd100.WtPct
            '-----
            .Col = 678
            .Value = aRdctnCalcData.DfIpInp100.WtPct
            .Col = 706
            .Value = aRdctnCalcData.DfIpProd100.WtPct
            '-----
            .Col = 747
            .Value = aRdctnCalcData.DfTcn100.Tpa
            .Col = 748
            .Value = aRdctnCalcData.DfTcn100.WtPct
            .Col = 749
            .Value = aRdctnCalcData.DfTcn100.Bpl
            .Col = 750
            .Value = aRdctnCalcData.DfTcn100.Ins
            .Col = 751
            .Value = aRdctnCalcData.DfTcn100.Ia
            .Col = 752
            .Value = aRdctnCalcData.DfTcn100.Fe
            .Col = 753
            .Value = aRdctnCalcData.DfTcn100.Al
            .Col = 754
            .Value = aRdctnCalcData.DfTcn100.Mg
            .Col = 755
            .Value = aRdctnCalcData.DfTcn100.Ca
            .Col = 756
            .Value = aRdctnCalcData.DfTcn100.Mer
            .Col = 757
            .Value = aRdctnCalcData.DfTcn100.CaOP2O5

            .Col = 758
            .Value = aRdctnCalcData.DfTcn100.FeAdj
            .Col = 759
            .Value = aRdctnCalcData.DfTcn100.IaAdj
            .Col = 760
            .Value = aRdctnCalcData.DfTcn100.Mer
            '-----
            'Currently in Function DetermineSplitTpaMisc.
            .Col = 761
            .Value = aRdctnCalcData.DfTpr100.Tpa
            .Col = 762
            .Value = aRdctnCalcData.DfTpr100.WtPct
            .Col = 763
            .Value = aRdctnCalcData.DfTpr100.Bpl
            .Col = 764
            .Value = aRdctnCalcData.DfTpr100.Ins
            .Col = 765
            .Value = aRdctnCalcData.DfTpr100.Ia
            .Col = 766
            .Value = aRdctnCalcData.DfTpr100.Fe
            .Col = 767
            .Value = aRdctnCalcData.DfTpr100.Al
            .Col = 768
            .Value = aRdctnCalcData.DfTpr100.Mg
            .Col = 769
            .Value = aRdctnCalcData.DfTpr100.Ca
            .Col = 770
            .Value = aRdctnCalcData.DfTpr100.Mer
            .Col = 771
            .Value = aRdctnCalcData.DfTpr100.CaOP2O5

            .Col = 772
            .Value = aRdctnCalcData.DfTpr100.FeAdj
            .Col = 773
            .Value = aRdctnCalcData.DfTpr100.IaAdj
            .Col = 774
            .Value = aRdctnCalcData.DfTpr100.Mer
            .ResumeLayout()
        End With

        With aSsSplitReview
            .Col = 26
            .Value = aRdctnCalcData.MtxxAll      'PC
            .Col = 27
            .Value = aRdctnCalcData.TotxAll      'PC
        End With

        With aSsSplitReview
            'Total pebble
            .Col = 42
            .Value = aRdctnCalcData.Tpb.Tpa     'PC
            .Col = 43
            .Value = aRdctnCalcData.Tpb.WtPct   'PC
            .Col = 44
            .Value = aRdctnCalcData.Tpb.Bpl     'PC
            .Col = 45
            .Value = aRdctnCalcData.Tpb.Ins     'PC
            .Col = 46
            .Value = aRdctnCalcData.Tpb.Ia      'PC
            .Col = 47
            .Value = aRdctnCalcData.Tpb.Fe      'PC
            .Col = 48
            .Value = aRdctnCalcData.Tpb.Al      'PC
            .Col = 49
            .Value = aRdctnCalcData.Tpb.Mg      'PC
            .Col = 50
            .Value = aRdctnCalcData.Tpb.Ca      'PC
            .Col = 51
            .Value = aRdctnCalcData.Tpb.Mer
            .Col = 52
            .Value = aRdctnCalcData.Tpb.CaOP2O5

            If aRcvryParamsData.CanSelectRejectTcn = True Then
                'Total concentrate
                .Col = 64
                .Value = aRdctnCalcData.Tcn.Tpa     'PC
                .Col = 65
                .Value = aRdctnCalcData.Tcn.WtPct   'PC
                .Col = 66
                .Value = aRdctnCalcData.Tcn.Bpl     'PC
                .Col = 67
                .Value = aRdctnCalcData.Tcn.Ins     'PC
                .Col = 68
                .Value = aRdctnCalcData.Tcn.Ia      'PC
                .Col = 69
                .Value = aRdctnCalcData.Tcn.Fe      'PC
                .Col = 70
                .Value = aRdctnCalcData.Tcn.Al      'PC
                .Col = 71
                .Value = aRdctnCalcData.Tcn.Mg      'PC
                .Col = 72
                .Value = aRdctnCalcData.Tcn.Ca      'PC
                .Col = 73
                .Value = aRdctnCalcData.Tcn.Mer
                .Col = 74
                .Value = aRdctnCalcData.Tcn.CaOP2O5

                .Col = 494
                .Value = aRdctnCalcData.Tcn.FeAdj    'PC
                .Col = 495
                .Value = aRdctnCalcData.Tcn.IaAdj    'PC
                .Col = 496
                .Value = aRdctnCalcData.Tcn.Mer
            End If

            'Total product
            .Col = 120
            .Value = aRdctnCalcData.Tpr.Tpa     'PC
            .Col = 121
            .Value = aRdctnCalcData.Tpr.WtPct   'PC
            .Col = 122
            .Value = aRdctnCalcData.Tpr.Bpl     'PC
            .Col = 123
            .Value = aRdctnCalcData.Tpr.Ins     'PC
            .Col = 124
            .Value = aRdctnCalcData.Tpr.Ia      'PC
            .Col = 125
            .Value = aRdctnCalcData.Tpr.Fe      'PC
            .Col = 126
            .Value = aRdctnCalcData.Tpr.Al      'PC
            .Col = 127
            .Value = aRdctnCalcData.Tpr.Mg      'PC
            .Col = 128
            .Value = aRdctnCalcData.Tpr.Ca      'PC
            .Col = 129
            .Value = aRdctnCalcData.Tpr.Mer
            .Col = 130
            .Value = aRdctnCalcData.Tpr.CaOP2O5

            'Weight%'s & Mtx TPA
            .Col = 314
            .Value = aRdctnCalcData.MtxTpaPc
            .Col = 32
            .Value = aRdctnCalcData.Os.WtPct
            .Col = 92
            .Value = aRdctnCalcData.Cpb.WtPct
            .Col = 103
            .Value = aRdctnCalcData.Fpb.WtPct
            .Col = 43
            .Value = aRdctnCalcData.Tpb.WtPct
            .Col = 54
            .Value = aRdctnCalcData.Ip.WtPct
            .Col = 135
            .Value = aRdctnCalcData.Ccn.WtPct
            .Col = 146
            .Value = aRdctnCalcData.Fcn.WtPct
            .Col = 65
            .Value = aRdctnCalcData.Tcn.WtPct
            .Col = 121
            .Value = aRdctnCalcData.Tpr.WtPct
            .Col = 115
            .Value = aRdctnCalcData.Ttl.WtPct
            .Col = 82
            .Value = aRdctnCalcData.Wcl.WtPct
            .Col = 76
            .Value = aRdctnCalcData.Cfd.WtPct
            .Col = 79
            .Value = aRdctnCalcData.Ffd.WtPct
            .Col = 118
            .Value = aRdctnCalcData.Tfd.WtPct
            '-----
            'Off-spec pebble Mgo Plant  PC
            'Off-spec pebble Mgo Plant  PC
            'Off-spec pebble Mgo Plant  PC

            .Col = 348
            .Value = aRdctnCalcData.MgPltInp.WtPct
            .Col = 359
            .Value = aRdctnCalcData.MgPltRej.WtPct
            .Col = 370
            .Value = aRdctnCalcData.MgPltProd.WtPct
            '-----
            .Col = 413
            .Value = aRdctnCalcData.MgPltTcn.Tpa
            .Col = 414
            .Value = aRdctnCalcData.MgPltTcn.WtPct
            .Col = 415
            .Value = aRdctnCalcData.MgPltTcn.Bpl
            .Col = 416
            .Value = aRdctnCalcData.MgPltTcn.Ins
            .Col = 417
            .Value = aRdctnCalcData.MgPltTcn.Ia
            .Col = 418
            .Value = aRdctnCalcData.MgPltTcn.Fe
            .Col = 419
            .Value = aRdctnCalcData.MgPltTcn.Al
            .Col = 420
            .Value = aRdctnCalcData.MgPltTcn.Mg
            .Col = 421
            .Value = aRdctnCalcData.MgPltTcn.Ca
            .Col = 422
            .Value = aRdctnCalcData.MgPltTcn.CaOP2O5
            .Col = 423
            .Value = aRdctnCalcData.MgPltTcn.CaOP2O5
            '-----
            .Col = 424
            .Value = aRdctnCalcData.MgPltTpr.Tpa
            .Col = 425
            .Value = aRdctnCalcData.MgPltTpr.WtPct
            .Col = 426
            .Value = aRdctnCalcData.MgPltTpr.Bpl
            .Col = 427
            .Value = aRdctnCalcData.MgPltTpr.Ins
            .Col = 428
            .Value = aRdctnCalcData.MgPltTpr.Ia
            .Col = 429
            .Value = aRdctnCalcData.MgPltTpr.Fe
            .Col = 430
            .Value = aRdctnCalcData.MgPltTpr.Al
            .Col = 431
            .Value = aRdctnCalcData.MgPltTpr.Mg
            .Col = 432
            .Value = aRdctnCalcData.MgPltTpr.Ca
            .Col = 433
            .Value = aRdctnCalcData.MgPltTpr.Mer
            .Col = 434
            .Value = aRdctnCalcData.MgPltTpr.CaOP2O5

            '03/24/2011**, lss
            .Col = 811
            .Value = aRdctnCalcData.MgPltTcn.FeAdj   'PC
            .Col = 812
            .Value = aRdctnCalcData.MgPltTcn.IaAdj   'PC
            .Col = 813
            .Value = aRdctnCalcData.MgPltTpr.FeAdj   'PC
            .Col = 814
            .Value = aRdctnCalcData.MgPltTpr.IaAdj   'PC

            '-----
            .Col = 457
            .Value = aRdctnCalcData.TpbRej.Tpa   'PC
            .Col = 458
            .Value = aRdctnCalcData.TpbRej.Bpl   'PC
            .Col = 459
            .Value = aRdctnCalcData.TpbRej.Ins   'PC
            .Col = 460
            .Value = aRdctnCalcData.TpbRej.Ia    'PC
            .Col = 461
            .Value = aRdctnCalcData.TpbRej.Fe    'PC
            .Col = 462
            .Value = aRdctnCalcData.TpbRej.Al    'PC
            .Col = 463
            .Value = aRdctnCalcData.TpbRej.Mg    'PC
            .Col = 464
            .Value = aRdctnCalcData.TpbRej.Ca    'PC

            'Fe adjusted stuff
            .Col = 482
            .Value = aRdctnCalcData.Tpb.FeAdj    'PC
            .Col = 483
            .Value = aRdctnCalcData.Tpb.IaAdj    'PC
            .Col = 484
            .Value = aRdctnCalcData.Tpb.Mer

            .Col = 497
            .Value = aRdctnCalcData.Tpr.FeAdj    'PC
            .Col = 498
            .Value = aRdctnCalcData.Tpr.IaAdj    'PC
            .Col = 499
            .Value = aRdctnCalcData.Tpr.Mer
            .Col = 500
            .Value = aRdctnCalcData.TpbRej.FeAdj 'PC
            .Col = 501
            .Value = aRdctnCalcData.TpbRej.IaAdj 'PC

            '-----
            .Col = 531
            .Value = aRdctnCalcData.TcnRej.Tpa   'PC
            .Col = 532
            .Value = aRdctnCalcData.TcnRej.Bpl   'PC
            .Col = 533
            .Value = aRdctnCalcData.TcnRej.Ins   'PC
            .Col = 534
            .Value = aRdctnCalcData.TcnRej.Ia    'PC
            .Col = 535
            .Value = aRdctnCalcData.TcnRej.Fe    'PC
            .Col = 536
            .Value = aRdctnCalcData.TcnRej.Al    'PC
            .Col = 537
            .Value = aRdctnCalcData.TcnRej.Mg    'PC
            .Col = 538
            .Value = aRdctnCalcData.TcnRej.Ca    'PC
            '-----
            .Col = 547
            .Value = aRdctnCalcData.TcnRej.FeAdj  'PC
            .Col = 548
            .Value = aRdctnCalcData.TcnRej.IaAdj  'PC
            '-----
            .Col = 777
            .Value = aRdctnCalcData.CpbRej.Tpa   'PC
            .Col = 778
            .Value = aRdctnCalcData.CpbRej.WtPct 'PC
            .Col = 779
            .Value = aRdctnCalcData.CpbRej.Bpl   'PC
            .Col = 780
            .Value = aRdctnCalcData.CpbRej.Ins   'PC
            .Col = 781
            .Value = aRdctnCalcData.CpbRej.Ia    'PC
            .Col = 782
            .Value = aRdctnCalcData.CpbRej.Fe    'PC
            .Col = 783
            .Value = aRdctnCalcData.CpbRej.Al    'PC
            .Col = 784
            .Value = aRdctnCalcData.CpbRej.Mg    'PC
            .Col = 785
            .Value = aRdctnCalcData.CpbRej.Ca    'PC
            .Col = 786
            .Value = aRdctnCalcData.CpbRej.Mer
            .Col = 787
            .Value = aRdctnCalcData.CpbRej.CaOP2O5
            .Col = 788
            .Value = aRdctnCalcData.CpbRej.FeAdj    'PC
            .Col = 789
            .Value = aRdctnCalcData.CpbRej.IaAdj    'PC
            .Col = 790
            .Value = aRdctnCalcData.CpbRej.Mer

            'Currently in Function DetermineSplitTpaMisc.

            'Doloflot plant Ona   PC
            'Doloflot plant Ona   PC
            'Doloflot plant Ona   PC

            'DOLOFLOT PLANT ONA
            '------------------
            .Col = 552
            .Value = aRdctnCalcData.DfFpbInp.WtPct
            .Col = 580
            .Value = aRdctnCalcData.DfFpbProd.WtPct
            '-----
            .Col = 594
            .Value = aRdctnCalcData.DfIpInp.WtPct
            .Col = 622
            .Value = aRdctnCalcData.DfIpProd.WtPct
            '-----
            .Col = 719
            .Value = aRdctnCalcData.DfTcn.Tpa
            .Col = 720
            .Value = aRdctnCalcData.DfTcn.WtPct
            .Col = 721
            .Value = aRdctnCalcData.DfTcn.Bpl
            .Col = 722
            .Value = aRdctnCalcData.DfTcn.Ins
            .Col = 723
            .Value = aRdctnCalcData.DfTcn.Ia
            .Col = 724
            .Value = aRdctnCalcData.DfTcn.Fe
            .Col = 725
            .Value = aRdctnCalcData.DfTcn.Al
            .Col = 726
            .Value = aRdctnCalcData.DfTcn.Mg
            .Col = 727
            .Value = aRdctnCalcData.DfTcn.Ca
            .Col = 728
            .Value = aRdctnCalcData.DfTcn.Mer
            .Col = 729
            .Value = aRdctnCalcData.DfTcn.CaOP2O5

            .Col = 730
            .Value = aRdctnCalcData.DfTcn.FeAdj
            .Col = 731
            .Value = aRdctnCalcData.DfTcn.IaAdj
            .Col = 732
            .Value = aRdctnCalcData.DfTcn.Mer
            '-----
            'Currently in Function DetermineSplitTpaMisc.
            .Col = 733
            .Value = aRdctnCalcData.DfTpr.Tpa
            .Col = 734
            .Value = aRdctnCalcData.DfTpr.WtPct
            .Col = 735
            .Value = aRdctnCalcData.DfTpr.Bpl
            .Col = 736
            .Value = aRdctnCalcData.DfTpr.Ins
            .Col = 737
            .Value = aRdctnCalcData.DfTpr.Ia
            .Col = 738
            .Value = aRdctnCalcData.DfTpr.Fe
            .Col = 739
            .Value = aRdctnCalcData.DfTpr.Al
            .Col = 740
            .Value = aRdctnCalcData.DfTpr.Mg
            .Col = 741
            .Value = aRdctnCalcData.DfTpr.Ca
            .Col = 742
            .Value = aRdctnCalcData.DfTpr.Mer
            .Col = 743
            .Value = aRdctnCalcData.DfTpr.CaOP2O5
            .Col = 744
            .Value = aRdctnCalcData.DfTpr.FeAdj
            .Col = 745
            .Value = aRdctnCalcData.DfTpr.IaAdj
            .Col = 746
            .Value = aRdctnCalcData.DfTpr.Mer
        End With

    End Sub

    Private Sub CalcTotPbSpec(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                          ByVal aCalcType As String,
                          ByVal aInclCpb As Boolean,
                          ByVal aInclFpb As Boolean,
                          ByVal aSplitNumber As Integer,
                          ByVal aCanSelectRejectPb As Boolean,
                          ByVal aCalcRejected As Boolean)


        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                .Tpb.Tpa = 0
                If aInclCpb Then
                    .Tpb.Tpa = .Tpb.Tpa + .Cpb.Tpa
                End If
                If aInclFpb Then
                    .Tpb.Tpa = .Tpb.Tpa + .Fpb.Tpa
                End If
                .Tpb.Bpl = gGetTotalValueSpec(.Cpb.Bpl, .Cpb.Tpa, .Fpb.Bpl, .Fpb.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb.Ins = gGetTotalValueSpec(.Cpb.Ins, .Cpb.Tpa, .Fpb.Ins, .Fpb.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb.Ia = gGetTotalValueSpec(.Cpb.Ia, .Cpb.Tpa, .Fpb.Ia, .Fpb.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb.IaAdj = gGetTotalValueSpec(.Cpb.IaAdj, .Cpb.Tpa, .Fpb.IaAdj, .Fpb.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb.Ca = gGetTotalValueSpec(.Cpb.Ca, .Cpb.Tpa, .Fpb.Ca, .Fpb.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb.Fe = gGetTotalValueSpec(.Cpb.Fe, .Cpb.Tpa, .Fpb.Fe, .Fpb.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb.FeAdj = gGetTotalValueSpec(.Cpb.FeAdj, .Cpb.Tpa, .Fpb.FeAdj, .Fpb.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb.Al = gGetTotalValueSpec(.Cpb.Al, .Cpb.Tpa, .Fpb.Al, .Fpb.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb.Mg = gGetTotalValueSpec(.Cpb.Mg, .Cpb.Tpa, .Fpb.Mg, .Fpb.Tpa, aInclCpb, aInclFpb, 2)

                'Calculate the coarse pebble rejected at the washer
                If aCalcRejected Then
                    .CpbRej.ProdType = ProductType.CPbRej
                    '.FpbRej.ProdType = ProductType.FPbRej
                    If Not aInclCpb Then
                        'The coarse pebble has been rejected!
                        .CpbRej.Tpa = .Cpb.Tpa
                        .CpbRej.Bpl = .Cpb.Bpl
                        .CpbRej.Ins = .Cpb.Ins
                        .CpbRej.Ia = .Cpb.Ia
                        .CpbRej.IaAdj = .Cpb.IaAdj
                        .CpbRej.Ca = .Cpb.Ca
                        .CpbRej.Fe = .Cpb.Fe
                        .CpbRej.FeAdj = .Cpb.FeAdj
                        .CpbRej.Al = .Cpb.Al
                        .CpbRej.Mg = .Cpb.Mg
                        .CpbRej.IsOnSpec = True
                    Else
                        .CpbRej.Tpa = 0
                        .CpbRej.Bpl = 0
                        .CpbRej.Ins = 0
                        .CpbRej.Ia = 0
                        .CpbRej.IaAdj = 0
                        .CpbRej.Ca = 0
                        .CpbRej.Fe = 0
                        .CpbRej.FeAdj = 0
                        .CpbRej.Al = 0
                        .CpbRej.Mg = 0
                        .CpbRej.IsOnSpec = False
                    End If
                    If Not aInclFpb Then
                        'The coarse pebble has been rejected!
                        .FpbRej.Tpa = .Fpb.Tpa
                        .FpbRej.Bpl = .Fpb.Bpl
                        .FpbRej.Ins = .Fpb.Ins
                        .FpbRej.Ia = .Fpb.Ia
                        .FpbRej.IaAdj = .Fpb.IaAdj
                        .FpbRej.Ca = .Fpb.Ca
                        .FpbRej.Fe = .Fpb.Fe
                        .FpbRej.FeAdj = .Fpb.FeAdj
                        .FpbRej.Al = .Fpb.Al
                        .FpbRej.Mg = .Fpb.Mg
                        .FpbRej.IsOnSpec = True
                    Else
                        .FpbRej.Tpa = 0
                        .FpbRej.Bpl = 0
                        .FpbRej.Ins = 0
                        .FpbRej.Ia = 0
                        .FpbRej.IaAdj = 0
                        .FpbRej.Ca = 0
                        .FpbRej.Fe = 0
                        .FpbRej.FeAdj = 0
                        .FpbRej.Al = 0
                        .FpbRej.Mg = 0
                        .FpbRej.IsOnSpec = False
                    End If
                End If

                'If necessary -- calculate the total pebble rejected at the washer!
                If aCalcRejected AndAlso aCanSelectRejectPb Then
                    'The pebble has been rejected!
                    .TpbRej.Tpa = 0
                    .TpbRej.ProdType = ProductType.TPbRej
                    If Not aInclCpb Then
                        .TpbRej.Tpa = .TpbRej.Tpa + .Cpb.Tpa
                    End If
                    If Not aInclFpb Then
                        .TpbRej.Tpa = .TpbRej.Tpa + .Fpb.Tpa
                    End If
                    .TpbRej.Bpl = gGetTotalValueSpec(.Cpb.Bpl, .Cpb.Tpa, .Fpb.Bpl, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej.Ins = gGetTotalValueSpec(.Cpb.Ins, .Cpb.Tpa, .Fpb.Ins, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej.Ia = gGetTotalValueSpec(.Cpb.Ia, .Cpb.Tpa, .Fpb.Ia, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej.IaAdj = gGetTotalValueSpec(.Cpb.IaAdj, .Cpb.Tpa, .Fpb.IaAdj, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej.Ca = gGetTotalValueSpec(.Cpb.Ca, .Cpb.Tpa, .Fpb.Ca, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej.Fe = gGetTotalValueSpec(.Cpb.Fe, .Cpb.Tpa, .Fpb.Fe, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej.FeAdj = gGetTotalValueSpec(.Cpb.FeAdj, .Cpb.Tpa, .Fpb.FeAdj, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej.Al = gGetTotalValueSpec(.Cpb.Al, .Cpb.Tpa, .Fpb.Al, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej.Mg = gGetTotalValueSpec(.Cpb.Mg, .Cpb.Tpa, .Fpb.Mg, .Fpb.Tpa, Not aInclCpb, Not aInclFpb, 2)
                End If

            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                .Tpb100.Tpa = 0
                If aInclCpb Then
                    .Tpb100.Tpa = .Tpb100.Tpa + .Cpb100.Tpa
                End If
                If aInclFpb Then
                    .Tpb100.Tpa = .Tpb100.Tpa + .Fpb100.Tpa
                End If
                .Tpb100.Bpl = gGetTotalValueSpec(.Cpb100.Bpl, .Cpb100.Tpa, .Fpb100.Bpl, .Fpb100.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb100.Ins = gGetTotalValueSpec(.Cpb100.Ins, .Cpb100.Tpa, .Fpb100.Ins, .Fpb100.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb100.Ia = gGetTotalValueSpec(.Cpb100.Ia, .Cpb100.Tpa, .Fpb100.Ia, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb100.IaAdj = gGetTotalValueSpec(.Cpb100.IaAdj, .Cpb100.Tpa, .Fpb100.IaAdj, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb100.Ca = gGetTotalValueSpec(.Cpb100.Ca, .Cpb100.Tpa, .Fpb100.Ca, .Fpb100.Tpa, aInclCpb, aInclFpb, 1)
                .Tpb100.Fe = gGetTotalValueSpec(.Cpb100.Fe, .Cpb100.Tpa, .Fpb100.Fe, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb100.FeAdj = gGetTotalValueSpec(.Cpb100.FeAdj, .Cpb100.Tpa, .Fpb100.FeAdj, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb100.Al = gGetTotalValueSpec(.Cpb100.Al, .Cpb100.Tpa, .Fpb100.Al, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)
                .Tpb100.Mg = gGetTotalValueSpec(.Cpb100.Mg, .Cpb100.Tpa, .Fpb100.Mg, .Fpb100.Tpa, aInclCpb, aInclFpb, 2)

                'Calculate the coarse pebble rejected at the washer
                If aCalcRejected Then
                    If Not aInclCpb Then
                        'The coarse pebble has been rejected!
                        .CpbRej100.Tpa = .Cpb100.Tpa
                        .CpbRej100.Bpl = .Cpb100.Bpl
                        .CpbRej100.Ins = .Cpb100.Ins
                        .CpbRej100.Ia = .Cpb100.Ia
                        .CpbRej100.IaAdj = .Cpb100.IaAdj
                        .CpbRej100.Ca = .Cpb100.Ca
                        .CpbRej100.Fe = .Cpb100.Fe
                        .CpbRej100.FeAdj = .Cpb100.FeAdj
                        .CpbRej100.Al = .Cpb100.Al
                        .CpbRej100.Mg = .Cpb100.Mg
                    Else
                        .CpbRej100.Tpa = 0
                        .CpbRej100.Bpl = 0
                        .CpbRej100.Ins = 0
                        .CpbRej100.Ia = 0
                        .CpbRej100.IaAdj = 0
                        .CpbRej100.Ca = 0
                        .CpbRej100.Fe = 0
                        .CpbRej100.FeAdj = 0
                        .CpbRej100.Al = 0
                        .CpbRej100.Mg = 0
                    End If
                End If

                'If necessary -- calculate the total pebble rejected at the washer!
                If aCalcRejected AndAlso aCanSelectRejectPb Then
                    'The pebble has been rejected!
                    .TpbRej100.Tpa = 0
                    If Not aInclCpb Then
                        .TpbRej100.Tpa = .TpbRej100.Tpa + .Cpb100.Tpa
                    End If
                    If Not aInclFpb Then
                        .TpbRej100.Tpa = .TpbRej100.Tpa + .Fpb100.Tpa
                    End If
                    .TpbRej100.Bpl = gGetTotalValueSpec(.Cpb100.Bpl, .Cpb100.Tpa, .Fpb100.Bpl, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej100.Ins = gGetTotalValueSpec(.Cpb100.Ins, .Cpb100.Tpa, .Fpb100.Ins, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej100.Ia = gGetTotalValueSpec(.Cpb100.Ia, .Cpb100.Tpa, .Fpb100.Ia, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej100.IaAdj = gGetTotalValueSpec(.Cpb100.IaAdj, .Cpb100.Tpa, .Fpb100.IaAdj, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej100.Ca = gGetTotalValueSpec(.Cpb100.Ca, .Cpb100.Tpa, .Fpb100.Ca, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 1)
                    .TpbRej100.Fe = gGetTotalValueSpec(.Cpb100.Fe, .Cpb100.Tpa, .Fpb100.Fe, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej100.FeAdj = gGetTotalValueSpec(.Cpb100.FeAdj, .Cpb100.Tpa, .Fpb100.FeAdj, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej100.Al = gGetTotalValueSpec(.Cpb100.Al, .Cpb100.Tpa, .Fpb100.Al, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                    .TpbRej100.Mg = gGetTotalValueSpec(.Cpb100.Mg, .Cpb100.Tpa, .Fpb100.Mg, .Fpb100.Tpa, Not aInclCpb, Not aInclFpb, 2)
                End If

            End With
        End If
    End Sub

    Public Function gGetTotalValueSpec(ByVal aValue1 As Single,
                                   ByVal aTpa1 As Single,
                                   ByVal aValue2 As Single,
                                   ByVal aTpa2 As Single,
                                   ByVal aInclValue1 As Boolean,
                                   ByVal aInclValue2 As Boolean,
                                   ByVal aRound As Integer) As Single


        'aInclValue1 aInclCpb
        'aInclValue2 aInclFpb

        'New DcfFco
        'Modified to not average in zero values!

        gGetTotalValueSpec = 0

        If aInclValue1 And aInclValue2 Then
            If aTpa1 + aTpa2 <> 0 Then
                'This is averaging in zeros!
                'gGetTotalValueSpec = gRound((aValue1 * aTpa1 + aValue2 * aTpa2) /
                '                     (aTpa1 + aTpa2), aRound)
                gGetTotalValueSpec = gGetTotalValue2(aValue1, aTpa1, aValue2,
                                                   aTpa2, aRound)

            Else
                gGetTotalValueSpec = 0
            End If
        End If

        If aInclValue1 And Not aInclValue2 Then
            gGetTotalValueSpec = aValue1
        End If

        If Not aInclValue1 And aInclValue2 Then
            gGetTotalValueSpec = aValue2
        End If

        If Not aInclValue1 And Not aInclValue2 Then
            gGetTotalValueSpec = 0
        End If
    End Function

    Private Function CalcTotPrSpecCatalog(ByVal aRdctnCalcData As gRawProspSplRdctnType,
                          ByVal aInclOs As Boolean,
                          ByVal aInclIp As Boolean) As mProdInfoType
        Dim Tpr As New mProdInfoType()
        With aRdctnCalcData
            'ProdCoeff stuff
            Tpr.Tpa = .Tpb.Tpa + .Tcn.Tpa
            If aInclOs Then
                Tpr.Tpa = Tpr.Tpa + .Os.Tpa
            End If
            If aInclIp Then
                Tpr.Tpa = Tpr.Tpa + .Ip.Tpa
            End If

            Tpr.Bpl = gGetTotalValue4Spec2(.Os.Bpl, .Os.Tpa,
                                            .Ip.Bpl, .Ip.Tpa,
                                            .Tpb.Bpl, .Tpb.Tpa,
                                            .Tcn.Bpl, .Tcn.Tpa,
                                            aInclOs, aInclIp, 1)

            Tpr.Ins = gGetTotalValue4Spec2(.Os.Ins, .Os.Tpa,
                                            .Ip.Ins, .Ip.Tpa,
                                            .Tpb.Ins, .Tpb.Tpa,
                                            .Tcn.Ins, .Tcn.Tpa,
                                            aInclOs, aInclIp, 1)

            Tpr.Ia = gGetTotalValue4Spec2(.Os.Ia, .Os.Tpa,
                                           .Ip.Ia, .Ip.Tpa,
                                           .Tpb.Ia, .Tpb.Tpa,
                                           .Tcn.Ia, .Tcn.Tpa,
                                           aInclOs, aInclIp, 2)

            Tpr.IaAdj = gGetTotalValue4Spec2(.Os.IaAdj, .Os.Tpa,
                                              .Ip.IaAdj, .Ip.Tpa,
                                              .Tpb.IaAdj, .Tpb.Tpa,
                                              .Tcn.IaAdj, .Tcn.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr.Ca = gGetTotalValue4Spec2(.Os.Ca, .Os.Tpa,
                                           .Ip.Ca, .Ip.Tpa,
                                           .Tpb.Ca, .Tpb.Tpa,
                                           .Tcn.Ca, .Tcn.Tpa,
                                           aInclOs, aInclIp, 1)

            Tpr.Fe = gGetTotalValue4Spec2(.Os.Fe, .Os.Tpa,
                                           .Ip.Fe, .Ip.Tpa,
                                           .Tpb.Fe, .Tpb.Tpa,
                                           .Tcn.Fe, .Tcn.Tpa,
                                           aInclOs, aInclIp, 2)

            Tpr.FeAdj = gGetTotalValue4Spec2(.Os.FeAdj, .Os.Tpa,
                                              .Ip.FeAdj, .Ip.Tpa,
                                              .Tpb.FeAdj, .Tpb.Tpa,
                                              .Tcn.FeAdj, .Tcn.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr.Al = gGetTotalValue4Spec2(.Os.Al, .Os.Tpa,
                                           .Ip.Al, .Ip.Tpa,
                                           .Tpb.Al, .Tpb.Tpa,
                                           .Tcn.Al, .Tcn.Tpa,
                                           aInclOs, aInclIp, 2)

            Tpr.Mg = gGetTotalValue4Spec2(.Os.Mg, .Os.Tpa,
                                           .Ip.Mg, .Ip.Tpa,
                                           .Tpb.Mg, .Tpb.Tpa,
                                           .Tcn.Mg, .Tcn.Tpa,
                                           aInclOs, aInclIp, 2)

            Tpr.WtPct = .Tpb.WtPct + .Tcn.WtPct
            If aInclOs Then
                Tpr.WtPct = Tpr.WtPct + .Os.WtPct
            End If
            If aInclIp Then
                Tpr.WtPct = Tpr.WtPct + .Ip.WtPct
            End If
        End With
        Return Tpr
    End Function

    Private Function CalcTotPrSpec100(ByVal aRdctnCalcData As gRawProspSplRdctnType,
                          ByVal aInclOs As Boolean,
                          ByVal aInclIp As Boolean) As mProdInfoType

        Dim Tpr100 As New mProdInfoType()

        With aRdctnCalcData
            '100% stuff
            Tpr100.Tpa = .Tpb100.Tpa + .Tcn100.Tpa
            If aInclOs Then
                Tpr100.Tpa = Tpr100.Tpa + .Os100.Tpa
            End If
            If aInclIp Then
                Tpr100.Tpa = Tpr100.Tpa + .Ip100.Tpa
            End If
            Tpr100.Bpl = gGetTotalValue4Spec2(.Os100.Bpl, .Os100.Tpa,
                                               .Ip100.Bpl, .Ip100.Tpa,
                                               .Tpb100.Bpl, .Tpb100.Tpa,
                                               .Tcn100.Bpl, .Tcn100.Tpa,
                                               aInclOs, aInclIp, 1)

            Tpr100.Ins = gGetTotalValue4Spec2(.Os100.Ins, .Os100.Tpa,
                                               .Ip100.Ins, .Ip100.Tpa,
                                               .Tpb100.Ins, .Tpb100.Tpa,
                                               .Tcn100.Ins, .Tcn100.Tpa,
                                               aInclOs, aInclIp, 1)

            Tpr100.Ia = gGetTotalValue4Spec2(.Os100.Ia, .Os100.Tpa,
                                              .Ip100.Ia, .Ip100.Tpa,
                                              .Tpb100.Ia, .Tpb100.Tpa,
                                              .Tcn100.Ia, .Tcn100.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr100.IaAdj = gGetTotalValue4Spec2(.Os100.IaAdj, .Os100.Tpa,
                                                 .Ip100.IaAdj, .Ip100.Tpa,
                                                 .Tpb100.IaAdj, .Tpb100.Tpa,
                                                 .Tcn100.IaAdj, .Tcn100.Tpa,
                                                 aInclOs, aInclIp, 2)

            Tpr100.Ca = gGetTotalValue4Spec2(.Os100.Ca, .Os100.Tpa,
                                              .Ip100.Ca, .Ip100.Tpa,
                                              .Tpb100.Ca, .Tpb100.Tpa,
                                              .Tcn100.Ca, .Tcn100.Tpa,
                                              aInclOs, aInclIp, 1)

            Tpr100.Fe = gGetTotalValue4Spec2(.Os100.Fe, .Os100.Tpa,
                                              .Ip100.Fe, .Ip100.Tpa,
                                              .Tpb100.Fe, .Tpb100.Tpa,
                                              .Tcn100.Fe, .Tcn100.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr100.FeAdj = gGetTotalValue4Spec2(.Os100.FeAdj, .Os100.Tpa,
                                                 .Ip100.FeAdj, .Ip100.Tpa,
                                                 .Tpb100.FeAdj, .Tpb100.Tpa,
                                                 .Tcn100.FeAdj, .Tcn100.Tpa,
                                                 aInclOs, aInclIp, 2)

            Tpr100.Al = gGetTotalValue4Spec2(.Os100.Al, .Os100.Tpa,
                                              .Ip100.Al, .Ip100.Tpa,
                                              .Tpb100.Al, .Tpb100.Tpa,
                                              .Tcn100.Al, .Tcn100.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr100.Mg = gGetTotalValue4Spec2(.Os100.Mg, .Os100.Tpa,
                                              .Ip100.Mg, .Ip100.Tpa,
                                              .Tpb100.Mg, .Tpb100.Tpa,
                                              .Tcn100.Mg, .Tcn100.Tpa,
                                              aInclOs, aInclIp, 2)

            Tpr100.WtPct = .Tpb100.WtPct + .Tcn100.WtPct
            If aInclOs Then
                Tpr100.WtPct = Tpr100.WtPct + .Os100.WtPct
            End If
            If aInclIp Then
                Tpr100.WtPct = Tpr100.WtPct + .Ip100.WtPct
            End If
        End With
        Return Tpr100
    End Function

    Private Function CalcTotPrSpec(ByVal Products As List(Of mProdInfoType), ByVal OnlyOnSpec As Boolean) As mProdInfoType
        Dim Tpr As New mProdInfoType()


        Dim TpaAl As Double = 0
        Dim TpaWAl As Double = 0
        Dim TpaBpl As Double = 0
        Dim TpaWBpl As Double = 0
        Dim TpaCa As Double = 0
        Dim TpaWCa As Double = 0
        Dim TpaCaOP2O5 As Double = 0
        Dim TpaWCaOP2O5 As Double = 0
        Dim TpaFe As Double = 0
        Dim TpaWFe As Double = 0
        Dim TpaFe2O3P2O5 As Double = 0
        Dim TpaWFe2O3P2O5 As Double = 0
        Dim TpaFeAdj As Double = 0
        Dim TpaWFeAdj As Double = 0
        Dim TpaIa As Double = 0
        Dim TpaWIa As Double = 0
        Dim TpaIaAdj As Double = 0
        Dim TpaWIaAdj As Double = 0
        Dim TpaIns As Double = 0
        Dim TpaWIns As Double = 0
        Dim TpaMer As Double = 0
        Dim TpaWMer As Double = 0
        Dim TpaMg As Double = 0
        Dim TpaWMg As Double = 0
        Dim TpaMgOP2O5 As Double = 0
        Dim TpaWMgOP2O5 As Double = 0

        For Each product In Products
            If (OnlyOnSpec And product.IsOnSpec) Or Not OnlyOnSpec Then
                If Not Single.IsNaN(product.Tpa) Then
                    Tpr.Tpa = Tpr.Tpa + product.Tpa
                    Tpr.WtPct = Tpr.WtPct + product.WtPct

                    If Not Single.IsNaN(product.Al) AndAlso product.Al > 0 Then
                        TpaAl = TpaAl + product.Tpa * product.Al
                        TpaWAl = TpaWAl + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Bpl) AndAlso product.Bpl > 0 Then
                        TpaBpl = TpaBpl + product.Tpa * product.Bpl
                        TpaWBpl = TpaWBpl + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Ca) AndAlso product.Ca > 0 Then
                        TpaCa = TpaCa + product.Tpa * product.Ca
                        TpaWCa = TpaWCa + product.Tpa
                    End If
                    If Not Single.IsNaN(product.CaOP2O5) AndAlso product.CaOP2O5 > 0 Then
                        TpaCaOP2O5 = TpaCaOP2O5 + product.Tpa * product.CaOP2O5
                        TpaWCaOP2O5 = TpaWCaOP2O5 + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Fe) AndAlso product.Fe > 0 Then
                        TpaFe = TpaFe + product.Tpa * product.Fe
                        TpaWFe = TpaWFe + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Fe2O3P2O5) AndAlso product.Fe2O3P2O5 > 0 Then
                        TpaFe2O3P2O5 = TpaFe2O3P2O5 + product.Tpa * product.Fe2O3P2O5
                        TpaWFe2O3P2O5 = TpaWFe2O3P2O5 + product.Tpa
                    End If
                    If Not Single.IsNaN(product.FeAdj) AndAlso product.FeAdj > 0 Then
                        TpaFeAdj = TpaFeAdj + product.Tpa * product.FeAdj
                        TpaWFeAdj = TpaWFeAdj + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Ia) AndAlso product.Ia > 0 Then
                        TpaIa = TpaIa + product.Tpa * product.Ia
                        TpaWIa = TpaWIa + product.Tpa
                    End If
                    If Not Single.IsNaN(product.IaAdj) AndAlso product.IaAdj > 0 Then
                        TpaIaAdj = TpaIaAdj + product.Tpa * product.IaAdj
                        TpaWIaAdj = TpaWIaAdj + product.Tpa
                    End If
                    If Not Single.IsNaN(product.IaAdj) AndAlso product.IaAdj > 0 Then
                        TpaIaAdj = TpaIaAdj + product.Tpa * product.IaAdj
                        TpaWIaAdj = TpaWIaAdj + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Ins) AndAlso product.Ins > 0 Then
                        TpaIns = TpaIns + product.Tpa * product.Ins
                        TpaWIns = TpaWIns + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Mer) AndAlso product.Mer > 0 Then
                        TpaMer = TpaMer + product.Tpa * product.Mer
                        TpaWMer = TpaWMer + product.Tpa
                    End If
                    If Not Single.IsNaN(product.Mg) AndAlso product.Mg > 0 Then
                        TpaMg = TpaMg + product.Tpa * product.Mg
                        TpaWMg = TpaWMg + product.Tpa
                    End If
                    If Not Single.IsNaN(product.MgOP2O5) AndAlso product.MgOP2O5 > 0 Then
                        TpaMgOP2O5 = TpaMgOP2O5 + product.Tpa * product.MgOP2O5
                        TpaWMgOP2O5 = TpaWMgOP2O5 + product.Tpa
                    End If

                End If
            End If
        Next

        Tpr.Al = TpaAl / TpaWAl
        Tpr.Bpl = TpaBpl / TpaWBpl
        Tpr.Ca = TpaCa / TpaWCa
        'Tpr.CaOP2O5 = TpaCaOP2O5 / TpaWCaOP2O5
        Tpr.Fe = TpaFe / TpaWFe
        'Tpr.Fe2O3P2O5 = TpaFe2O3P2O5 / TpaWFe2O3P2O5
        Tpr.FeAdj = TpaFeAdj / TpaWFeAdj
        Tpr.Ia = TpaIa / TpaWIa
        Tpr.IaAdj = TpaIaAdj / TpaWIaAdj
        Tpr.Ins = TpaIns / TpaWIns
        'Tpr.Mer = TpaMer / TpaWMer
        Tpr.Mg = TpaMg / TpaWMg
        'Tpr.MgOP2O5 = TpaMgOP2O5 / TpaWMgOP2O5

        Return Tpr
    End Function


    Private Sub FinalWtPctCalcs(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                            ByVal aCalcType As String,
                            ByVal aMineHasOffSpecPbPlt As Boolean,
                            ByVal aMineHasDoloflotPlant2010 As Boolean,
                            ByVal aMineHasDoloflotPlantFco As Boolean)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                'Recalc MtxTPA
                '06/24/2010, lss
                'Added .Os.Tpa
                .MtxTpaPc = .Cpb.Tpa + .Fpb.Tpa + .Cfd.Tpa + .Ffd.Tpa +
                        .Wcl.Tpa + .Ip.Tpa + .Os.Tpa

                If .MtxTpaPc <> 0 Then
                    .Os.WtPct = Round(.Os.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Os.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Cpb.WtPct = Round(.Cpb.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Cpb.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Fpb.WtPct = Round(.Fpb.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Fpb.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Tpb.WtPct = Round(.Tpb.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Tpb.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Ip.WtPct = Round(.Ip.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Ip.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Ccn.WtPct = Round(.Ccn.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Ccn.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Fcn.WtPct = Round(.Fcn.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Fcn.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Tcn.WtPct = Round(.Tcn.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Tcn.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Tpr.WtPct = Round(.Tpr.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Tpr.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Ttl.WtPct = Round(.Ttl.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Ttl.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Wcl.WtPct = Round(.Wcl.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Wcl.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .Cfd.WtPct = Round(.Cfd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Cfd.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Ffd.WtPct = Round(.Ffd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Ffd.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .Tfd.WtPct = Round(.Tfd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .Tfd.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .CpbRej.WtPct = Round(.CpbRej.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .CpbRej.WtPct = 0
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Private Sub FinalWtPctCalcs
                'New DfpFco
                If aMineHasOffSpecPbPlt = True Or
                aMineHasDoloflotPlantFco = True Then
                    If .MtxTpaPc <> 0 Then
                        .MgPltInp.WtPct = Round(.MgPltInp.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .MgPltInp.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .MgPltRej.WtPct = Round(.MgPltRej.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .MgPltRej.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .MgPltProd.WtPct = Round(.MgPltProd.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .MgPltProd.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .MgPltTcn.WtPct = Round(.MgPltTcn.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .MgPltTcn.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .MgPltTpr.WtPct = Round(.MgPltTpr.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .MgPltTpr.WtPct = 0
                    End If
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Private Sub FinalWtPctCalcs
                'Need to do both fine pebble and IP.
                If aMineHasDoloflotPlant2010 = True Then
                    If .MtxTpaPc <> 0 Then
                        .DfFpbInp.WtPct = Round(.DfFpbInp.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfFpbInp.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfFpbProd.WtPct = Round(.DfFpbProd.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfFpbProd.WtPct = 0
                    End If
                    '-----
                    If .MtxTpaPc <> 0 Then
                        .DfIpInp.WtPct = Round(.DfIpInp.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfIpInp.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfIpProd.WtPct = Round(.DfIpProd.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfIpProd.WtPct = 0
                    End If
                    '-----
                    If .MtxTpaPc <> 0 Then
                        .DfTcn.WtPct = Round(.DfTcn.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfTcn.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfTpr.WtPct = Round(.DfTpr.Tpa / .MtxTpaPc * 100, 2)
                    Else
                        .DfTpr.WtPct = 0
                    End If
                End If
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                'Recalc MtxTPA
                '08/22/2007 -- added .Os100.Tpa also.
                .MtxTPA = .Cpb100.Tpa + .Fpb100.Tpa + .Cfd100.Tpa + .Ffd100.Tpa +
                      .Wcl100.Tpa + .Ip100.Tpa + .Os100.Tpa

                If .MtxTPA <> 0 Then
                    .Os100.WtPct = Round(.Os100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Os100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Cpb100.WtPct = Round(.Cpb100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Cpb100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Fpb100.WtPct = Round(.Fpb100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Fpb100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Tpb100.WtPct = Round(.Tpb100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Tpb100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Ip100.WtPct = Round(.Ip100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ip100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Ccn100.WtPct = Round(.Ccn100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ccn100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Fcn100.WtPct = Round(.Fcn100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Fcn100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Tcn100.WtPct = Round(.Tcn100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Tcn100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Tpr100.WtPct = Round(.Tpr100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Tpr100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Ttl100.WtPct = Round(.Ttl100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ttl100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Wcl100.WtPct = Round(.Wcl100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Wcl100.WtPct = 0
                End If
                '-----
                If .MtxTPA <> 0 Then
                    .Cfd100.WtPct = Round(.Cfd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Cfd100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Ffd100.WtPct = Round(.Ffd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Ffd100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .Tfd100.WtPct = Round(.Tfd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .Tfd100.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .CpbRej100.WtPct = Round(.CpbRej100.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .CpbRej100.WtPct = 0
                End If

                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant
                'Off-spec pebble MgO plant

                'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO
                '------------------------------------------
                'Currently in Private Sub FinalWtPctCalcs

                If aMineHasOffSpecPbPlt = True Or
                aMineHasDoloflotPlantFco = True Then
                    If .MtxTPA <> 0 Then
                        .MgPltInp100.WtPct = Round(.MgPltInp100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .MgPltInp100.WtPct = 0
                    End If
                    If .MtxTPA <> 0 Then
                        .MgPltRej100.WtPct = Round(.MgPltRej100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .MgPltRej100.WtPct = 0
                    End If
                    If .MtxTPA <> 0 Then
                        .MgPltProd100.WtPct = Round(.MgPltProd100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .MgPltProd100.WtPct = 0
                    End If
                    If .MtxTPA <> 0 Then
                        .MgPltTcn100.WtPct = Round(.MgPltTcn100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .MgPltTcn100.WtPct = 0
                    End If
                    If .MtxTPA <> 0 Then
                        .MgPltTpr100.WtPct = Round(.MgPltTpr100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .MgPltTpr100.WtPct = 0
                    End If
                End If

                'Doloflot plant Ona
                'Doloflot plant Ona
                'Doloflot plant Ona

                'DOLOFLOT PLANT ONA
                '------------------
                'Currently in Private Sub FinalWtPctCalcs
                'Need to do both fine pebble and IP.
                If aMineHasDoloflotPlant2010 = True Then
                    If .MtxTpaPc <> 0 Then
                        .DfFpbInp100.WtPct = Round(.DfFpbInp100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfFpbInp100.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfFpbProd100.WtPct = Round(.DfFpbProd100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfFpbProd100.WtPct = 0
                    End If
                    '-----
                    If .MtxTpaPc <> 0 Then
                        .DfIpInp100.WtPct = Round(.DfIpInp100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfIpInp100.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfIpProd100.WtPct = Round(.DfIpProd100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfIpProd100.WtPct = 0
                    End If
                    '-----
                    If .MtxTpaPc <> 0 Then
                        .DfTcn100.WtPct = Round(.DfTcn100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfTcn100.WtPct = 0
                    End If
                    If .MtxTpaPc <> 0 Then
                        .DfTpr100.WtPct = Round(.DfTpr100.Tpa / .MtxTPA * 100, 2)
                    Else
                        .DfTpr100.WtPct = 0
                    End If
                End If
            End With
        End If
    End Sub

    Public Sub CalcDataFromSumDataMineable(ByRef aHoleData As gRawProspSplRdctnType,
                                       ByRef aSumData As gRawProspSplRdctnSumType,
                                       ByVal aRcvryParamsData As gDataRdctnParamsType)

        'This sub is used by the hole mineability determination functionality.
        'It is called from GetHoleMineabilitySimp.  It mostly deals with "ProdCoeff"
        'data.
        'Will not worry about matrix, overburden, etc. yards here since this
        'is not the place to determine Matrix "X" or Total "X".

        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient

        With aHoleData
            'Oversize PC
            .Os.Tpa = aSumData.Os.Tpa
            If aSumData.Os.TwBpl <> 0 Then
                .Os.Bpl = Round(aSumData.Os.BplTons / aSumData.Os.TwBpl, 1)
            Else
                .Os.Bpl = 0
            End If
            If aSumData.Os.TwIns <> 0 Then
                .Os.Ins = Round(aSumData.Os.InsTons / aSumData.Os.TwIns, 1)
            Else
                .Os.Ins = 0
            End If
            If aSumData.Os.TwIa <> 0 Then
                .Os.Ia = Round(aSumData.Os.IaTons / aSumData.Os.TwIa, 1)
            Else
                .Os.Ia = 0
            End If
            If aSumData.Os.TwIaAdj <> 0 Then
                .Os.IaAdj = Round(aSumData.Os.IaAdjTons / aSumData.Os.TwIaAdj, 1)
            Else
                .Os.IaAdj = 0
            End If
            If aSumData.Os.TwFe <> 0 Then
                .Os.Fe = Round(aSumData.Os.FeTons / aSumData.Os.TwFe, 1)
            Else
                .Os.Fe = 0
            End If
            If aSumData.Os.TwFeAdj <> 0 Then
                .Os.FeAdj = Round(aSumData.Os.FeAdjTons / aSumData.Os.TwFeAdj, 1)
            Else
                .Os.FeAdj = 0
            End If
            If aSumData.Os.TwAl <> 0 Then
                .Os.Al = Round(aSumData.Os.AlTons / aSumData.Os.TwAl, 1)
            Else
                .Os.Al = 0
            End If
            If aSumData.Os.TwMg <> 0 Then
                .Os.Mg = Round(aSumData.Os.MgTons / aSumData.Os.TwMg, 1)
            Else
                .Os.Mg = 0
            End If
            If aSumData.Os.TwCa <> 0 Then
                .Os.Ca = Round(aSumData.Os.CaTons / aSumData.Os.TwCa, 1)
            Else
                .Os.Ca = 0
            End If

            'Coarse pebble PC
            .Cpb.Tpa = aSumData.Cpb.Tpa
            If aSumData.Cpb.TwBpl <> 0 Then
                .Cpb.Bpl = Round(aSumData.Cpb.BplTons / aSumData.Cpb.TwBpl, 1)
            Else
                .Cpb.Bpl = 0
            End If
            If aSumData.Cpb.TwIns <> 0 Then
                .Cpb.Ins = Round(aSumData.Cpb.InsTons / aSumData.Cpb.TwIns, 1)
            Else
                .Cpb.Ins = 0
            End If
            If aSumData.Cpb.TwIa <> 0 Then
                .Cpb.Ia = Round(aSumData.Cpb.IaTons / aSumData.Cpb.TwIa, 1)
            Else
                .Cpb.Ia = 0
            End If
            If aSumData.Cpb.TwIaAdj <> 0 Then
                .Cpb.IaAdj = Round(aSumData.Cpb.IaAdjTons / aSumData.Cpb.TwIaAdj, 1)
            Else
                .Cpb.IaAdj = 0
            End If
            If aSumData.Cpb.TwFe <> 0 Then
                .Cpb.Fe = Round(aSumData.Cpb.FeTons / aSumData.Cpb.TwFe, 1)
            Else
                .Cpb.Fe = 0
            End If
            If aSumData.Cpb.TwFeAdj <> 0 Then
                .Cpb.FeAdj = Round(aSumData.Cpb.FeAdjTons / aSumData.Cpb.TwFeAdj, 1)
            Else
                .Cpb.FeAdj = 0
            End If
            If aSumData.Cpb.TwAl <> 0 Then
                .Cpb.Al = Round(aSumData.Cpb.AlTons / aSumData.Cpb.TwAl, 1)
            Else
                .Cpb.Al = 0
            End If
            If aSumData.Cpb.TwMg <> 0 Then
                .Cpb.Mg = Round(aSumData.Cpb.MgTons / aSumData.Cpb.TwMg, 1)
            Else
                .Cpb.Mg = 0
            End If
            If aSumData.Cpb.TwCa <> 0 Then
                .Cpb.Ca = Round(aSumData.Cpb.CaTons / aSumData.Cpb.TwCa, 1)
            Else
                .Cpb.Ca = 0
            End If

            'Fine pebble PC
            .Fpb.Tpa = aSumData.Fpb.Tpa
            If aSumData.Fpb.TwBpl <> 0 Then
                .Fpb.Bpl = Round(aSumData.Fpb.BplTons / aSumData.Fpb.TwBpl, 1)
            Else
                .Fpb.Bpl = 0
            End If
            If aSumData.Fpb.TwIns <> 0 Then
                .Fpb.Ins = Round(aSumData.Fpb.InsTons / aSumData.Fpb.TwIns, 1)
            Else
                .Fpb.Ins = 0
            End If
            If aSumData.Fpb.TwIa <> 0 Then
                .Fpb.Ia = Round(aSumData.Fpb.IaTons / aSumData.Fpb.TwIa, 1)
            Else
                .Fpb.Ia = 0
            End If
            If aSumData.Fpb.TwIaAdj <> 0 Then
                .Fpb.IaAdj = Round(aSumData.Fpb.IaAdjTons / aSumData.Fpb.TwIaAdj, 1)
            Else
                .Fpb.IaAdj = 0
            End If
            If aSumData.Fpb.TwFe <> 0 Then
                .Fpb.Fe = Round(aSumData.Fpb.FeTons / aSumData.Fpb.TwFe, 1)
            Else
                .Fpb.Fe = 0
            End If
            If aSumData.Fpb.TwFeAdj <> 0 Then
                .Fpb.FeAdj = Round(aSumData.Fpb.FeAdjTons / aSumData.Fpb.TwFeAdj, 1)
            Else
                .Fpb.FeAdj = 0
            End If
            If aSumData.Fpb.TwAl <> 0 Then
                .Fpb.Al = Round(aSumData.Fpb.AlTons / aSumData.Fpb.TwAl, 1)
            Else
                .Fpb.Al = 0
            End If
            If aSumData.Fpb.TwMg <> 0 Then
                .Fpb.Mg = Round(aSumData.Fpb.MgTons / aSumData.Fpb.TwMg, 1)
            Else
                .Fpb.Mg = 0
            End If
            If aSumData.Fpb.TwCa <> 0 Then
                .Fpb.Ca = Round(aSumData.Fpb.CaTons / aSumData.Fpb.TwCa, 1)
            Else
                .Fpb.Ca = 0
            End If

            'IP PC
            .Ip.Tpa = aSumData.Ip.Tpa
            If aSumData.Ip.TwBpl <> 0 Then
                .Ip.Bpl = Round(aSumData.Ip.BplTons / aSumData.Ip.TwBpl, 1)
            Else
                .Ip.Bpl = 0
            End If
            If aSumData.Ip.TwIns <> 0 Then
                .Ip.Ins = Round(aSumData.Ip.InsTons / aSumData.Ip.TwIns, 1)
            Else
                .Ip.Ins = 0
            End If
            If aSumData.Ip.TwIa <> 0 Then
                .Ip.Ia = Round(aSumData.Ip.IaTons / aSumData.Ip.TwIa, 1)
            Else
                .Ip.Ia = 0
            End If
            If aSumData.Ip.TwIaAdj <> 0 Then
                .Ip.IaAdj = Round(aSumData.Ip.IaAdjTons / aSumData.Ip.TwIaAdj, 1)
            Else
                .Ip.IaAdj = 0
            End If
            If aSumData.Ip.TwFe <> 0 Then
                .Ip.Fe = Round(aSumData.Ip.FeTons / aSumData.Ip.TwFe, 1)
            Else
                .Ip.Fe = 0
            End If
            If aSumData.Ip.TwFeAdj <> 0 Then
                .Ip.FeAdj = Round(aSumData.Ip.FeAdjTons / aSumData.Ip.TwFeAdj, 1)
            Else
                .Ip.FeAdj = 0
            End If
            If aSumData.Ip.TwAl <> 0 Then
                .Ip.Al = Round(aSumData.Ip.AlTons / aSumData.Ip.TwAl, 1)
            Else
                .Ip.Al = 0
            End If
            If aSumData.Ip.TwMg <> 0 Then
                .Ip.Mg = Round(aSumData.Ip.MgTons / aSumData.Ip.TwMg, 1)
            Else
                .Ip.Mg = 0
            End If
            If aSumData.Ip.TwCa <> 0 Then
                .Ip.Ca = Round(aSumData.Ip.CaTons / aSumData.Ip.TwCa, 1)
            Else
                .Ip.Ca = 0
            End If

            'Coarse concentrate PC
            .Ccn.Tpa = aSumData.Ccn.Tpa
            If aSumData.Ccn.TwBpl <> 0 Then
                .Ccn.Bpl = Round(aSumData.Ccn.BplTons / aSumData.Ccn.TwBpl, 1)
            Else
                .Ccn.Bpl = 0
            End If
            If aSumData.Ccn.TwIns <> 0 Then
                .Ccn.Ins = Round(aSumData.Ccn.InsTons / aSumData.Ccn.TwIns, 1)
            Else
                .Ccn.Ins = 0
            End If
            If aSumData.Ccn.TwIa <> 0 Then
                .Ccn.Ia = Round(aSumData.Ccn.IaTons / aSumData.Ccn.TwIa, 1)
            Else
                .Ccn.Ia = 0
            End If
            If aSumData.Ccn.TwIaAdj <> 0 Then
                .Ccn.IaAdj = Round(aSumData.Ccn.IaAdjTons / aSumData.Ccn.TwIaAdj, 1)
            Else
                .Ccn.IaAdj = 0
            End If
            If aSumData.Ccn.TwFe <> 0 Then
                .Ccn.Fe = Round(aSumData.Ccn.FeTons / aSumData.Ccn.TwFe, 1)
            Else
                .Ccn.Fe = 0
            End If
            If aSumData.Ccn.TwFeAdj <> 0 Then
                .Ccn.FeAdj = Round(aSumData.Ccn.FeAdjTons / aSumData.Ccn.TwFeAdj, 1)
            Else
                .Ccn.FeAdj = 0
            End If
            If aSumData.Ccn.TwAl <> 0 Then
                .Ccn.Al = Round(aSumData.Ccn.AlTons / aSumData.Ccn.TwAl, 1)
            Else
                .Ccn.Al = 0
            End If
            If aSumData.Ccn.TwMg <> 0 Then
                .Ccn.Mg = Round(aSumData.Ccn.MgTons / aSumData.Ccn.TwMg, 1)
            Else
                .Ccn.Mg = 0
            End If
            If aSumData.Ccn.TwCa <> 0 Then
                .Ccn.Ca = Round(aSumData.Ccn.CaTons / aSumData.Ccn.TwCa, 1)
            Else
                .Ccn.Ca = 0
            End If

            'Fine concentrate PC
            .Fcn.Tpa = aSumData.Fcn.Tpa
            If aSumData.Fcn.TwBpl <> 0 Then
                .Fcn.Bpl = Round(aSumData.Fcn.BplTons / aSumData.Fcn.TwBpl, 1)
            Else
                .Fcn.Bpl = 0
            End If
            If aSumData.Fcn.TwIns <> 0 Then
                .Fcn.Ins = Round(aSumData.Fcn.InsTons / aSumData.Fcn.TwIns, 1)
            Else
                .Fcn.Ins = 0
            End If
            If aSumData.Fcn.TwIa <> 0 Then
                .Fcn.Ia = Round(aSumData.Fcn.IaTons / aSumData.Fcn.TwIa, 1)
            Else
                .Fcn.Ia = 0
            End If
            If aSumData.Fcn.TwIaAdj <> 0 Then
                .Fcn.IaAdj = Round(aSumData.Fcn.IaAdjTons / aSumData.Fcn.TwIaAdj, 1)
            Else
                .Fcn.IaAdj = 0
            End If
            If aSumData.Fcn.TwFe <> 0 Then
                .Fcn.Fe = Round(aSumData.Fcn.FeTons / aSumData.Fcn.TwFe, 1)
            Else
                .Fcn.Fe = 0
            End If
            If aSumData.Fcn.TwFeAdj <> 0 Then
                .Fcn.FeAdj = Round(aSumData.Fcn.FeAdjTons / aSumData.Fcn.TwFeAdj, 1)
            Else
                .Fcn.FeAdj = 0
            End If
            If aSumData.Fcn.TwAl <> 0 Then
                .Fcn.Al = Round(aSumData.Fcn.AlTons / aSumData.Fcn.TwAl, 1)
            Else
                .Fcn.Al = 0
            End If
            If aSumData.Fcn.TwMg <> 0 Then
                .Fcn.Mg = Round(aSumData.Fcn.MgTons / aSumData.Fcn.TwMg, 1)
            Else
                .Fcn.Mg = 0
            End If
            If aSumData.Fcn.TwCa <> 0 Then
                .Fcn.Ca = Round(aSumData.Fcn.CaTons / aSumData.Fcn.TwCa, 1)
            Else
                .Fcn.Ca = 0
            End If

            'Total concentrate PC
            aSumData.Tcn.Tpa = aSumData.Ccn.Tpa + aSumData.Fcn.Tpa

            'Waste clay PC
            .Wcl.Tpa = aSumData.Wcl.Tpa
            If aSumData.Wcl.TwBpl <> 0 Then
                .Wcl.Bpl = Round(aSumData.Wcl.BplTons / aSumData.Wcl.TwBpl, 1)
            Else
                .Wcl.Bpl = 0
            End If

            'Coarse feed PC
            .Cfd.Tpa = aSumData.Cfd.Tpa
            If aSumData.Cfd.TwBpl <> 0 Then
                .Cfd.Bpl = Round(aSumData.Cfd.BplTons / aSumData.Cfd.TwBpl, 1)
            Else
                .Cfd.Bpl = 0
            End If

            'Fine feed PC
            .Ffd.Tpa = aSumData.Ffd.Tpa
            If aSumData.Ffd.TwBpl <> 0 Then
                .Ffd.Bpl = Round(aSumData.Ffd.BplTons / aSumData.Ffd.TwBpl, 1)
            Else
                .Ffd.Bpl = 0
            End If

            'Matrix PC
            .MtxTpaPc = aSumData.MtxTPA

            'Will calculate the matrix density here as well. PC
            If aSumData.MtxFt <> 0 Then
                .MtxDensity = Round(aSumData.MtxDensityFt / aSumData.MtxFt, 1)
            Else
                .MtxDensity = 0
            End If

            'We are currently in Sub CalcDataFromSumDataMineable.

            'Total pebble PC
            CalcTotPb(aHoleData, "ProdCoeff")

            'Total concentrate PC
            CalcTotCn(aHoleData, "ProdCoeff")

            'Total product PC
            CalcTotPr(aHoleData, "ProdCoeff")

            'Total feed PC
            .Tfd.Tpa = .Cfd.Tpa + .Ffd.Tpa
            .Tfd.Bpl = gGetTotalValue(.Cfd.Bpl, .Cfd.Tpa, .Ffd.Bpl, .Ffd.Tpa, 1)

            'Total tails PC
            .Ttl.Tpa = aSumData.Ttl.Tpa
            If aSumData.Ttl.TwBpl <> 0 Then
                .Ttl.Bpl = Round(aSumData.Ttl.BplTons / aSumData.Ttl.TwBpl, 1)
            Else
                .Ttl.Bpl = 0
            End If

            'Will not worry about Matrix "X" or Total "X" here since we really
            'don't know what the mineable product TPA's are yet.

            'Weight% PC
            If aSumData.MtxTPA <> 0 Then
                .Cpb.WtPct = Round(aSumData.Cpb.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Cpb.WtPct = 0
            End If

            If aSumData.MtxTPA <> 0 Then
                .Fpb.WtPct = Round(aSumData.Fpb.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Fpb.WtPct = 0
            End If

            .Tpb.WtPct = .Cpb.WtPct + .Fpb.WtPct

            If aSumData.MtxTPA <> 0 Then
                .Tcn.WtPct = Round(aSumData.Tcn.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Tcn.WtPct = 0
            End If

            .Tpr.WtPct = .Tpb.WtPct + .Tcn.WtPct

            If aSumData.MtxTPA <> 0 Then
                .Ttl.WtPct = Round(aSumData.Ttl.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Ttl.WtPct = 0
            End If

            If aSumData.MtxTPA <> 0 Then
                .Wcl.WtPct = Round(aSumData.Wcl.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Wcl.WtPct = 0
            End If

            If aSumData.MtxTPA <> 0 Then
                .Cfd.WtPct = Round(aSumData.Cfd.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Cfd.WtPct = 0
            End If

            If aSumData.MtxTPA <> 0 Then
                .Ffd.WtPct = Round(aSumData.Ffd.Tpa / aSumData.MtxTPA * 100, 2)
            Else
                .Ffd.WtPct = 0
            End If

            .Tfd.WtPct = .Cfd.WtPct + .Ffd.WtPct

            'Off-spec pebble MgO plant
            'Off-spec pebble MgO plant
            'Off-spec pebble MgO plant

            'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO   PC
            '------------------------------------------
            'Currently in Public Sub CalcDataFromSumDataMineable
            'New DfpFco
            If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                'Off-spec pebble MgO plant input  PC
                .MgPltInp.Tpa = aSumData.MgPltInp.Tpa
                If aSumData.MgPltInp.TwBpl <> 0 Then
                    .MgPltInp.Bpl = Round(aSumData.MgPltInp.BplTons / aSumData.MgPltInp.TwBpl, 1)
                Else
                    .MgPltInp.Bpl = 0
                End If
                If aSumData.MgPltInp.TwIns <> 0 Then
                    .MgPltInp.Ins = Round(aSumData.MgPltInp.InsTons / aSumData.MgPltInp.TwIns, 1)
                Else
                    .MgPltInp.Ins = 0
                End If
                If aSumData.MgPltInp.TwIa <> 0 Then
                    .MgPltInp.Ia = Round(aSumData.MgPltInp.IaTons / aSumData.MgPltInp.TwIa, 1)
                Else
                    .MgPltInp.Ia = 0
                End If
                If aSumData.MgPltInp.TwFe <> 0 Then
                    .MgPltInp.Fe = Round(aSumData.MgPltInp.FeTons / aSumData.MgPltInp.TwFe, 1)
                Else
                    .MgPltInp.Fe = 0
                End If

                'Currently in Sub CalcDataFromSumDataMineable().
                '03/24/2011**, lss
                If aSumData.MgPltInp.TwIaAdj <> 0 Then
                    .MgPltInp.IaAdj = Round(aSumData.MgPltInp.IaAdjTons / aSumData.MgPltInp.TwIaAdj, 1)
                Else
                    .MgPltInp.IaAdj = 0
                End If
                If aSumData.MgPltInp.TwFeAdj <> 0 Then
                    .MgPltInp.FeAdj = Round(aSumData.MgPltInp.FeAdjTons / aSumData.MgPltInp.TwFeAdj, 1)
                Else
                    .MgPltInp.FeAdj = 0
                End If

                If aSumData.MgPltInp.TwAl <> 0 Then
                    .MgPltInp.Al = Round(aSumData.MgPltInp.AlTons / aSumData.MgPltInp.TwAl, 1)
                Else
                    .MgPltInp.Al = 0
                End If
                If aSumData.MgPltInp.TwMg <> 0 Then
                    .MgPltInp.Mg = Round(aSumData.MgPltInp.MgTons / aSumData.MgPltInp.TwMg, 1)
                Else
                    .MgPltInp.Mg = 0
                End If
                If aSumData.MgPltInp.TwCa <> 0 Then
                    .MgPltInp.Ca = Round(aSumData.MgPltInp.CaTons / aSumData.MgPltInp.TwCa, 1)
                Else
                    .MgPltInp.Ca = 0
                End If

                'Off-spec pebble MgO plant reject  PC
                .MgPltRej.Tpa = aSumData.MgPltRej.Tpa
                If aSumData.MgPltRej.TwBpl <> 0 Then
                    .MgPltRej.Bpl = Round(aSumData.MgPltRej.BplTons / aSumData.MgPltRej.TwBpl, 1)
                Else
                    .MgPltRej.Bpl = 0
                End If
                If aSumData.MgPltRej.TwIns <> 0 Then
                    .MgPltRej.Ins = Round(aSumData.MgPltRej.InsTons / aSumData.MgPltRej.TwIns, 1)
                Else
                    .MgPltRej.Ins = 0
                End If
                If aSumData.MgPltRej.TwIa <> 0 Then
                    .MgPltRej.Ia = Round(aSumData.MgPltRej.IaTons / aSumData.MgPltRej.TwIa, 1)
                Else
                    .MgPltRej.Ia = 0
                End If
                If aSumData.MgPltRej.TwFe <> 0 Then
                    .MgPltRej.Fe = Round(aSumData.MgPltRej.FeTons / aSumData.MgPltRej.TwFe, 1)
                Else
                    .MgPltRej.Fe = 0
                End If

                '03/24/2011**, lss
                If aSumData.MgPltRej.TwIaAdj <> 0 Then
                    .MgPltRej.IaAdj = Round(aSumData.MgPltRej.IaAdjTons / aSumData.MgPltRej.TwIaAdj, 1)
                Else
                    .MgPltRej.IaAdj = 0
                End If
                If aSumData.MgPltRej.TwFeAdj <> 0 Then
                    .MgPltRej.FeAdj = Round(aSumData.MgPltRej.FeAdjTons / aSumData.MgPltRej.TwFeAdj, 1)
                Else
                    .MgPltRej.FeAdj = 0
                End If

                If aSumData.MgPltRej.TwAl <> 0 Then
                    .MgPltRej.Al = Round(aSumData.MgPltRej.AlTons / aSumData.MgPltRej.TwAl, 1)
                Else
                    .MgPltRej.Al = 0
                End If
                If aSumData.MgPltRej.TwMg <> 0 Then
                    .MgPltRej.Mg = Round(aSumData.MgPltRej.MgTons / aSumData.MgPltRej.TwMg, 1)
                Else
                    .MgPltRej.Mg = 0
                End If
                If aSumData.MgPltRej.TwCa <> 0 Then
                    .MgPltRej.Ca = Round(aSumData.MgPltRej.CaTons / aSumData.MgPltRej.TwCa, 1)
                Else
                    .MgPltRej.Ca = 0
                End If

                'Off-spec pebble MgO plant product  PC
                .MgPltProd.Tpa = aSumData.MgPltProd.Tpa
                If aSumData.MgPltProd.TwBpl <> 0 Then
                    .MgPltProd.Bpl = Round(aSumData.MgPltProd.BplTons / aSumData.MgPltProd.TwBpl, 1)
                Else
                    .MgPltProd.Bpl = 0
                End If
                If aSumData.MgPltProd.TwIns <> 0 Then
                    .MgPltProd.Ins = Round(aSumData.MgPltProd.InsTons / aSumData.MgPltProd.TwIns, 1)
                Else
                    .MgPltProd.Ins = 0
                End If
                If aSumData.MgPltProd.TwIa <> 0 Then
                    .MgPltProd.Ia = Round(aSumData.MgPltProd.IaTons / aSumData.MgPltProd.TwIa, 1)
                Else
                    .MgPltProd.Ia = 0
                End If
                If aSumData.MgPltProd.TwFe <> 0 Then
                    .MgPltProd.Fe = Round(aSumData.MgPltProd.FeTons / aSumData.MgPltProd.TwFe, 1)
                Else
                    .MgPltProd.Fe = 0
                End If

                '03/24/2011**, lss
                If aSumData.MgPltProd.TwIaAdj <> 0 Then
                    .MgPltProd.IaAdj = Round(aSumData.MgPltProd.IaAdjTons / aSumData.MgPltProd.TwIaAdj, 1)
                Else
                    .MgPltProd.IaAdj = 0
                End If
                If aSumData.MgPltProd.TwFeAdj <> 0 Then
                    .MgPltProd.FeAdj = Round(aSumData.MgPltProd.FeAdjTons / aSumData.MgPltProd.TwFeAdj, 1)
                Else
                    .MgPltProd.FeAdj = 0
                End If

                If aSumData.MgPltProd.TwAl <> 0 Then
                    .MgPltProd.Al = Round(aSumData.MgPltProd.AlTons / aSumData.MgPltProd.TwAl, 1)
                Else
                    .MgPltProd.Al = 0
                End If
                If aSumData.MgPltProd.TwMg <> 0 Then
                    .MgPltProd.Mg = Round(aSumData.MgPltProd.MgTons / aSumData.MgPltProd.TwMg, 1)
                Else
                    .MgPltProd.Mg = 0
                End If
                If aSumData.MgPltProd.TwCa <> 0 Then
                    .MgPltProd.Ca = Round(aSumData.MgPltProd.CaTons / aSumData.MgPltProd.TwCa, 1)
                Else
                    .MgPltProd.Ca = 0
                End If
            End If

            'Doloflot plant Ona
            'Doloflot plant Ona
            'Doloflot plant Ona

            'DOLOFLOT PLANT ONA    PC
            '------------------
            'Currently in Public Sub CalcDataFromSumDataComp

            If aRcvryParamsData.UseDoloflotPlant2010 Then
                'Doloflot plant fine pebble input PC
                .DfFpbInp.Tpa = aSumData.DfFpbInp.Tpa
                If aSumData.DfFpbInp.TwBpl <> 0 Then
                    .DfFpbInp.Bpl = Round(aSumData.DfFpbInp.BplTons / aSumData.DfFpbInp.TwBpl, 1)
                Else
                    .DfFpbInp.Bpl = 0
                End If
                If aSumData.DfFpbInp.TwIns <> 0 Then
                    .DfFpbInp.Ins = Round(aSumData.DfFpbInp.InsTons / aSumData.DfFpbInp.TwIns, 1)
                Else
                    .DfFpbInp.Ins = 0
                End If
                If aSumData.DfFpbInp.TwIa <> 0 Then
                    .DfFpbInp.Ia = Round(aSumData.DfFpbInp.IaTons / aSumData.DfFpbInp.TwIa, 2)
                Else
                    .DfFpbInp.Ia = 0
                End If
                If aSumData.DfFpbInp.TwFe <> 0 Then
                    .DfFpbInp.Fe = Round(aSumData.DfFpbInp.FeTons / aSumData.DfFpbInp.TwFe, 2)
                Else
                    .DfFpbInp.Fe = 0
                End If
                If aSumData.DfFpbInp.TwAl <> 0 Then
                    .DfFpbInp.Al = Round(aSumData.DfFpbInp.AlTons / aSumData.DfFpbInp.TwAl, 2)
                Else
                    .DfFpbInp.Al = 0
                End If
                If aSumData.DfFpbInp.TwMg <> 0 Then
                    .DfFpbInp.Mg = Round(aSumData.DfFpbInp.MgTons / aSumData.DfFpbInp.TwMg, 2)
                Else
                    .DfFpbInp.Mg = 0
                End If
                If aSumData.DfFpbInp.TwCa <> 0 Then
                    .DfFpbInp.Ca = Round(aSumData.DfFpbInp.CaTons / aSumData.DfFpbInp.TwCa, 1)
                Else
                    .DfFpbInp.Ca = 0
                End If

                'Doloflot plant fine pebble reject PC -- No reject for Doloflot plant!

                'Doloflot plant fine pebble product PC
                .DfFpbProd.Tpa = aSumData.DfFpbProd.Tpa
                If aSumData.DfFpbProd.TwBpl <> 0 Then
                    .DfFpbProd.Bpl = Round(aSumData.DfFpbProd.BplTons / aSumData.DfFpbProd.TwBpl, 1)
                Else
                    .DfFpbProd.Bpl = 0
                End If
                If aSumData.DfFpbProd.TwIns <> 0 Then
                    .DfFpbProd.Ins = Round(aSumData.DfFpbProd.InsTons / aSumData.DfFpbProd.TwIns, 1)
                Else
                    .DfFpbProd.Ins = 0
                End If
                If aSumData.DfFpbProd.TwIa <> 0 Then
                    .DfFpbProd.Ia = Round(aSumData.DfFpbProd.IaTons / aSumData.DfFpbProd.TwIa, 2)
                Else
                    .DfFpbProd.Ia = 0
                End If
                If aSumData.DfFpbProd.TwFe <> 0 Then
                    .DfFpbProd.Fe = Round(aSumData.DfFpbProd.FeTons / aSumData.DfFpbProd.TwFe, 2)
                Else
                    .DfFpbProd.Fe = 0
                End If
                If aSumData.DfFpbProd.TwAl <> 0 Then
                    .DfFpbProd.Al = Round(aSumData.DfFpbProd.AlTons / aSumData.DfFpbProd.TwAl, 2)
                Else
                    .DfFpbProd.Al = 0
                End If
                If aSumData.DfFpbProd.TwMg <> 0 Then
                    .DfFpbProd.Mg = Round(aSumData.DfFpbProd.MgTons / aSumData.DfFpbProd.TwMg, 2)
                Else
                    .DfFpbProd.Mg = 0
                End If
                If aSumData.DfFpbProd.TwCa <> 0 Then
                    .DfFpbProd.Ca = Round(aSumData.DfFpbProd.CaTons / aSumData.DfFpbProd.TwCa, 1)
                Else
                    .DfFpbProd.Ca = 0
                End If
            End If
            '-----
            If aRcvryParamsData.UseDoloflotPlant2010 Then
                'Doloflot plant IP input PC
                .DfIpInp.Tpa = aSumData.DfIpInp.Tpa
                If aSumData.DfIpInp.TwBpl <> 0 Then
                    .DfIpInp.Bpl = Round(aSumData.DfIpInp.BplTons / aSumData.DfIpInp.TwBpl, 1)
                Else
                    .DfIpInp.Bpl = 0
                End If
                If aSumData.DfIpInp.TwIns <> 0 Then
                    .DfIpInp.Ins = Round(aSumData.DfIpInp.InsTons / aSumData.DfIpInp.TwIns, 1)
                Else
                    .DfIpInp.Ins = 0
                End If
                If aSumData.DfIpInp.TwIa <> 0 Then
                    .DfIpInp.Ia = Round(aSumData.DfIpInp.IaTons / aSumData.DfIpInp.TwIa, 2)
                Else
                    .DfIpInp.Ia = 0
                End If
                If aSumData.DfIpInp.TwFe <> 0 Then
                    .DfIpInp.Fe = Round(aSumData.DfIpInp.FeTons / aSumData.DfIpInp.TwFe, 2)
                Else
                    .DfIpInp.Fe = 0
                End If
                If aSumData.DfIpInp.TwAl <> 0 Then
                    .DfIpInp.Al = Round(aSumData.DfIpInp.AlTons / aSumData.DfIpInp.TwAl, 2)
                Else
                    .DfIpInp.Al = 0
                End If
                If aSumData.DfIpInp.TwMg <> 0 Then
                    .DfIpInp.Mg = Round(aSumData.DfIpInp.MgTons / aSumData.DfIpInp.TwMg, 2)
                Else
                    .DfIpInp.Mg = 0
                End If
                If aSumData.DfIpInp.TwCa <> 0 Then
                    .DfIpInp.Ca = Round(aSumData.DfIpInp.CaTons / aSumData.DfIpInp.TwCa, 1)
                Else
                    .DfIpInp.Ca = 0
                End If

                'Doloflot plant IP product PC
                .DfIpProd.Tpa = aSumData.DfIpProd.Tpa
                If aSumData.DfIpProd.TwBpl <> 0 Then
                    .DfIpProd.Bpl = Round(aSumData.DfIpProd.BplTons / aSumData.DfIpProd.TwBpl, 1)
                Else
                    .DfIpProd.Bpl = 0
                End If
                If aSumData.DfIpProd.TwIns <> 0 Then
                    .DfIpProd.Ins = Round(aSumData.DfIpProd.InsTons / aSumData.DfIpProd.TwIns, 1)
                Else
                    .DfIpProd.Ins = 0
                End If
                If aSumData.DfIpProd.TwIa <> 0 Then
                    .DfIpProd.Ia = Round(aSumData.DfIpProd.IaTons / aSumData.DfIpProd.TwIa, 2)
                Else
                    .DfIpProd.Ia = 0
                End If
                If aSumData.DfIpProd.TwFe <> 0 Then
                    .DfIpProd.Fe = Round(aSumData.DfIpProd.FeTons / aSumData.DfIpProd.TwFe, 2)
                Else
                    .DfIpProd.Fe = 0
                End If
                If aSumData.DfIpProd.TwAl <> 0 Then
                    .DfIpProd.Al = Round(aSumData.DfIpProd.AlTons / aSumData.DfIpProd.TwAl, 2)
                Else
                    .DfIpProd.Al = 0
                End If
                If aSumData.DfIpProd.TwMg <> 0 Then
                    .DfIpProd.Mg = Round(aSumData.DfIpProd.MgTons / aSumData.DfIpProd.TwMg, 2)
                Else
                    .DfIpProd.Mg = 0
                End If
                If aSumData.DfIpProd.TwCa <> 0 Then
                    .DfIpProd.Ca = Round(aSumData.DfIpProd.CaTons / aSumData.DfIpProd.TwCa, 1)
                Else
                    .DfIpProd.Ca = 0
                End If
            End If
        End With

        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect

        With aHoleData
            'Oversize 100%
            .Os100.Tpa = aSumData.Os100.Tpa

            'Coarse pebble 100%
            .Cpb100.Tpa = aSumData.Cpb100.Tpa

            'Fine pebble 100%
            .Fpb100.Tpa = aSumData.Fpb100.Tpa

            'IP 100%
            .Ip100.Tpa = aSumData.Ip100.Tpa

            'Coarse concentrate 100%
            .Ccn100.Tpa = aSumData.Ccn100.Tpa

            'Fine concentrate 100%
            .Fcn100.Tpa = aSumData.Fcn100.Tpa

            'OFFSPEC PEBBLE PLANT or DOLOFLOT PLANT FCO    100%
            '------------------------------------------
            'Currently in Public Sub CalcDataFromSumDataMineable

            If aRcvryParamsData.UseOrigMgoPlant Or aRcvryParamsData.UseDoloflotPlantFco Then
                .MgPltInp100.Tpa = aSumData.MgPltInp100.Tpa
                .MgPltRej100.Tpa = aSumData.MgPltRej100.Tpa
                .MgPltProd100.Tpa = aSumData.MgPltProd100.Tpa
            End If

            'DOLOFLOT PLANT ONA    100%
            '------------------
            'Currently in Public Sub CalcDataFromSumDataMineable

            If aRcvryParamsData.UseDoloflotPlant2010 Then
                .DfFpbInp100.Tpa = aSumData.DfFpbInp100.Tpa
                .DfFpbProd100.Tpa = aSumData.DfFpbProd100.Tpa
                '-----
                .DfIpInp100.Tpa = aSumData.DfFpbInp100.Tpa
                .DfIpProd100.Tpa = aSumData.DfIpProd100.Tpa
            End If
        End With
    End Sub

    Public Function gGetTotalValue4Spec(ByVal aValue1 As Single,
                                    ByVal aTpa1 As Single,
                                    ByVal aValue2 As Single,
                                    ByVal aTpa2 As Single,
                                    ByVal aValue3 As Single,
                                    ByVal aTpa3 As Single,
                                    ByVal aValue4 As Single,
                                    ByVal aTpa4 As Single,
                                    ByVal aInclValue1 As Boolean,
                                    ByVal aRound As Integer) As Single

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim TpaWVal As Double
        Dim TpaVal As Double

        gGetTotalValue4Spec = 0

        TpaWVal = 0
        TpaVal = 0

        If aInclValue1 = True Then
            TpaVal = aTpa1 * aValue1 + aTpa2 * aValue2 +
                 aTpa3 * aValue3 + aTpa4 * aValue4

            If aValue1 > 0 Then
                TpaWVal = TpaWVal + aTpa1
            End If
            If aValue2 > 0 Then
                TpaWVal = TpaWVal + aTpa2
            End If
            If aValue3 > 0 Then
                TpaWVal = TpaWVal + aTpa3
            End If
            If aValue4 > 0 Then
                TpaWVal = TpaWVal + aTpa4
            End If

            If TpaWVal <> 0 Then
                gGetTotalValue4Spec = gRound(TpaVal / TpaWVal, aRound)
            Else
                gGetTotalValue4Spec = 0
            End If
        Else
            'Don't include the 1st value -- this will be the oversize.
            TpaVal = aTpa2 * aValue2 +
                 aTpa3 * aValue3 + aTpa4 * aValue4

            If aValue2 > 0 Then
                TpaWVal = TpaWVal + aTpa2
            End If
            If aValue3 > 0 Then
                TpaWVal = TpaWVal + aTpa3
            End If
            If aValue4 > 0 Then
                TpaWVal = TpaWVal + aTpa4
            End If

            If TpaWVal <> 0 Then
                gGetTotalValue4Spec = gRound(TpaVal / TpaWVal, aRound)
            Else
                gGetTotalValue4Spec = 0
            End If
        End If
    End Function

    Public Function gGetTotalValue4Spec2(ByVal aValue1 As Single,
                                     ByVal aTpa1 As Single,
                                     ByVal aValue2 As Single,
                                     ByVal aTpa2 As Single,
                                     ByVal aValue3 As Single,
                                     ByVal aTpa3 As Single,
                                     ByVal aValue4 As Single,
                                     ByVal aTpa4 As Single,
                                     ByVal aInclValue1 As Boolean,
                                     ByVal aInclValue2 As Boolean,
                                     ByVal aRound As Integer) As Single


        Dim TpaWVal As Double
        Dim TpaVal As Double

        'gGetTotalValue4Spec2(.Os.Bpl, .Os.Tpa,
        '                     .Ip.Bpl, .Ip.Tpa,
        '                     .Tpb.Bpl, .Tpb.Tpa,
        '                     .Tcn.Bpl, .Tcn.Tpa,
        '                     aInclOs, aInclIp, 1)

        gGetTotalValue4Spec2 = 0

        TpaWVal = 0
        TpaVal = 0

        If Not aInclValue1 Then
            aTpa1 = 0
            aValue1 = 0
        End If
        If Not aInclValue2 Then
            aTpa2 = 0
            aValue2 = 0
        End If

        TpaVal = aTpa1 * aValue1 + aTpa2 * aValue2 +
             aTpa3 * aValue3 + aTpa4 * aValue4

        If aValue1 > 0 Then
            TpaWVal = TpaWVal + aTpa1
        End If
        If aValue2 > 0 Then
            TpaWVal = TpaWVal + aTpa2
        End If
        If aValue3 > 0 Then
            TpaWVal = TpaWVal + aTpa3
        End If
        If aValue4 > 0 Then
            TpaWVal = TpaWVal + aTpa4
        End If

        If TpaWVal <> 0 Then
            gGetTotalValue4Spec2 = gRound(TpaVal / TpaWVal, aRound)
        Else
            gGetTotalValue4Spec2 = 0
        End If
    End Function

    Public Function AddMoisTextFileHole(ByRef aHoleData As gRawProspSplRdctnType,
                               ByVal aDataType As String,
                               ByVal aInclMgPlt As Integer) As String



        Dim HoleDesc As String
        Dim TxtRow As String
        Dim Mineability As String
        Dim TotThk As Single

        'Hole location stuff
        'S01331212512043699
        '    ttrrssffhhhhss
        'tt = township
        'rr = range
        'ss = section
        'ff = forty
        'hhhh = hole location
        'ss = split  (for a hole row this is 99)

        'Hole  Hole  Hole  Hole  Hole  Hole
        'Hole  Hole  Hole  Hole  Hole  Hole
        'Hole  Hole  Hole  Hole  Hole  Hole

        With aHoleData
            HoleDesc = "S013" & gPadLeftChar(CStr(.Township), 2, "0") &
                   gPadLeftChar(CStr(.Range), 2, "0") &
                   gPadLeftChar(CStr(.Section), 2, "0") &
                   gPadLeftChar(CStr(.Forty), 2, "0") &
                   .HoleLocation & "99"

            TxtRow = HoleDesc & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.Xcoord, "######0.00"), 11, "0") & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.Ycoord, "######0.00"), 11, "0") & " "
            TxtRow = TxtRow & gPadLeft(Format(.Section, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Township, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Range, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Forty, "#0"), 2) & " "
            TxtRow = TxtRow & .HoleLocation & " "
            TxtRow = TxtRow & "HLE" & " "

            'MF = mineable forced
            If .MineableCalcd = "M" Or .MineableCalcd = "MF" Then
                Mineability = "M"
            Else
                Mineability = "U"
            End If
            TxtRow = TxtRow & Mineability & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.Elevation, "###0.00"), 7, " ") & " "

            'Split depth top -- don't need it here.
            TxtRow = TxtRow & "     -" & " "

            'Split depth bottom -- don't need it here.
            TxtRow = TxtRow & "     -" & " "

            TxtRow = TxtRow & gPadLeftChar(Format(.OvbThk, "##0.0"), 5, " ") & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.MtxThk, "##0.0"), 5, " ") & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.ItbThk, "##0.0"), 5, " ") & " "

            'Total thickness
            TotThk = .OvbThk + .MtxThk + .ItbThk
            TxtRow = TxtRow & gPadLeftChar(Format(TotThk, "##0.0"), 5, " ") & " "

            'Total pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Total feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Total concentrate
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Waste clay
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Matrix "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll100Hole, "##0.00"), 6, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAllPcHole, "##0.00"), 6, " ") & " "
            End If

            'Total "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll100Hole, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAllPcHole, "##0.00"), 6, " ") & " "
            End If

            'Density (dry density)
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxDensity, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxDensity, "##0.00"), 6, " ") & " "
            End If

            'Total pebb tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total feed tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total conc tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total slime tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Ownership code
            'Not needed for anything -- will put a 0 here (0 = Mosaic)!
            TxtRow = TxtRow & "0" & " "

            'Lithology
            'Not needed for anything -- will put a "-" here!
            TxtRow = TxtRow & "     -" & " "

            'Prospect date -- will use mm/dd/yyyy.
            TxtRow = TxtRow & Format(.ProspDate, "MM/dd/yyyy") & " "

            'Coarse pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Fine pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ins, "#0.00"), 5, " ") & " "

                'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Coarse feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Fine feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'MYPTA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll100Hole, "##0.00"), 6, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAllPcHole, "##0.00"), 6, " ") & " "
            End If

            'TYPTA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll100Hole, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAllPcHole, "##0.00"), 6, " ") & " "
            End If

            'Mtx %solids
            TxtRow = TxtRow & gPadLeftChar(Format(.MtxPctSol, "##0.00"), 7, " ") & " "

            'Mtx TPA
            'This matrix TPA includes oversize TPA which we need over on the
            'MOIS side right now.
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxTPA, "#####0"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxTpaPc, "#####0"), 6, " ") & " "
            End If

            'Os TPA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Os100.Tpa, "####0"), 5, " ")
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.Os.Tpa, "####0"), 5, " ")
            End If

            If aInclMgPlt = 1 Then
                'MgO plant input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If

                'MgO plant reject
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If

                'MgO plant product
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If
            End If
        End With

        Return TxtRow
    End Function

    Public Function AddMoisTextFileSplit(ByRef aSplitData As gRawProspSplRdctnType,
                                ByVal aDataType As String,
                                ByVal aInclMgPlt As Integer) As String

        Dim HoleDesc As String
        Dim TxtRow As String
        Dim Mineability As String
        Dim TosElev As Double

        'Split  Split  Split  Split  Split  Split
        'Split  Split  Split  Split  Split  Split
        'Split  Split  Split  Split  Split  Split

        'aDataType will be "100%" or "PC".

        'S01331212512043699
        '    ttrrssffhhhhss
        'tt = township
        'rr = range
        'ss = section
        'ff = forty
        'hhhh = hole location
        'ss = split  (for a hole row this is 99)

        With aSplitData
            HoleDesc = "S013" & gPadLeftChar(CStr(.Township), 2, "0") &
                   gPadLeftChar(CStr(.Range), 2, "0") &
                   gPadLeftChar(CStr(.Section), 2, "0") &
                   gPadLeftChar(CStr(.Forty), 2, "0") &
                   .HoleLocation &
                   gPadLeftChar(CStr(.SplitNumber), 2, "0")

            TxtRow = HoleDesc & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.Xcoord, "######0.00"), 11, "0") & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.Ycoord, "######0.00"), 11, "0") & " "
            TxtRow = TxtRow & gPadLeft(Format(.Section, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Township, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Range, "#0"), 2) & " "
            TxtRow = TxtRow & gPadLeft(Format(.Forty, "#0"), 2) & " "
            TxtRow = TxtRow & .HoleLocation & " "
            TxtRow = TxtRow & "S" & gPadLeftChar(CStr(.SplitNumber), 2, "0") & " "

            'Currently in AddMoisTextFileSplit
            '01/28/2010, lss  Changed the following:
            'Also added "MF" check which wasn't there before (hope this is OK)!
            If (.MineableCalcd = "M" And .MineableOride <> "U") Or
            .MineableOride = "M" Or
            .MineableCalcd = "MF" Then
                Mineability = "M"
            Else
                Mineability = "U"
            End If

            TxtRow = TxtRow & Mineability & " "

            'Elevation -- don't need it here (7 characters).
            'TxtRow = TxtRow & "      -" & " "
            '03/18/2013, lss
            'Let's put the elevation in -- Top-of-Split Elevation ?
            TosElev = .Elevation - .SplitDepthTop
            If TosElev < 0 Then
                TosElev = 0
            End If
            TxtRow = TxtRow & gPadLeftChar(Format(TosElev, "###0.00"), 7, " ") & " "

            TxtRow = TxtRow & gPadLeftChar(Format(.SplitDepthTop, "##0.00"), 6, " ") & " "
            TxtRow = TxtRow & gPadLeftChar(Format(.SplitDepthBot, "##0.00"), 6, " ") & " "
            TxtRow = TxtRow & "    -" & " "    'OVBTH -- not for splits
            TxtRow = TxtRow & "    -" & " "    'MTXTH -- not for splits
            TxtRow = TxtRow & "    -" & " "    'WTETH -- not for splits
            TxtRow = TxtRow & "    -" & " "    'TOTTH -- not for splits

            'Total pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Total feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tfd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Total concentrate
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Tcn.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Waste clay
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Wcl.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Matrix "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll100, "##0.00"), 6, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll, "##0.00"), 6, " ") & " "
            End If

            'Total "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll100, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll, "##0.00"), 6, " ") & " "
            End If

            'Density (dry density)
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxDensity, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxDensity, "##0.00"), 6, " ") & " "
            End If

            'Total pebb tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total feed tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total conc tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Total slime tons / 1000 yds mtx
            'Not needed for anything -- will put a zero here!
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(0, "###0"), 4, " ") & " "
            End If

            'Ownership code
            'Not needed for anything -- will put a 0 here (0 = Mosaic)!
            TxtRow = TxtRow & "0" & " "

            'Lithology
            'Not needed for anything -- will put a "-" here!
            'TxtRow = TxtRow & "     -" & " "
            '03/18/2013, lss
            'Will put the M-###### number here (just the ###### part)
            TxtRow = TxtRow & Mid(.SampleId, 3) & " "

            'Prospect date -- will use mm/dd/yyyy.
            TxtRow = TxtRow & Format(.ProspDate, "MM/dd/yyyy") & " "

            'Coarse pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Fine pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb100.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Bpl, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ia, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ins, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Ca, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Mg, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Fe, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Fpb.Al, "#0.00"), 5, " ") & " "
                TxtRow = TxtRow & "    -" & " "     'Cd
            End If

            'Coarse feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Cfd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'Fine feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd100.Bpl, "#0.00"), 5, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.Tpa, "######0"), 7, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.WtPct, "##0.00"), 6, " ") & " "
                TxtRow = TxtRow & gPadLeftChar(Format(.Ffd.Bpl, "#0.00"), 5, " ") & " "
            End If

            'MYPTA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll100, "##0.00"), 6, " ") & " "
            Else    'PC
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxxAll, "##0.00"), 6, " ") & " "
            End If

            'TYPTA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll100, "##0.00"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.TotxAll, "##0.00"), 6, " ") & " "
            End If

            'Mtx %solids
            TxtRow = TxtRow & gPadLeftChar(Format(.MtxPctSol, "##0.00"), 7, " ") & " "

            'Mtx TPA
            'This matrix TPA includes oversize TPA which we need over on the
            'MOIS side right now.
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxTPA, "#####0"), 6, " ") & " "
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.MtxTpaPc, "#####0"), 6, " ") & " "
            End If

            'Os TPA
            If aDataType = "100%" Then
                TxtRow = TxtRow & gPadLeftChar(Format(.Os100.Tpa, "####0"), 5, " ")
            Else
                TxtRow = TxtRow & gPadLeftChar(Format(.Os.Tpa, "####0"), 5, " ")
            End If

            If aInclMgPlt = 1 Then
                'MgO plant input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltInp100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If

                'MgO plant reject
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltRej100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If

                'MgO plant product
                If aDataType = "100%" Then
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                Else    'PC
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Tpa, "######0"), 7, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.WtPct, "##0.00"), 6, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Bpl, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ia, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ins, "#0.00"), 5, " ") & " "

                    'Use CaO instead of Ca/P2O5 as in old IMC RAR.
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Ca, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Mg, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Fe, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & gPadLeftChar(Format(.MgPltProd100.Al, "#0.00"), 5, " ") & " "
                    TxtRow = TxtRow & "    -" & " "     'Cd
                End If
            End If
        End With
        Return TxtRow
    End Function

    Private Function GetTrsCornerSql(ByVal aSkipMinedOutHoles As Integer,
                                     ByRef aSwTwp() As Integer,
                                     ByRef aSwRge() As Integer,
                                     ByRef aNeTwp() As Integer,
                                     ByRef aNeRge() As Integer,
                                     ByRef aSsAreaTrsCorner As List(Of ViewModels.ProspectAreaTRSCorner),
                                     ByVal aSplitOverrideName As String) As String

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim SqlStr As String
        Dim Sec As Integer
        Dim Twp As Integer
        Dim Rge As Integer
        Dim AreaIdx As Integer
        Dim SecCnt As Integer

        SecCnt = 0
        GetTrsCornerSql = ""

        For AreaIdx = 1 To 5
            If aSwTwp(AreaIdx) <> 0 And aSwRge(AreaIdx) <> 0 And
                aNeTwp(AreaIdx) <> 0 And aNeRge(AreaIdx) <> 0 Then
                For Rge = aNeRge(AreaIdx) To aSwRge(AreaIdx) Step -1
                    For Twp = aSwTwp(AreaIdx) To aNeTwp(AreaIdx) Step -1
                        For Sec = 1 To 36
                            If SectionInRange(Twp,
                                              Rge,
                                              Sec,
                                              aSsAreaTrsCorner) = True Then
                                SecCnt = SecCnt + 1

                                '07/17/208, lss
                                'I had this wrong -- changed it so now if the user has an override file
                                'then PROSPN_RAW_BASIC_OR_V is used, if not then PROSPN_RAW_BASIC_V is used.
                                '(previously PROSPN_RAW_BASIC_OR_V was always used).
                                If SecCnt = 1 Then
                                    If Trim(aSplitOverrideName) <> "" Then
                                        'User has provided a split override file!
                                        '07/26/2010, lss
                                        'Added PV.MTX_MOIST_WET_WT2, PV.MTX_MOIST_DRY_WT2, PV.MTX_MOIST_TARE_WT2

                                        SqlStr = "SELECT " &
                                                 "PV.TOWNSHIP, PV.RANGE, PV.SECTION, PV.HOLE_LOCATION, PV.FORTY, PV.STATE, PV.QUADRANT, PV.MINE_NAME, PV.EXP_DRILL, " &
                                                 "PV.SPLIT_TOTAL_NUM, PV.X_COORD, PV.Y_COORD, PV.FTL_DEPTH, PV.OVB_CORED, PV.OWNERSHIP, PV.PROSP_DATE, PV.MINED_STATUS, " &
                                                 "PV.ELEVATION, PV.TOT_DEPTH, PV.AOI, PV.COORD_SURVEYED, PV.HOLE_COMMENT, PV.HOLE_LOCATION_CHAR, PV.RELEASED, PV.REDRILLED, " &
                                                 "PV.REDRILL_DATE, PV.USE_FOR_REDUCTION, PV.COUNTY, PV.BANK_CODE, PV.HOLE_MINABLE, PV.HOLE_MINABLE_WHEN, PV.HOLE_MINABLE_WHO, " &
                                                 "PV.SPEC_AREA_NAME, PV.MANUFACTURED_DATA, PV.SAMPLE_ID, PV.SPLIT_NUMBER, PV.BARREN, PV.SPLIT_FTL_BOTTOM, PV.MTX_TOT_WET_WT, " &
                                                 "PV.MTX_MOIST_WET_WT, PV.MTX_MOIST_DRY_WT, PV.MTX_MOIST_TARE_WT, PV.MTX_MOIST_WET_WT2, PV.MTX_MOIST_DRY_WT2, PV.MTX_MOIST_TARE_WT2," &
                                                 "PV.FD_TOT_WET_WT, PV.FD_TOT_WET_WT_MSR, PV.FD_MOIST_WET_WT, " &
                                                 "PV.FD_MOIST_DRY_WT, PV.FD_MOIST_TARE_WT, PV.FD_SCRN_SAMP_WT, PV.DENS_CYL_SIZE, PV.DENS_CYL_WET_WT, PV.DENS_CYL_H2O_WT, " &
                                                 "PV.DRY_DENSITY, PV.FLOT_WET_WT, PV.MTX_PROC_WET_WT, PV.EXP_EXCESS_WT, PV.MTX_COLOR, PV.DEG_CONSOL, PV.DIG_CHAR, PV.PUMP_CHAR, " &
                                                 "PV.LITHOLOGY, PV.PHOSPH_COLOR, PV.PHYS_MINEABLE, PV.CLAY_SETT_CHAR, PV.FD_SCRN_SAMP_WT_COMP, PV.SPLIT_DEPTH_TOP, PV.SPLIT_DEPTH_BOT, " &
                                                 "PV.SPLIT_THCK, PV.WASH_DATE, PV.ORIG_DATA, PV.METLAB_COMMENT, PV.CHEMLAB_COMMENT, PV.RERUN_STATUS, PV.DATE_RERUN, PV.SPLIT_MINABLE, " &
                                                 "PV.SPLIT_MINABLE_WHEN, PV.SPLIT_MINABLE_WHO, PV.SAMPLE_ID_CARGILL, PV.BED_CODE, PV.CLAY_SETTLING_LVL, PV.PB_CLAY_PCT, PV.SIZE_FRCTN_CODE, " &
                                                 "PV.BPL, PV.FEAL, PV.INSOL, PV.CAO, PV.MGO, PV.FE2O3, PV.AL2O3, PV.CD, PV.SIZE_FRCTN_WT, PV.SIZE_FRCTN_WT_MSR, PV.SIZE_FRCTN_TYPE, " &
                                                 "PV.SFC_PROSPRAW_ORDER, PV.SFC_DESCRIPTION, PV.SFC_MATL_NAME, PV.SFC_MATL_ABBRV, PV.SFC_DEFN_ORDER, PV.REG_ALPHA_CODE, PV.REG_ANALYSIS_CODE, " &
                                                 "PV.EXP_ALPHA_CODE, PV.EXP_ANALYSIS_CODE, PV.OWNERSHIP_DESC, PV.DEG_CONSOL_DESC, PV.DIG_CHAR_DESC, PV.LITHOLOGY_DESC, PV.MTX_COLOR_DESC, " &
                                                 "PV.HARDPAN_FROM, PV.HARDPAN_TO, PV.HARDPAN_THCK, PV.HARDPAN_CODE, " &
                                                 "PV.PHOSPH_COLOR_DESC, PV.PUMP_CHAR_DESC, PO.SPLIT_ORIDE_SET_NAME, PO.PROSP_SET_NAME, PO.MINEABILITY ORIDE_MINEABILITY " &
                                                 " FROM PROSPN_RAW_BASIC_V PV," &
                                                 "      PROSP_SPLIT_ORIDE_SET_DETL PO " &
                                                 " WHERE ((PV.SECTION = " & Trim(CStr(Sec)) &
                                                 " AND PV.TOWNSHIP = " & Trim(CStr(Twp)) &
                                                 " AND PV.RANGE = " & Trim(CStr(Rge)) & ")"
                                    Else
                                        'User has NOT provided a split override file!
                                        SqlStr = "SELECT * FROM MOIS.PROSPN_RAW_BASIC_V  PV" &
                                                 " WHERE ((PV.SECTION = " & Trim(CStr(Sec)) &
                                                 " AND PV.TOWNSHIP = " & Trim(CStr(Twp)) &
                                                 " AND PV.RANGE = " & Trim(CStr(Rge)) & ")"
                                    End If
                                Else
                                    'Add another section to fSqlStr
                                    SqlStr = SqlStr & " OR (PV.SECTION = " & Trim(CStr(Sec)) &
                                             " AND PV.TOWNSHIP = " & Trim(CStr(Twp)) &
                                             " AND PV.RANGE = " & Trim(CStr(Rge)) & ")"
                                End If
                            End If
                        Next Sec
                    Next Twp
                Next Rge
            End If
        Next AreaIdx

        SqlStr = SqlStr & ")"

        If aSkipMinedOutHoles = 1 Then
            SqlStr = SqlStr & " AND PV.MINED_STATUS = 0"
        End If

        SqlStr = SqlStr & " AND PV.RELEASED = 1 "
        SqlStr = SqlStr & " AND PV.USE_FOR_REDUCTION = 1 "
        SqlStr = SqlStr & " AND PV.REDRILLED = 0 "

        If Trim(aSplitOverrideName) <> "" Then
            'User has provided a split override file!
            SqlStr = SqlStr & " AND PO.SPLIT_ORIDE_SET_NAME (+) = '" & aSplitOverrideName & "'" &
                              " AND PO.PROSP_SET_NAME       (+) = 'User split override set'" &
                              " AND PO.TOWNSHIP             (+) = PV.TOWNSHIP" &
                              " AND PO.RANGE                (+) = PV.RANGE" &
                              " AND PO.SECTION              (+) = PV.SECTION" &
                              " AND PO.HOLE_LOCATION        (+) = PV.HOLE_LOCATION" &
                              " AND PO.SPLIT_NUMBER         (+) = PV.SPLIT_NUMBER"
        End If

        'Add order
        SqlStr = SqlStr + " ORDER BY PV.TOWNSHIP, PV.RANGE, PV.SECTION, PV.HOLE_LOCATION, PV.SPLIT_NUMBER"

        GetTrsCornerSql = SqlStr
    End Function
    Public Function MatlDistributedTo(ByVal aSsProdDist As ViewModels.ProductSizeDesignation,
                                       ByVal aMatl As String) As Boolean
        Select Case StrConv(aMatl, vbUpperCase)
            Case Is = "OS"
                Return aSsProdDist.Details.Any(Function(d) d.IsOversize)
            Case Is = "CPB"
                Return aSsProdDist.Details.Any(Function(d) d.IsCoarsePb)
            Case Is = "FPB"
                Return aSsProdDist.Details.Any(Function(d) d.IsFinePb)
            Case Is = "IP"
                Return aSsProdDist.Details.Any(Function(d) d.IsIp)
            Case Is = "CCN"
                Return aSsProdDist.Details.Any(Function(d) d.IsCoarseFd)
            Case Is = "FCN"
                Return aSsProdDist.Details.Any(Function(d) d.IsFineFd)
        End Select
        Return False
    End Function

    Private Sub AdjInsOrig(ByVal aMatl As String,
                       ByVal aInsAdj As Single,
                       ByVal aInsAdjMode As String,
                       ByRef aProdAssignData As mProdAssignType,
                       ByRef aRdctnCalcData As gRawProspSplRdctnType,
                       ByVal aFlotRcvryMode As Integer,
                       ByVal aFlotRcvryCrsCnIns As Integer,
                       ByVal aFlotRcvryFneCnIns As Integer)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim OrigData As mProdInfoType
        Dim AdjData As mProdInfoType
        Dim DataIdx As Integer

        'TPA's are in aRdctnCalcData, impurities and BPL's are in aProdAssignData.
        'There is no Cn TPA yet at this point.
        'We need to Insol adjust two sets of data that we are tracking -- ProdCoeff
        'and 100%.
        'aMatl will be CrsPb, FnePb, IP, or Cn

        For DataIdx = 1 To 2
            'Dataidx = 1  ProdCoeff
            'DataIdx = 2  100%

            Select Case aMatl
                Case Is = "CrsPb"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Cpb.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Cpb100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.CpbBpl
                    OrigData.Ins = aProdAssignData.CpbIns
                    OrigData.Fe = aProdAssignData.CpbFe
                    OrigData.Al = aProdAssignData.CpbAl
                    OrigData.Ia = aProdAssignData.CpbIa
                    OrigData.Mg = aProdAssignData.CpbMg
                    OrigData.Ca = aProdAssignData.CpbCa

                Case Is = "FnePb"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Fpb.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Fpb100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.FpbBpl
                    OrigData.Ins = aProdAssignData.FpbIns
                    OrigData.Fe = aProdAssignData.FpbFe
                    OrigData.Al = aProdAssignData.FpbAl
                    OrigData.Ia = aProdAssignData.FpbIA
                    OrigData.Mg = aProdAssignData.FpbMg
                    OrigData.Ca = aProdAssignData.FpbCa

                Case Is = "IP"
                    If DataIdx = 1 Then
                        OrigData.Tpa = aRdctnCalcData.Ip.Tpa
                    Else
                        OrigData.Tpa = aRdctnCalcData.Ip100.Tpa
                    End If
                    OrigData.Bpl = aProdAssignData.IpBpl
                    OrigData.Ins = aProdAssignData.IpIns
                    OrigData.Fe = aProdAssignData.IpFe
                    OrigData.Al = aProdAssignData.IpAl
                    OrigData.Ia = aProdAssignData.IpIa
                    OrigData.Mg = aProdAssignData.IpMg
                    OrigData.Ca = aProdAssignData.IpCa

                Case Is = "Ccn"      'No TPA is available!
                    'Only have analysis (BPL, Insol, etc. for total concentrate).
                    OrigData.Tpa = 0
                    OrigData.Bpl = aProdAssignData.CnBpl
                    OrigData.Ins = aProdAssignData.CnIns
                    OrigData.Fe = aProdAssignData.CnFe
                    OrigData.Al = aProdAssignData.CnAl
                    OrigData.Ia = aProdAssignData.CnIa
                    OrigData.Mg = aProdAssignData.CnMg
                    OrigData.Ca = aProdAssignData.CnCa

                Case Is = "Fcn"      'No TPA is available!
                    'Only have analysis (BPL, Insol, etc. for total concentrate).
                    OrigData.Tpa = 0
                    OrigData.Bpl = aProdAssignData.CnBpl
                    OrigData.Ins = aProdAssignData.CnIns
                    OrigData.Fe = aProdAssignData.CnFe
                    OrigData.Al = aProdAssignData.CnAl
                    OrigData.Ia = aProdAssignData.CnIa
                    OrigData.Mg = aProdAssignData.CnMg
                    OrigData.Ca = aProdAssignData.CnCa
            End Select

            'Have the original data -- now adjust it!
            'Insol adjustment modes:
            '1) Minimum     -- adjust lab Insol up to this value, if lab Insol above
            '                  this value then leave alone.
            '2) Direct      -- adjust lab Insol up or down to this value.
            '3) Incremental -- Add this value to the lab Insol.
            '4) In-Situ     -- use the lab Insol.

            'also have:
            'aRcvryParamsData.FlotRcvryMode
            'aRcvryParamsData.FlotRcvryCrsCnIns
            'aRcvryParamsData.FlotRcvryFneCnIns
            'If aRcvryParamsData.FlotRcvryMode = "Hard-wire" then these Insol
            'adjust values override any concentrate Insol adjusts from above.

            'First check the special case for concentrate.
            If aFlotRcvryMode = "Hard-wire" Then
                'Will consider this the same as "Direct".  Will adjust up or
                'down to the hard-wired value.
                aInsAdjMode = "Direct"
                'Since we don't have coarse and fine concentrate in the raw
                'prospect data we will use the fine concentrate Insol value
                aInsAdj = aFlotRcvryFneCnIns
            End If

            Select Case aInsAdjMode
                Case Is = "Minimum"
                    If OrigData.Ins >= aInsAdj Then
                        'Leave it alone!
                        AdjData.Tpa = OrigData.Tpa
                        AdjData.Bpl = OrigData.Bpl
                        AdjData.Fe = OrigData.Fe
                        AdjData.Al = OrigData.Al
                        AdjData.Ia = OrigData.Ia
                        AdjData.Mg = OrigData.Mg
                        AdjData.Ca = OrigData.Ca
                        AdjData.Ins = OrigData.Ins
                    Else    'Need to adjust up to the adjusted Insol value.
                        AdjData.Ins = aInsAdj

                        If 100 - aInsAdj <> 0 Then
                            AdjData.Tpa = Round(OrigData.Tpa * (100 - OrigData.Ins) / (100 - aInsAdj), 0)
                        Else
                            AdjData.Tpa = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Bpl = Round(OrigData.Bpl * (100 - aInsAdj) / (100 - OrigData.Ins), 1)
                        Else
                            AdjData.Bpl = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Fe = Round(OrigData.Fe * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Fe = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Al = Round(OrigData.Al * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Al = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Ia = Round(OrigData.Ia * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Ia = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Mg = Round(OrigData.Mg * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                        Else
                            AdjData.Mg = 0
                        End If
                        If 100 - OrigData.Ins <> 0 Then
                            AdjData.Ca = Round(OrigData.Ca * (100 - aInsAdj) / (100 - OrigData.Ins), 1)
                        Else
                            AdjData.Ca = 0
                        End If
                    End If

                Case Is = "Direct"
                    'Adjust up or down to the adjusted Insol
                    AdjData.Ins = aInsAdj

                    If 100 - aInsAdj <> 0 Then
                        AdjData.Tpa = Round(OrigData.Tpa * (100 - OrigData.Ins) / (100 - aInsAdj), 0)
                    Else
                        AdjData.Tpa = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Bpl = Round(OrigData.Bpl * (100 - aInsAdj) / (100 - OrigData.Ins), 1)
                    Else
                        AdjData.Bpl = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Fe = Round(OrigData.Fe * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Fe = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Al = Round(OrigData.Al * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Al = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Ia = Round(OrigData.Ia * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Ia = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Mg = Round(OrigData.Mg * (100 - aInsAdj) / (100 - OrigData.Ins), 2)
                    Else
                        AdjData.Mg = 0
                    End If
                    If 100 - OrigData.Ins <> 0 Then
                        AdjData.Ca = Round(OrigData.Ca * (100 - aInsAdj) / (100 - OrigData.Ins), 1)
                    Else
                        AdjData.Ca = 0
                    End If

                Case Is = "Incremental"
                    'Still need to do this!

                Case Is = "In-Situ"         'Don't have to change anything.
                    AdjData.Tpa = OrigData.Tpa
                    AdjData.Bpl = OrigData.Bpl
                    AdjData.Fe = OrigData.Fe
                    AdjData.Al = OrigData.Al
                    AdjData.Ia = OrigData.Ia
                    AdjData.Mg = OrigData.Mg
                    AdjData.Ca = OrigData.Ca
                    AdjData.Ins = OrigData.Ins
            End Select

            'Don't want any negative values -- just to make sure there are none:
            If AdjData.Tpa < 0 Then
                AdjData.Tpa = 0
            End If
            If AdjData.Bpl < 0 Then
                AdjData.Bpl = 0
            End If
            If AdjData.Fe < 0 Then
                AdjData.Fe = 0
            End If
            If AdjData.Al < 0 Then
                AdjData.Al = 0
            End If
            If AdjData.Ia < 0 Then
                AdjData.Ia = 0
            End If
            If AdjData.Mg < 0 Then
                AdjData.Mg = 0
            End If
            If AdjData.Ca < 0 Then
                AdjData.Ca = 0
            End If

            'Place the results in aRdctnCalcData
            Select Case aMatl
                Case Is = "CrsPb"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Cpb.Tpa = AdjData.Tpa
                        aRdctnCalcData.Cpb.Bpl = AdjData.Bpl
                        aRdctnCalcData.Cpb.Fe = AdjData.Fe
                        aRdctnCalcData.Cpb.Al = AdjData.Al
                        aRdctnCalcData.Cpb.Ia = AdjData.Ia
                        aRdctnCalcData.Cpb.Mg = AdjData.Mg
                        aRdctnCalcData.Cpb.Ca = AdjData.Ca
                        aRdctnCalcData.Cpb.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Cpb100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Cpb100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Cpb100.Fe = AdjData.Fe
                        aRdctnCalcData.Cpb100.Al = AdjData.Al
                        aRdctnCalcData.Cpb100.Ia = AdjData.Ia
                        aRdctnCalcData.Cpb100.Mg = AdjData.Mg
                        aRdctnCalcData.Cpb100.Ca = AdjData.Ca
                        aRdctnCalcData.Cpb100.Ins = AdjData.Ins
                    End If

                Case Is = "FnePb"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Fpb.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fpb.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fpb.Fe = AdjData.Fe
                        aRdctnCalcData.Fpb.Al = AdjData.Al
                        aRdctnCalcData.Fpb.Ia = AdjData.Ia
                        aRdctnCalcData.Fpb.Mg = AdjData.Mg
                        aRdctnCalcData.Fpb.Ca = AdjData.Ca
                        aRdctnCalcData.Fpb.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Fpb100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fpb100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fpb100.Fe = AdjData.Fe
                        aRdctnCalcData.Fpb100.Al = AdjData.Al
                        aRdctnCalcData.Fpb100.Ia = AdjData.Ia
                        aRdctnCalcData.Fpb100.Mg = AdjData.Mg
                        aRdctnCalcData.Fpb100.Ca = AdjData.Ca
                        aRdctnCalcData.Fpb100.Ins = AdjData.Ins
                    End If

                Case Is = "IP"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Ip.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ip.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ip.Fe = AdjData.Fe
                        aRdctnCalcData.Ip.Al = AdjData.Al
                        aRdctnCalcData.Ip.Ia = AdjData.Ia
                        aRdctnCalcData.Ip.Mg = AdjData.Mg
                        aRdctnCalcData.Ip.Ca = AdjData.Ca
                        aRdctnCalcData.Ip.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Ip100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ip100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ip100.Fe = AdjData.Fe
                        aRdctnCalcData.Ip100.Al = AdjData.Al
                        aRdctnCalcData.Ip100.Ia = AdjData.Ia
                        aRdctnCalcData.Ip100.Mg = AdjData.Mg
                        aRdctnCalcData.Ip100.Ca = AdjData.Ca
                        aRdctnCalcData.Ip100.Ins = AdjData.Ins
                    End If

                Case Is = "Ccn"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Ccn.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ccn.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ccn.Fe = AdjData.Fe
                        aRdctnCalcData.Ccn.Al = AdjData.Al
                        aRdctnCalcData.Ccn.Ia = AdjData.Ia
                        aRdctnCalcData.Ccn.Mg = AdjData.Mg
                        aRdctnCalcData.Ccn.Ca = AdjData.Ca
                        aRdctnCalcData.Ccn.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Ccn100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Ccn100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Ccn100.Fe = AdjData.Fe
                        aRdctnCalcData.Ccn100.Al = AdjData.Al
                        aRdctnCalcData.Ccn100.Ia = AdjData.Ia
                        aRdctnCalcData.Ccn100.Mg = AdjData.Mg
                        aRdctnCalcData.Ccn100.Ca = AdjData.Ca
                        aRdctnCalcData.Ccn100.Ins = AdjData.Ins
                    End If

                Case Is = "Fcn"
                    If DataIdx = 1 Then
                        aRdctnCalcData.Fcn.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fcn.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fcn.Fe = AdjData.Fe
                        aRdctnCalcData.Fcn.Al = AdjData.Al
                        aRdctnCalcData.Fcn.Ia = AdjData.Ia
                        aRdctnCalcData.Fcn.Mg = AdjData.Mg
                        aRdctnCalcData.Fcn.Ca = AdjData.Ca
                        aRdctnCalcData.Fcn.Ins = AdjData.Ins
                    Else
                        aRdctnCalcData.Fcn100.Tpa = AdjData.Tpa
                        aRdctnCalcData.Fcn100.Bpl = AdjData.Bpl
                        aRdctnCalcData.Fcn100.Fe = AdjData.Fe
                        aRdctnCalcData.Fcn100.Al = AdjData.Al
                        aRdctnCalcData.Fcn100.Ia = AdjData.Ia
                        aRdctnCalcData.Fcn100.Mg = AdjData.Mg
                        aRdctnCalcData.Fcn100.Ca = AdjData.Ca
                        aRdctnCalcData.Fcn100.Ins = AdjData.Ins
                    End If
            End Select
        Next DataIdx
    End Sub

    Private Function OffSpecPbPltProcess(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                     ByVal aRcvryParamsData As gDataRdctnParamsType,
                                     ByVal aProcMode As String) As Boolean


        'Have already determined that the total pebble is off-spec and that the
        'mine has an off-spec pebble MgO processing plant!
        'Does this off-spec pebble meet the requirements for the off-spec pebble
        'MgO processing plant?

        'aProcMode will be "100%" or "ProdCoeff".

        'This procedure may be working on a split or a hole depending on what is
        '"transferred" through aRdctnCalcData and aSsDataReview.

        Dim TpbTpa As Integer
        Dim TpbBpl As Single
        Dim TpbIns As Single
        Dim TpbIA As Single
        Dim TpbCa As Single
        Dim TpbFe As Single
        Dim TpbAl As Single
        Dim TpbMg As Single
        Dim TpbWtPct As Single

        '03/24/2011**, lss
        Dim TpbFeAdj As Single
        Dim TpbIaAdj As Single

        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect

        If aProcMode = "100%" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!
            With aRdctnCalcData
                If Not (Single.IsNaN(.Cpb100.Tpa) OrElse Single.IsNaN(.Fpb100.Tpa)) Then
                    TpbTpa = .Cpb100.Tpa + .Fpb100.Tpa
                    TpbBpl = gGetTotalValue(.Cpb100.Bpl, .Cpb100.Tpa,
                                        .Fpb100.Bpl, .Fpb100.Tpa, 1)
                    TpbIns = gGetTotalValue(.Cpb100.Ins, .Cpb100.Tpa,
                                        .Fpb100.Ins, .Fpb100.Tpa, 1)
                    TpbIA = gGetTotalValue(.Cpb100.Ia, .Cpb100.Tpa,
                                       .Fpb100.Ia, .Fpb100.Tpa, 2)
                    TpbCa = gGetTotalValue(.Cpb100.Ca, .Cpb100.Tpa,
                                       .Fpb100.Ca, .Fpb100.Tpa, 1)
                    TpbFe = gGetTotalValue(.Cpb100.Fe, .Cpb100.Tpa,
                                       .Fpb100.Fe, .Fpb100.Tpa, 2)
                    TpbAl = gGetTotalValue(.Cpb100.Al, .Cpb100.Tpa,
                                       .Fpb100.Al, .Fpb100.Tpa, 2)
                    TpbMg = gGetTotalValue(.Cpb100.Mg, .Cpb100.Tpa,
                                       .Fpb100.Mg, .Fpb100.Tpa, 2)
                    TpbWtPct = .Cpb100.WtPct + .Fpb100.WtPct

                    '03/24/2011**, lss
                    TpbIaAdj = gGetTotalValue(.Cpb100.IaAdj, .Cpb100.Tpa,
                                          .Fpb100.IaAdj, .Fpb100.Tpa, 2)
                    TpbFeAdj = gGetTotalValue(.Cpb100.FeAdj, .Cpb100.Tpa,
                                      .Fpb100.FeAdj, .Fpb100.Tpa, 2)
                End If

                .MgPltTcn100.Tpa = 0
                .MgPltTcn100.WtPct = 0
                .MgPltTcn100.Bpl = 0
                .MgPltTcn100.Ins = 0
                .MgPltTcn100.Fe = 0
                .MgPltTcn100.Al = 0
                .MgPltTcn100.Ia = 0
                .MgPltTcn100.Mg = 0
                .MgPltTcn100.Ca = 0

                '03/24/2011**, lss
                .MgPltTcn100.FeAdj = 0
                .MgPltTcn100.IaAdj = 0

                .MgPltTpr100.Tpa = 0
                .MgPltTpr100.WtPct = 0
                .MgPltTpr100.Bpl = 0
                .MgPltTpr100.Ins = 0
                .MgPltTpr100.Fe = 0
                .MgPltTpr100.Al = 0
                .MgPltTpr100.Ia = 0
                .MgPltTpr100.Mg = 0
                .MgPltTpr100.Ca = 0

                '03/24/2011**, lss
                .MgPltTpr100.FeAdj = 0
                .MgPltTpr100.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.
                'If the total pebble BPL is too low or the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbBpl < aRcvryParamsData.MplRejBplTarg Or
                TpbMg >= aRcvryParamsData.MplRejMgoTarg Then
                    'This pebble is MgO plant reject.

                    .MgPltInp100.Tpa = 0
                    .MgPltInp100.WtPct = 0
                    .MgPltInp100.Bpl = 0
                    .MgPltInp100.Ins = 0
                    .MgPltInp100.Fe = 0
                    .MgPltInp100.Al = 0
                    .MgPltInp100.Ia = 0
                    .MgPltInp100.Mg = 0
                    .MgPltInp100.Ca = 0

                    '03/24/2011**, lss
                    .MgPltInp100.FeAdj = 0
                    .MgPltInp100.IaAdj = 0

                    .MgPltRej100.Tpa = TpbTpa
                    .MgPltRej100.WtPct = TpbWtPct
                    .MgPltRej100.Bpl = TpbBpl
                    .MgPltRej100.Ins = TpbIns
                    .MgPltRej100.Fe = TpbFe
                    .MgPltRej100.Al = TpbAl
                    .MgPltRej100.Ia = TpbIA
                    .MgPltRej100.Mg = TpbMg
                    .MgPltRej100.Ca = TpbCa

                    '03/24/2011**, lss
                    .MgPltRej100.FeAdj = TpbFeAdj
                    .MgPltRej100.IaAdj = TpbIaAdj

                    .MgPltProd100.Tpa = 0
                    .MgPltProd100.Bpl = 0
                    .MgPltProd100.Ins = 0
                    .MgPltProd100.Fe = 0
                    .MgPltProd100.Al = 0
                    .MgPltProd100.Ca = 0
                    .MgPltProd100.Mg = 0
                    .MgPltProd100.Ia = 0

                    Exit Function
                End If

                'We have determined that we do not have reject -- now check to see if
                'we have pebble plant input.  If the total pebble BPL is less than the
                'MgO plant target or the total pebble BPL is greater than the MgO plant
                'target then we have MgO plant input!
                'Actually since it was not MgO plant reject it has to be MgO plant
                'input at this point!

                '09/05/2008, lss
                'Changed this from an And to an Or!
                If TpbBpl < aRcvryParamsData.MplInpBplTarg Or TpbMg > aRcvryParamsData.MplInpMgoTarg Then

                    '06/26/2008, lss
                    'Changed TpbMg >= aRcvryParamsData.MplInpMgoTarg Then to
                    'TpbMg > aRcvryParamsData.MplInpMgoTarg Then

                    'This pebble is MgO plant input.

                    .MgPltInp100.Tpa = TpbTpa
                    .MgPltInp100.WtPct = TpbWtPct
                    .MgPltInp100.Bpl = TpbBpl
                    .MgPltInp100.Ins = TpbIns
                    .MgPltInp100.Fe = TpbFe
                    .MgPltInp100.Al = TpbAl
                    .MgPltInp100.Ia = TpbIA
                    .MgPltInp100.Mg = TpbMg
                    .MgPltInp100.Ca = TpbCa

                    'Currently in Function OffSpecPbPltProcess.
                    '03/24/2011**, lss
                    .MgPltInp100.FeAdj = TpbFeAdj
                    .MgPltInp100.IaAdj = TpbIaAdj

                    'Need to determine the MgO plant product from this input.
                    If aRcvryParamsData.MplM1BplHwire <> 0 Then
                        .MgPltProd100.Tpa = Round(.MgPltInp100.Tpa * .MgPltInp100.Bpl / aRcvryParamsData.MplM1BplHwire *
                                        (aRcvryParamsData.MplM1BpltRcvry / 100), 0)
                    Else
                        .MgPltProd100.Tpa = 0
                    End If

                    .MgPltProd100.Bpl = aRcvryParamsData.MplM1BplHwire
                    .MgPltProd100.Ins = aRcvryParamsData.MplM1InsHwire
                    If .MgPltInp100.Bpl <> 0 Then
                        .MgPltProd100.Fe = Round(.MgPltInp100.Fe / .MgPltInp100.Bpl * .MgPltProd100.Bpl, 2)
                    Else
                        .MgPltProd100.Fe = 0
                    End If
                    If .MgPltInp100.Bpl <> 0 Then
                        .MgPltProd100.Al = Round(.MgPltInp100.Al / .MgPltInp100.Bpl * .MgPltProd100.Bpl, 2)
                    Else
                        .MgPltProd100.Al = 0
                    End If
                    If .MgPltInp100.Bpl <> 0 Then
                        .MgPltProd100.Ca = Round(.MgPltInp100.Ca / .MgPltInp100.Bpl * .MgPltProd100.Bpl, 2)
                    Else
                        .MgPltProd100.Ca = 0
                    End If
                    .MgPltProd100.Mg = .MgPltInp100.Mg * (1 - aRcvryParamsData.MplM1MgoImprove / 100)
                    .MgPltProd100.Ia = .MgPltProd100.Fe + .MgPltProd100.Al

                    '03/24/2011**, lss
                    If .MgPltInp100.Bpl <> 0 Then
                        .MgPltProd100.FeAdj = Round(.MgPltInp100.FeAdj /
                                          .MgPltInp100.Bpl * .MgPltProd100.Bpl, 2)
                    Else
                        .MgPltProd100.FeAdj = 0
                    End If
                    .MgPltProd100.IaAdj = .MgPltProd100.FeAdj + .MgPltProd100.Al

                    .MgPltRej100.Tpa = 0
                    .MgPltRej100.WtPct = 0
                    .MgPltRej100.Bpl = 0
                    .MgPltRej100.Ins = 0
                    .MgPltRej100.Fe = 0
                    .MgPltRej100.Al = 0
                    .MgPltRej100.Ia = 0
                    .MgPltRej100.Mg = 0
                    .MgPltRej100.Ca = 0

                    '03/24/2011**, lss
                    .MgPltRej100.FeAdj = 0
                    .MgPltRej100.IaAdj = 0
                End If
            End With
        End If

        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient

        If aProcMode = "ProdCoeff" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!
            With aRdctnCalcData
                If Not (Single.IsNaN(.Cpb100.Tpa) OrElse Single.IsNaN(.Fpb100.Tpa)) Then
                    TpbTpa = .Cpb.Tpa + .Fpb.Tpa
                    TpbBpl = gGetTotalValue(.Cpb.Bpl, .Cpb.Tpa,
                                        .Fpb.Bpl, .Fpb.Tpa, 1)
                    TpbIns = gGetTotalValue(.Cpb.Ins, .Cpb.Tpa,
                                        .Fpb.Ins, .Fpb.Tpa, 1)
                    TpbIA = gGetTotalValue(.Cpb.Ia, .Cpb.Tpa,
                                       .Fpb.Ia, .Fpb.Tpa, 2)
                    TpbCa = gGetTotalValue(.Cpb.Ca, .Cpb.Tpa,
                                       .Fpb.Ca, .Fpb.Tpa, 1)
                    TpbFe = gGetTotalValue(.Cpb.Fe, .Cpb.Tpa,
                                       .Fpb.Fe, .Fpb.Tpa, 2)
                    TpbAl = gGetTotalValue(.Cpb.Al, .Cpb.Tpa,
                                       .Fpb.Al, .Fpb.Tpa, 2)
                    TpbMg = gGetTotalValue(.Cpb.Mg, .Cpb.Tpa,
                                       .Fpb.Mg, .Fpb.Tpa, 2)
                    TpbWtPct = .Cpb.WtPct + .Fpb.WtPct

                    '03/24/2011**, lss
                    TpbFeAdj = gGetTotalValue(.Cpb.FeAdj, .Cpb.Tpa,
                                          .Fpb.FeAdj, .Fpb.Tpa, 2)
                    TpbIaAdj = gGetTotalValue(.Cpb.IaAdj, .Cpb.Tpa,
                                      .Fpb.IaAdj, .Fpb.Tpa, 2)
                End If

                .MgPltTcn.Tpa = 0
                .MgPltTcn.WtPct = 0
                .MgPltTcn.Bpl = 0
                .MgPltTcn.Ins = 0
                .MgPltTcn.Fe = 0
                .MgPltTcn.Al = 0
                .MgPltTcn.Ia = 0
                .MgPltTcn.Mg = 0
                .MgPltTcn.Ca = 0

                '03/24/2011**, lss
                .MgPltTcn.FeAdj = 0
                .MgPltTcn.IaAdj = 0

                .MgPltTpr.Tpa = 0
                .MgPltTpr.WtPct = 0
                .MgPltTpr.Bpl = 0
                .MgPltTpr.Ins = 0
                .MgPltTpr.Fe = 0
                .MgPltTpr.Al = 0
                .MgPltTpr.Ia = 0
                .MgPltTpr.Mg = 0
                .MgPltTpr.Ca = 0

                '03/24/2011**, lss
                .MgPltTpr.FeAdj = 0
                .MgPltTpr.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.
                'If the total pebble BPL is too low or the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbBpl < aRcvryParamsData.MplRejBplTarg Or TpbMg >= aRcvryParamsData.MplRejMgoTarg Then
                    'This pebble is MgO plant reject.

                    .MgPltInp.Tpa = 0
                    .MgPltInp.WtPct = 0
                    .MgPltInp.Bpl = 0
                    .MgPltInp.Ins = 0
                    .MgPltInp.Fe = 0
                    .MgPltInp.Al = 0
                    .MgPltInp.Ia = 0
                    .MgPltInp.Mg = 0
                    .MgPltInp.Ca = 0

                    '03/24/2011**, lss
                    .MgPltInp.FeAdj = 0
                    .MgPltInp.IaAdj = 0

                    .MgPltRej.Tpa = TpbTpa
                    .MgPltRej.WtPct = TpbWtPct
                    .MgPltRej.Bpl = TpbBpl
                    .MgPltRej.Ins = TpbIns
                    .MgPltRej.Fe = TpbFe
                    .MgPltRej.Al = TpbAl
                    .MgPltRej.Ia = TpbIA
                    .MgPltRej.Mg = TpbMg
                    .MgPltRej.Ca = TpbCa

                    '03/24/2011**, lss
                    .MgPltRej.FeAdj = TpbFeAdj
                    .MgPltRej.IaAdj = TpbIaAdj

                    .MgPltProd.Tpa = 0
                    .MgPltProd.Bpl = 0
                    .MgPltProd.Ins = 0
                    .MgPltProd.Fe = 0
                    .MgPltProd.Al = 0
                    .MgPltProd.Ca = 0
                    .MgPltProd.Mg = 0
                    .MgPltProd.Ia = 0

                    '03/24/2011**, lss
                    .MgPltProd.FeAdj = 0
                    .MgPltProd.IaAdj = 0
                    Exit Function
                End If

                'We have determined that we do not have reject -- now check to see if
                'we have pebble plant input.  If the total pebble BPL is less than the
                'MgO plant target or the total pebble BPL is greater than the MgO plant
                'target then we have MgO plant input!
                'Actually since it was not MgO plant reject it has to be MgO plant
                'input at this point!
                '09/05/2008, lss
                'Changed this from an And to an Or!
                If TpbBpl < aRcvryParamsData.MplInpBplTarg Or TpbMg > aRcvryParamsData.MplInpMgoTarg Then

                    .MgPltInp.Tpa = TpbTpa
                    .MgPltInp.WtPct = TpbWtPct
                    .MgPltInp.Bpl = TpbBpl
                    .MgPltInp.Ins = TpbIns
                    .MgPltInp.Fe = TpbFe
                    .MgPltInp.Al = TpbAl
                    .MgPltInp.Ia = TpbIA
                    .MgPltInp.Mg = TpbMg
                    .MgPltInp.Ca = TpbCa

                    .MgPltInp.FeAdj = TpbFeAdj
                    .MgPltInp.IaAdj = TpbIaAdj

                    'Need to determine the MgO plant product from this input.
                    If aRcvryParamsData.MplM1BplHwire <> 0 Then
                        .MgPltProd.Tpa = Round(.MgPltInp.Tpa * .MgPltInp.Bpl / aRcvryParamsData.MplM1BplHwire *
                                     (aRcvryParamsData.MplM1BpltRcvry / 100), 0)
                    Else
                        .MgPltProd.Tpa = 0
                    End If

                    .MgPltProd.Bpl = aRcvryParamsData.MplM1BplHwire
                    .MgPltProd.Ins = aRcvryParamsData.MplM1InsHwire
                    If .MgPltInp.Bpl <> 0 Then
                        .MgPltProd.Fe = Round(.MgPltInp.Fe / .MgPltInp.Bpl * .MgPltProd.Bpl, 2)
                    Else
                        .MgPltProd.Fe = 0
                    End If
                    If .MgPltInp.Bpl <> 0 Then
                        .MgPltProd.Al = Round(.MgPltInp.Al / .MgPltInp.Bpl * .MgPltProd.Bpl, 2)
                    Else
                        .MgPltProd.Al = 0
                    End If
                    If .MgPltInp.Bpl <> 0 Then
                        .MgPltProd.Ca = Round(.MgPltInp.Ca / .MgPltInp.Bpl * .MgPltProd.Bpl, 2)
                    Else
                        .MgPltProd.Ca = 0
                    End If
                    .MgPltProd.Mg = .MgPltInp.Mg * (1 - aRcvryParamsData.MplM1MgoImprove / 100)
                    .MgPltProd.Ia = .MgPltProd.Fe + .MgPltProd.Al

                    '03/24/2011**, lss
                    If .MgPltInp.Bpl <> 0 Then
                        .MgPltProd.FeAdj = Round(.MgPltInp.FeAdj / .MgPltInp.Bpl * .MgPltProd.Bpl, 2)
                    Else
                        .MgPltProd.FeAdj = 0
                    End If
                    .MgPltProd.IaAdj = .MgPltProd.FeAdj + .MgPltProd.Al

                    .MgPltRej.Tpa = 0
                    .MgPltRej.WtPct = 0
                    .MgPltRej.Bpl = 0
                    .MgPltRej.Ins = 0
                    .MgPltRej.Fe = 0
                    .MgPltRej.Al = 0
                    .MgPltRej.Ia = 0
                    .MgPltRej.Mg = 0
                    .MgPltRej.Ca = 0

                    '03/24/2011**, lss
                    .MgPltRej.FeAdj = 0
                    .MgPltRej.IaAdj = 0
                End If
            End With
        End If
    End Function

    Private Sub CalcTcnPlusMgPltProd(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                 ByVal aCalcType As String,
                                 ByVal aMode As String,
                                 ByVal aSplitNumber As Integer)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                'If .MgPltProd.Tpa = 0 then no Off-spec MgO plant product has been determined!
                'However we still want to track these MgPltTcn values.
                'They will be the same as the "normal" plant values!

                .MgPltTcn.Tpa = 0
                .MgPltTcn.Tpa = .Tcn.Tpa + .MgPltProd.Tpa

                .MgPltTcn.Bpl = gGetTotalValue2(.Tcn.Bpl, .Tcn.Tpa,
                                            .MgPltProd.Bpl, .MgPltProd.Tpa, 1)
                .MgPltTcn.Ins = gGetTotalValue2(.Tcn.Ins, .Tcn.Tpa,
                                            .MgPltProd.Ins, .MgPltProd.Tpa, 1)
                .MgPltTcn.Ia = gGetTotalValue2(.Tcn.Ia, .Tcn.Tpa,
                                           .MgPltProd.Ia, .MgPltProd.Tpa, 2)
                .MgPltTcn.Ca = gGetTotalValue2(.Tcn.Ca, .Tcn.Tpa,
                                           .MgPltProd.Ca, .MgPltProd.Tpa, 2)

                .MgPltTcn.Fe = gGetTotalValue2(.Tcn.Fe, .Tcn.Tpa,
                                           .MgPltProd.Fe, .MgPltProd.Tpa, 2)
                .MgPltTcn.Al = gGetTotalValue2(.Tcn.Al, .Tcn.Tpa,
                                           .MgPltProd.Al, .MgPltProd.Tpa, 2)
                .MgPltTcn.Mg = gGetTotalValue2(.Tcn.Mg, .Tcn.Tpa,
                                           .MgPltProd.Mg, .MgPltProd.Tpa, 2)

                '03/24/2011**, lss
                .MgPltTcn.FeAdj = gGetTotalValue2(.Tcn.FeAdj, .Tcn.Tpa,
                                              .MgPltProd.FeAdj, .MgPltProd.Tpa, 2)
                .MgPltTcn.IaAdj = gGetTotalValue2(.Tcn.IaAdj, .Tcn.Tpa,
                                              .MgPltProd.IaAdj, .MgPltProd.Tpa, 2)
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                'If .MgPltProd100.Tpa = 0 then no Off-spec MgO plant product has been determined!
                'However we still want to track these MgPltTcn values.
                'They will be the same as the "normal" plant values!

                .MgPltTcn100.Tpa = 0
                .MgPltTcn100.Tpa = .Tcn100.Tpa + .MgPltProd100.Tpa

                .MgPltTcn100.Bpl = gGetTotalValue2(.Tcn100.Bpl, .Tcn100.Tpa,
                                               .MgPltProd100.Bpl, .MgPltProd100.Tpa, 1)
                .MgPltTcn100.Ins = gGetTotalValue2(.Tcn100.Ins, .Tcn100.Tpa,
                                               .MgPltProd100.Ins, .MgPltProd100.Tpa, 1)
                .MgPltTcn100.Ia = gGetTotalValue2(.Tcn100.Ia, .Tcn100.Tpa,
                                               .MgPltProd100.Ia, .MgPltProd100.Tpa, 2)
                .MgPltTcn100.Ca = gGetTotalValue2(.Tcn100.Ca, .Tcn100.Tpa,
                                               .MgPltProd100.Ca, .MgPltProd100.Tpa, 2)

                .MgPltTcn100.Fe = gGetTotalValue2(.Tcn100.Fe, .Tcn100.Tpa,
                                               .MgPltProd100.Fe, .MgPltProd100.Tpa, 2)
                .MgPltTcn100.Al = gGetTotalValue2(.Tcn100.Al, .Tcn100.Tpa,
                                               .MgPltProd100.Al, .MgPltProd100.Tpa, 2)
                .MgPltTcn100.Mg = gGetTotalValue2(.Tcn100.Mg, .Tcn100.Tpa,
                                               .MgPltProd100.Mg, .MgPltProd100.Tpa, 2)


                '03/24/2011**, lss
                .MgPltTcn100.FeAdj = gGetTotalValue2(.Tcn100.FeAdj, .Tcn100.Tpa,
                                                 .MgPltProd100.FeAdj, .MgPltProd100.Tpa, 2)
                .MgPltTcn100.IaAdj = gGetTotalValue2(.Tcn100.IaAdj, .Tcn100.Tpa,
                                                 .MgPltProd100.IaAdj, .MgPltProd100.Tpa, 2)
            End With
        End If
    End Sub

    Private Sub CalcTprPlusMgPltProd(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                 ByVal aCalcType As String,
                                 ByVal aMode As String,
                                 ByVal aSplitNumber As Integer)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                'If .MgPltProd.Tpa = 0 then no Off-spec MgO plant product has been determined!
                'However we still want to track these MgPltTpr values.
                'They will be the same as the "normal" plant values!

                .MgPltTpr.Tpa = 0
                .MgPltTpr.Tpa = .Tpr.Tpa + .MgPltProd.Tpa

                .MgPltTpr.Bpl = gGetTotalValue2(.Tpr.Bpl, .Tpr.Tpa,
                                               .MgPltProd.Bpl, .MgPltProd.Tpa, 1)
                .MgPltTpr.Ins = gGetTotalValue2(.Tpr.Ins, .Tpr.Tpa,
                                               .MgPltProd.Ins, .MgPltProd.Tpa, 1)
                .MgPltTpr.Ia = gGetTotalValue2(.Tpr.Ia, .Tpr.Tpa,
                                               .MgPltProd.Ia, .MgPltProd.Tpa, 2)
                .MgPltTpr.Ca = gGetTotalValue2(.Tpr.Ca, .Tpr.Tpa,
                                               .MgPltProd.Ca, .MgPltProd.Tpa, 2)

                .MgPltTpr.Fe = gGetTotalValue2(.Tpr.Fe, .Tpr.Tpa,
                                               .MgPltProd.Fe, .MgPltProd.Tpa, 2)
                .MgPltTpr.Al = gGetTotalValue2(.Tpr.Al, .Tpr.Tpa,
                                               .MgPltProd.Al, .MgPltProd.Tpa, 2)
                .MgPltTpr.Mg = gGetTotalValue2(.Tpr.Mg, .Tpr.Tpa,
                                               .MgPltProd.Mg, .MgPltProd.Tpa, 2)

                '03/24/2011**, lss
                .MgPltTpr.FeAdj = gGetTotalValue2(.Tpr.FeAdj, .Tpr.Tpa,
                                              .MgPltProd.FeAdj, .MgPltProd.Tpa, 2)
                .MgPltTpr.IaAdj = gGetTotalValue2(.Tpr.IaAdj, .Tpr.Tpa,
                                              .MgPltProd.IaAdj, .MgPltProd.Tpa, 2)
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                'If .MgPltProd.Tpa = 0 then no Off-spec MgO plant product has been determined!
                'However we still want to track these MgPltTpr values.
                'They will be the same as the "normal" plant values!

                .MgPltTpr100.Tpa = 0
                .MgPltTpr100.Tpa = .Tpr100.Tpa + .MgPltProd100.Tpa

                .MgPltTpr100.Bpl = gGetTotalValue2(.Tpr100.Bpl, .Tpr100.Tpa,
                                               .MgPltProd100.Bpl, .MgPltProd100.Tpa, 1)
                .MgPltTpr100.Ins = gGetTotalValue2(.Tpr100.Ins, .Tpr100.Tpa,
                                               .MgPltProd100.Ins, .MgPltProd100.Tpa, 1)
                .MgPltTpr100.Ia = gGetTotalValue2(.Tpr100.Ia, .Tpr100.Tpa,
                                               .MgPltProd100.Ia, .MgPltProd100.Tpa, 2)
                .MgPltTpr100.Ca = gGetTotalValue2(.Tpr100.Ca, .Tpr100.Tpa,
                                               .MgPltProd100.Ca, .MgPltProd100.Tpa, 2)

                .MgPltTpr100.Fe = gGetTotalValue2(.Tpr100.Fe, .Tpr100.Tpa,
                                               .MgPltProd100.Fe, .MgPltProd100.Tpa, 2)
                .MgPltTpr100.Al = gGetTotalValue2(.Tpr100.Al, .Tpr100.Tpa,
                                               .MgPltProd100.Al, .MgPltProd100.Tpa, 2)
                .MgPltTpr100.Mg = gGetTotalValue2(.Tpr100.Mg, .Tpr100.Tpa,
                                               .MgPltProd100.Mg, .MgPltProd100.Tpa, 2)

                '03/24/2011**, lss
                .MgPltTpr100.FeAdj = gGetTotalValue2(.Tpr100.FeAdj, .Tpr100.Tpa,
                                                 .MgPltProd100.FeAdj, .MgPltProd100.Tpa, 2)
                .MgPltTpr100.IaAdj = gGetTotalValue2(.Tpr100.IaAdj, .Tpr100.Tpa,
                                                 .MgPltProd100.IaAdj, .MgPltProd100.Tpa, 2)
            End With
        End If
    End Sub

    Private Sub PlaceOffSpecPbPltInReview(ByRef aSsDataReview As AxvaSpread,
                                          ByVal aRdctnCalcData As gRawProspSplRdctnType,
                                          ByVal aRow As Long)


        With aRdctnCalcData
            '100% Prospect  100% Prospect  100% Prospect
            '100% Prospect  100% Prospect  100% Prospect
            '100% Prospect  100% Prospect  100% Prospect

            'Off-spec pebble MgO plant reject
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 391
            aSsDataReview.Value = .MgPltRej100.Tpa
            aSsDataReview.Col = 392
            aSsDataReview.Value = .MgPltRej100.WtPct
            aSsDataReview.Col = 393
            aSsDataReview.Value = .MgPltRej100.Bpl
            aSsDataReview.Col = 394
            aSsDataReview.Value = .MgPltRej100.Ins
            aSsDataReview.Col = 395
            aSsDataReview.Value = .MgPltRej100.Ia
            aSsDataReview.Col = 396
            aSsDataReview.Value = .MgPltRej100.Fe
            aSsDataReview.Col = 397
            aSsDataReview.Value = .MgPltRej100.Al
            aSsDataReview.Col = 398
            aSsDataReview.Value = .MgPltRej100.Mg
            aSsDataReview.Col = 399
            aSsDataReview.Value = .MgPltRej100.Ca
            aSsDataReview.Col = 400
            aSsDataReview.Value = .MgPltRej100.Mer
            aSsDataReview.Col = 401
            aSsDataReview.Value = .MgPltRej100.CaOP2O5
            '-----
            'Off-spec pebble MgO plant input
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 380
            aSsDataReview.Value = .MgPltInp100.Tpa
            aSsDataReview.Col = 381
            aSsDataReview.Value = .MgPltInp100.WtPct
            aSsDataReview.Col = 382
            aSsDataReview.Value = .MgPltInp100.Bpl
            aSsDataReview.Col = 383
            aSsDataReview.Value = .MgPltInp100.Ins
            aSsDataReview.Col = 384
            aSsDataReview.Value = .MgPltInp100.Ia
            aSsDataReview.Col = 385
            aSsDataReview.Value = .MgPltInp100.Fe
            aSsDataReview.Col = 386
            aSsDataReview.Value = .MgPltInp100.Al
            aSsDataReview.Col = 387
            aSsDataReview.Value = .MgPltInp100.Mg
            aSsDataReview.Col = 388
            aSsDataReview.Value = .MgPltInp100.Ca
            aSsDataReview.Col = 389
            aSsDataReview.Value = .MgPltInp100.Mer
            aSsDataReview.Col = 390
            aSsDataReview.Value = .MgPltInp100.CaOP2O5
            '-----
            'Off-spec pebble MgO plant product
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 402
            aSsDataReview.Value = .MgPltProd100.Tpa
            aSsDataReview.Col = 403
            aSsDataReview.Value = .MgPltProd100.WtPct
            aSsDataReview.Col = 404
            aSsDataReview.Value = .MgPltProd100.Bpl
            aSsDataReview.Col = 405
            aSsDataReview.Value = .MgPltProd100.Ins
            aSsDataReview.Col = 406
            aSsDataReview.Value = .MgPltProd100.Ia
            aSsDataReview.Col = 407
            aSsDataReview.Value = .MgPltProd100.Fe
            aSsDataReview.Col = 408
            aSsDataReview.Value = .MgPltProd100.Al
            aSsDataReview.Col = 409
            aSsDataReview.Value = .MgPltProd100.Mg
            aSsDataReview.Col = 410
            aSsDataReview.Value = .MgPltProd100.Ca
            aSsDataReview.Col = 411
            aSsDataReview.Value = .MgPltProd100.Mer
            aSsDataReview.Col = 412
            aSsDataReview.Value = .MgPltProd100.CaOP2O5

            '03/24/2011**, lss
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 815
            aSsDataReview.Value = .MgPltInp100.FeAdj
            aSsDataReview.Col = 816
            aSsDataReview.Value = .MgPltInp100.IaAdj

            aSsDataReview.Col = 817
            aSsDataReview.Value = .MgPltRej100.FeAdj
            aSsDataReview.Col = 818
            aSsDataReview.Value = .MgPltRej100.IaAdj

            aSsDataReview.Col = 819
            aSsDataReview.Value = .MgPltProd100.FeAdj
            aSsDataReview.Col = 820
            aSsDataReview.Value = .MgPltProd100.IaAdj

            aSsDataReview.Col = 821
            aSsDataReview.Value = .MgPltTcn100.FeAdj
            aSsDataReview.Col = 822
            aSsDataReview.Value = .MgPltTcn100.IaAdj

            aSsDataReview.Col = 823
            aSsDataReview.Value = .MgPltTpr100.FeAdj
            aSsDataReview.Col = 824
            aSsDataReview.Value = .MgPltTpr100.IaAdj

            'Product coefficient  Product coefficient
            'Product coefficient  Product coefficient
            'Product coefficient  Product coefficient

            'Off-spec pebble MgO plant reject
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 358
            aSsDataReview.Value = .MgPltRej.Tpa
            aSsDataReview.Col = 359
            aSsDataReview.Value = .MgPltRej.WtPct
            aSsDataReview.Col = 360
            aSsDataReview.Value = .MgPltRej.Bpl
            aSsDataReview.Col = 361
            aSsDataReview.Value = .MgPltRej.Ins
            aSsDataReview.Col = 362
            aSsDataReview.Value = .MgPltRej.Ia
            aSsDataReview.Col = 363
            aSsDataReview.Value = .MgPltRej.Fe
            aSsDataReview.Col = 364
            aSsDataReview.Value = .MgPltRej.Al
            aSsDataReview.Col = 365
            aSsDataReview.Value = .MgPltRej.Mg
            aSsDataReview.Col = 366
            aSsDataReview.Value = .MgPltRej.Ca
            aSsDataReview.Col = 367
            aSsDataReview.Value = .MgPltRej.Mer
            aSsDataReview.Col = 368
            aSsDataReview.Value = .MgPltRej.CaOP2O5

            'Off-spec MgO pebble plant input
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 347
            aSsDataReview.Value = .MgPltInp.Tpa
            aSsDataReview.Col = 348
            aSsDataReview.Value = .MgPltInp.WtPct
            aSsDataReview.Col = 349
            aSsDataReview.Value = .MgPltInp.Bpl
            aSsDataReview.Col = 350
            aSsDataReview.Value = .MgPltInp.Ins
            aSsDataReview.Col = 351
            aSsDataReview.Value = .MgPltInp.Ia
            aSsDataReview.Col = 352
            aSsDataReview.Value = .MgPltInp.Fe
            aSsDataReview.Col = 353
            aSsDataReview.Value = .MgPltInp.Al
            aSsDataReview.Col = 354
            aSsDataReview.Value = .MgPltInp.Mg
            aSsDataReview.Col = 355
            aSsDataReview.Value = .MgPltInp.Ca
            aSsDataReview.Col = 356
            aSsDataReview.Value = .MgPltInp.Mer
            aSsDataReview.Col = 357
            aSsDataReview.Value = .MgPltInp.CaOP2O5

            'Off-spec MgO pebble plant product
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 369
            aSsDataReview.Value = .MgPltProd.Tpa
            aSsDataReview.Col = 370
            aSsDataReview.Value = .MgPltProd.WtPct
            aSsDataReview.Col = 371
            aSsDataReview.Value = .MgPltProd.Bpl
            aSsDataReview.Col = 372
            aSsDataReview.Value = .MgPltProd.Ins
            aSsDataReview.Col = 373
            aSsDataReview.Value = .MgPltProd.Ia
            aSsDataReview.Col = 374
            aSsDataReview.Value = .MgPltProd.Fe
            aSsDataReview.Col = 375
            aSsDataReview.Value = .MgPltProd.Al
            aSsDataReview.Col = 376
            aSsDataReview.Value = .MgPltProd.Mg
            aSsDataReview.Col = 377
            aSsDataReview.Value = .MgPltProd.Ca
            aSsDataReview.Col = 378
            aSsDataReview.Value = .MgPltProd.Mer
            aSsDataReview.Col = 379
            aSsDataReview.Value = .MgPltProd.CaOP2O5

            '03/24/2011**, lss
            aSsDataReview.Row = aRow
            aSsDataReview.Col = 805
            aSsDataReview.Value = .MgPltInp.FeAdj
            aSsDataReview.Col = 806
            aSsDataReview.Value = .MgPltInp.IaAdj

            aSsDataReview.Col = 807
            aSsDataReview.Value = .MgPltRej.FeAdj
            aSsDataReview.Col = 808
            aSsDataReview.Value = .MgPltRej.IaAdj

            aSsDataReview.Col = 809
            aSsDataReview.Value = .MgPltProd.FeAdj
            aSsDataReview.Col = 810
            aSsDataReview.Value = .MgPltProd.IaAdj

            aSsDataReview.Col = 811
            aSsDataReview.Value = .MgPltTcn.FeAdj
            aSsDataReview.Col = 812
            aSsDataReview.Value = .MgPltTcn.IaAdj

            aSsDataReview.Col = 813
            aSsDataReview.Value = .MgPltTpr.FeAdj
            aSsDataReview.Col = 814
            aSsDataReview.Value = .MgPltTpr.IaAdj
        End With
    End Sub

    Private Function ZeroOffSpecPbPltProcess(ByRef aRdctnCalcData As gRawProspSplRdctnType)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        With aRdctnCalcData
            .MgPltTcn100.Tpa = 0
            .MgPltTcn100.WtPct = 0
            .MgPltTcn100.Bpl = 0
            .MgPltTcn100.Ins = 0
            .MgPltTcn100.Fe = 0
            .MgPltTcn100.FeAdj = 0
            .MgPltTcn100.Al = 0
            .MgPltTcn100.Ia = 0
            .MgPltTcn100.IaAdj = 0
            .MgPltTcn100.Mg = 0
            .MgPltTcn100.Ca = 0

            .MgPltTpr100.Tpa = 0
            .MgPltTpr100.WtPct = 0
            .MgPltTpr100.Bpl = 0
            .MgPltTpr100.Ins = 0
            .MgPltTpr100.Fe = 0
            .MgPltTpr100.FeAdj = 0
            .MgPltTpr100.Al = 0
            .MgPltTpr100.Ia = 0
            .MgPltTpr100.IaAdj = 0
            .MgPltTpr100.Mg = 0
            .MgPltTpr100.Ca = 0

            .MgPltInp100.Tpa = 0
            .MgPltInp100.WtPct = 0
            .MgPltInp100.Bpl = 0
            .MgPltInp100.Ins = 0
            .MgPltInp100.Fe = 0
            .MgPltInp100.FeAdj = 0
            .MgPltInp100.Al = 0
            .MgPltInp100.Ia = 0
            .MgPltInp100.IaAdj = 0
            .MgPltInp100.Mg = 0
            .MgPltInp100.Ca = 0

            .MgPltRej100.Tpa = 0
            .MgPltRej100.WtPct = 0
            .MgPltRej100.Bpl = 0
            .MgPltRej100.Ins = 0
            .MgPltRej100.Fe = 0
            .MgPltRej100.FeAdj = 0
            .MgPltRej100.Al = 0
            .MgPltRej100.Ia = 0
            .MgPltRej100.IaAdj = 0
            .MgPltRej100.Mg = 0
            .MgPltRej100.Ca = 0

            .MgPltProd100.Tpa = 0
            .MgPltProd100.Bpl = 0
            .MgPltProd100.Ins = 0
            .MgPltProd100.Fe = 0
            .MgPltProd100.FeAdj = 0
            .MgPltProd100.Al = 0
            .MgPltProd100.Ca = 0
            .MgPltProd100.Mg = 0
            .MgPltProd100.Ia = 0
            .MgPltProd100.IaAdj = 0

            .MgPltTcn.Tpa = 0
            .MgPltTcn.WtPct = 0
            .MgPltTcn.Bpl = 0
            .MgPltTcn.Ins = 0
            .MgPltTcn.Fe = 0
            .MgPltTcn.FeAdj = 0
            .MgPltTcn.Al = 0
            .MgPltTcn.Ia = 0
            .MgPltTcn.IaAdj = 0
            .MgPltTcn.Mg = 0
            .MgPltTcn.Ca = 0

            .MgPltTpr.Tpa = 0
            .MgPltTpr.WtPct = 0
            .MgPltTpr.Bpl = 0
            .MgPltTpr.Ins = 0
            .MgPltTpr.Fe = 0
            .MgPltTpr.FeAdj = 0
            .MgPltTpr.Al = 0
            .MgPltTpr.Ia = 0
            .MgPltTpr.IaAdj = 0
            .MgPltTpr.Mg = 0
            .MgPltTpr.Ca = 0

            .MgPltInp.Tpa = 0
            .MgPltInp.WtPct = 0
            .MgPltInp.Bpl = 0
            .MgPltInp.Ins = 0
            .MgPltInp.Fe = 0
            .MgPltInp.FeAdj = 0
            .MgPltInp.Al = 0
            .MgPltInp.Ia = 0
            .MgPltInp.IaAdj = 0
            .MgPltInp.Mg = 0
            .MgPltInp.Ca = 0

            .MgPltRej.Tpa = 0
            .MgPltRej.WtPct = 0
            .MgPltRej.Bpl = 0
            .MgPltRej.Ins = 0
            .MgPltRej.Fe = 0
            .MgPltRej.FeAdj = 0
            .MgPltRej.Al = 0
            .MgPltRej.Ia = 0
            .MgPltRej.IaAdj = 0
            .MgPltRej.Mg = 0
            .MgPltRej.Ca = 0

            .MgPltProd.Tpa = 0
            .MgPltProd.Bpl = 0
            .MgPltProd.Ins = 0
            .MgPltProd.Fe = 0
            .MgPltProd.FeAdj = 0
            .MgPltProd.Al = 0
            .MgPltProd.Ca = 0
            .MgPltProd.Mg = 0
            .MgPltProd.Ia = 0
            .MgPltProd.IaAdj = 0
        End With
    End Function

    Private Sub CalcOffSpecPbPltHoleWtPcts(ByRef aHoleData As gRawProspSplRdctnType,
                                       ByVal aWhichToCalc As String)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'aWhichToCalc will be "ProdCoeff", "100%" or "Both"

        With aHoleData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'Prod coefficient
                If .MtxTpaPc <> 0 Then
                    .MgPltInp.WtPct = Round(.MgPltInp.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .MgPltInp.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .MgPltRej.WtPct = Round(.MgPltRej.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .MgPltRej.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .MgPltProd.WtPct = Round(.MgPltProd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .MgPltProd.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .MgPltTcn.WtPct = Round(.MgPltTcn.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .MgPltTcn.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .MgPltTpr.WtPct = Round(.MgPltTpr.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .MgPltTpr.WtPct = 0
                End If
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100%
                If .MtxTPA <> 0 Then
                    .MgPltInp100.WtPct = Round(.MgPltInp100.Tpa / .MtxTPA * 100, 2)
                Else
                    .MgPltInp100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .MgPltRej100.WtPct = Round(.MgPltRej100.Tpa / .MtxTPA * 100, 2)
                Else
                    .MgPltRej100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .MgPltProd100.WtPct = Round(.MgPltProd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .MgPltProd100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .MgPltTcn100.WtPct = Round(.MgPltTcn100.Tpa / .MtxTPA * 100, 2)
                Else
                    .MgPltTcn100.WtPct = 0
                End If
                If .MtxTPA <> 0 Then
                    .MgPltTpr100.WtPct = Round(.MgPltTpr100.Tpa / .MtxTPA * 100, 2)
                Else
                    .MgPltTpr100.WtPct = 0
                End If
            End If
        End With
    End Sub

    Public Sub gSetOverrideZeros(ByRef aProspData As gRawProspSplRdctnType,
                             ByVal aOvbThk As Single)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        With aProspData
            .MtxDensity = 0
            .MtxPctSol = 0
            .MtxThk = 0
            .WstThk = 0
            .MtxBPL = 0
            .MtxTPA = 0
            .OvbThk = aOvbThk
            '-----
            .Cpb100.WtPct = 0
            .Cpb100.Tpa = 0
            .Cpb100.Bpl = 0
            .Cpb100.Ins = 0
            .Cpb100.Fe = 0
            .Cpb100.Al = 0
            .Cpb100.Mg = 0
            .Cpb100.Ca = 0
            '-----
            .Fpb100.WtPct = 0
            .Fpb100.Tpa = 0
            .Fpb100.Bpl = 0
            .Fpb100.Ins = 0
            .Fpb100.Fe = 0
            .Fpb100.Al = 0
            .Fpb100.Mg = 0
            .Fpb100.Ca = 0
            '-----
            .Tfd100.WtPct = 0
            .Tfd100.Tpa = 0
            .Tfd100.Bpl = 0
            .Wcl100.WtPct = 0
            .Wcl100.Tpa = 0
            .Cfd100.Bpl = 0
            .Ffd100.Bpl = 0
            .Cfd100.Tpa = 0
            .Ffd100.Tpa = 0
            '-----
            .Tcn100.WtPct = 0
            .Tcn100.Tpa = 0
            .Tcn100.Bpl = 0
            .Tcn100.Ins = 0
            .Tcn100.Fe = 0
            .Tcn100.Al = 0
            .Tcn100.Mg = 0
            .Tcn100.Ca = 0
            '-----
            .MgPltTcn100.WtPct = 0
            .MgPltTcn100.Tpa = 0
            .MgPltTcn100.Bpl = 0
            .MgPltTcn100.Ins = 0
            .MgPltTcn100.Fe = 0
            .MgPltTcn100.Al = 0
            .MgPltTcn100.Mg = 0
            .MgPltTcn100.Ca = 0
            '-----
            .Tpr100.WtPct = 0
            .Tpr100.Tpa = 0
            .Tpr100.Bpl = 0
            .Tpr100.Ins = 0
            .Tpr100.Fe = 0
            .Tpr100.Al = 0
            .Tpr100.Mg = 0
            .Tpr100.Ca = 0
            '-----
            .MtxxAll100Hole = 0
            .MtxTpaPc = 0
            '-----
            .Cpb.WtPct = 0
            .Cpb.Tpa = 0
            .Cpb.Bpl = 0
            .Cpb.Ins = 0
            .Cpb.Fe = 0
            .Cpb.Al = 0
            .Cpb.Mg = 0
            .Cpb.Ca = 0
            '-----
            .Fpb.WtPct = 0
            .Fpb.Tpa = 0
            .Fpb.Bpl = 0
            .Fpb.Ins = 0
            .Fpb.Fe = 0
            .Fpb.Al = 0
            .Fpb.Mg = 0
            .Fpb.Ca = 0
            '-----
            .Tfd.WtPct = 0
            .Tfd.Tpa = 0
            .Tfd.Bpl = 0
            '-----
            .Wcl.WtPct = 0
            .Wcl.Tpa = 0
            '-----
            .Cfd.Bpl = 0
            .Ffd.Bpl = 0
            .Cfd.Tpa = 0
            .Ffd.Tpa = 0
            '-----
            .Tcn.WtPct = 0
            .Tcn.Tpa = 0
            .Tcn.Bpl = 0
            .Tcn.Ins = 0
            .Tcn.Fe = 0
            .Tcn.Al = 0
            .Tcn.Mg = 0
            .Tcn.Ca = 0
            '-----
            .MgPltTcn.WtPct = 0
            .MgPltTcn.Tpa = 0
            .MgPltTcn.Bpl = 0
            .MgPltTcn.Ins = 0
            .MgPltTcn.Fe = 0
            .MgPltTcn.Al = 0
            .MgPltTcn.Mg = 0
            .MgPltTcn.Ca = 0
            '-----
            .Tpr.WtPct = 0
            .Tpr.Tpa = 0
            .Tpr.Bpl = 0
            .Tpr.Ins = 0
            .Tpr.Fe = 0
            .Tpr.Al = 0
            .Tpr.Mg = 0
            .Tpr.Ca = 0
            '-----
            .MtxxAllPcHole = 0
            '-----
            .Tpb100.WtPct = 0
            .Tpb100.Tpa = 0
            .Tpb100.Bpl = 0
            .Tpb100.Ins = 0
            .Tpb100.Fe = 0
            .Tpb100.Al = 0
            .Tpb100.Mg = 0
            .Tpb100.Ca = 0
            '-----
            .Tpb.WtPct = 0
            .Tpb.Tpa = 0
            .Tpb.Bpl = 0
            .Tpb.Ins = 0
            .Tpb.Fe = 0
            .Tpb.Al = 0
            .Tpb.Mg = 0
            .Tpb.Ca = 0
        End With
    End Sub

    Private Sub PlaceInRawProspMinSprd(ByRef aSsRawProspMin As AxvaSpread,
                                       ByVal aProcData As gProcDataType)


        With aSsRawProspMin
            .MaxRows = .MaxRows + 1
            .Row = .MaxRows
            .Col = 1
            .Text = gGetHoleLocationTrs(aProcData.Section,
                                        aProcData.Township,
                                        aProcData.Range,
                                        aProcData.HoleLocation)
            .Col = 2
            .Value = aProcData.SplitNumber
            .Col = 3
            .Text = Format(Date.ParseExact(aProcData.ProspDate, "MM/dd/yyyy", System.Globalization.DateTimeFormatInfo.InvariantInfo), "MM/dd/yyyy")
            .Col = 4
            Select Case aProcData.SplitRawProspMin
                Case Is = 0
                    .Text = "No"
                Case Is = 1
                    .Text = "Yes"
                Case Else
                    .Text = "?"
            End Select
            .Col = 5
            If aProcData.SplitRawProspMinWhen <> #12/31/8888# Then
                .Text = Format(aProcData.SplitRawProspMinWhen, "MM/dd/yyyy hh:mm tt")
            Else
                .Text = ""
            End If
            .Col = 6
            .Text = aProcData.SplitRawProspMinWho
            '-----
            .Col = 8
            Select Case aProcData.HoleRawProspMin
                Case Is = 0
                    .Text = "No"
                Case Is = 1
                    .Text = "Yes"
                Case Else
                    .Text = "?"
            End Select
            .Col = 9
            If aProcData.HoleRawProspMinWhen <> #12/31/8888# Then
                .Text = Format(aProcData.HoleRawProspMinWhen, "MM/dd/yyyy hh:mm tt")
            Else
                .Text = ""
            End If
            .Col = 10
            .Text = aProcData.HoleRawProspMinWho
        End With
    End Sub

    Public Function CreateAndSaveBdFormatTextFile(ByVal aProspDatasetTextFileName As String,
                                                  ByVal aSsCompReview As AxvaSpread,
                                                  ByVal aSsSplitReview As AxvaSpread,
                                                  ByVal a100Pct As Integer,
                                                  ByVal aProdCoeff As Integer,
                                                  ByVal aInclMgPlt As Integer,
                                                  ByVal aNoReview As Boolean,
                                                  ByVal aHoleCnt As Long,
                                                  ByVal aUseFeAdjust As Boolean,
                                                  ByVal aMineHasDoloflotPlt As Boolean) As Boolean


        On Error GoTo CreateAndSaveBdFormatTextFile

        Dim TextFileLevel As String
        Dim RowIdx As Integer
        Dim LineIdx As Integer
        Dim TfileStr As String

        Dim SplitData As gRawProspSplRdctnType
        Dim HoleData As gRawProspSplRdctnType
        Dim CurrHoleLocation As String
        Dim ThisHoleLocation As String
        Dim HoleCnt As Long
        Dim DataType As String
        Dim HeaderStr As String

        If a100Pct = 1 Then
            DataType = "100%"
        End If
        If aProdCoeff = 1 Then
            DataType = "PC"
        End If

        CurrHoleLocation = ""
        ThisHoleLocation = ""
        HoleCnt = 0

        'MOIS text transfer file is based on the IMC RAR transfer text file
        'format -- Holes and splits combined.

        'Check comma-delimited text file name.
        If Trim(aProspDatasetTextFileName) = "" Or
            Mid(aProspDatasetTextFileName,
                Len(aProspDatasetTextFileName)) = "\" Then

            MsgBox("You must enter a text file name." +
                    Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                    vbExclamation, "Error Saving Data")

            CreateAndSaveBdFormatTextFile = False
            Exit Function
        End If

        'Check to see if user has generated any data.
        If aSsSplitReview.MaxRows = 0 Then
            MsgBox("You have not generated any reduced prospect data!" +
                    Chr(10) + Chr(10) + "Reduced raw prospect data not saved!",
                    vbExclamation, "Error Saving Data")

            CreateAndSaveBdFormatTextFile = False
            Exit Function
        End If

        'Create the transfer text file
        If gFileNumber = -99 Then
            gFileNumber = FreeFile()
            'Open aProspDatasetTextFileName For Output As #gFileNumber
        End If

        'Put a header row in the text file -- don't really need it but will
        'put it in so that it matches with the IMC RAR text file format!
        If aHoleCnt = 1 Then
            HeaderStr = GetTextFileHeaderBdFormat(aInclMgPlt,
                                                  aMineHasDoloflotPlt)
            'gWriteLine(gFileNumber, HeaderStr)
        End If

        'Process thru aSsSplitReview
        With aSsSplitReview
            For RowIdx = 1 To .MaxRows
                'See if this is the last split for a hole!
                .Row = RowIdx
                .Col = 1
                ThisHoleLocation = .Text

                If ThisHoleLocation <> CurrHoleLocation And CurrHoleLocation <> "" Then
                    'We have moved on to another hole -- need to add a "HLE" row for
                    'the hole we just finished.
                    HoleCnt = HoleCnt + 1

                    'Get the hole data
                    HoleData = gGetDataFromReviewSprd(aSsCompReview, HoleCnt)

                    'Add a hole row to the MOIS transfer file (HLE)
                    AddBdFormatTextFileHole(HoleData,
                                            gFileNumber,
                                            DataType,
                                            aInclMgPlt,
                                            aUseFeAdjust,
                                            aMineHasDoloflotPlt)
                End If

                'Get the split data
                SplitData = gGetDataFromReviewSprd(aSsSplitReview, RowIdx)

                'Add a split row to the MOIS transfer file (Snn - S01, S02, S03...)
                AddBdFormatTextFileSplit(SplitData,
                                         gFileNumber,
                                         DataType,
                                         aInclMgPlt,
                                         aUseFeAdjust,
                                         aMineHasDoloflotPlt)

                CurrHoleLocation = ThisHoleLocation
            Next RowIdx

            'Have one more hole row to add!
            HoleCnt = HoleCnt + 1

            'Get the hole data
            HoleData = gGetDataFromReviewSprd(aSsCompReview, HoleCnt)

            'Add a hole row to the MOIS transfer file (HLE)
            AddBdFormatTextFileHole(HoleData,
                                    gFileNumber,
                                    DataType,
                                    aInclMgPlt,
                                    aUseFeAdjust,
                                    aMineHasDoloflotPlt)
        End With

        If aNoReview = False Then
            'Close #gFileNumber
        End If
        CreateAndSaveBdFormatTextFile = True

        Exit Function

CreateAndSaveBdFormatTextFile:
        MsgBox("Error creating Bd format text file." & vbCrLf &
               Err.Description,
               vbOKOnly + vbExclamation,
               "BD Format Text File Error")
        CreateAndSaveBdFormatTextFile = False
        On Error Resume Next
        'Close #gFileNumber
    End Function

    Public Sub AddBdFormatTextFileHole(ByRef aHoleData As gRawProspSplRdctnType,
                                   ByVal aFileNumber As Integer,
                                   ByVal aDataType As String,
                                   ByVal aInclMgPlt As Integer,
                                   ByVal aUseFeAdjust As Boolean,
                                   ByVal aMineHasDoloflotPlt As Boolean)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim HoleDesc As String
        Dim TxtRow As String
        Dim Mineability As String
        Dim TotThk As Single
        '-----
        Dim TpaVal As Single
        Dim WtPctVal As Single
        Dim BplVal As Single
        Dim InsVal As Single
        Dim IaVal As Single
        Dim FeVal As Single
        Dim FeAdjVal As Single
        Dim AlVal As Single
        Dim MgVal As Single
        Dim CaVal As Single

        'Original
        '--------

        '  1) HOLEID
        '  2) XCOORD
        '  3) YCOORD
        '  4) SEC
        '  5) TWN
        '  6) RGE
        '  7) FTY
        '  8) HOLE
        '  9) SPL#
        ' 10) MINABLE
        ' 11) ELEVTN
        ' 12) FROM
        ' 13) TO
        ' 14) OVBTHK
        ' 15) MTXTHK   (Split thickness)
        ' 16) WSTTHK
        ' 17) TOTTHK
        '-----
        ' 18) TPRTPA   Total product
        ' 19) TPRBPL
        ' 20) TPRIA
        ' 21) TPRINS
        ' 22) TPRCAO
        ' 23) TPRMGO
        ' 24) TPRFE
        ' 25) TPRFEADJ
        ' 26) TPRAL
        ' 27) TPRPCT
        '-----
        ' 28) TPBTPA   Total pebble kept at washer
        ' 29) TPBBPL
        ' 30) TPBIA
        ' 31) TPBINS
        ' 32) TPBCAO
        ' 33) TPBMGO
        ' 34) TPBFE
        ' 35) TPBFEADJ
        ' 36) TPBAL
        ' 37) TPBPCT
        '-----
        ' 38) RPBTPA   Total pebble rejected at washer
        ' 39) RPBBPL
        ' 40) RPBIA
        ' 41) RPBINS
        ' 42) RPBCAO
        ' 43) RPBMGO
        ' 44) RPBFE
        ' 45) RPBFEADJ
        ' 46) RPBAL
        ' 47) RPBPCT
        '-----
        ' 48) IPTPA     IP
        ' 49) IPBPL
        ' 50) IPIA
        ' 51) IPINS
        ' 52) IPCAO
        ' 53) IPMGO
        ' 54) IPFE
        ' 55) IPFEADJ
        ' 56) IPAL
        ' 57) IPPCT
        '-----
        ' 58) TFDTPA   Total feed
        ' 59) TFDBPL
        ' 60) TFDPCT
        '-----
        ' 61) TCNTPA   Total concentrate
        ' 62) TCNBPL
        ' 63) TCNIA
        ' 64) TCNINS
        ' 65) TCNCPR
        ' 66) TCNMGO
        ' 67) TCNFE
        ' 68) TCNFEADJ
        ' 69) TCNAL
        ' 70) TCNPCT
        '-----
        ' 71) WCLTPA   Waste clay
        ' 72) WCLBPL
        ' 73) WCLPCT
        '-----
        ' 74) MTXX     Matrix "X"
        ' 75) TOTX     Total "X"
        ' 76) DENSTY   Matrix dry density
        '-----
        ' 77) PTPT     Total pb tons/ 1000 yds mtx -- Remove
        ' 78) FTPT     Total fd tons/ 1000 yds mtx -- Remove
        ' 79) CTPT     Total cn tons/ 1000 yds mtx -- Remove
        ' 80) STPT     Total wcl tons/ 1000 yds mtx -- Remove
        '-----
        ' 81) OWN      Ownership -- Remove?
        ' 82) LITHOL   Lithology -- Remove
        ' 83) PDTE     Prospect date
        '-----
        ' 84) CPBTPA
        ' 85) CPBBPL
        ' 86) CPBIA
        ' 87) CPBINS
        ' 88) CPBCAO
        ' 89) CPMGO
        ' 90) CPBFE
        ' 91) CPBFEADJ
        ' 92) CPBAL
        ' 93) CPBPCT
        '-----
        ' 94) FPBTPA
        ' 95) FPBBPL
        ' 96) FPBIA
        ' 97) FPBINS
        ' 98) FPBCAO
        ' 99) FPBMGO
        '100) FPBFE
        '101) FPBFEADJ
        '102) FPBAL
        '103) FPBPCT
        '-----
        '104) CFDTPA
        '105) CFDBPL
        '106) CFDPCT
        '107) FFDTPA
        '108) FFDBPL
        '109) FFDPCT
        '-----
        '110) MYPTA    Matrix "X" -- Remove  (already have)
        '111) TYPTA    Total "X"  -- Remove  (already have)
        '112) MPCTSOL  Matrix %solids
        '113) MTXTPA   Matrix TPA
        '114) OSTPA    Oversize TPA
        '----------
        '115) MITPA    MgO plant input
        '116) MIBPL
        '117) MIIA
        '118) MIINS
        '119) MICAO
        '120) MIMGO
        '121) MIFE
        '122) MIFEADJ
        '123) MIAL
        '124) MIPCT
        '-----
        '125) MRTPA   MgO plant reject
        '126) MRBPL
        '127) MRIA
        '128) MRINS
        '129) MRCAO
        '130) MRMGO
        '131) MRFE
        '132) MRFEADJ
        '133) MRAL
        '134) MRPCT
        '-----
        '135) MPTPA
        '136) MPBPL
        '137) MPIA
        '138) MPINS
        '139) MPCAO
        '140) MPMGO
        '141) MPFE
        '142) MPFEADJ
        '143) MPAL
        '144) MPPCT

        'Updated 06/15/2009
        '--------

        '  1) HOLEID
        '  2) XCOORD
        '  3) YCOORD
        '  4) SEC
        '  5) TWN
        '  6) RGE
        '  7) FTY
        '  8) HOLE
        '  9) SPL#
        ' 10) MINABLE
        ' 11) ELEVTN
        ' 12) FROM
        ' 13) TO
        ' 14) OVBTHK
        ' 15) MTXTHK   (Split thickness)
        ' 16) WSTTHK
        ' 17) TOTTHK
        '-----
        ' 18) TPRTPA   Total product
        ' 19) TPRBPL
        ' 20) TPRIA
        ' 21) TPRINS
        ' 22) TPRCAO
        ' 23) TPRMGO
        ' 24) TPRFE
        ' 25) TPRFEADJ
        ' 26) TPRAL
        ' 27) TPRPCT
        '-----
        ' 28) TPBTPA   Total pebble kept at washer
        ' 29) TPBBPL
        ' 30) TPBIA
        ' 31) TPBINS
        ' 32) TPBCAO
        ' 33) TPBMGO
        ' 34) TPBFE
        ' 35) TPBFEADJ
        ' 36) TPBAL
        ' 37) TPBPCT
        '-----
        ' 38) RPBTPA   Total pebble rejected at washer
        ' 39) RPBBPL
        ' 40) RPBIA
        ' 41) RPBINS
        ' 42) RPBCAO
        ' 43) RPBMGO
        ' 44) RPBFE
        ' 45) RPBFEADJ
        ' 46) RPBAL
        ' 47) RPBPCT
        '-----
        ' 48) IPTPA     IP
        ' 49) IPBPL
        ' 50) IPIA
        ' 51) IPINS
        ' 52) IPCAO
        ' 53) IPMGO
        ' 54) IPFE
        ' 55) IPFEADJ
        ' 56) IPAL
        ' 57) IPPCT
        '-----
        ' 58) TFDTPA   Total feed
        ' 59) TFDBPL
        ' 60) TFDPCT
        '-----
        ' 61) TCNTPA   Total concentrate
        ' 62) TCNBPL
        ' 63) TCNIA
        ' 64) TCNINS
        ' 65) TCNCPR
        ' 66) TCNMGO
        ' 67) TCNFE
        ' 68) TCNFEADJ
        ' 69) TCNAL
        ' 70) TCNPCT
        '-----
        ' 71) WCLTPA   Waste clay
        ' 72) WCLBPL
        ' 73) WCLPCT
        '-----
        ' 74) MTXX     Matrix "X"
        ' 75) TOTX     Total "X"
        ' 76) DENSTY   Matrix dry density
        '-----
        ' 77) OWN      Ownership -- Remove?
        ' 78) LITHOL   Lithology -- Remove
        ' 79) PDTE     Prospect date
        '-----
        ' 80) CPBTPA
        ' 81) CPBBPL
        ' 82) CPBIA
        ' 83) CPBINS
        ' 84) CPBCAO
        ' 85) CPMGO
        ' 86) CPBFE
        ' 87) CPBFEADJ
        ' 88) CPBAL
        ' 89) CPBPCT
        '-----
        ' 90) FPBTPA
        ' 91) FPBBPL
        ' 92) FPBIA
        ' 93) FPBINS
        ' 94) FPBCAO
        ' 95) FPBMGO
        ' 96) FPBFE
        ' 97) FPBFEADJ
        ' 98) FPBAL
        ' 99) FPBPCT
        '-----
        '100) CFDTPA
        '101) CFDBPL
        '102) CFDPCT
        '103) FFDTPA
        '104) FFDBPL
        '105) FFDPCT
        '-----
        '106) MPCTSOL  Matrix %solids
        '107) MTXTPA   Matrix TPA
        '108) OSTPA    Oversize TPA
        '----------
        '109) MITPA    MgO plant input
        '110) MIBPL
        '111) MIIA
        '112) MIINS
        '113) MICAO
        '114) MIMGO
        '115) MIFE
        '116) MIFEADJ
        '117) MIAL
        '118) MIPCT
        '-----
        '119) MRTPA   MgO plant reject
        '120) MRBPL
        '121) MRIA
        '122) MRINS
        '123) MRCAO
        '124) MRMGO
        '125) MRFE
        '126) MRFEADJ
        '127) MRAL
        '128) MRPCT
        '-----
        '129) MPTPA
        '130) MPBPL
        '131) MPIA
        '132) MPINS
        '133) MPCAO
        '134) MPMGO
        '135) MPFE
        '136) MPFEADJ
        '137) MPAL
        '138) MPPCT
        '-----
        '----- New stuff, 07/07/2010, lss
        '139) DFTPA  Doloflot pebble input
        '140) DFBPL
        '141) DFIA
        '142) DFINS
        '143) DFCAO
        '144) DFMGO
        '145) DFFE
        '146) DFFEADJ
        '147) DFAL
        '148) DFPCT
        '-----
        '149) DITPA  Doloflot IP input
        '150) DIBPL
        '151) DIIA
        '152) DIINS
        '153) DICAO
        '154) DIMGO
        '155) DIFE
        '156) DIFEADJ
        '157) DIAL
        '158) DIPCT
        '-----
        '159) DTTPA  Doloflot total input
        '160) DTBPL
        '161) DTIA
        '162) DTINS
        '163) DTCAO
        '164) DTMGO
        '165) DTFE
        '166) DTFEADJ
        '167) DTAL
        '168) DTPCT
        '-----
        '169) DPTPA  Doloflot total product
        '170) DPBPL
        '171) DPIA
        '172) DPINS
        '173) DPCAO
        '174) DPMGO
        '175) DPFE
        '176) DPFEADJ
        '177) DPAL
        '178) DPPCT
        '-----
        '179) RCPBTPA  Coarse pebble rejected  (Doloflot plant related sort of)
        '180) RCPBBPL
        '181) RCPBIA
        '182) RCPBINS
        '183) RCPBCAO
        '184) RCPMGO
        '185) RCPBFE
        '186) RCPBFEADJ
        '187) RCPBAL
        '188) RCPBPCT

        '"Standard" IMC hole location stuff
        'S01331212512043699
        '    ttrrssffhhhhss
        'tt = township
        'rr = range
        'ss = section
        'ff = forty
        'hhhh = hole location
        'ss = split  (for a hole row this is 99)
        'Will not show S013 at the beginning in this case!

        'Hole  Hole  Hole  Hole  Hole  Hole
        'Hole  Hole  Hole  Hole  Hole  Hole
        'Hole  Hole  Hole  Hole  Hole  Hole

        With aHoleData
            HoleDesc = "'" & gPadLeftChar(CStr(.Township), 2, "0") &
                   gPadLeftChar(CStr(.Range), 2, "0") &
                   gPadLeftChar(CStr(.Section), 2, "0") &
                   gPadLeftChar(CStr(.Forty), 2, "0") &
                   .HoleLocation & "99"

            TxtRow = HoleDesc & ","                         '1
            TxtRow = TxtRow & CStr(.Xcoord) & ","           '2
            TxtRow = TxtRow & CStr(.Ycoord) & ","           '3
            TxtRow = TxtRow & CStr(.Section) & ","          '4
            TxtRow = TxtRow & CStr(.Township) & ","         '5
            TxtRow = TxtRow & CStr(.Range) & ","            '6
            TxtRow = TxtRow & CStr(.Forty) & ","            '7
            TxtRow = TxtRow & .HoleLocation & ","           '8
            TxtRow = TxtRow & "HLE" & ","                   '9

            'MF = mineable forced
            If .MineableCalcd = "M" Or .MineableCalcd = "MF" Then
                Mineability = "M"
            Else
                Mineability = "U"
            End If
            TxtRow = TxtRow & Mineability & ","             '10
            TxtRow = TxtRow & CStr(.Elevation) & ","        '11

            'Split depth top -- don't need it here.
            TxtRow = TxtRow & " " & ","                     '12

            'Split depth bottom -- don't need it here.
            TxtRow = TxtRow & " " & ","                     '13

            TxtRow = TxtRow & CStr(.OvbThk) & ","           '14
            TxtRow = TxtRow & CStr(.MtxThk) & ","           '15
            TxtRow = TxtRow & CStr(.ItbThk) & ","           '16

            'Total thickness
            TotThk = .OvbThk + .MtxThk + .ItbThk
            TxtRow = TxtRow & CStr(TotThk) & ","            '17

            'Total product
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tpr100.Tpa) & ","   '18
                TxtRow = TxtRow & CStr(.Tpr100.Bpl) & ","   '19
                TxtRow = TxtRow & CStr(.Tpr100.Ia) & ","    '20
                TxtRow = TxtRow & CStr(.Tpr100.Ins) & ","   '21
                TxtRow = TxtRow & CStr(.Tpr100.Ca) & ","    '22
                TxtRow = TxtRow & CStr(.Tpr100.Mg) & ","    '23
                TxtRow = TxtRow & CStr(.Tpr100.Fe) & ","    '24
                TxtRow = TxtRow & CStr(.Tpr100.FeAdj) & "," '25
                TxtRow = TxtRow & CStr(.Tpr100.Al) & ","    '26
                TxtRow = TxtRow & CStr(.Tpr100.WtPct) & "," '27
            Else    'PC
                TxtRow = TxtRow & CStr(.Tpr.Tpa) & ","      '18
                TxtRow = TxtRow & CStr(.Tpr.Bpl) & ","      '19
                TxtRow = TxtRow & CStr(.Tpr.Ia) & ","       '20
                TxtRow = TxtRow & CStr(.Tpr.Ins) & ","      '21
                TxtRow = TxtRow & CStr(.Tpr.Ca) & ","       '22
                TxtRow = TxtRow & CStr(.Tpr.Mg) & ","       '23
                TxtRow = TxtRow & CStr(.Tpr.Fe) & ","       '24
                TxtRow = TxtRow & CStr(.Tpr.FeAdj) & ","    '25
                TxtRow = TxtRow & CStr(.Tpr.Al) & ","       '26
                TxtRow = TxtRow & CStr(.Tpr.WtPct) & ","    '27
            End If

            'Total pebble -- kept at washer
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tpb100.Tpa) & ","   '28
                TxtRow = TxtRow & CStr(.Tpb100.Bpl) & ","   '29
                TxtRow = TxtRow & CStr(.Tpb100.Ia) & ","    '30
                TxtRow = TxtRow & CStr(.Tpb100.Ins) & ","   '31
                TxtRow = TxtRow & CStr(.Tpb100.Ca) & ","    '32
                TxtRow = TxtRow & CStr(.Tpb100.Mg) & ","    '33
                TxtRow = TxtRow & CStr(.Tpb100.Fe) & ","    '34
                TxtRow = TxtRow & CStr(.Tpb100.FeAdj) & "," '35
                TxtRow = TxtRow & CStr(.Tpb100.Al) & ","    '36
                TxtRow = TxtRow & CStr(.Tpb100.WtPct) & "," '37
            Else    'PC
                TxtRow = TxtRow & CStr(.Tpb.Tpa) & ","      '28
                TxtRow = TxtRow & CStr(.Tpb.Bpl) & ","      '29
                TxtRow = TxtRow & CStr(.Tpb.Ia) & ","       '30
                TxtRow = TxtRow & CStr(.Tpb.Ins) & ","      '31
                TxtRow = TxtRow & CStr(.Tpb.Ca) & ","       '32
                TxtRow = TxtRow & CStr(.Tpb.Mg) & ","       '33
                TxtRow = TxtRow & CStr(.Tpb.Fe) & ","       '34
                TxtRow = TxtRow & CStr(.Tpb.FeAdj) & ","    '35
                TxtRow = TxtRow & CStr(.Tpb.Al) & ","       '36
                TxtRow = TxtRow & CStr(.Tpb.WtPct) & ","    '37
            End If

            'Total pebble -- rejected at washer
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.TpbRej100.Tpa) & ","   '38
                TxtRow = TxtRow & CStr(.TpbRej100.Bpl) & ","   '39
                TxtRow = TxtRow & CStr(.TpbRej100.Ia) & ","    '40
                TxtRow = TxtRow & CStr(.TpbRej100.Ins) & ","   '41
                TxtRow = TxtRow & CStr(.TpbRej100.Ca) & ","    '42
                TxtRow = TxtRow & CStr(.TpbRej100.Mg) & ","    '43
                TxtRow = TxtRow & CStr(.TpbRej100.Fe) & ","    '44
                TxtRow = TxtRow & CStr(.TpbRej100.FeAdj) & "," '45
                TxtRow = TxtRow & CStr(.TpbRej100.Al) & ","    '46
                TxtRow = TxtRow & CStr(.TpbRej100.WtPct) & "," '47
            Else    'PC
                TxtRow = TxtRow & CStr(.TpbRej.Tpa) & ","      '38
                TxtRow = TxtRow & CStr(.TpbRej.Bpl) & ","      '39
                TxtRow = TxtRow & CStr(.TpbRej.Ia) & ","       '40
                TxtRow = TxtRow & CStr(.TpbRej.Ins) & ","      '41
                TxtRow = TxtRow & CStr(.TpbRej.Ca) & ","       '42
                TxtRow = TxtRow & CStr(.TpbRej.Mg) & ","       '43
                TxtRow = TxtRow & CStr(.TpbRej.Fe) & ","       '44
                TxtRow = TxtRow & CStr(.TpbRej.FeAdj) & ","    '45
                TxtRow = TxtRow & CStr(.TpbRej.Al) & ","       '46
                TxtRow = TxtRow & CStr(.TpbRej.WtPct) & ","    '47
            End If

            'IP
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Ip100.Tpa) & ","    '48
                TxtRow = TxtRow & CStr(.Ip100.Bpl) & ","    '49
                TxtRow = TxtRow & CStr(.Ip100.Ia) & ","     '50
                TxtRow = TxtRow & CStr(.Ip100.Ins) & ","    '51
                TxtRow = TxtRow & CStr(.Ip100.Ca) & ","     '52
                TxtRow = TxtRow & CStr(.Ip100.Mg) & ","     '53
                TxtRow = TxtRow & CStr(.Ip100.Fe) & ","     '54
                TxtRow = TxtRow & CStr(.Ip100.FeAdj) & ","  '55
                TxtRow = TxtRow & CStr(.Ip100.Al) & ","     '56
                TxtRow = TxtRow & CStr(.Ip100.WtPct) & ","  '57
            Else    'PC
                TxtRow = TxtRow & CStr(.Ip.Tpa) & ","       '48
                TxtRow = TxtRow & CStr(.Ip.Bpl) & ","       '49
                TxtRow = TxtRow & CStr(.Ip.Ia) & ","        '50
                TxtRow = TxtRow & CStr(.Ip.Ins) & ","       '51
                TxtRow = TxtRow & CStr(.Ip.Ca) & ","        '52
                TxtRow = TxtRow & CStr(.Ip.Mg) & ","        '53
                TxtRow = TxtRow & CStr(.Ip.Fe) & ","        '54
                TxtRow = TxtRow & CStr(.Ip.FeAdj) & ","     '55
                TxtRow = TxtRow & CStr(.Ip.Al) & ","        '56
                TxtRow = TxtRow & CStr(.Ip.WtPct) & ","     '57
            End If

            'Total feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tfd100.Tpa) & ","   '58
                TxtRow = TxtRow & CStr(.Tfd100.Bpl) & ","   '59
                TxtRow = TxtRow & CStr(.Tfd100.WtPct) & "," '60
            Else    'PC
                TxtRow = TxtRow & CStr(.Tfd.Tpa) & ","      '58
                TxtRow = TxtRow & CStr(.Tfd.Bpl) & ","      '59
                TxtRow = TxtRow & CStr(.Tfd.WtPct) & ","    '60
            End If

            'Total concentrate
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tcn100.Tpa) & ","    '61
                TxtRow = TxtRow & CStr(.Tcn100.Bpl) & ","    '62
                TxtRow = TxtRow & CStr(.Tcn100.Ia) & ","     '63
                TxtRow = TxtRow & CStr(.Tcn100.Ins) & ","    '64
                TxtRow = TxtRow & CStr(.Tcn100.Ca) & ","     '65
                TxtRow = TxtRow & CStr(.Tcn100.Mg) & ","     '66
                TxtRow = TxtRow & CStr(.Tcn100.Fe) & ","     '67
                TxtRow = TxtRow & CStr(.Tcn100.FeAdj) & ","  '68
                TxtRow = TxtRow & CStr(.Tcn100.Al) & ","     '69
                TxtRow = TxtRow & CStr(.Tcn100.WtPct) & ","  '70
            Else    'PC
                TxtRow = TxtRow & CStr(.Tcn.Tpa) & ","       '61
                TxtRow = TxtRow & CStr(.Tcn.Bpl) & ","       '62
                TxtRow = TxtRow & CStr(.Tcn.Ia) & ","        '63
                TxtRow = TxtRow & CStr(.Tcn.Ins) & ","       '64
                TxtRow = TxtRow & CStr(.Tcn.Ca) & ","        '65
                TxtRow = TxtRow & CStr(.Tcn.Mg) & ","        '66
                TxtRow = TxtRow & CStr(.Tcn.Fe) & ","        '67
                TxtRow = TxtRow & CStr(.Tcn.FeAdj) & ","     '68
                TxtRow = TxtRow & CStr(.Tcn.Al) & ","        '69
                TxtRow = TxtRow & CStr(.Tcn.WtPct) & ","     '70
            End If

            'Waste clay
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Wcl100.Tpa) & ","    '71
                TxtRow = TxtRow & CStr(.Wcl100.Bpl) & ","    '72
                TxtRow = TxtRow & CStr(.Wcl100.WtPct) & ","  '73
            Else    'PC
                TxtRow = TxtRow & CStr(.Wcl.Tpa) & ","       '71
                TxtRow = TxtRow & CStr(.Wcl.Bpl) & ","       '72
                TxtRow = TxtRow & CStr(.Wcl.WtPct) & ","     '73
            End If

            'Matrix "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxxAll100Hole) & "," '74
            Else    'PC
                TxtRow = TxtRow & CStr(.MtxxAllPcHole) & ","  '75
            End If

            'Total "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.TotxAll100Hole) & "," '74
            Else
                TxtRow = TxtRow & CStr(.TotxAllPcHole) & ","  '75
            End If

            'Density (dry density)
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxDensity) & ","     '76
            Else
                TxtRow = TxtRow & CStr(.MtxDensity) & ","     '76
            End If

            'Ownership code
            TxtRow = TxtRow & .Ownership & ","                '77

            'Lithology
            TxtRow = TxtRow & " " & ","                       '78  Not for hole!

            'Prospect date -- will use mm/dd/yyyy.
            TxtRow = TxtRow & Format(.ProspDate, "MM/dd/yyyy") & ","  '79

            'Coarse pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Cpb100.Tpa) & ","   '80
                TxtRow = TxtRow & CStr(.Cpb100.Bpl) & ","   '81
                TxtRow = TxtRow & CStr(.Cpb100.Ia) & ","    '82
                TxtRow = TxtRow & CStr(.Cpb100.Ins) & ","   '83
                TxtRow = TxtRow & CStr(.Cpb100.Ca) & ","    '84
                TxtRow = TxtRow & CStr(.Cpb100.Mg) & ","    '85
                TxtRow = TxtRow & CStr(.Cpb100.Fe) & ","    '86
                TxtRow = TxtRow & CStr(.Cpb100.FeAdj) & "," '87
                TxtRow = TxtRow & CStr(.Cpb100.Al) & ","    '88
                TxtRow = TxtRow & CStr(.Cpb100.WtPct) & "," '89
            Else    'PC
                TxtRow = TxtRow & CStr(.Cpb.Tpa) & ","      '80
                TxtRow = TxtRow & CStr(.Cpb.Bpl) & ","      '81
                TxtRow = TxtRow & CStr(.Cpb.Ia) & ","       '82
                TxtRow = TxtRow & CStr(.Cpb.Ins) & ","      '83
                TxtRow = TxtRow & CStr(.Cpb.Ca) & ","       '84
                TxtRow = TxtRow & CStr(.Cpb.Mg) & ","       '85
                TxtRow = TxtRow & CStr(.Cpb.Fe) & ","       '86
                TxtRow = TxtRow & CStr(.Cpb.FeAdj) & ","    '87
                TxtRow = TxtRow & CStr(.Cpb.Al) & ","       '88
                TxtRow = TxtRow & CStr(.Cpb.WtPct) & ","    '89
            End If

            'Fine pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Fpb100.Tpa) & ","   '90
                TxtRow = TxtRow & CStr(.Fpb100.Bpl) & ","   '91
                TxtRow = TxtRow & CStr(.Fpb100.Ia) & ","    '92
                TxtRow = TxtRow & CStr(.Fpb100.Ins) & ","   '93
                TxtRow = TxtRow & CStr(.Fpb100.Ca) & ","    '94
                TxtRow = TxtRow & CStr(.Fpb100.Mg) & ","    '95
                TxtRow = TxtRow & CStr(.Fpb100.Fe) & ","    '96
                TxtRow = TxtRow & CStr(.Fpb100.FeAdj) & "," '97
                TxtRow = TxtRow & CStr(.Fpb100.Al) & ","    '98
                TxtRow = TxtRow & CStr(.Fpb100.WtPct) & "," '99
            Else    'PC
                TxtRow = TxtRow & CStr(.Fpb.Tpa) & ","      '90
                TxtRow = TxtRow & CStr(.Fpb.Bpl) & ","      '91
                TxtRow = TxtRow & CStr(.Fpb.Ia) & ","       '92
                TxtRow = TxtRow & CStr(.Fpb.Ins) & ","      '93
                TxtRow = TxtRow & CStr(.Fpb.Ca) & ","       '94
                TxtRow = TxtRow & CStr(.Fpb.Mg) & ","       '95
                TxtRow = TxtRow & CStr(.Fpb.Fe) & ","       '96
                TxtRow = TxtRow & CStr(.Fpb.FeAdj) & ","    '97
                TxtRow = TxtRow & CStr(.Fpb.Al) & ","       '98
                TxtRow = TxtRow & CStr(.Fpb.WtPct) & ","    '99
            End If

            'Coarse feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Cfd100.Tpa) & ","   '100
                TxtRow = TxtRow & CStr(.Cfd100.Bpl) & ","   '101
                TxtRow = TxtRow & CStr(.Cfd100.WtPct) & "," '102
            Else    'PC
                TxtRow = TxtRow & CStr(.Cfd.Tpa) & ","      '100
                TxtRow = TxtRow & CStr(.Cfd.Bpl) & ","      '101
                TxtRow = TxtRow & CStr(.Cfd.WtPct) & ","    '102
            End If

            'Fine feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Ffd100.Tpa) & ","   '103
                TxtRow = TxtRow & CStr(.Ffd100.Bpl) & ","   '104
                TxtRow = TxtRow & CStr(.Ffd100.WtPct) & "," '105
            Else    'PC
                TxtRow = TxtRow & CStr(.Ffd.Tpa) & ","      '103
                TxtRow = TxtRow & CStr(.Ffd.Bpl) & ","      '104
                TxtRow = TxtRow & CStr(.Ffd.WtPct) & ","    '105
            End If

            'Mtx %solids
            TxtRow = TxtRow & CStr(.MtxPctSol) & ","        '106

            'Mtx TPA
            'This matrix TPA includes oversize TPA which we need over on the
            'MOIS side right now.
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxTPA) & ","       '107
            Else
                TxtRow = TxtRow & CStr(.MtxTpaPc) & ","     '107
            End If

            'Os TPA
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Os100.Tpa)          '108
            Else
                TxtRow = TxtRow & CStr(.Os.Tpa)             '108
            End If

            If aInclMgPlt = 1 Then
                TxtRow = TxtRow & ","

                'MgO plant input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltInp100.Tpa) & ","    '109
                    TxtRow = TxtRow & CStr(.MgPltInp100.Bpl) & ","    '110
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ia) & ","     '111
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ins) & ","    '112
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ca) & ","     '113
                    TxtRow = TxtRow & CStr(.MgPltInp100.Mg) & ","     '114
                    TxtRow = TxtRow & CStr(.MgPltInp100.Fe) & ","     '115
                    TxtRow = TxtRow & CStr(0) & ","                   '116  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltInp100.Al) & ","     '117
                    TxtRow = TxtRow & CStr(.MgPltInp100.WtPct) & ","  '118
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltInp.Tpa) & ","       '109
                    TxtRow = TxtRow & CStr(.MgPltInp.Bpl) & ","       '110
                    TxtRow = TxtRow & CStr(.MgPltInp.Ia) & ","        '111
                    TxtRow = TxtRow & CStr(.MgPltInp.Ins) & ","       '112
                    TxtRow = TxtRow & CStr(.MgPltInp.Ca) & ","        '113
                    TxtRow = TxtRow & CStr(.MgPltInp.Mg) & ","        '114
                    TxtRow = TxtRow & CStr(.MgPltInp.Fe) & ","        '115
                    TxtRow = TxtRow & CStr(0) & ","                   '116  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltInp.Al) & ","        '117
                    TxtRow = TxtRow & CStr(.MgPltInp.WtPct) & ","     '118
                End If

                'MgO plant reject
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltRej100.Tpa) & ","    '119
                    TxtRow = TxtRow & CStr(.MgPltRej100.Bpl) & ","    '120
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ia) & ","     '121
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ins) & ","    '122
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ca) & ","     '123
                    TxtRow = TxtRow & CStr(.MgPltRej100.Mg) & ","     '124
                    TxtRow = TxtRow & CStr(.MgPltRej100.Fe) & ","     '125
                    TxtRow = TxtRow & CStr(0) & ","                   '126  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltRej100.Al) & ","     '127
                    TxtRow = TxtRow & CStr(.MgPltRej100.WtPct) & ","  '128
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltRej.Tpa) & ","       '119
                    TxtRow = TxtRow & CStr(.MgPltRej.Bpl) & ","       '120
                    TxtRow = TxtRow & CStr(.MgPltRej.Ia) & ","        '121
                    TxtRow = TxtRow & CStr(.MgPltRej.Ins) & ","       '122
                    TxtRow = TxtRow & CStr(.MgPltRej.Ca) & ","        '123
                    TxtRow = TxtRow & CStr(.MgPltRej.Mg) & ","        '124
                    TxtRow = TxtRow & CStr(.MgPltRej.Fe) & ","        '125
                    TxtRow = TxtRow & CStr(0) & ","                   '126  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltRej.Al) & ","        '127
                    TxtRow = TxtRow & CStr(.MgPltRej.WtPct) & ","     '128
                End If

                'MgO plant product
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltProd100.Tpa) & ","   '129
                    TxtRow = TxtRow & CStr(.MgPltProd100.Bpl) & ","   '130
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ia) & ","    '131
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ins) & ","   '132
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ca) & ","    '133
                    TxtRow = TxtRow & CStr(.MgPltProd100.Mg) & ","    '134
                    TxtRow = TxtRow & CStr(.MgPltProd100.Fe) & ","    '135
                    TxtRow = TxtRow & CStr(0) & ","                   '136  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltProd100.Al) & ","    '137
                    TxtRow = TxtRow & CStr(.MgPltProd100.WtPct)       '138
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltProd.Tpa) & ","      '129
                    TxtRow = TxtRow & CStr(.MgPltProd.Bpl) & ","      '130
                    TxtRow = TxtRow & CStr(.MgPltProd.Ia) & ","       '131
                    TxtRow = TxtRow & CStr(.MgPltProd.Ins) & ","      '132
                    TxtRow = TxtRow & CStr(.MgPltProd.Ca) & ","       '133
                    TxtRow = TxtRow & CStr(.MgPltProd.Mg) & ","       '134
                    TxtRow = TxtRow & CStr(.MgPltProd.Fe) & ","       '135
                    TxtRow = TxtRow & CStr(0) & ","                   '136  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltProd.Al) & ","       '137
                    TxtRow = TxtRow & CStr(.MgPltProd.WtPct)          '138
                End If
            End If

            If aMineHasDoloflotPlt = True Then
                TxtRow = TxtRow & ","

                'Doloflot fine pebble input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Tpa) & ","   '139
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Bpl) & ","   '140
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ia) & ","    '141
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ins) & ","   '142
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ca) & ","    '143
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Mg) & ","    '144
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Fe) & ","    '145
                    TxtRow = TxtRow & CStr(.DfFpbInp100.FeAdj) & "," '146
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Al) & ","    '147
                    TxtRow = TxtRow & CStr(.DfFpbInp100.WtPct) & "," '148
                Else    'PC
                    TxtRow = TxtRow & CStr(.DfFpbInp.Tpa) & ","      '139
                    TxtRow = TxtRow & CStr(.DfFpbInp.Bpl) & ","      '140
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ia) & ","       '141
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ins) & ","      '142
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ca) & ","       '143
                    TxtRow = TxtRow & CStr(.DfFpbInp.Mg) & ","       '144
                    TxtRow = TxtRow & CStr(.DfFpbInp.Fe) & ","       '145
                    TxtRow = TxtRow & CStr(.DfFpbInp.FeAdj) & ","    '146
                    TxtRow = TxtRow & CStr(.DfFpbInp.Al) & ","       '147
                    TxtRow = TxtRow & CStr(.DfFpbInp.WtPct) & ","    '148
                End If

                'Doloflot IP input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.DfIpInp100.Tpa) & ","    '149
                    TxtRow = TxtRow & CStr(.DfIpInp100.Bpl) & ","    '150
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ia) & ","     '151
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ins) & ","    '152
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ca) & ","     '153
                    TxtRow = TxtRow & CStr(.DfIpInp100.Mg) & ","     '154
                    TxtRow = TxtRow & CStr(.DfIpInp100.Fe) & ","     '155
                    TxtRow = TxtRow & CStr(.DfIpInp100.FeAdj) & ","  '156
                    TxtRow = TxtRow & CStr(.DfIpInp100.Al) & ","     '157
                    TxtRow = TxtRow & CStr(.DfIpInp100.WtPct) & ","  '158
                Else    'PC
                    TxtRow = TxtRow & CStr(.DfIpInp.Tpa) & ","       '149
                    TxtRow = TxtRow & CStr(.DfIpInp.Bpl) & ","       '150
                    TxtRow = TxtRow & CStr(.DfIpInp.Ia) & ","        '151
                    TxtRow = TxtRow & CStr(.DfIpInp.Ins) & ","       '152
                    TxtRow = TxtRow & CStr(.DfIpInp.Ca) & ","        '153
                    TxtRow = TxtRow & CStr(.DfIpInp.Mg) & ","        '154
                    TxtRow = TxtRow & CStr(.DfIpInp.Fe) & ","        '155
                    TxtRow = TxtRow & CStr(.DfIpInp.FeAdj) & ","     '156
                    TxtRow = TxtRow & CStr(.DfIpInp.Al) & ","        '157
                    TxtRow = TxtRow & CStr(.DfIpInp.WtPct) & ","     '158
                End If

                'Doloflot total input (Fpb + IP)
                If aDataType = "100%" Then
                    TpaVal = .DfIpInp100.Tpa + .DfFpbInp100.Tpa
                    WtPctVal = .DfIpInp100.WtPct + .DfFpbInp100.WtPct
                    BplVal = gGetTotalValue2(.DfIpInp100.Bpl, .DfIpInp100.Tpa,
                                         .DfFpbInp100.Bpl, .DfFpbInp100.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpInp100.Ins, .DfIpInp100.Tpa,
                                         .DfFpbInp100.Ins, .DfFpbInp100.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpInp100.Fe, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Fe, .DfFpbInp100.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpInp100.FeAdj, .DfIpInp100.Tpa,
                                           .DfFpbInp100.FeAdj, .DfFpbInp100.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpInp100.Al, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Al, .DfFpbInp100.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpInp100.Mg, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Mg, .DfFpbInp100.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpInp100.Ca, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Ca, .DfFpbInp100.Tpa, 1)
                Else    'PC
                    TpaVal = .DfIpInp.Tpa + .DfFpbInp.Tpa
                    WtPctVal = .DfIpInp.WtPct + .DfFpbInp.WtPct
                    BplVal = gGetTotalValue2(.DfIpInp.Bpl, .DfIpInp.Tpa,
                                         .DfFpbInp.Bpl, .DfFpbInp.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpInp.Ins, .DfIpInp.Tpa,
                                         .DfFpbInp.Ins, .DfFpbInp.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpInp.Fe, .DfIpInp.Tpa,
                                        .DfFpbInp.Fe, .DfFpbInp.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpInp.FeAdj, .DfIpInp.Tpa,
                                           .DfFpbInp.FeAdj, .DfFpbInp.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpInp.Al, .DfIpInp.Tpa,
                                        .DfFpbInp.Al, .DfFpbInp.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpInp.Mg, .DfIpInp.Tpa,
                                        .DfFpbInp.Mg, .DfFpbInp.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpInp.Ca, .DfIpInp.Tpa,
                                        .DfFpbInp.Ca, .DfFpbInp.Tpa, 1)
                End If
                TxtRow = TxtRow & CStr(TpaVal) & ","               '159
                TxtRow = TxtRow & CStr(BplVal) & ","               '160
                If aUseFeAdjust = True Then
                    TxtRow = TxtRow & CStr(FeAdjVal + AlVal) & "," '161
                Else
                    TxtRow = TxtRow & CStr(FeVal + AlVal) & ","    '161
                End If
                TxtRow = TxtRow & CStr(InsVal) & ","               '162
                TxtRow = TxtRow & CStr(CaVal) & ","                '163
                TxtRow = TxtRow & CStr(MgVal) & ","                '164
                TxtRow = TxtRow & CStr(FeVal) & ","                '165
                TxtRow = TxtRow & CStr(FeAdjVal) & ","             '166
                TxtRow = TxtRow & CStr(AlVal) & ","                '167
                TxtRow = TxtRow & CStr(WtPctVal) & ","             '168

                'Doloflot total product (from Fpb + IP)
                If aDataType = "100%" Then
                    TpaVal = .DfIpProd100.Tpa + .DfFpbProd100.Tpa
                    WtPctVal = .DfIpProd100.WtPct + .DfFpbProd100.WtPct
                    BplVal = gGetTotalValue2(.DfIpProd100.Bpl, .DfIpProd100.Tpa,
                                         .DfFpbProd100.Bpl, .DfFpbProd100.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpProd100.Ins, .DfIpProd100.Tpa,
                                         .DfFpbProd100.Ins, .DfFpbProd100.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpProd100.Fe, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Fe, .DfFpbProd100.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpProd100.FeAdj, .DfIpProd100.Tpa,
                                           .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpProd100.Al, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Al, .DfFpbProd100.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpProd100.Mg, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Mg, .DfFpbProd100.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpProd100.Ca, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Ca, .DfFpbProd100.Tpa, 2)
                Else    'PC
                    TpaVal = .DfIpProd.Tpa + .DfFpbProd.Tpa
                    WtPctVal = .DfIpProd.WtPct + .DfFpbProd.WtPct
                    BplVal = gGetTotalValue2(.DfIpProd.Bpl, .DfIpProd.Tpa,
                                         .DfFpbProd.Bpl, .DfFpbProd.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpProd.Ins, .DfIpProd.Tpa,
                                         .DfFpbProd.Ins, .DfFpbProd.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpProd.Fe, .DfIpProd.Tpa,
                                        .DfFpbProd.Fe, .DfFpbProd.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpProd.FeAdj, .DfIpProd.Tpa,
                                           .DfFpbProd.FeAdj, .DfFpbProd.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpProd.Al, .DfIpProd.Tpa,
                                        .DfFpbProd.Al, .DfFpbProd.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpProd.Mg, .DfIpProd.Tpa,
                                        .DfFpbProd.Mg, .DfFpbProd.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpProd.Ca, .DfIpProd.Tpa,
                                        .DfFpbProd.Ca, .DfFpbProd.Tpa, 1)
                End If

                If aUseFeAdjust = True Then
                    IaVal = FeAdjVal + AlVal
                Else
                    IaVal = FeVal + AlVal
                End If

                TxtRow = TxtRow & CStr(TpaVal) & ","                 '169
                TxtRow = TxtRow & CStr(BplVal) & ","                 '170
                TxtRow = TxtRow & CStr(IaVal) & ","                  '171
                TxtRow = TxtRow & CStr(InsVal) & ","                 '172
                TxtRow = TxtRow & CStr(CaVal) & ","                  '173
                TxtRow = TxtRow & CStr(MgVal) & ","                  '174
                TxtRow = TxtRow & CStr(FeVal) & ","                  '175
                TxtRow = TxtRow & CStr(FeAdjVal) & ","               '176
                TxtRow = TxtRow & CStr(AlVal) & ","                  '177
                TxtRow = TxtRow & CStr(WtPctVal) & ","               '178

                'Coarse pebble rejected
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.CpbRej100.Tpa) & ","     '179
                    TxtRow = TxtRow & CStr(.CpbRej100.Bpl) & ","     '180
                    TxtRow = TxtRow & CStr(.CpbRej100.Ia) & ","      '181
                    TxtRow = TxtRow & CStr(.CpbRej100.Ins) & ","     '182
                    TxtRow = TxtRow & CStr(.CpbRej100.Ca) & ","      '183
                    TxtRow = TxtRow & CStr(.CpbRej100.Mg) & ","      '184
                    TxtRow = TxtRow & CStr(.CpbRej100.Fe) & ","      '185
                    TxtRow = TxtRow & CStr(.CpbRej100.FeAdj) & ","   '186
                    TxtRow = TxtRow & CStr(.CpbRej100.Al) & ","      '187
                    TxtRow = TxtRow & CStr(.CpbRej100.WtPct)         '188
                Else    'PC
                    TxtRow = TxtRow & CStr(.CpbRej.Tpa) & ","        '179
                    TxtRow = TxtRow & CStr(.CpbRej.Bpl) & ","        '180
                    TxtRow = TxtRow & CStr(.CpbRej.Ia) & ","         '181
                    TxtRow = TxtRow & CStr(.CpbRej.Ins) & ","        '182
                    TxtRow = TxtRow & CStr(.CpbRej.Ca) & ","         '183
                    TxtRow = TxtRow & CStr(.CpbRej.Mg) & ","         '184
                    TxtRow = TxtRow & CStr(.CpbRej.Fe) & ","         '185
                    TxtRow = TxtRow & CStr(.CpbRej.FeAdj) & ","      '186
                    TxtRow = TxtRow & CStr(.CpbRej.Al) & ","         '187
                    TxtRow = TxtRow & CStr(.CpbRej.WtPct)            '188
                End If
            End If
        End With

        'gWriteLine(aFileNumber, TxtRow)
    End Sub

    Public Sub AddBdFormatTextFileSplit(ByRef aSplitData As gRawProspSplRdctnType,
                                    ByVal aFileNumber As Integer,
                                    ByVal aDataType As String,
                                    ByVal aInclMgPlt As Integer,
                                    ByVal aUseFeAdjust As Boolean,
                                    ByVal aMineHasDoloflotPlt As Boolean)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim HoleDesc As String
        Dim TxtRow As String
        Dim Mineability As String
        '-----
        Dim TpaVal As Single
        Dim WtPctVal As Single
        Dim BplVal As Single
        Dim InsVal As Single
        Dim IaVal As Single
        Dim FeVal As Single
        Dim FeAdjVal As Single
        Dim AlVal As Single
        Dim MgVal As Single
        Dim CaVal As Single

        'Split  Split  Split  Split  Split  Split
        'Split  Split  Split  Split  Split  Split
        'Split  Split  Split  Split  Split  Split

        'aDataType will be "100%" or "PC".

        'S01331212512043699
        '    ttrrssffhhhhss
        'tt = township
        'rr = range
        'ss = section
        'ff = forty
        'hhhh = hole location
        'ss = split  (for a hole row this is 99)
        'Will not show S013 at the beginning in this case!

        With aSplitData
            HoleDesc = "'" & gPadLeftChar(CStr(.Township), 2, "0") &
                   gPadLeftChar(CStr(.Range), 2, "0") &
                   gPadLeftChar(CStr(.Section), 2, "0") &
                   gPadLeftChar(CStr(.Forty), 2, "0") &
                   .HoleLocation & "99"

            TxtRow = HoleDesc & ","                         '1
            TxtRow = TxtRow & CStr(.Xcoord) & ","           '2
            TxtRow = TxtRow & CStr(.Ycoord) & ","           '3
            TxtRow = TxtRow & CStr(.Section) & ","          '4
            TxtRow = TxtRow & CStr(.Township) & ","         '5
            TxtRow = TxtRow & CStr(.Range) & ","            '6
            TxtRow = TxtRow & CStr(.Forty) & ","            '7
            TxtRow = TxtRow & .HoleLocation & ","           '8
            TxtRow = TxtRow & "S" & gPadLeftChar(CStr(.SplitNumber), 2, "0") & ","  '9

            'Currently in AddBdFormatTextFileSplit
            '01/28/2010, lss  Modified the following:
            'Also added "MF" check which wasn't there before (hope this is OK)!
            If (.MineableCalcd = "M" And .MineableOride <> "U") Or
            .MineableOride = "M" Or
            .MineableCalcd = "MF" Then
                Mineability = "M"
            Else
                Mineability = "U"
            End If

            TxtRow = TxtRow & Mineability & ","             '10

            'Elevation -- don't need it here (7 characters).
            TxtRow = TxtRow & " " & ","                     '11

            TxtRow = TxtRow & CStr(.SplitDepthTop) & ","    '12
            TxtRow = TxtRow & CStr(.SplitDepthBot) & ","    '13
            TxtRow = TxtRow & " " & ","                     '14  OVBTHK -- not for splits
            TxtRow = TxtRow & CStr(.SplitThck) & ","        '15  MTXTHK -- will show split thick instead
            TxtRow = TxtRow & " " & ","                     '16  WSTTHK -- not for splits
            TxtRow = TxtRow & " " & ","                     '17  TOTTHK -- not for splits

            'Total product
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tpr100.Tpa) & ","   '18
                TxtRow = TxtRow & CStr(.Tpr100.Bpl) & ","   '19
                TxtRow = TxtRow & CStr(.Tpr100.Ia) & ","    '20
                TxtRow = TxtRow & CStr(.Tpr100.Ins) & ","   '21
                TxtRow = TxtRow & CStr(.Tpr100.Ca) & ","    '22
                TxtRow = TxtRow & CStr(.Tpr100.Mg) & ","    '23
                TxtRow = TxtRow & CStr(.Tpr100.Fe) & ","    '24
                TxtRow = TxtRow & CStr(.Tpr100.FeAdj) & "," '25
                TxtRow = TxtRow & CStr(.Tpr100.Al) & ","    '26
                TxtRow = TxtRow & CStr(.Tpr100.WtPct) & "," '27
            Else    'PC
                TxtRow = TxtRow & CStr(.Tpr.Tpa) & ","      '18
                TxtRow = TxtRow & CStr(.Tpr.Bpl) & ","      '19
                TxtRow = TxtRow & CStr(.Tpr.Ia) & ","       '20
                TxtRow = TxtRow & CStr(.Tpr.Ins) & ","      '21
                TxtRow = TxtRow & CStr(.Tpr.Ca) & ","       '22
                TxtRow = TxtRow & CStr(.Tpr.Mg) & ","       '23
                TxtRow = TxtRow & CStr(.Tpr.Fe) & ","       '24
                TxtRow = TxtRow & CStr(.Tpr.FeAdj) & ","    '25
                TxtRow = TxtRow & CStr(.Tpr.Al) & ","       '26
                TxtRow = TxtRow & CStr(.Tpr.WtPct) & ","    '27
            End If

            'Total pebble -- kept at washer
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tpb100.Tpa) & ","   '28
                TxtRow = TxtRow & CStr(.Tpb100.Bpl) & ","   '29
                TxtRow = TxtRow & CStr(.Tpb100.Ia) & ","    '30
                TxtRow = TxtRow & CStr(.Tpb100.Ins) & ","   '31
                TxtRow = TxtRow & CStr(.Tpb100.Ca) & ","    '32
                TxtRow = TxtRow & CStr(.Tpb100.Mg) & ","    '33
                TxtRow = TxtRow & CStr(.Tpb100.Fe) & ","    '34
                TxtRow = TxtRow & CStr(.Tpb100.FeAdj) & "," '35
                TxtRow = TxtRow & CStr(.Tpb100.Al) & ","    '36
                TxtRow = TxtRow & CStr(.Tpb100.WtPct) & "," '37
            Else    'PC
                TxtRow = TxtRow & CStr(.Tpb.Tpa) & ","      '28
                TxtRow = TxtRow & CStr(.Tpb.Bpl) & ","      '29
                TxtRow = TxtRow & CStr(.Tpb.Ia) & ","       '30
                TxtRow = TxtRow & CStr(.Tpb.Ins) & ","      '31
                TxtRow = TxtRow & CStr(.Tpb.Ca) & ","       '32
                TxtRow = TxtRow & CStr(.Tpb.Mg) & ","       '33
                TxtRow = TxtRow & CStr(.Tpb.Fe) & ","       '34
                TxtRow = TxtRow & CStr(.Tpb.FeAdj) & ","    '35
                TxtRow = TxtRow & CStr(.Tpb.Al) & ","       '36
                TxtRow = TxtRow & CStr(.Tpb.WtPct) & ","    '37
            End If

            'Total pebble -- rejected at washer
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.TpbRej100.Tpa) & ","   '38
                TxtRow = TxtRow & CStr(.TpbRej100.Bpl) & ","   '39
                TxtRow = TxtRow & CStr(.TpbRej100.Ia) & ","    '40
                TxtRow = TxtRow & CStr(.TpbRej100.Ins) & ","   '41
                TxtRow = TxtRow & CStr(.TpbRej100.Ca) & ","    '42
                TxtRow = TxtRow & CStr(.TpbRej100.Mg) & ","    '43
                TxtRow = TxtRow & CStr(.TpbRej100.Fe) & ","    '44
                TxtRow = TxtRow & CStr(.TpbRej100.FeAdj) & "," '45
                TxtRow = TxtRow & CStr(.TpbRej100.Al) & ","    '46
                TxtRow = TxtRow & CStr(.TpbRej100.WtPct) & "," '47
            Else    'PC
                TxtRow = TxtRow & CStr(.TpbRej.Tpa) & ","      '38
                TxtRow = TxtRow & CStr(.TpbRej.Bpl) & ","      '39
                TxtRow = TxtRow & CStr(.TpbRej.Ia) & ","       '40
                TxtRow = TxtRow & CStr(.TpbRej.Ins) & ","      '41
                TxtRow = TxtRow & CStr(.TpbRej.Ca) & ","       '42
                TxtRow = TxtRow & CStr(.TpbRej.Mg) & ","       '43
                TxtRow = TxtRow & CStr(.TpbRej.Fe) & ","       '44
                TxtRow = TxtRow & CStr(.TpbRej.FeAdj) & ","    '45
                TxtRow = TxtRow & CStr(.TpbRej.Al) & ","       '46
                TxtRow = TxtRow & CStr(.TpbRej.WtPct) & ","    '47
            End If

            'IP
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Ip100.Tpa) & ","    '48
                TxtRow = TxtRow & CStr(.Ip100.Bpl) & ","    '49
                TxtRow = TxtRow & CStr(.Ip100.Ia) & ","     '50
                TxtRow = TxtRow & CStr(.Ip100.Ins) & ","    '51
                TxtRow = TxtRow & CStr(.Ip100.Ca) & ","     '52
                TxtRow = TxtRow & CStr(.Ip100.Mg) & ","     '53
                TxtRow = TxtRow & CStr(.Ip100.Fe) & ","     '54
                TxtRow = TxtRow & CStr(.Ip100.FeAdj) & ","  '55
                TxtRow = TxtRow & CStr(.Ip100.Al) & ","     '56
                TxtRow = TxtRow & CStr(.Ip100.WtPct) & ","  '57
            Else    'PC
                TxtRow = TxtRow & CStr(.Ip.Tpa) & ","       '48
                TxtRow = TxtRow & CStr(.Ip.Bpl) & ","       '49
                TxtRow = TxtRow & CStr(.Ip.Ia) & ","        '50
                TxtRow = TxtRow & CStr(.Ip.Ins) & ","       '51
                TxtRow = TxtRow & CStr(.Ip.Ca) & ","        '52
                TxtRow = TxtRow & CStr(.Ip.Mg) & ","        '53
                TxtRow = TxtRow & CStr(.Ip.Fe) & ","        '54
                TxtRow = TxtRow & CStr(.Ip.FeAdj) & ","     '55
                TxtRow = TxtRow & CStr(.Ip.Al) & ","        '56
                TxtRow = TxtRow & CStr(.Ip.WtPct) & ","     '57
            End If

            'Total feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tfd100.Tpa) & ","   '58
                TxtRow = TxtRow & CStr(.Tfd100.Bpl) & ","   '58
                TxtRow = TxtRow & CStr(.Tfd100.WtPct) & "," '60
            Else    'PC
                TxtRow = TxtRow & CStr(.Tfd.Tpa) & ","      '58
                TxtRow = TxtRow & CStr(.Tfd.Bpl) & ","      '59
                TxtRow = TxtRow & CStr(.Tfd.WtPct) & ","    '60
            End If

            'Total concentrate
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Tcn100.Tpa) & ","    '61
                TxtRow = TxtRow & CStr(.Tcn100.Bpl) & ","    '62
                TxtRow = TxtRow & CStr(.Tcn100.Ia) & ","     '63
                TxtRow = TxtRow & CStr(.Tcn100.Ins) & ","    '64
                TxtRow = TxtRow & CStr(.Tcn100.Ca) & ","     '65
                TxtRow = TxtRow & CStr(.Tcn100.Mg) & ","     '66
                TxtRow = TxtRow & CStr(.Tcn100.Fe) & ","     '67
                TxtRow = TxtRow & CStr(.Tcn100.FeAdj) & ","  '68
                TxtRow = TxtRow & CStr(.Tcn100.Al) & ","     '69
                TxtRow = TxtRow & CStr(.Tcn100.WtPct) & ","  '70
            Else    'PC
                TxtRow = TxtRow & CStr(.Tcn.Tpa) & ","       '61
                TxtRow = TxtRow & CStr(.Tcn.Bpl) & ","       '62
                TxtRow = TxtRow & CStr(.Tcn.Ia) & ","        '63
                TxtRow = TxtRow & CStr(.Tcn.Ins) & ","       '64
                TxtRow = TxtRow & CStr(.Tcn.Ca) & ","        '65
                TxtRow = TxtRow & CStr(.Tcn.Mg) & ","        '66
                TxtRow = TxtRow & CStr(.Tcn.Fe) & ","        '67
                TxtRow = TxtRow & CStr(.Tcn.FeAdj) & ","     '68
                TxtRow = TxtRow & CStr(.Tcn.Al) & ","        '69
                TxtRow = TxtRow & CStr(.Tcn.WtPct) & ","     '70
            End If

            'Waste clay
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Wcl100.Tpa) & ","    '71
                TxtRow = TxtRow & CStr(.Wcl100.Bpl) & ","    '72
                TxtRow = TxtRow & CStr(.Wcl100.WtPct) & ","  '73
            Else    'PC
                TxtRow = TxtRow & CStr(.Wcl.Tpa) & ","       '71
                TxtRow = TxtRow & CStr(.Wcl.Bpl) & ","       '72
                TxtRow = TxtRow & CStr(.Wcl.WtPct) & ","     '73
            End If

            'Matrix "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxxAll100) & ","    '74
            Else    'PC
                TxtRow = TxtRow & CStr(.MtxxAll) & ","       '74
            End If

            'Total "X"
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.TotxAll100) & ","    '75
            Else
                TxtRow = TxtRow & CStr(.TotxAll) & ","       '75
            End If

            'Density (dry density)
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxDensity) & ","    '76
            Else
                TxtRow = TxtRow & CStr(.MtxDensity) & ","    '76
            End If

            'Ownership code
            TxtRow = TxtRow & " " & ","                      '77   Not for split!

            'Lithology
            'Not needed for anything -- will put a "-" here!
            TxtRow = TxtRow & .Lithology & ","               '78

            'Prospect date -- will use mm/dd/yyyy.
            TxtRow = TxtRow & Format(.ProspDate, "MM/dd/yyyy") & ","  '79

            'Coarse pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Cpb100.Tpa) & ","   '80
                TxtRow = TxtRow & CStr(.Cpb100.Bpl) & ","   '81
                TxtRow = TxtRow & CStr(.Cpb100.Ia) & ","    '82
                TxtRow = TxtRow & CStr(.Cpb100.Ins) & ","   '83
                TxtRow = TxtRow & CStr(.Cpb100.Ca) & ","    '84
                TxtRow = TxtRow & CStr(.Cpb100.Mg) & ","    '85
                TxtRow = TxtRow & CStr(.Cpb100.Fe) & ","    '86
                TxtRow = TxtRow & CStr(.Cpb100.FeAdj) & "," '87
                TxtRow = TxtRow & CStr(.Cpb100.Al) & ","    '88
                TxtRow = TxtRow & CStr(.Cpb100.WtPct) & "," '89
            Else    'PC
                TxtRow = TxtRow & CStr(.Cpb.Tpa) & ","      '80
                TxtRow = TxtRow & CStr(.Cpb.Bpl) & ","      '81
                TxtRow = TxtRow & CStr(.Cpb.Ia) & ","       '82
                TxtRow = TxtRow & CStr(.Cpb.Ins) & ","      '83
                TxtRow = TxtRow & CStr(.Cpb.Ca) & ","       '84
                TxtRow = TxtRow & CStr(.Cpb.Mg) & ","       '85
                TxtRow = TxtRow & CStr(.Cpb.Fe) & ","       '86
                TxtRow = TxtRow & CStr(.Cpb.FeAdj) & ","    '87
                TxtRow = TxtRow & CStr(.Cpb.Al) & ","       '88
                TxtRow = TxtRow & CStr(.Cpb.WtPct) & ","    '89
            End If

            'Fine pebble
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Fpb100.Tpa) & ","   '90
                TxtRow = TxtRow & CStr(.Fpb100.Bpl) & ","   '91
                TxtRow = TxtRow & CStr(.Fpb100.Ia) & ","    '92
                TxtRow = TxtRow & CStr(.Fpb100.Ins) & ","   '93
                TxtRow = TxtRow & CStr(.Fpb100.Ca) & ","    '94
                TxtRow = TxtRow & CStr(.Fpb100.Mg) & ","    '95
                TxtRow = TxtRow & CStr(.Fpb100.Fe) & ","    '96
                TxtRow = TxtRow & CStr(.Fpb100.FeAdj) & "," '97
                TxtRow = TxtRow & CStr(.Fpb100.Al) & ","    '98
                TxtRow = TxtRow & CStr(.Fpb100.WtPct) & "," '99
            Else    'PC
                TxtRow = TxtRow & CStr(.Fpb.Tpa) & ","      '90
                TxtRow = TxtRow & CStr(.Fpb.Bpl) & ","      '91
                TxtRow = TxtRow & CStr(.Fpb.Ia) & ","       '92
                TxtRow = TxtRow & CStr(.Fpb.Ins) & ","      '93
                TxtRow = TxtRow & CStr(.Fpb.Ca) & ","       '94
                TxtRow = TxtRow & CStr(.Fpb.Mg) & ","       '95
                TxtRow = TxtRow & CStr(.Fpb.Fe) & ","       '96
                TxtRow = TxtRow & CStr(.Fpb.FeAdj) & ","    '97
                TxtRow = TxtRow & CStr(.Fpb.Al) & ","       '98
                TxtRow = TxtRow & CStr(.Fpb.WtPct) & ","    '99
            End If

            'Coarse feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Cfd100.Tpa) & ","   '100
                TxtRow = TxtRow & CStr(.Cfd100.Bpl) & ","   '101
                TxtRow = TxtRow & CStr(.Cfd100.WtPct) & "," '102
            Else    'PC
                TxtRow = TxtRow & CStr(.Cfd.Tpa) & ","      '100
                TxtRow = TxtRow & CStr(.Cfd.Bpl) & ","      '101
                TxtRow = TxtRow & CStr(.Cfd.WtPct) & ","    '102
            End If

            'Fine feed
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Ffd100.Tpa) & ","   '103
                TxtRow = TxtRow & CStr(.Ffd100.Bpl) & ","   '104
                TxtRow = TxtRow & CStr(.Ffd100.WtPct) & "," '105
            Else    'PC
                TxtRow = TxtRow & CStr(.Ffd.Tpa) & ","      '103
                TxtRow = TxtRow & CStr(.Ffd.Bpl) & ","      '104
                TxtRow = TxtRow & CStr(.Ffd.WtPct) & ","    '105
            End If

            'Mtx %solids
            TxtRow = TxtRow & CStr(.MtxPctSol) & ","        '106

            'Mtx TPA
            'This matrix TPA includes oversize TPA which we need over on the
            'MOIS side right now.
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.MtxTPA) & ","       '107
            Else
                TxtRow = TxtRow & CStr(.MtxTpaPc) & ","     '107
            End If

            'Os TPA
            If aDataType = "100%" Then
                TxtRow = TxtRow & CStr(.Os100.Tpa)          '108
            Else
                TxtRow = TxtRow & CStr(.Os.Tpa)             '108
            End If

            If aInclMgPlt = 1 Then
                TxtRow = TxtRow & ","

                'MgO plant input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltInp100.Tpa) & ","   '109
                    TxtRow = TxtRow & CStr(.MgPltInp100.Bpl) & ","   '110
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ia) & ","    '111
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ins) & ","   '112
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ca) & ","    '113
                    TxtRow = TxtRow & CStr(.MgPltInp100.Mg) & ","    '114
                    TxtRow = TxtRow & CStr(.MgPltInp100.Fe) & ","    '115
                    TxtRow = TxtRow & CStr(0) & ","                  '116  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltInp100.Al) & ","    '117
                    TxtRow = TxtRow & CStr(.MgPltInp100.WtPct) & "," '118
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltInp100.Tpa) & ","   '109
                    TxtRow = TxtRow & CStr(.MgPltInp100.Bpl) & ","   '110
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ia) & ","    '111
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ins) & ","   '112
                    TxtRow = TxtRow & CStr(.MgPltInp100.Ca) & ","    '113
                    TxtRow = TxtRow & CStr(.MgPltInp100.Mg) & ","    '114
                    TxtRow = TxtRow & CStr(.MgPltInp100.Fe) & ","    '115
                    TxtRow = TxtRow & CStr(0) & ","                  '116  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltInp100.Al) & ","    '117
                    TxtRow = TxtRow & CStr(.MgPltInp100.WtPct) & "," '118
                End If

                'MgO plant reject
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltRej100.Tpa) & ","   '119
                    TxtRow = TxtRow & CStr(.MgPltRej100.Bpl) & ","   '120
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ia) & ","    '121
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ins) & ","   '122
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ca) & ","    '123
                    TxtRow = TxtRow & CStr(.MgPltRej100.Mg) & ","    '124
                    TxtRow = TxtRow & CStr(.MgPltRej100.Fe) & ","    '125
                    TxtRow = TxtRow & CStr(0) & ","                  '126  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltRej100.Al) & ","    '127
                    TxtRow = TxtRow & CStr(.MgPltRej100.WtPct) & "," '128
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltRej100.Tpa) & ","   '119
                    TxtRow = TxtRow & CStr(.MgPltRej100.Bpl) & ","   '120
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ia) & ","    '121
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ins) & ","   '122
                    TxtRow = TxtRow & CStr(.MgPltRej100.Ca) & ","    '123
                    TxtRow = TxtRow & CStr(.MgPltRej100.Mg) & ","    '124
                    TxtRow = TxtRow & CStr(.MgPltRej100.Fe) & ","    '125
                    TxtRow = TxtRow & CStr(0) & ","                  '126  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltRej100.Al) & ","    '127
                    TxtRow = TxtRow & CStr(.MgPltRej100.WtPct) & "," '128
                End If

                'MgO plant product
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.MgPltProd100.Tpa) & ","   '129
                    TxtRow = TxtRow & CStr(.MgPltProd100.Bpl) & ","   '130
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ia) & ","    '131
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ins) & ","   '132
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ca) & ","    '133
                    TxtRow = TxtRow & CStr(.MgPltProd100.Mg) & ","    '134
                    TxtRow = TxtRow & CStr(.MgPltProd100.Fe) & ","    '135
                    TxtRow = TxtRow & CStr(0) & ","                   '136  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltProd100.Al) & ","    '137
                    TxtRow = TxtRow & CStr(.MgPltProd100.WtPct)       '138
                Else    'PC
                    TxtRow = TxtRow & CStr(.MgPltProd100.Tpa) & ","   '129
                    TxtRow = TxtRow & CStr(.MgPltProd100.Bpl) & ","   '130
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ia) & ","    '131
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ins) & ","   '132
                    TxtRow = TxtRow & CStr(.MgPltProd100.Ca) & ","    '133
                    TxtRow = TxtRow & CStr(.MgPltProd100.Mg) & ","    '134
                    TxtRow = TxtRow & CStr(.MgPltProd100.Fe) & ","    '135
                    TxtRow = TxtRow & CStr(0) & ","                   '136  Eventually FeAdj
                    TxtRow = TxtRow & CStr(.MgPltProd100.Al) & ","    '137
                    TxtRow = TxtRow & CStr(.MgPltProd100.WtPct)       '138
                End If
            End If

            If aMineHasDoloflotPlt = True Then
                TxtRow = TxtRow & ","

                'Doloflot fine pebble input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Tpa) & ","   '139
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Bpl) & ","   '140
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ia) & ","    '141
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ins) & ","   '142
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Ca) & ","    '143
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Mg) & ","    '144
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Fe) & ","    '145
                    TxtRow = TxtRow & CStr(.DfFpbInp100.FeAdj) & "," '146
                    TxtRow = TxtRow & CStr(.DfFpbInp100.Al) & ","    '147
                    TxtRow = TxtRow & CStr(.DfFpbInp100.WtPct) & "," '148
                Else    'PC
                    TxtRow = TxtRow & CStr(.DfFpbInp.Tpa) & ","      '139
                    TxtRow = TxtRow & CStr(.DfFpbInp.Bpl) & ","      '140
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ia) & ","       '141
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ins) & ","      '142
                    TxtRow = TxtRow & CStr(.DfFpbInp.Ca) & ","       '143
                    TxtRow = TxtRow & CStr(.DfFpbInp.Mg) & ","       '144
                    TxtRow = TxtRow & CStr(.DfFpbInp.Fe) & ","       '145
                    TxtRow = TxtRow & CStr(.DfFpbInp.FeAdj) & ","    '146
                    TxtRow = TxtRow & CStr(.DfFpbInp.Al) & ","       '147
                    TxtRow = TxtRow & CStr(.DfFpbInp.WtPct) & ","    '148
                End If

                'Doloflot IP input
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.DfIpInp100.Tpa) & ","    '149
                    TxtRow = TxtRow & CStr(.DfIpInp100.Bpl) & ","    '150
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ia) & ","     '151
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ins) & ","    '152
                    TxtRow = TxtRow & CStr(.DfIpInp100.Ca) & ","     '153
                    TxtRow = TxtRow & CStr(.DfIpInp100.Mg) & ","     '154
                    TxtRow = TxtRow & CStr(.DfIpInp100.Fe) & ","     '155
                    TxtRow = TxtRow & CStr(.DfIpInp100.FeAdj) & ","  '156
                    TxtRow = TxtRow & CStr(.DfIpInp100.Al) & ","     '157
                    TxtRow = TxtRow & CStr(.DfIpInp100.WtPct) & ","  '158
                Else    'PC
                    TxtRow = TxtRow & CStr(.DfIpInp.Tpa) & ","       '149
                    TxtRow = TxtRow & CStr(.DfIpInp.Bpl) & ","       '150
                    TxtRow = TxtRow & CStr(.DfIpInp.Ia) & ","        '151
                    TxtRow = TxtRow & CStr(.DfIpInp.Ins) & ","       '152
                    TxtRow = TxtRow & CStr(.DfIpInp.Ca) & ","        '153
                    TxtRow = TxtRow & CStr(.DfIpInp.Mg) & ","        '154
                    TxtRow = TxtRow & CStr(.DfIpInp.Fe) & ","        '155
                    TxtRow = TxtRow & CStr(.DfIpInp.FeAdj) & ","     '156
                    TxtRow = TxtRow & CStr(.DfIpInp.Al) & ","        '157
                    TxtRow = TxtRow & CStr(.DfIpInp.WtPct) & ","     '158
                End If

                'Doloflot total input (Fpb + IP)
                If aDataType = "100%" Then
                    TpaVal = .DfIpInp100.Tpa + .DfFpbInp100.Tpa
                    WtPctVal = .DfIpInp100.WtPct + .DfFpbInp100.WtPct
                    BplVal = gGetTotalValue2(.DfIpInp100.Bpl, .DfIpInp100.Tpa,
                                         .DfFpbInp100.Bpl, .DfFpbInp100.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpInp100.Ins, .DfIpInp100.Tpa,
                                         .DfFpbInp100.Ins, .DfFpbInp100.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpInp100.Fe, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Fe, .DfFpbInp100.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpInp100.FeAdj, .DfIpInp100.Tpa,
                                           .DfFpbInp100.FeAdj, .DfFpbInp100.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpInp100.Al, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Al, .DfFpbInp100.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpInp100.Mg, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Mg, .DfFpbInp100.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpInp100.Ca, .DfIpInp100.Tpa,
                                        .DfFpbInp100.Ca, .DfFpbInp100.Tpa, 1)
                Else    'PC
                    TpaVal = .DfIpInp.Tpa + .DfFpbInp.Tpa
                    WtPctVal = .DfIpInp.WtPct + .DfFpbInp.WtPct
                    BplVal = gGetTotalValue2(.DfIpInp.Bpl, .DfIpInp.Tpa,
                                         .DfFpbInp.Bpl, .DfFpbInp.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpInp.Ins, .DfIpInp.Tpa,
                                         .DfFpbInp.Ins, .DfFpbInp.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpInp.Fe, .DfIpInp.Tpa,
                                        .DfFpbInp.Fe, .DfFpbInp.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpInp.FeAdj, .DfIpInp.Tpa,
                                           .DfFpbInp.FeAdj, .DfFpbInp.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpInp.Al, .DfIpInp.Tpa,
                                        .DfFpbInp.Al, .DfFpbInp.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpInp.Mg, .DfIpInp.Tpa,
                                        .DfFpbInp.Mg, .DfFpbInp.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpInp.Ca, .DfIpInp.Tpa,
                                        .DfFpbInp.Ca, .DfFpbInp.Tpa, 1)
                End If
                TxtRow = TxtRow & CStr(TpaVal) & ","               '159
                TxtRow = TxtRow & CStr(BplVal) & ","               '160
                If aUseFeAdjust = True Then
                    TxtRow = TxtRow & CStr(FeAdjVal + AlVal) & "," '161
                Else
                    TxtRow = TxtRow & CStr(FeVal + AlVal) & ","    '161
                End If
                TxtRow = TxtRow & CStr(InsVal) & ","               '162
                TxtRow = TxtRow & CStr(CaVal) & ","                '163
                TxtRow = TxtRow & CStr(MgVal) & ","                '164
                TxtRow = TxtRow & CStr(FeVal) & ","                '165
                TxtRow = TxtRow & CStr(FeAdjVal) & ","             '166
                TxtRow = TxtRow & CStr(AlVal) & ","                '167
                TxtRow = TxtRow & CStr(WtPctVal) & ","             '168

                'Doloflot total product (from Fpb + IP)
                If aDataType = "100%" Then
                    TpaVal = .DfIpProd100.Tpa + .DfFpbProd100.Tpa
                    WtPctVal = .DfIpProd100.WtPct + .DfFpbProd100.WtPct
                    BplVal = gGetTotalValue2(.DfIpProd100.Bpl, .DfIpProd100.Tpa,
                                         .DfFpbProd100.Bpl, .DfFpbProd100.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpProd100.Ins, .DfIpProd100.Tpa,
                                         .DfFpbProd100.Ins, .DfFpbProd100.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpProd100.Fe, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Fe, .DfFpbProd100.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpProd100.FeAdj, .DfIpProd100.Tpa,
                                           .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpProd100.Al, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Al, .DfFpbProd100.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpProd100.Mg, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Mg, .DfFpbProd100.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpProd100.Ca, .DfIpProd100.Tpa,
                                        .DfFpbProd100.Ca, .DfFpbProd100.Tpa, 1)
                Else    'PC
                    TpaVal = .DfIpProd.Tpa + .DfFpbProd.Tpa
                    WtPctVal = .DfIpProd.WtPct + .DfFpbProd.WtPct
                    BplVal = gGetTotalValue2(.DfIpProd.Bpl, .DfIpProd.Tpa,
                                         .DfFpbProd.Bpl, .DfFpbProd.Tpa, 1)
                    InsVal = gGetTotalValue2(.DfIpProd.Ins, .DfIpProd.Tpa,
                                         .DfFpbProd.Ins, .DfFpbProd.Tpa, 1)
                    FeVal = gGetTotalValue2(.DfIpProd.Fe, .DfIpProd.Tpa,
                                        .DfFpbProd.Fe, .DfFpbProd.Tpa, 2)
                    FeAdjVal = gGetTotalValue2(.DfIpProd.FeAdj, .DfIpProd.Tpa,
                                           .DfFpbProd.FeAdj, .DfFpbProd.Tpa, 2)
                    AlVal = gGetTotalValue2(.DfIpProd.Al, .DfIpProd.Tpa,
                                        .DfFpbProd.Al, .DfFpbProd.Tpa, 2)
                    MgVal = gGetTotalValue2(.DfIpProd.Mg, .DfIpProd.Tpa,
                                        .DfFpbProd.Mg, .DfFpbProd.Tpa, 2)
                    CaVal = gGetTotalValue2(.DfIpProd.Ca, .DfIpProd.Tpa,
                                        .DfFpbProd.Ca, .DfFpbProd.Tpa, 1)
                End If
                TxtRow = TxtRow & CStr(TpaVal) & ","                 '169
                TxtRow = TxtRow & CStr(BplVal) & ","                 '170
                If aUseFeAdjust = True Then
                    TxtRow = TxtRow & CStr(FeAdjVal + AlVal) & ","   '171
                Else
                    TxtRow = TxtRow & CStr(FeVal + AlVal) & ","      '171
                End If
                TxtRow = TxtRow & CStr(InsVal) & ","                 '172
                TxtRow = TxtRow & CStr(CaVal) & ","                  '173
                TxtRow = TxtRow & CStr(MgVal) & ","                  '174
                TxtRow = TxtRow & CStr(FeVal) & ","                  '175
                TxtRow = TxtRow & CStr(FeAdjVal) & ","               '176
                TxtRow = TxtRow & CStr(AlVal) & ","                  '177
                TxtRow = TxtRow & CStr(WtPctVal) & ","               '178

                'Coarse pebble rejected
                If aDataType = "100%" Then
                    TxtRow = TxtRow & CStr(.CpbRej100.Tpa) & ","     '179
                    TxtRow = TxtRow & CStr(.CpbRej100.Bpl) & ","     '180
                    TxtRow = TxtRow & CStr(.CpbRej100.Ia) & ","      '181
                    TxtRow = TxtRow & CStr(.CpbRej100.Ins) & ","     '182
                    TxtRow = TxtRow & CStr(.CpbRej100.Ca) & ","      '183
                    TxtRow = TxtRow & CStr(.CpbRej100.Mg) & ","      '184
                    TxtRow = TxtRow & CStr(.CpbRej100.Fe) & ","      '185
                    TxtRow = TxtRow & CStr(.CpbRej100.FeAdj) & ","   '186
                    TxtRow = TxtRow & CStr(.CpbRej100.Al) & ","      '187
                    TxtRow = TxtRow & CStr(.CpbRej100.WtPct)         '188
                Else    'PC
                    TxtRow = TxtRow & CStr(.CpbRej.Tpa) & ","        '179
                    TxtRow = TxtRow & CStr(.CpbRej.Bpl) & ","        '180
                    TxtRow = TxtRow & CStr(.CpbRej.Ia) & ","         '181
                    TxtRow = TxtRow & CStr(.CpbRej.Ins) & ","        '182
                    TxtRow = TxtRow & CStr(.CpbRej.Ca) & ","         '183
                    TxtRow = TxtRow & CStr(.CpbRej.Mg) & ","         '184
                    TxtRow = TxtRow & CStr(.CpbRej.Fe) & ","         '185
                    TxtRow = TxtRow & CStr(.CpbRej.FeAdj) & ","      '186
                    TxtRow = TxtRow & CStr(.CpbRej.Al) & ","         '187
                    TxtRow = TxtRow & CStr(.CpbRej.WtPct)            '188
                End If
            End If
        End With

        'gWriteLine aFileNumber, TxtRow
    End Sub

    Public Function GetTextFileHeaderBdFormat(ByVal aInclMgPlt As Integer,
                                          ByVal aMineHasDoloflotPlt As Boolean) As String

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        Dim HdrTxt As String

        HdrTxt = "HOLEID" & "," & "XCOORD" & "," & "YCOORD" & "," & "SEC" & "," & "TWN" & "," &
              "RGE" & "," & "FTY" & "," & "HOLE" & "," & "SPL#" & "," & "MINABLE" & "," & "ELEVTN" & "," &
              "FROM" & "," & "TO" & "," & "OVBTHK" & "," & "MTXTHK" & "," & "WSTTHK" & "," & "TOTTHK" & "," &
              "TPRTPA" & "," & "TPRBPL" & "," & "TPRIA" & "," & "TPRINS" & "," & "TPRCAO" & "," & "TPRMGO" & "," &
              "TPRFE" & "," & "TPRFEADJ" & "," & "TPRAL" & "," & "TPRPCT" & "," & "TPBTPA" & "," & "TPBBPL" & "," & "TPBIA" & "," & "TPBINS" & "," & "TPBCAO" & "," & "TPBMGO" & "," & "TPBFE" & "," & "TPBFEADJ" & "," & "TPBAL" & "," & "TPBPCT" & "," &
              "RPBTPA" & "," & "RPBBPL" & "," & "RPBIA" & "," & "RPBINS" & "," & "RPBCAO" & "," & "RPBMGO" & "," & "RPBFE" & "," & "RPBFEADJ" & "," & "RPBAL" & "," & "RPBPCT" & "," & "IPTPA" & "," & "IPBPL" & "," & "IPIA" & "," &
              "IPINS" & "," & "IPCAO" & "," & "IPMGO" & "," & "IPFE" & "," & "IPFEADJ" & "," & "IPAL" & "," & "IPPCT" & "," & "TFDTPA" & "," & "TFDBPL" & "," & "TFDPCT" & "," & "TCNTPA" & "," & "TCNBPL" & "," & "TCNIA" & "," &
              "TCNINS" & "," & "TCNCPR" & "," & "TCNMGO" & "," & "TCNFE" & "," & "TCNFEADJ" & "," & "TCNAL" & "," & "TCNPCT" & "," &
              "WCLTPA" & "," & "WCLBPL" & "," & "WCLPCT" & "," & "MTXX" & "," & "TOTX" & "," & "DENSTY" & "," & "OWN" & "," & "LITHOL" & "," & "PDTE" & "," & "CPBTPA" & "," & "CPBBPL" & "," & "CPBIA" & "," &
              "CPBINS" & "," & "CPBCAO" & "," & "CPMGO" & "," & "CPBFE" & "," & "CPBFEADJ" & "," & "CPBAL" & "," & "CPBPCT" & "," & "FPBTPA" & "," & "FPBBPL" & "," & "FPBIA" & "," & "FPBINS" & "," & "FPBCAO" & "," & "FPBMGO" & "," &
              "FPBFE" & "," & "FPBFEADJ" & "," & "FPBAL" & "," & "FPBPCT" & "," & "CFDTPA" & "," & "CFDBPL" & "," & "CFDPCT" & "," & "FFDTPA" & "," & "FFDBPL" & "," & "FFDPCT" & "," & "MPCTSOL" & "," & "MTXTPA" & "," & "OSTPA"

        If aInclMgPlt = 1 Then
            HdrTxt = HdrTxt & "," &
              "MITPA" & "," & "MIBPL" & "," & "MIIA" & "," & "MIINS" & "," & "MICAO" & "," & "MIMGO" & "," & "MIFE" & "," & "MIFEADJ" & "," & "MIAL" & "," & "MIPCT" & "," & "MRTPA" & "," & "MRBPL" & "," & "MRIA" & "," &
              "MRINS" & "," & "MRCAO" & "," & "MRMGO" & "," & "MRFE" & "," & "MRFEADJ" & "," & "MRAL" & "," & "MRPCT" & "," &
              "MPTPA" & "," & "MPBPL" & "," & "MPIA" & "," & "MPINS" & "," & "MPCAO" & "," & "MPMGO" & "," &
              "MPFE" & "," & "MPFEADJ" & "," & "MPAL" & "," & "MPPCT"
        End If

        If aMineHasDoloflotPlt = True Then
            HdrTxt = HdrTxt & "," &
         "DFTPA" & "," & "DFBPL" & "," & "DFIA" & "," & "DFINS" & "," & "DFCAO" & "," & "DFMGO" & "," &
         "DFFE" & "," & "DFFEADJ" & "," & "DFAL" & "," & "DFPCT" & "," &
         "DITPA" & "," & "DIBPL" & "," & "DIIA" & "," & "DIINS" & "," & "DICAO" & "," & "DIMGO" & "," &
         "DIFE" & "," & "DIFEADJ" & "," & "DIAL" & "," & "DIPCT" & "," &
         "DTTPA" & "," & "DTBPL" & "," & "DTIA" & "," & "DTINS" & "," & "DTCAO" & "," & "DTMGO" & "," &
         "DTFE" & "," & "DTFEADJ" & "," & "DTAL" & "," & "DTPCT" & "," &
         "DPTPA" & "," & "DPBPL" & "," & "DPIA" & "," & "DPINS" & "," & "DPCAO" & "," & "DPMGO" & "," &
         "DPFE" & "," & "DPFEADJ" & "," & "DPAL" & "," & "DPPCT" & "," &
         "RCPBTPA" & "," & "RCPBBPL" & "," & "RCPBIA" & "," & "RCPBINS" & "," & "RCPBCAO" & "," & "RCPBMGO" & "," &
         "RCPBFE" & "," & "RCPBFEADJ" & "," & "RCPBAL" & "," & "RCPBPCT"
        End If

        GetTextFileHeaderBdFormat = HdrTxt
    End Function

    Public Function gGetMaterialOnSpec(ByVal aMaterial As String,
                                       ByVal aSplitNum As Integer,
                                       ByRef aReviewSpread As AxvaSpread) As String

        ''**********************************************************************
        ''
        ''
        ''
        ''**********************************************************************

        Dim RedFound As Boolean
        Dim Col1 As Integer
        Dim Col2 As Integer
        Dim ColIdx As Integer

        'Coarse pebble      Cpb  93 to 101
        'Fine pebble        Fpb  104 to 112
        'Total pebble       Tpb  44 to 52

        'Coarse concentrate Ccn  136 to 144
        'Fine concentrate   Fcn  147 to 155
        'Total concentrate  Tcn  66 to 74

        'IP                 IP   55 to 63
        'OS                 OS   33 to 41

        gGetMaterialOnSpec = "No"
        RedFound = False

        '93   BPL
        '94   Ins
        '95   I&A
        '96   Fe
        '97   Al
        '98   Mg
        '99   Ca
        '100  MER
        '101  Cpr

        Select Case aMaterial
            Case Is = "Cpb"
                Col1 = 93
                Col2 = 101
            Case Is = "Fpb"
                Col1 = 104
                Col2 = 112
            Case Is = "Tpb"
                Col1 = 44
                Col2 = 52
            Case Is = "Ccn"
                Col1 = 136
                Col2 = 144
            Case Is = "Fcn"
                Col1 = 147
                Col2 = 155
            Case Is = "Tcn"
                Col1 = 66
                Col2 = 74
            Case Is = "IP"
                Col1 = 55
                Col2 = 63
            Case Is = "OS"
                Col1 = 33
                Col2 = 41
        End Select

        With aReviewSpread
            For ColIdx = Col1 To Col2
                .Row = aSplitNum
                .Col = ColIdx
                If .ForeColor = Color.Red Then '&HC0& 
                    RedFound = True
                    Exit For
                End If
            Next ColIdx
        End With

        If RedFound = True Then
            gGetMaterialOnSpec = "No"
        Else
            gGetMaterialOnSpec = "Yes"
        End If

        Dim bozo33 As Integer
        If aSplitNum = 3 And aMaterial = "Tpb" Then
            bozo33 = 1
        End If
    End Function

    Private Sub CalcTotCnSpec(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                              ByVal aCalcType As String,
                              ByVal aInclCcn As Boolean,
                              ByVal aInclFcn As Boolean,
                              ByVal aMode As String,
                              ByVal aSplitNumber As Integer,
                              ByVal aCanSelectRejectTcn As Boolean,
                              ByVal aCalcRejected As Boolean)

        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                .Tcn.Tpa = 0
                If aInclCcn = True Then
                    .Tcn.Tpa = .Tcn.Tpa + .Ccn.Tpa
                End If
                If aInclFcn = True Then
                    .Tcn.Tpa = .Tcn.Tpa + .Fcn.Tpa
                End If
                .Tcn.Bpl = gGetTotalValueSpec(.Ccn.Bpl, .Ccn.Tpa, .Fcn.Bpl,
                                              .Fcn.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn.Ins = gGetTotalValueSpec(.Ccn.Ins, .Ccn.Tpa, .Fcn.Ins,
                                              .Fcn.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn.Ia = gGetTotalValueSpec(.Ccn.Ia, .Ccn.Tpa, .Fcn.Ia,
                                             .Fcn.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn.IaAdj = gGetTotalValueSpec(.Ccn.IaAdj, .Ccn.Tpa, .Fcn.IaAdj,
                                             .Fcn.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn.Ca = gGetTotalValueSpec(.Ccn.Ca, .Ccn.Tpa, .Fcn.Ca,
                                             .Fcn.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn.Fe = gGetTotalValueSpec(.Ccn.Fe, .Ccn.Tpa, .Fcn.Fe,
                                            .Fcn.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn.FeAdj = gGetTotalValueSpec(.Ccn.FeAdj, .Ccn.Tpa, .Fcn.FeAdj,
                                            .Fcn.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn.Al = gGetTotalValueSpec(.Ccn.Al, .Ccn.Tpa, .Fcn.Al,
                                             .Fcn.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn.Mg = gGetTotalValueSpec(.Ccn.Mg, .Ccn.Tpa, .Fcn.Mg,
                                             .Fcn.Tpa, aInclCcn, aInclFcn, 2)

                'If necessary -- calculate the total pebble rejected at the washer!
                If aCanSelectRejectTcn And aCalcRejected Then
                    If Not aInclCcn And Not aInclFcn Then
                        'The pebble has been rejected!
                        .TcnRej.Tpa = .Ccn.Tpa + .Fcn.Tpa

                        .TcnRej.Bpl = gGetTotalValueSpec(.Ccn.Bpl, .Ccn.Tpa, .Fcn.Bpl,
                                                         .Fcn.Tpa, True, True, 1)
                        .TcnRej.Ins = gGetTotalValueSpec(.Ccn.Ins, .Ccn.Tpa, .Fcn.Ins,
                                                         .Fcn.Tpa, True, True, 1)
                        .TcnRej.Ia = gGetTotalValueSpec(.Ccn.Ia, .Ccn.Tpa, .Fcn.Ia,
                                                        .Fcn.Tpa, True, True, 2)
                        .TcnRej.IaAdj = gGetTotalValueSpec(.Ccn.IaAdj, .Ccn.Tpa, .Fcn.IaAdj,
                                                        .Fcn.Tpa, True, True, 2)
                        .TcnRej.Ca = gGetTotalValueSpec(.Ccn.Ca, .Ccn.Tpa, .Fcn.Ca,
                                                        .Fcn.Tpa, True, True, 1)
                        .TcnRej.Fe = gGetTotalValueSpec(.Ccn.Fe, .Ccn.Tpa, .Fcn.Fe,
                                                        .Fcn.Tpa, True, True, 2)
                        .TcnRej.FeAdj = gGetTotalValueSpec(.Ccn.FeAdj, .Ccn.Tpa, .Fcn.FeAdj,
                                                           .Fcn.Tpa, True, True, 2)
                        .TcnRej.Al = gGetTotalValueSpec(.Ccn.Al, .Ccn.Tpa, .Fcn.Al,
                                                        .Fcn.Tpa, True, True, 2)
                        .TcnRej.Mg = gGetTotalValueSpec(.Ccn.Mg, .Ccn.Tpa, .Fcn.Mg,
                                                        .Fcn.Tpa, True, True, 2)
                    Else
                        .TcnRej.Tpa = 0
                        .TcnRej.Bpl = 0
                        .TcnRej.Ins = 0
                        .TcnRej.Ia = 0
                        .TcnRej.IaAdj = 0
                        .TcnRej.Ca = 0
                        .TcnRej.Fe = 0
                        .TcnRej.FeAdj = 0
                        .TcnRej.Al = 0
                        .TcnRej.Mg = 0
                    End If
                End If
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                .Tcn100.Tpa = 0
                If aInclCcn Then
                    .Tcn100.Tpa = .Tcn100.Tpa + .Ccn100.Tpa
                End If
                If aInclFcn Then
                    .Tcn100.Tpa = .Tcn100.Tpa + .Fcn100.Tpa
                End If
                .Tcn100.Bpl = gGetTotalValueSpec(.Ccn100.Bpl, .Ccn100.Tpa, .Fcn100.Bpl,
                                                 .Fcn100.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn100.Ins = gGetTotalValueSpec(.Ccn100.Ins, .Ccn100.Tpa, .Fcn100.Ins,
                                                 .Fcn100.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn100.Ia = gGetTotalValueSpec(.Ccn100.Ia, .Ccn100.Tpa, .Fcn100.Ia,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn100.IaAdj = gGetTotalValueSpec(.Ccn100.IaAdj, .Ccn100.Tpa, .Fcn100.IaAdj,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn100.Ca = gGetTotalValueSpec(.Ccn100.Ca, .Ccn100.Tpa, .Fcn100.Ca,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 1)
                .Tcn100.Fe = gGetTotalValueSpec(.Ccn100.Fe, .Ccn100.Tpa, .Fcn100.Fe,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn100.FeAdj = gGetTotalValueSpec(.Ccn100.FeAdj, .Ccn100.Tpa, .Fcn100.FeAdj,
                                                   .Fcn100.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn100.Al = gGetTotalValueSpec(.Ccn100.Al, .Ccn100.Tpa, .Fcn100.Al,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 2)
                .Tcn100.Mg = gGetTotalValueSpec(.Ccn100.Mg, .Ccn100.Tpa, .Fcn100.Mg,
                                                .Fcn100.Tpa, aInclCcn, aInclFcn, 2)

                'If necessary -- calculate the total pebble rejected at the washer!
                If aCanSelectRejectTcn = True And aCalcRejected = True Then
                    If Not aInclCcn And Not aInclFcn Then
                        'The pebble has been rejected!
                        .TcnRej100.Tpa = .Ccn100.Tpa + .Fcn100.Tpa

                        .TcnRej100.Bpl = gGetTotalValueSpec(.Ccn100.Bpl, .Ccn100.Tpa, .Fcn100.Bpl,
                                                            .Fcn100.Tpa, True, True, 1)
                        .TcnRej100.Ins = gGetTotalValueSpec(.Ccn100.Ins, .Ccn100.Tpa, .Fcn100.Ins,
                                                            .Fcn100.Tpa, True, True, 1)
                        .TcnRej100.Ia = gGetTotalValueSpec(.Ccn100.Ia, .Ccn100.Tpa, .Fcn100.Ia,
                                                           .Fcn100.Tpa, True, True, 2)
                        .TcnRej100.IaAdj = gGetTotalValueSpec(.Ccn100.IaAdj, .Ccn100.Tpa, .Fcn100.IaAdj,
                                                           .Fcn100.Tpa, True, True, 2)
                        .TcnRej100.Ca = gGetTotalValueSpec(.Ccn100.Ca, .Ccn100.Tpa, .Fcn100.Ca,
                                                           .Fcn100.Tpa, True, True, 1)
                        .TcnRej100.Fe = gGetTotalValueSpec(.Ccn100.Fe, .Ccn100.Tpa, .Fcn100.Fe,
                                                           .Fcn100.Tpa, True, True, 2)
                        .TcnRej100.FeAdj = gGetTotalValueSpec(.Ccn100.FeAdj, .Ccn100.Tpa, .Fcn100.FeAdj,
                                                              .Fcn100.Tpa, True, True, 2)
                        .TcnRej100.Al = gGetTotalValueSpec(.Ccn100.Al, .Ccn100.Tpa, .Fcn100.Al,
                                                           .Fcn100.Tpa, True, True, 2)
                        .TcnRej100.Mg = gGetTotalValueSpec(.Ccn100.Mg, .Ccn100.Tpa, .Fcn100.Mg,
                                                           .Fcn100.Tpa, True, True, 2)
                    Else
                        .TcnRej100.Tpa = 0
                        .TcnRej100.Bpl = 0
                        .TcnRej100.Ins = 0
                        .TcnRej100.Ia = 0
                        .TcnRej100.IaAdj = 0
                        .TcnRej100.Ca = 0
                        .TcnRej100.Fe = 0
                        .TcnRej100.FeAdj = 0
                        .TcnRej100.Al = 0
                        .TcnRej100.Mg = 0
                    End If
                End If
            End With
        End If
    End Sub

    Public Sub gAddProdCoeffOr100Pct(ByRef aProspData As gRawProspSplRdctnType,
                                     ByVal aRcvryData As gDataRdctnParamsType,
                                     ByVal aOsOnSpec As String,
                                     ByVal aCpbOnSpec As String,
                                     ByVal aFpbOnSpec As String,
                                     ByVal aTpbOnSpec As String,
                                     ByVal aCcnOnSpec As String,
                                     ByVal aFcnOnSpec As String,
                                     ByVal aTcnOnSpec As String,
                                     ByVal aIpOnSpec As String,
                                     ByVal aInclCpbAlways As String,
                                     ByVal aInclFpbAlways As String,
                                     ByVal aInclOsAlways As String,
                                     ByVal aInclCpbNever As String,
                                     ByVal aInclFpbNever As String,
                                     ByVal aInclOsNever As String,
                                     ByVal aMineHasOffSpecPbPlt As String,
                                     ByVal aCanSelectRejectTpb As String,
                                     ByVal aCanSelectRejectTcn As String,
                                     ByVal aUseFeAdjust As String,
                                     ByVal aRdctnMode As String,
                                     ByRef aRptObj As ReportDocument,
                                     ByVal aSplitOrHole As String,
                                     ByVal aAreaDefnMineName As String)

        Dim MtxDensityCalc As Single

        'aRdctnMode    "ProdCoeff" or "100%Prospect"
        'aSplitOrHole  "Split" or "Hole"
        Try


            With aProspData
                If aRdctnMode = "ProdCoeff" Then
                    'ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff
                    'ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff
                    'ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff  Prod Coeff  ProdCoeff

                    aRptObj.DataDefinition.FormulaFields("MtxTpa").Text = "'" & Format(.MtxTpaPc, "###,##0") & "'"

                    If aSplitOrHole = "Split" Then
                        aRptObj.DataDefinition.FormulaFields("MtxXOnSpec").Text = "'" & Format(.MtxxOnSpec, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("MtxxAll").Text = "'" & Format(.MtxxAll, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotXOnSpec").Text = "'" & "--" & "'"
                        aRptObj.DataDefinition.FormulaFields("TotxAll").Text = "'" & "--" & "'"
                    Else    'Hole Data
                        aRptObj.DataDefinition.FormulaFields("MtxXOnSpec").Text = "'" & Format(.MtxxOnSpecPcHole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("MtxxAll").Text = "'" & Format(.MtxxAllPcHole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotXOnSpec").Text = "'" & Format(.TotxOnSpecPcHole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotxAll").Text = "'" & Format(.TotxAllPcHole, "##0.00") & "'"
                    End If
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("CpbWtPct").Text = "'" & Format(.Cpb.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbTpa").Text = "'" & Format(.Cpb.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbBpl").Text = "'" & Format(.Cpb.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbIns").Text = "'" & Format(.Cpb.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then 'aRecoveryParams.UseAdjustedFeToDetermineMineability Then
                        aRptObj.DataDefinition.FormulaFields("CpbIa").Text = "'" & Format(.Cpb.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CpbIa").Text = "'" & Format(.Cpb.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CpbFe").Text = "'" & Format(.Cpb.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbAl").Text = "'" & Format(.Cpb.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbMg").Text = "'" & Format(.Cpb.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbCa").Text = "'" & Format(.Cpb.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("FpbWtPct").Text = "'" & Format(.Fpb.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbTpa").Text = "'" & Format(.Fpb.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbBpl").Text = "'" & Format(.Fpb.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbIns").Text = "'" & Format(.Fpb.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("FpbIa").Text = "'" & Format(.Fpb.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("FpbIa").Text = "'" & Format(.Fpb.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("FpbFe").Text = "'" & Format(.Fpb.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbAl").Text = "'" & Format(.Fpb.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbMg").Text = "'" & Format(.Fpb.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbCa").Text = "'" & Format(.Fpb.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("TpbWtPct").Text = "'" & Format(.Tpb.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbTpa").Text = "'" & Format(.Tpb.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbBpl").Text = "'" & Format(.Tpb.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbIns").Text = "'" & Format(.Tpb.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TpbIa").Text = "'" & Format(.Tpb.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TpbIa").Text = "'" & Format(.Tpb.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TpbFe").Text = "'" & Format(.Tpb.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbAl").Text = "'" & Format(.Tpb.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbMg").Text = "'" & Format(.Tpb.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbCa").Text = "'" & Format(.Tpb.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("TcnWtPct").Text = "'" & Format(.Tcn.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnTpa").Text = "'" & Format(.Tcn.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnBpl").Text = "'" & Format(.Tcn.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnIns").Text = "'" & Format(.Tcn.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TcnIa").Text = "'" & Format(.Tcn.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TcnIa").Text = "'" & Format(.Tcn.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TcnFe").Text = "'" & Format(.Tcn.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnAl").Text = "'" & Format(.Tcn.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnMg").Text = "'" & Format(.Tcn.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnCa").Text = "'" & Format(.Tcn.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("TprWtPct").Text = "'" & Format(.Tpr.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprTpa").Text = "'" & Format(.Tpr.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprBpl").Text = "'" & Format(.Tpr.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprIns").Text = "'" & Format(.Tpr.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TprIa").Text = "'" & Format(.Tpr.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TprIa").Text = "'" & Format(.Tpr.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TprFe").Text = "'" & Format(.Tpr.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprAl").Text = "'" & Format(.Tpr.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprMg").Text = "'" & Format(.Tpr.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprCa").Text = "'" & Format(.Tpr.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("TtlWtPct").Text = "'" & Format(.Ttl.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TtlTpa").Text = "'" & Format(.Ttl.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TtlBpl").Text = "'" & Format(.Ttl.Bpl, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("CfdWtPct").Text = "'" & Format(.Cfd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdTpa").Text = "'" & Format(.Cfd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdBpl").Text = "'" & Format(.Cfd.Bpl, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("FfdWtPct").Text = "'" & Format(.Ffd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdTpa").Text = "'" & Format(.Ffd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdBpl").Text = "'" & Format(.Ffd.Bpl, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("TfdWtPct").Text = "'" & Format(.Tfd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TfdTpa").Text = "'" & Format(.Tfd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TfdBpl").Text = "'" & Format(.Tfd.Bpl, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("WclWtPct").Text = "'" & Format(.Wcl.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("WclTpa").Text = "'" & Format(.Wcl.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("WclBpl").Text = "'" & Format(.Wcl.Bpl, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("MineName").Text = "'" & aAreaDefnMineName & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("FcnWtPct").Text = "'" & Format(.Fcn.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnTpa").Text = "'" & Format(.Fcn.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnBpl").Text = "'" & Format(.Fcn.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnIns").Text = "'" & Format(.Fcn.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("FcnIa").Text = "'" & Format(.Fcn.Ia, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("FcnIa").Text = "'" & Format(.Fcn.IaAdj, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("FcnFe").Text = "'" & Format(.Fcn.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnAl").Text = "'" & Format(.Fcn.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnMg").Text = "'" & Format(.Fcn.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnCa").Text = "'" & Format(.Fcn.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("CcnWtPct").Text = "'" & Format(.Ccn.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnTpa").Text = "'" & Format(.Ccn.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnBpl").Text = "'" & Format(.Ccn.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnIns").Text = "'" & Format(.Ccn.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("CcnIa").Text = "'" & Format(.Ccn.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CcnIa").Text = "'" & Format(.Ccn.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CcnFe").Text = "'" & Format(.Ccn.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnAl").Text = "'" & Format(.Ccn.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnMg").Text = "'" & Format(.Ccn.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnCa").Text = "'" & Format(.Ccn.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("IpWtPct").Text = "'" & Format(.Ip.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpTpa").Text = "'" & Format(.Ip.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpBpl").Text = "'" & Format(.Ip.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpIns").Text = "'" & Format(.Ip.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("IpIa").Text = "'" & Format(.Ip.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("IpIa").Text = "'" & Format(.Ip.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("IpFe").Text = "'" & Format(.Ip.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpAl").Text = "'" & Format(.Ip.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpMg").Text = "'" & Format(.Ip.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpCa").Text = "'" & Format(.Ip.Ca, "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("CpbTonRcvry").Text = "'" & Format(aRcvryData.PbTonRcvryCrs, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbTonRcvry").Text = "'" & Format(aRcvryData.PbTonRcvryFne, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpTonRcvry").Text = "'" & Format(aRcvryData.IpTonRcvryTot, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdTonRcvry").Text = "'" & Format(aRcvryData.FdTonRcvryCrs, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdTonRcvry").Text = "'" & Format(aRcvryData.FdTonRcvryFne, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdBplTonRcvry").Text = "'" & Format(aRcvryData.FdBplRcvryCrs, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdBplTonRcvry").Text = "'" & Format(aRcvryData.FdBplRcvryFne, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("WclTonRcvry").Text = "'" & Format(aRcvryData.ClTonRcvryTot, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("OsWtPct").Text = "'" & Format(.Os.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsTpa").Text = "'" & Format(.Os.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsBpl").Text = "'" & Format(.Os.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsIns").Text = "'" & Format(.Os.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("OsIa").Text = "'" & Format(.Os.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("OsIa").Text = "'" & Format(.Os.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("OsFe").Text = "'" & Format(.Os.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsAl").Text = "'" & Format(.Os.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsMg").Text = "'" & Format(.Os.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsCa").Text = "'" & Format(.Os.Ca, "##0.0") & "'"

                    'These are special items.
                    'lblReviewComm --> lblGen(41)
                    If aSplitOrHole = "Split" Then
                        '1) .OsMin    aOsOnSpec
                        '2) .CpbMin   aCpbOnSpec
                        '3) .FpbMin   aFpbOnSpec
                        '4) .TpbMin   aTpbOnSpec
                        '5) .IpOnSpec    aIpOnSpec
                        '6) .CcnMin   aCcnOnSpec
                        '7) .FcnMin   aFcnOnSpec
                        '8) .TcnMin   aTcnOnSpec

                        'Want to show whether the material is on-spec.
                        aRptObj.DataDefinition.FormulaFields("OsMin").Text = "'" & aOsOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CpbMin").Text = "'" & aCpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FpbMin").Text = "'" & aFpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TpbMin").Text = "'" & aTpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("IpMin").Text = "'" & aIpOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CcnMin").Text = "'" & aCcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FcnMin").Text = "'" & aFcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TcnMin").Text = "'" & aTcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableCalcd").Text = "'" & .MineableCalcd & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableOride").Text = "'" & .MineableOride & "'"
                    Else    'Hole data
                        '1) .OsMinHole    OsOnSpec
                        '2) .CpbMinHole   CpbOnSpec
                        '3) .FpbMinHole   FpbOnSpec
                        '4) .TpbMinHole   TpbOnSpec
                        '5) .IpMinHole    IpOnSpec
                        '6) .CcnMinHole   CcnOnSpec
                        '7) .FcnMinHole   FcnOnSpec
                        '8) .TcnMinHole   TcnOnSpec

                        aRptObj.DataDefinition.FormulaFields("OsMin").Text = "'" & .OsOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CpbMin").Text = "'" & .CpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FpbMin").Text = "'" & .FpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TpbMin").Text = "'" & .TpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("IpMin").Text = "'" & .IpOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CcnMin").Text = "'" & .CcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FcnMin").Text = "'" & .FcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TcnMin").Text = "'" & .TcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableCalcd").Text = "'" & .MineableHole & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableOride").Text = "'" & " " & "'"   'Does not apply to holes
                    End If

                    aRptObj.DataDefinition.FormulaFields("InclCpbAlways").Text = "'" & aInclCpbAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclFpbAlways").Text = "'" & aInclFpbAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclCpbNever").Text = "'" & aInclCpbNever & "'"
                    aRptObj.DataDefinition.FormulaFields("InclFpbNever").Text = "'" & aInclFpbNever & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("InclOsAlways").Text = "'" & aInclOsAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclOsNever").Text = "'" & aInclOsNever & "'"
                    '-----
                    'Need to "recalculate" a matrix density.
                    'lblReviewComm --> lblGen(41)
                    If aSplitOrHole = "Split" Then
                        If .SplitThck <> 0 Then
                            MtxDensityCalc = Round((.MtxTpaPc * 2000) / (.SplitThck * 43560), 1)
                        Else
                            MtxDensityCalc = 0
                        End If
                    Else    'Hole data
                        If .MtxThk <> 0 Then
                            MtxDensityCalc = Round((.MtxTpaPc * 2000) / (.MtxThk * 43560), 1)
                        Else
                            MtxDensityCalc = 0
                        End If
                    End If
                    aRptObj.DataDefinition.FormulaFields("MtxDensityCalc").Text = "'" & Format(MtxDensityCalc, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("MtxPctSol").Text = "'" & Format(.MtxPctSol, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltInpWtPct").Text = "'" & Format(.MgPltInp.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpTpa").Text = "'" & Format(.MgPltInp.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpBpl").Text = "'" & Format(.MgPltInp.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpIns").Text = "'" & Format(.MgPltInp.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltInpIa").Text = "'" & Format(.MgPltInp.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltInpIa").Text = "'" & Format(.MgPltInp.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltInpFe").Text = "'" & Format(.MgPltInp.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpAl").Text = "'" & Format(.MgPltInp.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpMg").Text = "'" & Format(.MgPltInp.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpCa").Text = "'" & Format(.MgPltInp.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltRejWtPct").Text = "'" & Format(.MgPltRej.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejTpa").Text = "'" & Format(.MgPltRej.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejBpl").Text = "'" & Format(.MgPltRej.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejIns").Text = "'" & Format(.MgPltRej.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltRejIa").Text = "'" & Format(.MgPltRej.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltRejIa").Text = "'" & Format(.MgPltRej.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltRejFe").Text = "'" & Format(.MgPltRej.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejAl").Text = "'" & Format(.MgPltRej.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejMg").Text = "'" & Format(.MgPltRej.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejCa").Text = "'" & Format(.MgPltRej.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltProdWtPct").Text = "'" & Format(.MgPltProd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdTpa").Text = "'" & Format(.MgPltProd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdBpl").Text = "'" & Format(.MgPltProd.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdIns").Text = "'" & Format(.MgPltProd.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltProdIa").Text = "'" & Format(.MgPltProd.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltProdIa").Text = "'" & Format(.MgPltProd.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltProdFe").Text = "'" & Format(.MgPltProd.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdAl").Text = "'" & Format(.MgPltProd.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdMg").Text = "'" & Format(.MgPltProd.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdCa").Text = "'" & Format(.MgPltProd.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltTcnWtPct").Text = "'" & Format(.MgPltTcn.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnTpa").Text = "'" & Format(.MgPltTcn.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnBpl").Text = "'" & Format(.MgPltTcn.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnIns").Text = "'" & Format(.MgPltTcn.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltTcnIa").Text = "'" & Format(.MgPltTcn.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltTcnIa").Text = "'" & Format(.MgPltTcn.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltTcnFe").Text = "'" & Format(.MgPltTcn.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnAl").Text = "'" & Format(.MgPltTcn.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnMg").Text = "'" & Format(.MgPltTcn.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnCa").Text = "'" & Format(.MgPltTcn.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltTprWtPct").Text = "'" & Format(.MgPltTpr.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprTpa").Text = "'" & Format(.MgPltTpr.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprBpl").Text = "'" & Format(.MgPltTpr.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprIns").Text = "'" & Format(.MgPltTpr.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltTprIa").Text = "'" & Format(.MgPltTpr.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltTprIa").Text = "'" & Format(.MgPltTpr.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltTprFe").Text = "'" & Format(.MgPltTpr.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprAl").Text = "'" & Format(.MgPltTpr.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprMg").Text = "'" & Format(.MgPltTpr.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprCa").Text = "'" & Format(.MgPltTpr.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("TpbRejTpa").Text = "'" & Format(.TpbRej.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejBpl").Text = "'" & Format(.TpbRej.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejIns").Text = "'" & Format(.TpbRej.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TpbRejIa").Text = "'" & Format(.TpbRej.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TpbRejIa").Text = "'" & Format(.TpbRej.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TpbRejFe").Text = "'" & Format(.TpbRej.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejAl").Text = "'" & Format(.TpbRej.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejMg").Text = "'" & Format(.TpbRej.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejCa").Text = "'" & Format(.TpbRej.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("CpbFeAdj").Text = "'" & Format(.Cpb.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbFeAdj").Text = "'" & Format(.Fpb.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbFeAdj").Text = "'" & Format(.Tpb.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnFeAdj").Text = "'" & Format(.Fcn.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnFeAdj").Text = "'" & Format(.Ccn.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpFeAdj").Text = "'" & Format(.Ip.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsFeAdj").Text = "'" & Format(.Os.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprFeAdj").Text = "'" & Format(.Tpr.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnFeAdj").Text = "'" & Format(.Tcn.FeAdj, "##0.00") & "'"

                    ''03/24/2011**, lss Was!
                    'aRptObj.DataDefinition.FormulaFields("MgPltInpFe").Text = "'" & Format(.MgPltInp.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltRejFe").Text = "'" & Format(.MgPltRej.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltProdFe").Text = "'" & Format(.MgPltProd.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltTcnFe").Text = "'" & Format(.MgPltTcn.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltTprFe").Text = "'" & Format(.MgPltTpr.FeAdj, "##0.00") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltInpFeAdj").Text = "'" & Format(.MgPltInp.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejFeAdj").Text = "'" & Format(.MgPltRej.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdFeAdj").Text = "'" & Format(.MgPltProd.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnFeAdj").Text = "'" & Format(.MgPltTcn.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprFeAdj").Text = "'" & Format(.MgPltTpr.FeAdj, "##0.00") & "'"

                    ''Total concentrate rejected
                    aRptObj.DataDefinition.FormulaFields("TcnRejTpa").Text = "'" & Format(.TcnRej.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejBpl").Text = "'" & Format(.TcnRej.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejIns").Text = "'" & Format(.TcnRej.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TcnRejIa").Text = "'" & Format(.TcnRej.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TcnRejIa").Text = "'" & Format(.TcnRej.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TcnRejFe").Text = "'" & Format(.TcnRej.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejAl").Text = "'" & Format(.TcnRej.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejMg").Text = "'" & Format(.TcnRej.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejCa").Text = "'" & Format(.TcnRej.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("TpbRejFeAdj").Text = "'" & Format(.TpbRej.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejFeAdj").Text = "'" & Format(.TcnRej.FeAdj, "##0.00") & "'"

                    ''Doloflot -- Fine pebble stuff
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpWtPct").Text = "'" & Format(.DfFpbInp.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpTpa").Text = "'" & Format(.DfFpbInp.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpBpl").Text = "'" & Format(.DfFpbInp.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpIns").Text = "'" & Format(.DfFpbInp.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfFnePbInpIa").Text = "'" & Format(.DfFpbInp.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfFnePbInpIa").Text = "'" & Format(.DfFpbInp.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpFe").Text = "'" & Format(.DfFpbInp.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpFeAdj").Text = "'" & Format(.DfFpbInp.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpAl").Text = "'" & Format(.DfFpbInp.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpMg").Text = "'" & Format(.DfFpbInp.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpCa").Text = "'" & Format(.DfFpbInp.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdWtPct").Text = "'" & Format(.DfFpbProd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdTpa").Text = "'" & Format(.DfFpbProd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdBpl").Text = "'" & Format(.DfFpbProd.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdIns").Text = "'" & Format(.DfFpbProd.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfFnePbProdIa").Text = "'" & Format(.DfFpbProd.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfFnePbProdIa").Text = "'" & Format(.DfFpbProd.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdFe").Text = "'" & Format(.DfFpbProd.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdFeAdj").Text = "'" & Format(.DfFpbProd.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdAl").Text = "'" & Format(.DfFpbProd.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdMg").Text = "'" & Format(.DfFpbProd.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdCa").Text = "'" & Format(.DfFpbProd.Ca, "##0.0") & "'"

                    ''Doloflot -- IP stuff
                    aRptObj.DataDefinition.FormulaFields("DfIpInpWtPct").Text = "'" & Format(.DfIpInp.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpTpa").Text = "'" & Format(.DfIpInp.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpBpl").Text = "'" & Format(.DfIpInp.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpIns").Text = "'" & Format(.DfIpInp.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfIpInpIa").Text = "'" & Format(.DfIpInp.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfIpInpIa").Text = "'" & Format(.DfIpInp.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfIpInpFe").Text = "'" & Format(.DfIpInp.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpFeAdj").Text = "'" & Format(.DfIpInp.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpAl").Text = "'" & Format(.DfIpInp.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpMg").Text = "'" & Format(.DfIpInp.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpCa").Text = "'" & Format(.DfIpInp.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfIpProdWtPct").Text = "'" & Format(.DfIpProd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdTpa").Text = "'" & Format(.DfIpProd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdBpl").Text = "'" & Format(.DfIpProd.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdIns").Text = "'" & Format(.DfIpProd.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfIpProdIa").Text = "'" & Format(.DfIpProd.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfIpProdIa").Text = "'" & Format(.DfIpProd.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfIpProdFe").Text = "'" & Format(.DfIpProd.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdFeAdj").Text = "'" & Format(.DfIpProd.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdAl").Text = "'" & Format(.DfIpProd.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdMg").Text = "'" & Format(.DfIpProd.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdCa").Text = "'" & Format(.DfIpProd.Ca, "##0.0") & "'"

                    ''Doloflot -- Total Cn + Doloflot stuff
                    aRptObj.DataDefinition.FormulaFields("DfTcnWtPct").Text = "'" & Format(.DfTcn.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnTpa").Text = "'" & Format(.DfTcn.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnBpl").Text = "'" & Format(.DfTcn.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnIns").Text = "'" & Format(.DfTcn.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTcnIa").Text = "'" & Format(.DfTcn.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTcnIa").Text = "'" & Format(.DfTcn.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTcnFe").Text = "'" & Format(.DfTcn.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnFeAdj").Text = "'" & Format(.DfTcn.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnAl").Text = "'" & Format(.DfTcn.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnMg").Text = "'" & Format(.DfTcn.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnCa").Text = "'" & Format(.DfTcn.Ca, "##0.0") & "'"

                    ''Doloflot -- Total product + Doloflot stuff
                    aRptObj.DataDefinition.FormulaFields("DfTprWtPct").Text = "'" & Format(.DfTpr.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprTpa").Text = "'" & Format(.DfTpr.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprBpl").Text = "'" & Format(.DfTpr.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprIns").Text = "'" & Format(.DfTpr.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTprIa").Text = "'" & Format(.DfTpr.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTprIa").Text = "'" & Format(.DfTpr.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTprFe").Text = "'" & Format(.DfTpr.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprFeAdj").Text = "'" & Format(.DfTpr.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprAl").Text = "'" & Format(.DfTpr.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprMg").Text = "'" & Format(.DfTpr.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprCa").Text = "'" & Format(.DfTpr.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfTpInpWtPct").Text = "'" & Format(.DfIpInp.WtPct + .DfFpbInp.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpTpa").Text = "'" & Format(.DfIpInp.Tpa + .DfFpbInp.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpBpl").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Bpl, .DfIpInp.Tpa, .DfFpbInp.Bpl, .DfFpbInp.Tpa, 1), "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpIns").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Ins, .DfIpInp.Tpa, .DfFpbInp.Ins, .DfFpbInp.Tpa, 1), "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTpInpIa").Text = "'" & Format(gGetTotalValue2(.DfIpInp.IaAdj, .DfIpInp.Tpa, .DfFpbInp.IaAdj, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTpInpIa").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Ia, .DfIpInp.Tpa, .DfFpbInp.Ia, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTpInpFe").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Fe, .DfIpInp.Tpa, .DfFpbInp.Fe, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpFeAdj").Text = "'" & Format(gGetTotalValue2(.DfIpInp.FeAdj, .DfIpInp.Tpa, .DfFpbInp.FeAdj, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpAl").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Al, .DfIpInp.Tpa, .DfFpbInp.Al, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpMg").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Mg, .DfIpInp.Tpa, .DfFpbInp.Mg, .DfFpbInp.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpCa").Text = "'" & Format(gGetTotalValue2(.DfIpInp.Ca, .DfIpInp.Tpa, .DfFpbInp.Ca, .DfFpbInp.Tpa, 1), "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfTpProdWtPct").Text = "'" & Format(.DfIpProd.WtPct + .DfFpbProd.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdTpa").Text = "'" & Format(.DfIpProd.Tpa + .DfFpbProd.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdBpl").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Bpl, .DfIpProd.Tpa, .DfFpbProd.Bpl, .DfFpbProd.Tpa, 1), "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdIns").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Ins, .DfIpProd.Tpa, .DfFpbProd.Ins, .DfFpbProd.Tpa, 1), "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTpProdIa").Text = "'" & Format(gGetTotalValue2(.DfIpProd.IaAdj, .DfIpProd.Tpa, .DfFpbProd.IaAdj, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTpProdIa").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Ia, .DfIpProd.Tpa, .DfFpbProd.Ia, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTpProdFe").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Fe, .DfIpProd.Tpa, .DfFpbProd.Fe, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdFeAdj").Text = "'" & Format(gGetTotalValue2(.DfIpProd.FeAdj, .DfIpProd.Tpa, .DfFpbProd.FeAdj, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdAl").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Al, .DfIpProd.Tpa, .DfFpbProd.Al, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdMg").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Mg, .DfIpProd.Tpa, .DfFpbProd.Mg, .DfFpbProd.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdCa").Text = "'" & Format(gGetTotalValue2(.DfIpProd.Ca, .DfIpProd.Tpa, .DfFpbProd.Ca, .DfFpbProd.Tpa, 1), "##0.0") & "'"
                    ''-----
                    aRptObj.DataDefinition.FormulaFields("CpbRejWtPct").Text = "'" & Format(.CpbRej.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejTpa").Text = "'" & Format(.CpbRej.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejBpl").Text = "'" & Format(.CpbRej.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejIns").Text = "'" & Format(.CpbRej.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("CpbRejIa").Text = "'" & Format(.CpbRej.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CpbRejIa").Text = "'" & Format(.CpbRej.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CpbRejFe").Text = "'" & Format(.CpbRej.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejAl").Text = "'" & Format(.CpbRej.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejMg").Text = "'" & Format(.CpbRej.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejCa").Text = "'" & Format(.CpbRej.Ca, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejFeAdj").Text = "'" & Format(.CpbRej.FeAdj, "##0.00") & "'"
                Else
                    '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%  100%
                    '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%  100%
                    '100%  100%  100%  100%  100%  100%  100%  100%  100%  100%  100%
                    aRptObj.DataDefinition.FormulaFields("MtxTpa").Text = "'" & Format(.MtxTPA, "###,##0") & "'"

                    If aSplitOrHole = "Split" Then
                        aRptObj.DataDefinition.FormulaFields("MtxXOnSpec").Text = "'" & Format(.MtxxOnSpec100, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("MtxxAll").Text = "'" & Format(.MtxxAll100, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotXOnSpec").Text = "'" & "--" & "'"
                        aRptObj.DataDefinition.FormulaFields("TotxAll").Text = "'" & "--" & "'"
                    Else    'Hole Data
                        aRptObj.DataDefinition.FormulaFields("MtxXOnSpec").Text = "'" & Format(.MtxxOnSpec100Hole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("MtxxAll").Text = "'" & Format(.MtxxAll100Hole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotXOnSpec").Text = "'" & Format(.TotxOnSpec100Hole, "##0.00") & "'"
                        aRptObj.DataDefinition.FormulaFields("TotxAll").Text = "'" & Format(.TotxAll100Hole, "##0.00") & "'"
                    End If
                    '-----
                    aRptObj.DataDefinition.FormulaFields("CpbWtPct").Text = "'" & Format(.Cpb100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbTpa").Text = "'" & Format(.Cpb100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbBpl").Text = "'" & Format(.Cpb100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbIns").Text = "'" & Format(.Cpb100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("CpbIa").Text = "'" & Format(.Cpb100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CpbIa").Text = "'" & Format(.Cpb100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CpbFe").Text = "'" & Format(.Cpb100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbAl").Text = "'" & Format(.Cpb100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbMg").Text = "'" & Format(.Cpb100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbCa").Text = "'" & Format(.Cpb100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("FpbWtPct").Text = "'" & Format(.Fpb100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbTpa").Text = "'" & Format(.Fpb100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbBpl").Text = "'" & Format(.Fpb100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbIns").Text = "'" & Format(.Fpb100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("FpbIa").Text = "'" & Format(.Fpb100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("FpbIa").Text = "'" & Format(.Fpb100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("FpbFe").Text = "'" & Format(.Fpb100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbAl").Text = "'" & Format(.Fpb100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbMg").Text = "'" & Format(.Fpb100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbCa").Text = "'" & Format(.Fpb100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("TpbWtPct").Text = "'" & Format(.Tpb100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbTpa").Text = "'" & Format(.Tpb100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbBpl").Text = "'" & Format(.Tpb100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbIns").Text = "'" & Format(.Tpb100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TpbIa").Text = "'" & Format(.Tpb100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TpbIa").Text = "'" & Format(.Tpb100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TpbFe").Text = "'" & Format(.Tpb100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbAl").Text = "'" & Format(.Tpb100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbMg").Text = "'" & Format(.Tpb100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbCa").Text = "'" & Format(.Tpb100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("TcnWtPct").Text = "'" & Format(.Tcn100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnTpa").Text = "'" & Format(.Tcn100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnBpl").Text = "'" & Format(.Tcn100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnIns").Text = "'" & Format(.Tcn100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TcnIa").Text = "'" & Format(.Tcn100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TcnIa").Text = "'" & Format(.Tcn100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TcnFe").Text = "'" & Format(.Tcn100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnAl").Text = "'" & Format(.Tcn100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnMg").Text = "'" & Format(.Tcn100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnCa").Text = "'" & Format(.Tcn100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("TprWtPct").Text = "'" & Format(.Tpr100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprTpa").Text = "'" & Format(.Tpr100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprBpl").Text = "'" & Format(.Tpr100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprIns").Text = "'" & Format(.Tpr100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TprIa").Text = "'" & Format(.Tpr100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TprIa").Text = "'" & Format(.Tpr100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TprFe").Text = "'" & Format(.Tpr100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprAl").Text = "'" & Format(.Tpr100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprMg").Text = "'" & Format(.Tpr100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprCa").Text = "'" & Format(.Tpr100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("TtlWtPct").Text = "'" & Format(.Ttl100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TtlTpa").Text = "'" & Format(.Ttl100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TtlBpl").Text = "'" & Format(.Ttl100.Bpl, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("CfdWtPct").Text = "'" & Format(.Cfd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdTpa").Text = "'" & Format(.Cfd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdBpl").Text = "'" & Format(.Cfd100.Bpl, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("FfdWtPct").Text = "'" & Format(.Ffd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdTpa").Text = "'" & Format(.Ffd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdBpl").Text = "'" & Format(.Ffd100.Bpl, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("TfdWtPct").Text = "'" & Format(.Tfd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TfdTpa").Text = "'" & Format(.Tfd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TfdBpl").Text = "'" & Format(.Tfd100.Bpl, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("WclWtPct").Text = "'" & Format(.Wcl100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("WclTpa").Text = "'" & Format(.Wcl100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("WclBpl").Text = "'" & Format(.Wcl100.Bpl, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("MineName").Text = "'" & aAreaDefnMineName & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("FcnWtPct").Text = "'" & Format(.Fcn100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnTpa").Text = "'" & Format(.Fcn100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnBpl").Text = "'" & Format(.Fcn100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnIns").Text = "'" & Format(.Fcn100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("FcnIa").Text = "'" & Format(.Fcn100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("FcnIa").Text = "'" & Format(.Fcn100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("FcnFe").Text = "'" & Format(.Fcn100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnAl").Text = "'" & Format(.Fcn100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnMg").Text = "'" & Format(.Fcn100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnCa").Text = "'" & Format(.Fcn100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("CcnWtPct").Text = "'" & Format(.Ccn100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnTpa").Text = "'" & Format(.Ccn100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnBpl").Text = "'" & Format(.Ccn100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnIns").Text = "'" & Format(.Ccn100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("CcnIa").Text = "'" & Format(.Ccn100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CcnIa").Text = "'" & Format(.Ccn100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CcnFe").Text = "'" & Format(.Ccn100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnAl").Text = "'" & Format(.Ccn100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnMg").Text = "'" & Format(.Ccn100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnCa").Text = "'" & Format(.Ccn100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("IpWtPct").Text = "'" & Format(.Ip100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpTpa").Text = "'" & Format(.Ip100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpBpl").Text = "'" & Format(.Ip100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpIns").Text = "'" & Format(.Ip100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("IpIa").Text = "'" & Format(.Ip100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("IpIa").Text = "'" & Format(.Ip100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("IpFe").Text = "'" & Format(.Ip100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpAl").Text = "'" & Format(.Ip100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpMg").Text = "'" & Format(.Ip100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpCa").Text = "'" & Format(.Ip100.Ca, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("CpbTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("IpTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("CfdBplTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("FfdBplTonRcvry").Text = "'" & "100.0" & "'"
                    aRptObj.DataDefinition.FormulaFields("WclTonRcvry").Text = "'" & "100.0" & "'"

                    aRptObj.DataDefinition.FormulaFields("OsWtPct").Text = "'" & Format(.Os100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsTpa").Text = "'" & Format(.Os100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsBpl").Text = "'" & Format(.Os100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsIns").Text = "'" & Format(.Os100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("OsIa").Text = "'" & Format(.Os100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("OsIa").Text = "'" & Format(.Os100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("OsFe").Text = "'" & Format(.Os100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsAl").Text = "'" & Format(.Os100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsMg").Text = "'" & Format(.Os100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsCa").Text = "'" & Format(.Os100.Ca, "##0.0") & "'"

                    'These are special items.
                    If aSplitOrHole = "Split" Then
                        '1) .OsMin    aOsOnSpec
                        '2) .CpbMin   aCpbOnSpec
                        '3) .FpbMin   aFpbOnSpec
                        '4) .TpbMin   aTpbOnSpec
                        '5) .IpMin    aIpOnSpec
                        '6) .CcnMin   aCcnOnSpec
                        '7) .FcnMin   aFcnOnSpec
                        '8) .TcnMin   aTcnOnSpec

                        'Want to show whether the material is on-spec.
                        aRptObj.DataDefinition.FormulaFields("OsMin").Text = "'" & aOsOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CpbMin").Text = "'" & aCpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FpbMin").Text = "'" & aFpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TpbMin").Text = "'" & aTpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("IpMin").Text = "'" & aIpOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CcnMin").Text = "'" & aCcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FcnMin").Text = "'" & aFcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TcnMin").Text = "'" & aTcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableCalcd").Text = "'" & .MineableCalcd & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableOride").Text = "'" & .MineableOride & "'"

                        '06/22/2010, lss -- Removed these -- added the ones above!
                        'aRptObj.DataDefinition.FormulaFields("OsMin").Text = "'" & .OsMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("CpbMin").Text = "'" & .CpbMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("FpbMin").Text = "'" & .FpbMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("TpbMin").Text = "'" & .TpbMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("IpMin").Text = "'" & .IpMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("CcnMin").Text = "'" & .CcnMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("FcnMin").Text = "'" & .FcnMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("TcnMin").Text = "'" & .TcnMin & "'"
                        'aRptObj.DataDefinition.FormulaFields("MineableCalcd").Text = "'" & .MineableCalcd & "'"
                        'aRptObj.DataDefinition.FormulaFields("MineableOride").Text = "'" & .MineableOride & "'"
                    Else 'Hole data
                        aRptObj.DataDefinition.FormulaFields("OsMin").Text = "'" & .OsOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CpbMin").Text = "'" & .CpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FpbMin").Text = "'" & .FpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TpbMin").Text = "'" & .TpbOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("IpMin").Text = "'" & .IpOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("CcnMin").Text = "'" & .CcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("FcnMin").Text = "'" & .FcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("TcnMin").Text = "'" & .TcnOnSpec & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableCalcd").Text = "'" & .MineableHole100 & "'"
                        aRptObj.DataDefinition.FormulaFields("MineableOride").Text = "'" & " " & "'"   'Does not apply to holes
                    End If

                    aRptObj.DataDefinition.FormulaFields("InclCpbAlways").Text = "'" & aInclCpbAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclFpbAlways").Text = "'" & aInclFpbAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclCpbNever").Text = "'" & aInclCpbNever & "'"
                    aRptObj.DataDefinition.FormulaFields("InclFpbNever").Text = "'" & aInclFpbNever & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("InclOsAlways").Text = "'" & aInclOsAlways & "'"
                    aRptObj.DataDefinition.FormulaFields("InclOsNever").Text = "'" & aInclOsNever & "'"
                    '-----
                    'Need to "recalculate" a matrix density.
                    If aSplitOrHole = "Split" Then
                        If .SplitThck <> 0 Then
                            MtxDensityCalc = Round((.MtxTPA * 2000) / (.SplitThck * 43560), 1)
                        Else
                            MtxDensityCalc = 0
                        End If
                    Else    'Hole data
                        If .MtxThk <> 0 Then
                            MtxDensityCalc = Round((.MtxTPA * 2000) / (.MtxThk * 43560), 1)
                        Else
                            MtxDensityCalc = 0
                        End If
                    End If
                    aRptObj.DataDefinition.FormulaFields("MtxDensityCalc").Text = "'" & Format(MtxDensityCalc, "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("MtxPctSol").Text = "'" & Format(.MtxPctSol, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltInpWtPct").Text = "'" & Format(.MgPltInp100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpTpa").Text = "'" & Format(.MgPltInp100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpBpl").Text = "'" & Format(.MgPltInp100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpIns").Text = "'" & Format(.MgPltInp100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltInpIa").Text = "'" & Format(.MgPltInp100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltInpIa").Text = "'" & Format(.MgPltInp100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltInpFe").Text = "'" & Format(.MgPltInp100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpAl").Text = "'" & Format(.MgPltInp100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpMg").Text = "'" & Format(.MgPltInp100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltInpCa").Text = "'" & Format(.MgPltInp100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltRejWtPct").Text = "'" & Format(.MgPltRej100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejTpa").Text = "'" & Format(.MgPltRej100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejBpl").Text = "'" & Format(.MgPltRej100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejIns").Text = "'" & Format(.MgPltRej100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltRejIa").Text = "'" & Format(.MgPltRej100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltRejIa").Text = "'" & Format(.MgPltRej100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltRejFe").Text = "'" & Format(.MgPltRej100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejAl").Text = "'" & Format(.MgPltRej100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejMg").Text = "'" & Format(.MgPltRej100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejCa").Text = "'" & Format(.MgPltRej100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltProdWtPct").Text = "'" & Format(.MgPltProd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdTpa").Text = "'" & Format(.MgPltProd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdBpl").Text = "'" & Format(.MgPltProd100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdIns").Text = "'" & Format(.MgPltProd100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltProdIa").Text = "'" & Format(.MgPltProd100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltProdIa").Text = "'" & Format(.MgPltProd100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltProdFe").Text = "'" & Format(.MgPltProd100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdAl").Text = "'" & Format(.MgPltProd100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdMg").Text = "'" & Format(.MgPltProd100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdCa").Text = "'" & Format(.MgPltProd100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltTcnWtPct").Text = "'" & Format(.MgPltTcn100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnTpa").Text = "'" & Format(.MgPltTcn100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnBpl").Text = "'" & Format(.MgPltTcn100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnIns").Text = "'" & Format(.MgPltTcn100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltTcnIa").Text = "'" & Format(.MgPltTcn100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltTcnIa").Text = "'" & Format(.MgPltTcn100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltTcnFe").Text = "'" & Format(.MgPltTcn100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnAl").Text = "'" & Format(.MgPltTcn100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnMg").Text = "'" & Format(.MgPltTcn100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnCa").Text = "'" & Format(.MgPltTcn100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltTprWtPct").Text = "'" & Format(.MgPltTpr100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprTpa").Text = "'" & Format(.MgPltTpr100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprBpl").Text = "'" & Format(.MgPltTpr100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprIns").Text = "'" & Format(.MgPltTpr100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("MgPltTprIa").Text = "'" & Format(.MgPltTpr100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("MgPltTprIa").Text = "'" & Format(.MgPltTpr100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("MgPltTprFe").Text = "'" & Format(.MgPltTpr100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprAl").Text = "'" & Format(.MgPltTpr100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprMg").Text = "'" & Format(.MgPltTpr100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprCa").Text = "'" & Format(.MgPltTpr100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("TpbRejTpa").Text = "'" & Format(.TpbRej100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejBpl").Text = "'" & Format(.TpbRej100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejIns").Text = "'" & Format(.TpbRej100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TpbRejIa").Text = "'" & Format(.TpbRej100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TpbRejIa").Text = "'" & Format(.TpbRej100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TpbRejFe").Text = "'" & Format(.TpbRej100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejAl").Text = "'" & Format(.TpbRej100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejMg").Text = "'" & Format(.TpbRej100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbRejCa").Text = "'" & Format(.TpbRej100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("CpbFeAdj").Text = "'" & Format(.Cpb100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FpbFeAdj").Text = "'" & Format(.Fpb100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TpbFeAdj").Text = "'" & Format(.Tpb100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("FcnFeAdj").Text = "'" & Format(.Fcn100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CcnFeAdj").Text = "'" & Format(.Ccn100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("IpFeAdj").Text = "'" & Format(.Ip100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("OsFeAdj").Text = "'" & Format(.Os100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TprFeAdj").Text = "'" & Format(.Tpr100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnFeAdj").Text = "'" & Format(.Tcn100.FeAdj, "##0.00") & "'"

                    '03/24/2011**, lss Was!
                    'aRptObj.DataDefinition.FormulaFields("MgPltInpFe").Text = "'" & Format(.MgPltInp100.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltRejFe").Text = "'" & Format(.MgPltRej100.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltProdFe").Text = "'" & Format(.MgPltProd100.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltTcnFe").Text = "'" & Format(.MgPltTcn100.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("MgPltTprFe").Text = "'" & Format(.MgPltTpr100.FeAdj, "##0.00") & "'"

                    aRptObj.DataDefinition.FormulaFields("MgPltInpFeAdj").Text = "'" & Format(.MgPltInp100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltRejFeAdj").Text = "'" & Format(.MgPltRej100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltProdFeAdj").Text = "'" & Format(.MgPltProd100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTcnFeAdj").Text = "'" & Format(.MgPltTcn100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("MgPltTprFeAdj").Text = "'" & Format(.MgPltTpr100.FeAdj, "##0.00") & "'"

                    'Total concentrate rejected
                    aRptObj.DataDefinition.FormulaFields("TcnRejTpa").Text = "'" & Format(.TcnRej100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejBpl").Text = "'" & Format(.TcnRej100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejIns").Text = "'" & Format(.TcnRej100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("TcnRejIa").Text = "'" & Format(.TcnRej100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("TcnRejIa").Text = "'" & Format(.TcnRej100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("TcnRejFe").Text = "'" & Format(.TcnRej100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejAl").Text = "'" & Format(.TcnRej100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejMg").Text = "'" & Format(.TcnRej100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejCa").Text = "'" & Format(.TcnRej100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("TpbRejFeAdj").Text = "'" & Format(.TpbRej100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("TcnRejFeAdj").Text = "'" & Format(.TcnRej100.FeAdj, "##0.00") & "'"

                    'Doloflot -- Fine pebble stuff
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpWtPct").Text = "'" & Format(.DfFpbInp100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpTpa").Text = "'" & Format(.DfFpbInp100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpBpl").Text = "'" & Format(.DfFpbInp100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpIns").Text = "'" & Format(.DfFpbInp100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfFnePbInpIa").Text = "'" & Format(.DfFpbInp100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfFnePbInpIa").Text = "'" & Format(.DfFpbInp100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpFe").Text = "'" & Format(.DfFpbInp100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpFeAdj").Text = "'" & Format(.DfFpbInp100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpAl").Text = "'" & Format(.DfFpbInp100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpMg").Text = "'" & Format(.DfFpbInp100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbInpCa").Text = "'" & Format(.DfFpbInp100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdWtPct").Text = "'" & Format(.DfFpbProd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdTpa").Text = "'" & Format(.DfFpbProd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdBpl").Text = "'" & Format(.DfFpbProd100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdIns").Text = "'" & Format(.DfFpbProd100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfFnePbProdIa").Text = "'" & Format(.DfFpbProd100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfFnePbProdIa").Text = "'" & Format(.DfFpbProd100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdFe").Text = "'" & Format(.DfFpbProd100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdFeAdj").Text = "'" & Format(.DfFpbProd100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdAl").Text = "'" & Format(.DfFpbProd100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdMg").Text = "'" & Format(.DfFpbProd100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfFnePbProdCa").Text = "'" & Format(.DfFpbProd100.Ca, "##0.0") & "'"

                    'Doloflot -- IP stuff
                    aRptObj.DataDefinition.FormulaFields("DfIpInpWtPct").Text = "'" & Format(.DfIpInp100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpTpa").Text = "'" & Format(.DfIpInp100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpBpl").Text = "'" & Format(.DfIpInp100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpIns").Text = "'" & Format(.DfIpInp100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfIpInpIa").Text = "'" & Format(.DfIpInp100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfIpInpIa").Text = "'" & Format(.DfIpInp100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfIpInpFe").Text = "'" & Format(.DfIpInp100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpFeAdj").Text = "'" & Format(.DfIpInp100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpAl").Text = "'" & Format(.DfIpInp100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpMg").Text = "'" & Format(.DfIpInp100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpInpCa").Text = "'" & Format(.DfIpInp100.Ca, "##0.0") & "'"

                    'aRptObj.DataDefinition.FormulaFields("DfIpRejWtPct").Text = "'" & Format(.DfIpRej100.WtPct, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejTpa").Text = "'" & Format(.DfIpRej100.Tpa, "##,##0") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejBpl").Text = "'" & Format(.DfIpRej100.Bpl, "##0.0") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejIns").Text = "'" & Format(.DfIpRej100.Ins, "##0.0") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejIa").Text = "'" & Format(.DfIpRej100.Ia, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejFe").Text = "'" & Format(.DfIpRej100.Fe, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejFeAdj").Text = "'" & Format(.DfIpRej100.FeAdj, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejAl").Text = "'" & Format(.DfIpRej100.Al, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejMg").Text = "'" & Format(.DfIpRej100.Mg, "##0.00") & "'"
                    'aRptObj.DataDefinition.FormulaFields("DfIpRejCa").Text = "'" & Format(.DfIpRej100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfIpProdWtPct").Text = "'" & Format(.DfIpProd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdTpa").Text = "'" & Format(.DfIpProd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdBpl").Text = "'" & Format(.DfIpProd100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdIns").Text = "'" & Format(.DfIpProd100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfIpProdIa").Text = "'" & Format(.DfIpProd100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfIpProdIa").Text = "'" & Format(.DfIpProd100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfIpProdFe").Text = "'" & Format(.DfIpProd100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdFeAdj").Text = "'" & Format(.DfIpProd100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdAl").Text = "'" & Format(.DfIpProd100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdMg").Text = "'" & Format(.DfIpProd100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfIpProdCa").Text = "'" & Format(.DfIpProd100.Ca, "##0.0") & "'"

                    'Doloflot -- Total Cn + Doloflot stuff
                    aRptObj.DataDefinition.FormulaFields("DfTcnWtPct").Text = "'" & Format(.DfTcn100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnTpa").Text = "'" & Format(.DfTcn100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnBpl").Text = "'" & Format(.DfTcn100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnIns").Text = "'" & Format(.DfTcn100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTcnIa").Text = "'" & Format(.DfTcn100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTcnIa").Text = "'" & Format(.DfTcn100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTcnFe").Text = "'" & Format(.DfTcn100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnFeAdj").Text = "'" & Format(.DfTcn100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnAl").Text = "'" & Format(.DfTcn100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnMg").Text = "'" & Format(.DfTcn100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTcnCa").Text = "'" & Format(.DfTcn100.Ca, "##0.0") & "'"

                    'Doloflot -- Total product + Doloflot stuff
                    aRptObj.DataDefinition.FormulaFields("DfTprWtPct").Text = "'" & Format(.DfTpr100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprTpa").Text = "'" & Format(.DfTpr100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprBpl").Text = "'" & Format(.DfTpr100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprIns").Text = "'" & Format(.DfTpr100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTprIa").Text = "'" & Format(.DfTpr100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTprIa").Text = "'" & Format(.DfTpr100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTprFe").Text = "'" & Format(.DfTpr100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprFeAdj").Text = "'" & Format(.DfTpr100.FeAdj, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprAl").Text = "'" & Format(.DfTpr100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprMg").Text = "'" & Format(.DfTpr100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTprCa").Text = "'" & Format(.DfTpr100.Ca, "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfTpInpWtPct").Text = "'" & Format(.DfIpInp100.WtPct + .DfFpbInp100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpTpa").Text = "'" & Format(.DfIpInp100.Tpa + .DfFpbInp100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpBpl").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Bpl, .DfIpInp100.Tpa, .DfFpbInp100.Bpl, .DfFpbInp100.Tpa, 1), "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpIns").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Ins, .DfIpInp100.Tpa, .DfFpbInp100.Ins, .DfFpbInp100.Tpa, 1), "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTpInpIa").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.IaAdj, .DfIpInp100.Tpa, .DfFpbInp100.IaAdj, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTpInpIa").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Ia, .DfIpInp100.Tpa, .DfFpbInp100.Ia, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTpInpFe").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Fe, .DfIpInp100.Tpa, .DfFpbInp100.Fe, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpFeAdj").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.FeAdj, .DfIpInp100.Tpa, .DfFpbInp100.FeAdj, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpAl").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Al, .DfIpInp100.Tpa, .DfFpbInp100.Al, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpMg").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Mg, .DfIpInp100.Tpa, .DfFpbInp100.Mg, .DfFpbInp100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpInpCa").Text = "'" & Format(gGetTotalValue2(.DfIpInp100.Ca, .DfIpInp100.Tpa, .DfFpbInp100.Ca, .DfFpbInp100.Tpa, 1), "##0.0") & "'"

                    aRptObj.DataDefinition.FormulaFields("DfTpProdWtPct").Text = "'" & Format(.DfIpProd100.WtPct + .DfFpbProd100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdTpa").Text = "'" & Format(.DfIpProd100.Tpa + .DfFpbProd100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdBpl").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Bpl, .DfIpProd100.Tpa, .DfFpbProd100.Bpl, .DfFpbProd100.Tpa, 1), "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdIns").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Ins, .DfIpProd100.Tpa, .DfFpbProd100.Ins, .DfFpbProd100.Tpa, 1), "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("DfTpProdIa").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.IaAdj, .DfIpProd100.Tpa, .DfFpbProd100.IaAdj, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("DfTpProdIa").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Ia, .DfIpProd100.Tpa, .DfFpbProd100.Ia, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("DfTpProdFe").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Fe, .DfIpProd100.Tpa, .DfFpbProd100.Fe, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdFeAdj").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.FeAdj, .DfIpProd100.Tpa, .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdAl").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Al, .DfIpProd100.Tpa, .DfFpbProd100.Al, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdMg").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Mg, .DfIpProd100.Tpa, .DfFpbProd100.Mg, .DfFpbProd100.Tpa, 2), "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("DfTpProdCa").Text = "'" & Format(gGetTotalValue2(.DfIpProd100.Ca, .DfIpProd100.Tpa, .DfFpbProd100.Ca, .DfFpbProd100.Tpa, 1), "##0.0") & "'"
                    '-----
                    aRptObj.DataDefinition.FormulaFields("CpbRejWtPct").Text = "'" & Format(.CpbRej100.WtPct, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejTpa").Text = "'" & Format(.CpbRej100.Tpa, "##,##0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejBpl").Text = "'" & Format(.CpbRej100.Bpl, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejIns").Text = "'" & Format(.CpbRej100.Ins, "##0.0") & "'"

                    If aRcvryData.UseFeAdjust Then
                        aRptObj.DataDefinition.FormulaFields("CpbRejIa").Text = "'" & Format(.CpbRej100.IaAdj, "##0.00") & "'"
                    Else
                        aRptObj.DataDefinition.FormulaFields("CpbRejIa").Text = "'" & Format(.CpbRej100.Ia, "##0.00") & "'"
                    End If

                    aRptObj.DataDefinition.FormulaFields("CpbRejFe").Text = "'" & Format(.CpbRej100.Fe, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejAl").Text = "'" & Format(.CpbRej100.Al, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejMg").Text = "'" & Format(.CpbRej100.Mg, "##0.00") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejCa").Text = "'" & Format(.CpbRej100.Ca, "##0.0") & "'"
                    aRptObj.DataDefinition.FormulaFields("CpbRejFeAdj").Text = "'" & Format(.CpbRej100.FeAdj, "##0.00") & "'"
                End If

                aRptObj.DataDefinition.FormulaFields("MineHasOffSpecPbPlt").Text = "'" & aMineHasOffSpecPbPlt & "'"
                aRptObj.DataDefinition.FormulaFields("CanSelectRejectTpb").Text = "'" & aCanSelectRejectTpb & "'"
                aRptObj.DataDefinition.FormulaFields("UseFeAdjust").Text = "'" & aUseFeAdjust & "'"
                aRptObj.DataDefinition.FormulaFields("CanSelectRejectTcn").Text = "'" & aCanSelectRejectTcn & "'"
            End With

        Catch ex As Exception

        End Try

    End Sub

    Private Function DoloflotPltProcess(ByVal aRcvryParamsData As gDataRdctnParamsType,
                                        ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                        ByVal aProcMode As String,
                                        ByVal aProd As String) As Boolean

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'DOLOFLOT PLANT ONA
        '------------------

        'Called from Function DetermineSplitMineability().

        'aProcMode will be "100%" or "ProdCoeff".
        'aProc will be "Fine pebble" or IP

        'Have already determined that either the fine pebble is off-spec or the IP
        'is off-spec and that the mine has a Doloflot plant!  We also know if the
        'fine pebble and the IP MgO is off-spec.

        'This procedure may be working on a split or a hole depending on what is
        '"transferred" through aRdctnCalcData and aSsDataReview.

        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect

        Dim ProdBplTpa As Double
        Dim ProdBplRcvry As Single
        Dim ThisSplit As Integer
        Dim ThisProd As String

        ThisSplit = aRdctnCalcData.SplitNumber
        ThisProd = aProd

        If aProcMode = "100%" Then
            With aRdctnCalcData
                .DfTcn100.Tpa = 0
                .DfTcn100.WtPct = 0
                .DfTcn100.Bpl = 0
                .DfTcn100.Ins = 0
                .DfTcn100.Fe = 0
                .DfTcn100.Al = 0
                .DfTcn100.Ia = 0
                .DfTcn100.Mg = 0
                .DfTcn100.Ca = 0
                .DfTcn100.FeAdj = 0
                .DfTcn100.IaAdj = 0

                .DfTpr100.Tpa = 0
                .DfTpr100.WtPct = 0
                .DfTpr100.Bpl = 0
                .DfTpr100.Ins = 0
                .DfTpr100.Fe = 0
                .DfTpr100.Al = 0
                .DfTpr100.Ia = 0
                .DfTpr100.Mg = 0
                .DfTpr100.Ca = 0
                .DfTpr100.FeAdj = 0
                .DfTpr100.IaAdj = 0

                'Check first to see if the Fine pebble or IP is Doloflot plant reject.
                'This is based solely on the product MgO.
                'If the target product is determined to be off-spec then the function is
                'exited.

                '06/21/2010, lss
                'Assume that aRcvryParamsData.DpFnePbMgoCutoff = MgO cutoff assigned to
                'good fine pebble.
                'Assume that aRcvryParamsData.DpIpMgoCutoff = MgO cutoff assigned to
                'good IP.

                If aProd = "Fine pebble" Then
                    If .FpbMgoOffSpec <> "Yes" Then
                        'This Fine pebble is Doloflot plant reject (the MgO is not high enough).
                        'The MgO is not off-spec thus it will not be sent to the Doloflot plant.
                        'It will be product.
                        .DfFpbInp100.Tpa = 0
                        .DfFpbInp100.WtPct = 0
                        .DfFpbInp100.Bpl = 0
                        .DfFpbInp100.Ins = 0
                        .DfFpbInp100.Fe = 0
                        .DfFpbInp100.Al = 0
                        .DfFpbInp100.Ia = 0
                        .DfFpbInp100.Mg = 0
                        .DfFpbInp100.Ca = 0
                        .DfFpbInp100.FeAdj = 0
                        .DfFpbInp100.IaAdj = 0

                        .DfFpbProd100.Tpa = 0
                        .DfFpbProd100.WtPct = 0
                        .DfFpbProd100.Bpl = 0
                        .DfFpbProd100.Ins = 0
                        .DfFpbProd100.Fe = 0
                        .DfFpbProd100.Al = 0
                        .DfFpbProd100.Ia = 0
                        .DfFpbProd100.Mg = 0
                        .DfFpbProd100.Ca = 0
                        .DfFpbProd100.FeAdj = 0
                        .DfFpbProd100.IaAdj = 0

                        Exit Function
                    End If
                End If

                If aProd = "IP" Then
                    If .IpMgoOffSpec <> "Yes" Then
                        'This Fine pebble is Doloflot plant reject (the MgO is not high enough).
                        'The MgO is not off-spec thus it will not be sent to the Doloflot plant.
                        'It will be product.

                        .DfIpInp100.Tpa = 0
                        .DfIpInp100.WtPct = 0
                        .DfIpInp100.Bpl = 0
                        .DfIpInp100.Ins = 0
                        .DfIpInp100.Fe = 0
                        .DfIpInp100.Al = 0
                        .DfIpInp100.Ia = 0
                        .DfIpInp100.Mg = 0
                        .DfIpInp100.Ca = 0
                        .DfIpInp100.FeAdj = 0
                        .DfIpInp100.IaAdj = 0

                        .DfIpProd100.Tpa = 0
                        .DfIpProd100.WtPct = 0
                        .DfIpProd100.Bpl = 0
                        .DfIpProd100.Ins = 0
                        .DfIpProd100.Fe = 0
                        .DfIpProd100.Al = 0
                        .DfIpProd100.Ia = 0
                        .DfIpProd100.Mg = 0
                        .DfIpProd100.Ca = 0
                        .DfIpProd100.FeAdj = 0
                        .DfIpProd100.IaAdj = 0

                        Exit Function
                    End If
                End If

                'We have determined that we do not have reject (either fine pebble or IP).
                'We have Doloflot plant input!

                If aProd = "Fine pebble" Then
                    .DfFpbInp100.Tpa = .Fpb100.Tpa
                    .DfFpbInp100.WtPct = .Fpb100.WtPct
                    .DfFpbInp100.Bpl = .Fpb100.Bpl
                    .DfFpbInp100.Ins = .Fpb100.Ins
                    .DfFpbInp100.Fe = .Fpb100.Fe
                    .DfFpbInp100.Al = .Fpb100.Al
                    .DfFpbInp100.Ia = .Fpb100.Ia
                    .DfFpbInp100.Mg = .Fpb100.Mg
                    .DfFpbInp100.Ca = .Fpb100.Ca
                    .DfFpbInp100.FeAdj = .Fpb100.FeAdj
                    .DfFpbInp100.IaAdj = .Fpb100.IaAdj

                    'Have:
                    ' 1) aRcvryParamsData.DpFnePbMgoCutoff
                    ' 2) aRcvryParamsData.DpIpMgoCutoff
                    ' 3) aRcvryParamsData.DpGrind
                    ' 4) aRcvryParamsData.DpAcid
                    ' 5) aRcvryParamsData.DpP2o5
                    ' 6) aRcvryParamsData.DpPa64
                    ' 7) aRcvryParamsData.DpFlotMin
                    ' 8) aRcvryParamsData.DpTargMgo

                    'F2
                    'Prod BPL = 36.4 + (0.339 * DfProdInpBpl) + (0.435 * DpPa64) +
                    '           (30.0 * DpAcid) - (14.5 * DpP2o5) - (0.350 * DpFlotMin)

                    'F1
                    'BPL %Rcvry = 100 * (1 - EXP(-4.56 + (0.0474 * DfProdInpMgO) + (0.0226 * DpGrind) -
                    '            (0.0964 * DpFlotMin) - (5.90 * DpP2o5) + (12.2 * DpAcid) +
                    '            (0.121 * DpPa64)))

                    'Doloflot product
                    '----------------
                    '1) Prod BPL tons = Input Tons * Input BPL * F1
                    '2) Prod BPL      = F2
                    '3) Prod tons     = Prod BPL tons / Prod BPL
                    '4) Prod MgO      = DpTargMgo
                    '5) Prod Insol    = (1 - (Prod BPL * 0.012844) - (Prod MgO * 0.048303) -
                    '                (Prod Al2O3 * 0.016062) +
                    '                   (Prod Fe2O3 * 0.015825)) / 0.012591)
                    '6) Prod Fe2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpFe2o3
                    '7) Prod Al2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpAl2o3

                    If .Fpb100.Bpl > 0 Then
                        .DfFpbProd100.Bpl = Round(36.4 + (0.339 * .Fpb100.Bpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                           (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                           (0.35 * aRcvryParamsData.DpFlotMin), 1)
                    Else
                        .DfFpbProd100.Bpl = 0
                    End If

                    .DfFpbProd100.Mg = aRcvryParamsData.DpTargMgo

                    ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * .Fpb100.Mg) +
                                   (0.0226 * aRcvryParamsData.DpGrind) -
                                   (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                                   (12.2 * aRcvryParamsData.DpAcid) +
                                   (0.121 * aRcvryParamsData.DpPa64)))

                    ProdBplTpa = Round(.Fpb100.Tpa * .Fpb100.Bpl * (ProdBplRcvry / 100), 1)

                    If .DfFpbProd100.Bpl > 0 Then
                        .DfFpbProd100.Tpa = Round(ProdBplTpa / .DfFpbProd100.Bpl, 0)
                    Else
                        .DfFpbProd100.Tpa = 0
                    End If

                    'Will determine this later!
                    .DfFpbProd100.WtPct = 0

                    If .Fpb100.Bpl > 0 Then
                        .DfFpbProd100.Fe = Round((.DfFpbProd100.Bpl / .Fpb100.Bpl) * .Fpb100.Fe, 2)
                    Else
                        .DfFpbProd100.Fe = 0
                    End If

                    If .Fpb100.Bpl > 0 Then
                        .DfFpbProd100.FeAdj = Round((.DfFpbProd100.Bpl / .Fpb100.Bpl) * .Fpb100.FeAdj, 2)
                    Else
                        .DfFpbProd100.FeAdj = 0
                    End If

                    If .Fpb100.Bpl > 0 Then
                        .DfFpbProd100.Al = Round((.DfFpbProd100.Bpl / .Fpb100.Bpl) * .Fpb100.Al, 2)
                    Else
                        .DfFpbProd100.Al = 0
                    End If

                    If aRcvryParamsData.UseFeAdjust = True Then
                        If .Fpb100.Ins > 0 Then
                            .DfFpbProd100.Ins = Round((1 - (.DfFpbProd100.Bpl * 0.012844) - (.DfFpbProd100.Mg * 0.048303) -
                                                (.DfFpbProd100.Al * 0.016062) +
                                                (.DfFpbProd100.FeAdj * 0.015825)) / 0.012591, 1)
                        Else
                            .DfFpbProd100.Ins = 0
                        End If
                    Else
                        If .Fpb100.Ins > 0 Then
                            .DfFpbProd100.Ins = Round((1 - (.DfFpbProd100.Bpl * 0.012844) - (.DfFpbProd100.Mg * 0.048303) -
                                                (.DfFpbProd100.Al * 0.016062) +
                                                (.DfFpbProd100.Fe * 0.015825)) / 0.012591, 1)
                        Else
                            .DfFpbProd100.Ins = 0
                        End If
                    End If

                    .DfFpbProd100.Ia = .DfFpbProd100.Fe + .DfFpbProd100.Al
                    .DfFpbProd100.IaAdj = .DfFpbProd100.FeAdj + .DfFpbProd100.Al

                    If .Fpb100.Bpl > 0 Then
                        .DfFpbProd100.Ca = Round((.DfFpbProd100.Bpl / .Fpb100.Bpl) * .Fpb100.Ca, 2)
                    Else
                        .DfFpbProd100.Ca = 0
                    End If
                End If

                If aProd = "IP" Then
                    .DfIpInp100.Tpa = .Ip100.Tpa
                    .DfIpInp100.WtPct = .Ip100.WtPct
                    .DfIpInp100.Bpl = .Ip100.Bpl
                    .DfIpInp100.Ins = .Ip100.Ins
                    .DfIpInp100.Fe = .Ip100.Fe
                    .DfIpInp100.Al = .Ip100.Al
                    .DfIpInp100.Ia = .Ip100.Ia
                    .DfIpInp100.Mg = .Ip100.Mg
                    .DfIpInp100.Ca = .Ip100.Ca
                    .DfIpInp100.FeAdj = .Ip100.FeAdj
                    .DfIpInp100.IaAdj = .Ip100.IaAdj

                    'Need to determine the Doloflot plant product from this input.
                    If .Ip100.Bpl > 0 Then
                        .DfIpProd100.Bpl = Round(36.4 + (0.339 * .Ip100.Bpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                           (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                           (0.35 * aRcvryParamsData.DpFlotMin), 1)
                    Else
                        .DfIpProd100.Bpl = 0
                    End If

                    .DfIpProd100.Mg = aRcvryParamsData.DpTargMgo

                    ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * .Ip100.Mg) +
                                   (0.0226 * aRcvryParamsData.DpGrind) -
                                   (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                                   (12.2 * aRcvryParamsData.DpAcid) +
                                   (0.121 * aRcvryParamsData.DpPa64)))

                    ProdBplTpa = Round(.Ip100.Tpa * .Ip100.Bpl * ProdBplRcvry / 100, 1)

                    If .DfIpProd100.Bpl > 0 Then
                        .DfIpProd100.Tpa = Round(ProdBplTpa / .DfIpProd100.Bpl, 0)
                    Else
                        .DfIpProd100.Tpa = 0
                    End If

                    'Will determine this later.
                    .DfIpProd100.WtPct = 0

                    If .Ip100.Bpl > 0 Then
                        .DfIpProd100.Fe = Round((.DfIpProd100.Bpl / .Ip100.Bpl) * .Ip100.Fe, 2)
                    Else
                        .DfIpProd100.Fe = 0
                    End If

                    If .Ip100.Bpl > 0 Then
                        .DfIpProd100.FeAdj = Round((.DfIpProd100.Bpl / .Ip100.Bpl) * .Ip100.FeAdj, 2)
                    Else
                        .DfIpProd100.FeAdj = 0
                    End If

                    If .Ip100.Bpl > 0 Then
                        .DfIpProd100.Al = Round((.DfIpProd100.Bpl / .Ip100.Bpl) * .Ip100.Al, 2)
                    Else
                        .DfIpProd100.Al = 0
                    End If

                    If aRcvryParamsData.UseFeAdjust = True Then
                        If .Ip100.Ins > 0 Then
                            .DfIpProd100.Ins = Round((1 - (.DfIpProd100.Bpl * 0.012844) - (.DfIpProd100.Mg * 0.048303) -
                                               (.DfIpProd100.Al * 0.016062) +
                                               (.DfIpProd100.FeAdj * 0.015825)) / 0.012591, 1)
                        Else
                            .DfIpProd100.Ins = 0
                        End If
                    Else
                        If .Ip100.Ins > 0 Then
                            .DfIpProd100.Ins = Round((1 - (.DfIpProd100.Bpl * 0.012844) - (.DfIpProd100.Mg * 0.048303) -
                                               (.DfIpProd100.Al * 0.016062) +
                                               (.DfIpProd100.Fe * 0.015825)) / 0.012591, 1)
                        Else
                            .DfIpProd100.Ins = 0
                        End If
                    End If

                    .DfIpProd100.Ia = .DfIpProd100.Fe + .DfIpProd100.Al
                    .DfIpProd100.IaAdj = .DfIpProd100.FeAdj + .DfIpProd100.Al

                    If .Ip100.Bpl > 0 Then
                        .DfIpProd100.Ca = Round((.DfIpProd100.Bpl / .Ip100.Bpl) * .Ip100.Ca, 2)
                    Else
                        .DfIpProd100.Ca = 0
                    End If
                End If
            End With
        End If

        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient

        If aProcMode = "ProdCoeff" Then
            With aRdctnCalcData
                .DfTcn.Tpa = 0
                .DfTcn.WtPct = 0
                .DfTcn.Bpl = 0
                .DfTcn.Ins = 0
                .DfTcn.Fe = 0
                .DfTcn.Al = 0
                .DfTcn.Ia = 0
                .DfTcn.Mg = 0
                .DfTcn.Ca = 0
                .DfTcn.FeAdj = 0
                .DfTcn.IaAdj = 0

                .DfTpr.Tpa = 0
                .DfTpr.WtPct = 0
                .DfTpr.Bpl = 0
                .DfTpr.Ins = 0
                .DfTpr.Fe = 0
                .DfTpr.Al = 0
                .DfTpr.Ia = 0
                .DfTpr.Mg = 0
                .DfTpr.Ca = 0
                .DfTpr.FeAdj = 0
                .DfTpr.IaAdj = 0

                'Check first to see if the Fine pebble or IP is Doloflot plant reject.
                'This is based solely on the product MgO.
                'If the target product is determined to be off-spec then the function is
                'exited.

                '06/21/2010, lss
                'Assume that aRcvryParamsData.DpFnePbMgoCutoff = MgO cutoff assigned to
                'good fine pebble.
                'Assume that aRcvryParamsData.DpIpMgoCutoff = MgO cutoff assigned to
                'good IP.

                If aProd = "Fine pebble" Then
                    If .FpbMgoOffSpec <> "Yes" Then
                        'This Fine pebble is Doloflot plant reject (the MgO is not high enough).
                        'The MgO is not off-spec thus it will not be sent to the Doloflot plant.
                        'It will be product.
                        .DfFpbInp.Tpa = 0
                        .DfFpbInp.WtPct = 0
                        .DfFpbInp.Bpl = 0
                        .DfFpbInp.Ins = 0
                        .DfFpbInp.Fe = 0
                        .DfFpbInp.Al = 0
                        .DfFpbInp.Ia = 0
                        .DfFpbInp.Mg = 0
                        .DfFpbInp.Ca = 0
                        .DfFpbInp.FeAdj = 0
                        .DfFpbInp.IaAdj = 0

                        .DfFpbProd.Tpa = 0
                        .DfFpbProd.WtPct = 0
                        .DfFpbProd.Bpl = 0
                        .DfFpbProd.Ins = 0
                        .DfFpbProd.Fe = 0
                        .DfFpbProd.Al = 0
                        .DfFpbProd.Ia = 0
                        .DfFpbProd.Ca = 0
                        .DfFpbProd.Mg = 0
                        .DfFpbProd.Ia = 0
                        .DfFpbProd.FeAdj = 0
                        .DfFpbProd.IaAdj = 0

                        Exit Function
                    End If
                End If

                If aProd = "IP" Then
                    If .IpMgoOffSpec <> "Yes" Then
                        'This Fine pebble is Doloflot plant reject (the MgO is not high enough).
                        'The MgO is not off-spec thus it will not be sent to the Doloflot plant.
                        'It will be product.

                        .DfIpInp.Tpa = 0
                        .DfIpInp.WtPct = 0
                        .DfIpInp.Bpl = 0
                        .DfIpInp.Ins = 0
                        .DfIpInp.Fe = 0
                        .DfIpInp.Al = 0
                        .DfIpInp.Ia = 0
                        .DfIpInp.Mg = 0
                        .DfIpInp.Ca = 0
                        .DfIpInp.FeAdj = 0
                        .DfIpInp.IaAdj = 0

                        .DfIpProd.Tpa = 0
                        .DfIpProd.WtPct = 0
                        .DfIpProd.Bpl = 0
                        .DfIpProd.Ins = 0
                        .DfIpProd.Fe = 0
                        .DfIpProd.Al = 0
                        .DfIpProd.Ia = 0
                        .DfIpProd.Mg = 0
                        .DfIpProd.Ca = 0
                        .DfIpProd.FeAdj = 0
                        .DfIpProd.IaAdj = 0

                        Exit Function
                    End If
                End If

                'We have determined that we do not have reject (either fine pebble or IP).
                'We have Doloflot plant input!

                If aProd = "Fine pebble" Then
                    .DfFpbInp.Tpa = .Fpb.Tpa
                    .DfFpbInp.WtPct = .Fpb.WtPct
                    .DfFpbInp.Bpl = .Fpb.Bpl
                    .DfFpbInp.Ins = .Fpb.Ins
                    .DfFpbInp.Fe = .Fpb.Fe
                    .DfFpbInp.Al = .Fpb.Al
                    .DfFpbInp.Ia = .Fpb.Ia
                    .DfFpbInp.Mg = .Fpb.Mg
                    .DfFpbInp.Ca = .Fpb.Ca
                    .DfFpbInp.FeAdj = .Fpb.FeAdj
                    .DfFpbInp.IaAdj = .Fpb.IaAdj

                    'Have:
                    ' 1) aRcvryParamsData.DpFnePbMgoCutoff
                    ' 2) aRcvryParamsData.DpIpMgoCutoff
                    ' 3) aRcvryParamsData.DpGrind
                    ' 4) aRcvryParamsData.DpAcid
                    ' 5) aRcvryParamsData.DpP2o5
                    ' 6) aRcvryParamsData.DpPa64
                    ' 7) aRcvryParamsData.DpFlotMin
                    ' 8) aRcvryParamsData.DpTargMgo

                    'F2
                    'Prod BPL = 36.4 + (0.339 * DfProdInpBpl) + (0.435 * DpPa64) +
                    '           (30.0 * DpAcid) - (14.5 * DpP2o5) - (0.350 * DpFlotMin)

                    'F1
                    'BPL %Rcvry = 100 * (1 - EXP(-4.56 + (0.0474 * DfProdInpMgO) + (0.0226 * DpGrind) -
                    '            (0.0964 * DpFlotMin) - (5.90 * DpP2o5) + (12.2 * DpAcid) +
                    '            (0.121 * DpPa64)))

                    'Doloflot product
                    '----------------
                    '1) Prod BPL tons = Input Tons * Input BPL * F1
                    '2) Prod BPL      = F2
                    '3) Prod tons     = Prod BPL tons / Prod BPL
                    '4) Prod MgO      = DpTargMgo
                    '5) Prod Insol    = (1 - (Prod BPL * 0.012844) - (Prod MgO * 0.048303) -
                    '                (Prod Al2O3 * 0.016062) +
                    '                   (Prod Fe2O3 * 0.015825)) / 0.012591)
                    '6) Prod Fe2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpFe2o3
                    '7) Prod Al2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpAl2o3

                    If .Fpb.Bpl > 0 Then
                        .DfFpbProd.Bpl = Round(36.4 + (0.339 * .Fpb.Bpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                         (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                         (0.35 * aRcvryParamsData.DpFlotMin), 1)
                    Else
                        .DfFpbProd.Bpl = 0
                    End If

                    .DfFpbProd.Mg = aRcvryParamsData.DpTargMgo

                    ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * .Fpb.Mg) +
                                   (0.0226 * aRcvryParamsData.DpGrind) -
                                   (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                                   (12.2 * aRcvryParamsData.DpAcid) +
                                   (0.121 * aRcvryParamsData.DpPa64)))

                    ProdBplTpa = Round(.Fpb.Tpa * .Fpb.Bpl * (ProdBplRcvry / 100), 1)

                    If .DfFpbProd.Bpl > 0 Then
                        .DfFpbProd.Tpa = Round(ProdBplTpa / .DfFpbProd.Bpl, 0)
                    Else
                        .DfFpbProd.Tpa = 0
                    End If

                    'Will determine this later!
                    .DfFpbProd.WtPct = 0

                    If .Fpb.Bpl > 0 Then
                        .DfFpbProd.Fe = Round((.DfFpbProd.Bpl / .Fpb.Bpl) * .Fpb.Fe, 2)
                    Else
                        .DfFpbProd.Fe = 0
                    End If

                    If .Fpb.Bpl > 0 Then
                        .DfFpbProd.FeAdj = Round((.DfFpbProd.Bpl / .Fpb.Bpl) * .Fpb.FeAdj, 2)
                    Else
                        .DfFpbProd.FeAdj = 0
                    End If

                    If .Fpb.Bpl > 0 Then
                        .DfFpbProd.Al = Round((.DfFpbProd.Bpl / .Fpb.Bpl) * .Fpb.Al, 2)
                    Else
                        .DfFpbProd.Al = 0
                    End If

                    If aRcvryParamsData.UseFeAdjust = True Then
                        If .Fpb.Ins > 0 Then
                            .DfFpbProd.Ins = Round((1 - (.DfFpbProd.Bpl * 0.012844) - (.DfFpbProd.Mg * 0.048303) -
                                                  (.DfFpbProd.Al * 0.016062) +
                                                  (.DfFpbProd.FeAdj * 0.015825)) / 0.012591, 1)
                        Else
                            .DfFpbProd.Ins = 0
                        End If
                    Else
                        If .Fpb.Ins > 0 Then
                            .DfFpbProd.Ins = Round((1 - (.DfFpbProd.Bpl * 0.012844) - (.DfFpbProd.Mg * 0.048303) -
                                                  (.DfFpbProd.Al * 0.016062) +
                                                  (.DfFpbProd.Fe * 0.015825)) / 0.012591, 1)
                        Else
                            .DfFpbProd.Ins = 0
                        End If
                    End If

                    .DfFpbProd.Ia = .DfFpbProd.Fe + .DfFpbProd.Al
                    .DfFpbProd.IaAdj = .DfFpbProd.FeAdj + .DfFpbProd.Al

                    If .Fpb.Bpl > 0 Then
                        .DfFpbProd.Ca = Round((.DfFpbProd.Bpl / .Fpb.Bpl) * .Fpb.Ca, 2)
                    Else
                        .DfFpbProd.Ca = 0
                    End If
                End If

                If aProd = "IP" Then
                    .DfIpInp.Tpa = .Ip.Tpa
                    .DfIpInp.WtPct = .Ip.WtPct
                    .DfIpInp.Bpl = .Ip.Bpl
                    .DfIpInp.Ins = .Ip.Ins
                    .DfIpInp.Fe = .Ip.Fe
                    .DfIpInp.Al = .Ip.Al
                    .DfIpInp.Ia = .Ip.Ia
                    .DfIpInp.Mg = .Ip.Mg
                    .DfIpInp.Ca = .Ip.Ca
                    .DfIpInp.FeAdj = .Ip.FeAdj
                    .DfIpInp.IaAdj = .Ip.IaAdj

                    'Need to determine the Doloflot plant product from this input.
                    If .Ip.Bpl > 0 Then
                        .DfIpProd.Bpl = Round(36.4 + (0.339 * .Ip.Bpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                        (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                        (0.35 * aRcvryParamsData.DpFlotMin), 1)
                    Else
                        .DfIpProd.Bpl = 0
                    End If

                    .DfIpProd.Mg = aRcvryParamsData.DpTargMgo

                    ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * .Ip.Mg) +
                                   (0.0226 * aRcvryParamsData.DpGrind) -
                                   (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                                   (12.2 * aRcvryParamsData.DpAcid) +
                                   (0.121 * aRcvryParamsData.DpPa64)))

                    ProdBplTpa = Round(.Ip.Tpa * .Ip.Bpl * ProdBplRcvry / 100, 1)

                    If .DfIpProd.Bpl > 0 Then
                        .DfIpProd.Tpa = Round(ProdBplTpa / .DfIpProd.Bpl, 0)
                    Else
                        .DfIpProd.Tpa = 0
                    End If

                    'Will determine this later.
                    .DfIpProd.WtPct = 0

                    If .Ip.Bpl > 0 Then
                        .DfIpProd.Fe = Round((.DfIpProd.Bpl / .Ip.Bpl) * .Ip.Fe, 2)
                    Else
                        .DfIpProd.Fe = 0
                    End If

                    If .Ip.Bpl > 0 Then
                        .DfIpProd.FeAdj = Round((.DfIpProd.Bpl / .Ip.Bpl) * .Ip.FeAdj, 2)
                    Else
                        .DfIpProd.FeAdj = 0
                    End If

                    If .Ip.Bpl > 0 Then
                        .DfIpProd.Al = Round((.DfIpProd.Bpl / .Ip.Bpl) * .Ip.Al, 2)
                    Else
                        .DfIpProd.Al = 0
                    End If

                    If aRcvryParamsData.UseFeAdjust = True Then
                        If .Ip.Ins > 0 Then
                            .DfIpProd.Ins = Round((1 - (.DfIpProd.Bpl * 0.012844) - (.DfIpProd.Mg * 0.048303) -
                                                 (.DfIpProd.Al * 0.016062) +
                                                 (.DfIpProd.FeAdj * 0.015825)) / 0.012591, 1)
                        Else
                            .DfIpProd.Ins = 0
                        End If
                    Else
                        If .Ip.Ins > 0 Then
                            .DfIpProd.Ins = Round((1 - (.DfIpProd.Bpl * 0.012844) - (.DfIpProd.Mg * 0.048303) -
                                                 (.DfIpProd.Al * 0.016062) +
                                                 (.DfIpProd.Fe * 0.015825)) / 0.012591, 1)
                        Else
                            .DfIpProd.Ins = 0
                        End If
                    End If

                    .DfIpProd.Ia = .DfIpProd.Fe + .DfIpProd.Al
                    .DfIpProd.IaAdj = .DfIpProd.FeAdj + .DfIpProd.Al

                    If .Ip.Bpl > 0 Then
                        .DfIpProd.Ca = Round((.DfIpProd.Bpl / .Ip.Bpl) * .Ip.Ca, 2)
                    Else
                        .DfIpProd.Ca = 0
                    End If
                End If
            End With
        End If
    End Function

    Private Sub PlaceDoloflotPltInReview(ByRef aSsDataReview As AxvaSpread,
                                         ByVal aRdctnCalcData As gRawProspSplRdctnType,
                                         ByVal aRow As Long,
                                         ByVal aProduct As String)


        'aProduct will be "Fine pebble" or IP

        With aRdctnCalcData
            '100% Prospect  100% Prospect  100% Prospect
            '100% Prospect  100% Prospect  100% Prospect
            '100% Prospect  100% Prospect  100% Prospect

            If aProduct = "Fine pebble" Then
                'Doloflot plant reject -- Fine pebble -- 100% Prospect
                aSsDataReview.Row = aRow
                'Doloflot plant input -- Fine pebble -- 100% Prospect
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 635
                aSsDataReview.Value = .DfFpbInp100.Tpa
                aSsDataReview.Col = 636
                aSsDataReview.Value = .DfFpbInp100.WtPct
                aSsDataReview.Col = 637
                aSsDataReview.Value = .DfFpbInp100.Bpl
                aSsDataReview.Col = 638
                aSsDataReview.Value = .DfFpbInp100.Ins
                aSsDataReview.Col = 639
                aSsDataReview.Value = .DfFpbInp100.Ia
                aSsDataReview.Col = 640
                aSsDataReview.Value = .DfFpbInp100.Fe
                aSsDataReview.Col = 641
                aSsDataReview.Value = .DfFpbInp100.Al
                aSsDataReview.Col = 642
                aSsDataReview.Value = .DfFpbInp100.Mg
                aSsDataReview.Col = 643
                aSsDataReview.Value = .DfFpbInp100.Ca
                aSsDataReview.Col = 644
                aSsDataReview.Value = gGetMer(.DfFpbInp100.Bpl,
                                              .DfFpbInp100.Fe,
                                              .DfFpbInp100.Al,
                                              .DfFpbInp100.Mg,
                                              2)
                aSsDataReview.Col = 645
                aSsDataReview.Value = gGetCaP2O5(.DfFpbInp100.Ca,
                                                 .DfFpbInp100.Bpl,
                                                 2)
                aSsDataReview.Col = 646
                aSsDataReview.Value = .DfFpbInp100.FeAdj
                aSsDataReview.Col = 647
                aSsDataReview.Value = .DfFpbInp100.IaAdj
                aSsDataReview.Col = 648
                aSsDataReview.Value = gGetMer(.DfFpbInp100.Bpl,
                                              .DfFpbInp100.FeAdj,
                                              .DfFpbInp100.Al,
                                              .DfFpbInp100.Mg,
                                              2)
                '-----
                'Doloflot plant product -- Fine pebble -- 100% Prospect
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 663
                aSsDataReview.Value = .DfFpbProd100.Tpa
                aSsDataReview.Col = 664
                aSsDataReview.Value = .DfFpbProd100.WtPct
                aSsDataReview.Col = 665
                aSsDataReview.Value = .DfFpbProd100.Bpl
                aSsDataReview.Col = 666
                aSsDataReview.Value = .DfFpbProd100.Ins
                aSsDataReview.Col = 667
                aSsDataReview.Value = .DfFpbProd100.Ia
                aSsDataReview.Col = 668
                aSsDataReview.Value = .DfFpbProd100.Fe
                aSsDataReview.Col = 669
                aSsDataReview.Value = .DfFpbProd100.Al
                aSsDataReview.Col = 670
                aSsDataReview.Value = .DfFpbProd100.Mg
                aSsDataReview.Col = 671
                aSsDataReview.Value = .DfFpbProd100.Ca
                aSsDataReview.Col = 672
                aSsDataReview.Value = gGetMer(.DfFpbProd100.Bpl,
                                              .DfFpbProd100.Fe,
                                              .DfFpbProd100.Al,
                                              .DfFpbProd100.Mg,
                                              2)
                aSsDataReview.Col = 673
                aSsDataReview.Value = gGetCaP2O5(.DfFpbProd100.Ca,
                                                 .DfFpbProd100.Bpl,
                                                 2)
                aSsDataReview.Col = 674
                aSsDataReview.Value = .DfFpbProd100.FeAdj
                aSsDataReview.Col = 675
                aSsDataReview.Value = .DfFpbProd100.IaAdj
                aSsDataReview.Col = 676
                aSsDataReview.Value = gGetMer(.DfFpbProd100.Bpl,
                                              .DfFpbProd100.FeAdj,
                                              .DfFpbProd100.Al,
                                              .DfFpbProd100.Mg,
                                              2)
            End If

            If aProduct = "IP" Then
                'Doloflot plant reject -- IP -- 100% Prospect
                aSsDataReview.Row = aRow
                'aSsDataReview.Col = 691
                'aSsDataReview.Value = .DfIpRej100.Tpa
                'aSsDataReview.Col = 692
                'aSsDataReview.Value = .DfIpRej100.WtPct
                'aSsDataReview.Col = 693
                'aSsDataReview.Value = .DfIpRej100.Bpl
                'aSsDataReview.Col = 694
                'aSsDataReview.Value = .DfIpRej100.Ins
                'aSsDataReview.Col = 695
                'aSsDataReview.Value = .DfIpRej100.Ia
                'aSsDataReview.Col = 696
                'aSsDataReview.Value = .DfIpRej100.Fe
                'aSsDataReview.Col = 697
                'aSsDataReview.Value = .DfIpRej100.Al
                'aSsDataReview.Col = 698
                'aSsDataReview.Value = .DfIpRej100.Mg
                'aSsDataReview.Col = 699
                'aSsDataReview.Value = .DfIpRej100.Ca
                'aSsDataReview.Col = 700
                'aSsDataReview.Value = gGetMer(.DfIpRej100.Bpl,
                '                              .DfIpRej100.Fe,
                '                              .DfIpRej100.Al,
                '                              .DfIpRej100.Mg,
                '                              2)
                'aSsDataReview.Col = 701
                'aSsDataReview.Value = gGetCaP2O5(.DfIpRej100.Ca,
                '                                 .DfIpRej100.Bpl,
                '                                 2)
                'aSsDataReview.Col = 702
                'aSsDataReview.Value = .DfIpRej100.FeAdj
                'aSsDataReview.Col = 703
                'aSsDataReview.Value = .DfIpRej100.IaAdj
                'aSsDataReview.Col = 704
                'aSsDataReview.Value = gGetMer(.DfIpRej100.Bpl,
                '                              .DfIpRej100.FeAdj,
                '                              .DfIpRej100.Al,
                '                              .DfIpRej100.Mg,
                '                              2)
                '-----
                'Doloflot plant input -- IP -- 100% Prospect
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 677
                aSsDataReview.Value = .DfIpInp100.Tpa
                aSsDataReview.Col = 678
                aSsDataReview.Value = .DfIpInp100.WtPct
                aSsDataReview.Col = 679
                aSsDataReview.Value = .DfIpInp100.Bpl
                aSsDataReview.Col = 680
                aSsDataReview.Value = .DfIpInp100.Ins
                aSsDataReview.Col = 681
                aSsDataReview.Value = .DfIpInp100.Ia
                aSsDataReview.Col = 682
                aSsDataReview.Value = .DfIpInp100.Fe
                aSsDataReview.Col = 683
                aSsDataReview.Value = .DfIpInp100.Al
                aSsDataReview.Col = 684
                aSsDataReview.Value = .DfIpInp100.Mg
                aSsDataReview.Col = 685
                aSsDataReview.Value = .DfIpInp100.Ca
                aSsDataReview.Col = 686
                aSsDataReview.Value = gGetMer(.DfIpInp100.Bpl,
                                              .DfIpInp100.Fe,
                                              .DfIpInp100.Al,
                                              .DfIpInp100.Mg,
                                              2)
                aSsDataReview.Col = 687
                aSsDataReview.Value = gGetCaP2O5(.DfIpInp100.Ca,
                                                 .DfIpInp100.Bpl,
                                                 2)
                aSsDataReview.Col = 688
                aSsDataReview.Value = .DfIpInp100.FeAdj
                aSsDataReview.Col = 689
                aSsDataReview.Value = .DfIpInp100.IaAdj
                aSsDataReview.Col = 690
                aSsDataReview.Value = gGetMer(.DfFpbInp100.Bpl,
                                              .DfFpbInp100.FeAdj,
                                              .DfFpbInp100.Al,
                                              .DfFpbInp100.Mg,
                                              2)
                '-----
                'Doloflot plant product -- IP -- 100% Prospect
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 705
                aSsDataReview.Value = .DfIpProd100.Tpa
                aSsDataReview.Col = 706
                aSsDataReview.Value = .DfIpProd100.WtPct
                aSsDataReview.Col = 707
                aSsDataReview.Value = .DfIpProd100.Bpl
                aSsDataReview.Col = 708
                aSsDataReview.Value = .DfIpProd100.Ins
                aSsDataReview.Col = 709
                aSsDataReview.Value = .DfIpProd100.Ia
                aSsDataReview.Col = 710
                aSsDataReview.Value = .DfIpProd100.Fe
                aSsDataReview.Col = 711
                aSsDataReview.Value = .DfIpProd100.Al
                aSsDataReview.Col = 712
                aSsDataReview.Value = .DfIpProd100.Mg
                aSsDataReview.Col = 713
                aSsDataReview.Value = .DfIpProd100.Ca
                aSsDataReview.Col = 714
                aSsDataReview.Value = gGetMer(.DfIpProd100.Bpl,
                                              .DfIpProd100.Fe,
                                              .DfIpProd100.Al,
                                              .DfIpProd100.Mg,
                                              2)
                aSsDataReview.Col = 715
                aSsDataReview.Value = gGetCaP2O5(.DfIpProd100.Ca,
                                                 .DfIpProd100.Bpl,
                                                 2)
                aSsDataReview.Col = 716
                aSsDataReview.Value = .DfIpProd100.FeAdj
                aSsDataReview.Col = 717
                aSsDataReview.Value = .DfIpProd100.IaAdj
                aSsDataReview.Col = 718
                aSsDataReview.Value = gGetMer(.DfIpProd100.Bpl,
                                              .DfIpProd100.FeAdj,
                                              .DfIpProd100.Al,
                                              .DfIpProd100.Mg,
                                              2)
            End If

            'Product coefficient  Product coefficient
            'Product coefficient  Product coefficient
            'Product coefficient  Product coefficient

            If aProduct = "Fine pebble" Then
                'Doloflot plant reject -- Fine pebble -- Product coefficient
                aSsDataReview.Row = aRow
                'Doloflot plant input -- Fine pebble -- Product coefficient
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 551
                aSsDataReview.Value = .DfFpbInp.Tpa
                aSsDataReview.Col = 552
                aSsDataReview.Value = .DfFpbInp.WtPct
                aSsDataReview.Col = 553
                aSsDataReview.Value = .DfFpbInp.Bpl
                aSsDataReview.Col = 554
                aSsDataReview.Value = .DfFpbInp.Ins
                aSsDataReview.Col = 555
                aSsDataReview.Value = .DfFpbInp.Ia
                aSsDataReview.Col = 556
                aSsDataReview.Value = .DfFpbInp.Fe
                aSsDataReview.Col = 557
                aSsDataReview.Value = .DfFpbInp.Al
                aSsDataReview.Col = 558
                aSsDataReview.Value = .DfFpbInp.Mg
                aSsDataReview.Col = 559
                aSsDataReview.Value = .DfFpbInp.Ca
                aSsDataReview.Col = 560
                aSsDataReview.Value = gGetMer(.DfFpbInp.Bpl,
                                              .DfFpbInp.Fe,
                                              .DfFpbInp.Al,
                                              .DfFpbInp.Mg,
                                              2)
                aSsDataReview.Col = 561
                aSsDataReview.Value = gGetCaP2O5(.DfFpbInp.Ca,
                                                 .DfFpbInp.Bpl,
                                                 2)
                aSsDataReview.Col = 562
                aSsDataReview.Value = .DfFpbInp.FeAdj
                aSsDataReview.Col = 563
                aSsDataReview.Value = .DfFpbInp.IaAdj
                aSsDataReview.Col = 564
                aSsDataReview.Value = gGetMer(.DfFpbInp.Bpl,
                                              .DfFpbInp.FeAdj,
                                              .DfFpbInp.Al,
                                              .DfFpbInp.Mg,
                                              2)
                '-----
                'Doloflot plant product -- Fine pebble -- Product coefficient
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 579
                aSsDataReview.Value = .DfFpbProd.Tpa
                aSsDataReview.Col = 580
                aSsDataReview.Value = .DfFpbProd.WtPct
                aSsDataReview.Col = 581
                aSsDataReview.Value = .DfFpbProd.Bpl
                aSsDataReview.Col = 582
                aSsDataReview.Value = .DfFpbProd.Ins
                aSsDataReview.Col = 583
                aSsDataReview.Value = .DfFpbProd.Ia
                aSsDataReview.Col = 584
                aSsDataReview.Value = .DfFpbProd.Fe
                aSsDataReview.Col = 585
                aSsDataReview.Value = .DfFpbProd.Al
                aSsDataReview.Col = 586
                aSsDataReview.Value = .DfFpbProd.Mg
                aSsDataReview.Col = 587
                aSsDataReview.Value = .DfFpbProd.Ca
                aSsDataReview.Col = 588
                aSsDataReview.Value = gGetMer(.DfFpbProd.Bpl,
                                              .DfFpbProd.Fe,
                                              .DfFpbProd.Al,
                                              .DfFpbProd.Mg,
                                              2)
                aSsDataReview.Col = 589
                aSsDataReview.Value = gGetCaP2O5(.DfFpbProd.Ca,
                                                 .DfFpbProd.Bpl,
                                                 2)
                aSsDataReview.Col = 590
                aSsDataReview.Value = .DfFpbProd.FeAdj
                aSsDataReview.Col = 591
                aSsDataReview.Value = .DfFpbProd.IaAdj
                aSsDataReview.Col = 592
                aSsDataReview.Value = gGetMer(.DfFpbProd.Bpl,
                                              .DfFpbProd.FeAdj,
                                              .DfFpbProd.Al,
                                              .DfFpbProd.Mg,
                                              2)
            End If

            If aProduct = "IP" Then
                'Doloflot plant reject -- IP -- Product coefficient
                aSsDataReview.Row = aRow
                '-----
                'Doloflot plant input -- IP -- Product coefficient
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 593
                aSsDataReview.Value = .DfIpInp.Tpa
                aSsDataReview.Col = 594
                aSsDataReview.Value = .DfIpInp.WtPct
                aSsDataReview.Col = 595
                aSsDataReview.Value = .DfIpInp.Bpl
                aSsDataReview.Col = 596
                aSsDataReview.Value = .DfIpInp.Ins
                aSsDataReview.Col = 597
                aSsDataReview.Value = .DfIpInp.Ia
                aSsDataReview.Col = 598
                aSsDataReview.Value = .DfIpInp.Fe
                aSsDataReview.Col = 599
                aSsDataReview.Value = .DfIpInp.Al
                aSsDataReview.Col = 600
                aSsDataReview.Value = .DfIpInp.Mg
                aSsDataReview.Col = 601
                aSsDataReview.Value = .DfIpInp.Ca
                aSsDataReview.Col = 602
                aSsDataReview.Value = gGetMer(.DfIpInp.Bpl,
                                              .DfIpInp.Fe,
                                              .DfIpInp.Al,
                                              .DfIpInp.Mg,
                                              2)
                aSsDataReview.Col = 603
                aSsDataReview.Value = gGetCaP2O5(.DfIpInp.Ca,
                                                 .DfIpInp.Bpl,
                                                 2)
                aSsDataReview.Col = 604
                aSsDataReview.Value = .DfIpInp.FeAdj
                aSsDataReview.Col = 605
                aSsDataReview.Value = .DfIpInp.IaAdj
                aSsDataReview.Col = 606
                aSsDataReview.Value = gGetMer(.DfFpbInp.Bpl,
                                              .DfFpbInp.FeAdj,
                                              .DfFpbInp.Al,
                                              .DfFpbInp.Mg,
                                              2)
                '-----
                'Doloflot plant product -- IP -- Product coefficient
                aSsDataReview.Row = aRow
                aSsDataReview.Col = 621
                aSsDataReview.Value = .DfIpProd.Tpa
                aSsDataReview.Col = 622
                aSsDataReview.Value = .DfIpProd.WtPct
                aSsDataReview.Col = 623
                aSsDataReview.Value = .DfIpProd.Bpl
                aSsDataReview.Col = 624
                aSsDataReview.Value = .DfIpProd.Ins
                aSsDataReview.Col = 625
                aSsDataReview.Value = .DfIpProd.Ia
                aSsDataReview.Col = 626
                aSsDataReview.Value = .DfIpProd.Fe
                aSsDataReview.Col = 627
                aSsDataReview.Value = .DfIpProd.Al
                aSsDataReview.Col = 628
                aSsDataReview.Value = .DfIpProd.Mg
                aSsDataReview.Col = 629
                aSsDataReview.Value = .DfIpProd.Ca
                aSsDataReview.Col = 630
                aSsDataReview.Value = gGetMer(.DfIpProd.Bpl,
                                              .DfIpProd.Fe,
                                              .DfIpProd.Al,
                                              .DfIpProd.Mg,
                                              2)
                aSsDataReview.Col = 631
                aSsDataReview.Value = gGetCaP2O5(.DfIpProd.Ca,
                                                 .DfIpProd.Bpl,
                                                 2)
                aSsDataReview.Col = 632
                aSsDataReview.Value = .DfIpProd.FeAdj
                aSsDataReview.Col = 633
                aSsDataReview.Value = .DfIpProd.IaAdj
                aSsDataReview.Col = 634
                aSsDataReview.Value = gGetMer(.DfIpProd.Bpl,
                                              .DfIpProd.FeAdj,
                                              .DfIpProd.Al,
                                              .DfIpProd.Mg,
                                              2)
            End If
        End With
    End Sub

    Private Function ZeroDoloflotPltProcess(ByRef aRdctnCalcData As gRawProspSplRdctnType)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        With aRdctnCalcData
            .DfTcn100.Tpa = 0
            .DfTcn100.WtPct = 0
            .DfTcn100.Bpl = 0
            .DfTcn100.Ins = 0
            .DfTcn100.Fe = 0
            .DfTcn100.FeAdj = 0
            .DfTcn100.Al = 0
            .DfTcn100.Ia = 0
            .DfTcn100.IaAdj = 0
            .DfTcn100.Mg = 0
            .DfTcn100.Ca = 0

            .DfTpr100.Tpa = 0
            .DfTpr100.WtPct = 0
            .DfTpr100.Bpl = 0
            .DfTpr100.Ins = 0
            .DfTpr100.Fe = 0
            .DfTpr100.FeAdj = 0
            .DfTpr100.Al = 0
            .DfTpr100.Ia = 0
            .DfTpr100.IaAdj = 0
            .DfTpr100.Mg = 0
            .DfTpr100.Ca = 0

            .DfFpbInp100.Tpa = 0
            .DfFpbInp100.WtPct = 0
            .DfFpbInp100.Bpl = 0
            .DfFpbInp100.Ins = 0
            .DfFpbInp100.Fe = 0
            .DfFpbInp100.FeAdj = 0
            .DfFpbInp100.Al = 0
            .DfFpbInp100.Ia = 0
            .DfFpbInp100.IaAdj = 0
            .DfFpbInp100.Mg = 0
            .DfFpbInp100.Ca = 0

            .DfFpbProd100.Tpa = 0
            .DfFpbProd100.Bpl = 0
            .DfFpbProd100.Ins = 0
            .DfFpbProd100.Fe = 0
            .DfFpbProd100.FeAdj = 0
            .DfFpbProd100.Al = 0
            .DfFpbProd100.Ca = 0
            .DfFpbProd100.Mg = 0
            .DfFpbProd100.Ia = 0
            .DfFpbProd100.IaAdj = 0

            .DfIpInp100.Tpa = 0
            .DfIpInp100.WtPct = 0
            .DfIpInp100.Bpl = 0
            .DfIpInp100.Ins = 0
            .DfIpInp100.Fe = 0
            .DfIpInp100.FeAdj = 0
            .DfIpInp100.Al = 0
            .DfIpInp100.Ia = 0
            .DfIpInp100.IaAdj = 0
            .DfIpInp100.Mg = 0
            .DfIpInp100.Ca = 0

            .DfIpProd100.Tpa = 0
            .DfIpProd100.Bpl = 0
            .DfIpProd100.Ins = 0
            .DfIpProd100.Fe = 0
            .DfIpProd100.FeAdj = 0
            .DfIpProd100.Al = 0
            .DfIpProd100.Ca = 0
            .DfIpProd100.Mg = 0
            .DfIpProd100.Ia = 0
            .DfIpProd100.IaAdj = 0
            '-----

            .DfTcn.Tpa = 0
            .DfTcn.WtPct = 0
            .DfTcn.Bpl = 0
            .DfTcn.Ins = 0
            .DfTcn.Fe = 0
            .DfTcn.FeAdj = 0
            .DfTcn.Al = 0
            .DfTcn.Ia = 0
            .DfTcn.IaAdj = 0
            .DfTcn.Mg = 0
            .DfTcn.Ca = 0

            .DfTpr.Tpa = 0
            .DfTpr.WtPct = 0
            .DfTpr.Bpl = 0
            .DfTpr.Ins = 0
            .DfTpr.Fe = 0
            .DfTpr.FeAdj = 0
            .DfTpr.Al = 0
            .DfTpr.Ia = 0
            .DfTpr.IaAdj = 0
            .DfTpr.Mg = 0
            .DfTpr.Ca = 0

            .DfFpbInp.Tpa = 0
            .DfFpbInp.WtPct = 0
            .DfFpbInp.Bpl = 0
            .DfFpbInp.Ins = 0
            .DfFpbInp.Fe = 0
            .DfFpbInp.FeAdj = 0
            .DfFpbInp.Al = 0
            .DfFpbInp.Ia = 0
            .DfFpbInp.IaAdj = 0
            .DfFpbInp.Mg = 0
            .DfFpbInp.Ca = 0

            .DfFpbProd.Tpa = 0
            .DfFpbProd.Bpl = 0
            .DfFpbProd.Ins = 0
            .DfFpbProd.Fe = 0
            .DfFpbProd.FeAdj = 0
            .DfFpbProd.Al = 0
            .DfFpbProd.Ca = 0
            .DfFpbProd.Mg = 0
            .DfFpbProd.Ia = 0
            .DfFpbProd.IaAdj = 0

            .DfIpInp.Tpa = 0
            .DfIpInp.WtPct = 0
            .DfIpInp.Bpl = 0
            .DfIpInp.Ins = 0
            .DfIpInp.Fe = 0
            .DfIpInp.FeAdj = 0
            .DfIpInp.Al = 0
            .DfIpInp.Ia = 0
            .DfIpInp.IaAdj = 0
            .DfIpInp.Mg = 0
            .DfIpInp.Ca = 0

            .DfIpProd.Tpa = 0
            .DfIpProd.Bpl = 0
            .DfIpProd.Ins = 0
            .DfIpProd.Fe = 0
            .DfIpProd.FeAdj = 0
            .DfIpProd.Al = 0
            .DfIpProd.Ca = 0
            .DfIpProd.Mg = 0
            .DfIpProd.Ia = 0
            .DfIpProd.IaAdj = 0
        End With
    End Function

    Private Sub CalcTcnPlusDoloflotProd(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                        ByVal aCalcType As String,
                                        ByVal aMode As String,
                                        ByVal aSplitNumber As Integer)

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                ''If .MgPltProd.Tpa = 0 then no Off-spec MgO plant product has been determined!
                ''However we still want to track these MgPltTcn values.
                ''They will be the same as the "normal" plant values!

                .DfTcn.Tpa = 0
                .DfTcn.Tpa = .Tcn.Tpa + .DfFpbProd.Tpa + .DfIpProd.Tpa

                .DfTcn.Bpl = gGetTotalValue3(.Tcn.Bpl, .Tcn.Tpa,
                                             .DfFpbProd.Bpl, .DfFpbProd.Tpa,
                                             .DfIpProd.Bpl, .DfIpProd.Tpa, 1)
                .DfTcn.Ins = gGetTotalValue3(.Tcn.Ins, .Tcn.Tpa,
                                             .DfFpbProd.Ins, .DfFpbProd.Tpa,
                                             .DfIpProd.Ins, .DfIpProd.Tpa, 1)
                .DfTcn.Ia = gGetTotalValue3(.Tcn.Ia, .Tcn.Tpa,
                                            .DfFpbProd.Ia, .DfFpbProd.Tpa,
                                            .DfIpProd.Ia, .DfIpProd.Tpa, 2)
                .DfTcn.Ca = gGetTotalValue3(.Tcn.Ca, .Tcn.Tpa,
                                            .DfFpbProd.Ca, .DfFpbProd.Tpa,
                                            .DfIpProd.Ca, .DfIpProd.Tpa, 2)
                .DfTcn.Fe = gGetTotalValue3(.Tcn.Fe, .Tcn.Tpa,
                                            .DfFpbProd.Fe, .DfFpbProd.Tpa,
                                            .DfIpProd.Fe, .DfIpProd.Tpa, 2)
                .DfTcn.Al = gGetTotalValue3(.Tcn.Al, .Tcn.Tpa,
                                            .DfFpbProd.Al, .DfFpbProd.Tpa,
                                            .DfIpProd.Al, .DfIpProd.Tpa, 2)
                .DfTcn.Mg = gGetTotalValue3(.Tcn.Mg, .Tcn.Tpa,
                                            .DfFpbProd.Mg, .DfFpbProd.Tpa,
                                            .DfIpProd.Mg, .DfIpProd.Tpa, 2)

                .DfTcn.FeAdj = gGetTotalValue3(.Tcn.FeAdj, .Tcn.Tpa,
                                               .DfFpbProd.FeAdj, .DfFpbProd.Tpa,
                                               .DfIpProd.FeAdj, .DfIpProd.Tpa, 2)
                .DfTcn.IaAdj = gGetTotalValue3(.Tcn.IaAdj, .Tcn.Tpa,
                                               .DfFpbProd.IaAdj, .DfFpbProd.Tpa,
                                               .DfIpProd.IaAdj, .DfIpProd.Tpa, 2)
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                ''If .MgPltProd100.Tpa = 0 then no Off-spec MgO plant product has been determined!
                ''However we still want to track these MgPltTcn values.
                ''They will be the same as the "normal" plant values!

                .DfTcn100.Tpa = 0
                .DfTcn100.Tpa = .Tcn100.Tpa + .DfFpbProd100.Tpa + .DfIpProd100.Tpa

                .DfTcn100.Bpl = gGetTotalValue3(.Tcn100.Bpl, .Tcn100.Tpa,
                                               .DfFpbProd100.Bpl, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Bpl, .DfIpProd100.Tpa, 1)
                .DfTcn100.Ins = gGetTotalValue3(.Tcn100.Ins, .Tcn100.Tpa,
                                                .DfFpbProd100.Ins, .DfFpbProd100.Tpa,
                                                .DfIpProd100.Ins, .DfIpProd100.Tpa, 1)
                .DfTcn100.Ia = gGetTotalValue3(.Tcn100.Ia, .Tcn100.Tpa,
                                               .DfFpbProd100.Ia, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Ia, .DfIpProd100.Tpa, 2)
                .DfTcn100.Ca = gGetTotalValue3(.Tcn100.Ca, .Tcn100.Tpa,
                                               .DfFpbProd100.Ca, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Ca, .DfIpProd100.Tpa, 2)
                .DfTcn100.Fe = gGetTotalValue3(.Tcn100.Fe, .Tcn100.Tpa,
                                               .DfFpbProd100.Fe, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Fe, .DfIpProd100.Tpa, 2)
                .DfTcn100.Al = gGetTotalValue3(.Tcn100.Al, .Tcn100.Tpa,
                                               .DfFpbProd100.Al, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Al, .DfIpProd100.Tpa, 2)
                .DfTcn100.Mg = gGetTotalValue3(.Tcn100.Mg, .Tcn100.Tpa,
                                               .DfFpbProd100.Mg, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Mg, .DfIpProd100.Tpa, 2)

                .DfTcn100.FeAdj = gGetTotalValue3(.Tcn100.FeAdj, .Tcn100.Tpa,
                                                  .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa,
                                                  .DfIpProd100.FeAdj, .DfIpProd100.Tpa, 2)
                .DfTcn100.IaAdj = gGetTotalValue3(.Tcn100.IaAdj, .Tcn100.Tpa,
                                                  .DfFpbProd100.IaAdj, .DfFpbProd100.Tpa,
                                                  .DfIpProd100.IaAdj, .DfIpProd100.Tpa, 2)
            End With
        End If
    End Sub

    Private Sub CalcTprPlusDoloflotProd(ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                        ByVal aCalcType As String,
                                        ByVal aMode As String,
                                        ByVal aSplitNumber As Integer)

        'aCalcType will be "ProdCoeff" or "100%"
        'aMode will be "Hole" or "Split"

        If aCalcType = "ProdCoeff" Then
            With aRdctnCalcData
                ''If .MgPltProd.Tpa = 0 then no Off-spec MgO plant product has been determined!
                ''However we still want to track these MgPltTcn values.
                ''They will be the same as the "normal" plant values!

                .DfTpr.Tpa = 0
                .DfTpr.Tpa = .Tpr.Tpa + .DfFpbProd.Tpa + .DfIpProd.Tpa

                .DfTpr.Bpl = gGetTotalValue3(.Tpr.Bpl, .Tpr.Tpa,
                                             .DfFpbProd.Bpl, .DfFpbProd.Tpa,
                                             .DfIpProd.Bpl, .DfIpProd.Tpa, 1)
                .DfTpr.Ins = gGetTotalValue3(.Tpr.Ins, .Tpr.Tpa,
                                             .DfFpbProd.Ins, .DfFpbProd.Tpa,
                                             .DfIpProd.Ins, .DfIpProd.Tpa, 1)
                .DfTpr.Ia = gGetTotalValue3(.Tpr.Ia, .Tpr.Tpa,
                                            .DfFpbProd.Ia, .DfFpbProd.Tpa,
                                            .DfIpProd.Ia, .DfIpProd.Tpa, 2)
                .DfTpr.Ca = gGetTotalValue3(.Tpr.Ca, .Tpr.Tpa,
                                            .DfFpbProd.Ca, .DfFpbProd.Tpa,
                                            .DfIpProd.Ca, .DfIpProd.Tpa, 2)
                .DfTpr.Fe = gGetTotalValue3(.Tpr.Fe, .Tpr.Tpa,
                                            .DfFpbProd.Fe, .DfFpbProd.Tpa,
                                            .DfIpProd.Fe, .DfIpProd.Tpa, 2)
                .DfTpr.Al = gGetTotalValue3(.Tpr.Al, .Tpr.Tpa,
                                            .DfFpbProd.Al, .DfFpbProd.Tpa,
                                            .DfIpProd.Al, .DfIpProd.Tpa, 2)
                .DfTpr.Mg = gGetTotalValue3(.Tpr.Mg, .Tpr.Tpa,
                                            .DfFpbProd.Mg, .DfFpbProd.Tpa,
                                            .DfIpProd.Mg, .DfIpProd.Tpa, 2)

                .DfTpr.FeAdj = gGetTotalValue3(.Tpr.FeAdj, .Tpr.Tpa,
                                               .DfFpbProd.FeAdj, .DfFpbProd.Tpa,
                                               .DfIpProd.FeAdj, .DfIpProd.Tpa, 2)
                .DfTpr.IaAdj = gGetTotalValue3(.Tpr.IaAdj, .Tpr.Tpa,
                                               .DfFpbProd.IaAdj, .DfFpbProd.Tpa,
                                               .DfIpProd.IaAdj, .DfIpProd.Tpa, 2)
            End With
        End If

        If aCalcType = "100%" Then
            With aRdctnCalcData
                ''If .MgPltProd100.Tpa = 0 then no Off-spec MgO plant product has been determined!
                ''However we still want to track these MgPltTcn values.
                ''They will be the same as the "normal" plant values!

                .DfTpr100.Tpa = 0
                .DfTpr100.Tpa = .Tpr100.Tpa + .DfFpbProd100.Tpa + .DfIpProd100.Tpa

                .DfTpr100.Bpl = gGetTotalValue3(.Tpr100.Bpl, .Tpr100.Tpa,
                                               .DfFpbProd100.Bpl, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Bpl, .DfIpProd100.Tpa, 1)
                .DfTpr100.Ins = gGetTotalValue3(.Tpr100.Ins, .Tpr100.Tpa,
                                                .DfFpbProd100.Ins, .DfFpbProd100.Tpa,
                                                .DfIpProd100.Ins, .DfIpProd100.Tpa, 1)
                .DfTpr100.Ia = gGetTotalValue3(.Tpr100.Ia, .Tpr100.Tpa,
                                               .DfFpbProd100.Ia, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Ia, .DfIpProd100.Tpa, 2)
                .DfTpr100.Ca = gGetTotalValue3(.Tpr100.Ca, .Tpr100.Tpa,
                                               .DfFpbProd100.Ca, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Ca, .DfIpProd100.Tpa, 2)
                .DfTpr100.Fe = gGetTotalValue3(.Tpr100.Fe, .Tpr100.Tpa,
                                               .DfFpbProd100.Fe, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Fe, .DfIpProd100.Tpa, 2)
                .DfTpr100.Al = gGetTotalValue3(.Tpr100.Al, .Tpr100.Tpa,
                                               .DfFpbProd100.Al, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Al, .DfIpProd100.Tpa, 2)
                .DfTpr100.Mg = gGetTotalValue3(.Tpr100.Mg, .Tpr100.Tpa,
                                               .DfFpbProd100.Mg, .DfFpbProd100.Tpa,
                                               .DfIpProd100.Mg, .DfIpProd100.Tpa, 2)

                .DfTpr100.FeAdj = gGetTotalValue3(.Tpr100.FeAdj, .Tpr100.Tpa,
                                                  .DfFpbProd100.FeAdj, .DfFpbProd100.Tpa,
                                                  .DfIpProd100.FeAdj, .DfIpProd100.Tpa, 2)
                .DfTpr100.IaAdj = gGetTotalValue3(.Tpr100.IaAdj, .Tpr100.Tpa,
                                                  .DfFpbProd100.IaAdj, .DfFpbProd100.Tpa,
                                                  .DfIpProd100.IaAdj, .DfIpProd100.Tpa, 2)
            End With
        End If
    End Sub

    Private Sub CalcDoloflotPltHoleWtPcts(ByRef aHoleData As gRawProspSplRdctnType,
                                          ByVal aWhichToCalc As String)


        'aWhichToCalc will be "ProdCoeff", "100%" or "Both"

        With aHoleData
            If aWhichToCalc = "ProdCoeff" Or aWhichToCalc = "Both" Then
                'Prod coefficient
                If .MtxTpaPc <> 0 Then
                    .DfFpbInp.WtPct = Round(.DfFpbInp.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfFpbInp.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .DfFpbProd.WtPct = Round(.DfFpbProd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfFpbProd.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .DfIpInp.WtPct = Round(.DfIpInp.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfIpInp.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .DfIpProd.WtPct = Round(.DfIpProd.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfIpProd.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .DfTcn.WtPct = Round(.DfTcn.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfTcn.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .DfTpr.WtPct = Round(.DfTpr.Tpa / .MtxTpaPc * 100, 2)
                Else
                    .DfTpr.WtPct = 0
                End If
            End If

            If aWhichToCalc = "100%" Or aWhichToCalc = "Both" Then
                '100%
                If .MtxTpaPc <> 0 Then
                    .DfFpbInp100.WtPct = Round(.DfFpbInp100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfFpbInp100.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .DfFpbProd100.WtPct = Round(.DfFpbProd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfFpbProd100.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .DfIpInp100.WtPct = Round(.DfIpInp100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfIpInp100.WtPct = 0
                End If
                'If .MtxTpaPc <> 0 Then
                '    .DfIpRej100.WtPct = Round(.DfIpRej100.Tpa / .MtxTPA * 100, 2)
                'Else
                '    .DfIpRej100.WtPct = 0
                'End If
                If .MtxTpaPc <> 0 Then
                    .DfIpProd100.WtPct = Round(.DfIpProd100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfIpProd100.WtPct = 0
                End If
                '-----
                If .MtxTpaPc <> 0 Then
                    .DfTcn100.WtPct = Round(.DfTcn100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfTcn100.WtPct = 0
                End If
                If .MtxTpaPc <> 0 Then
                    .DfTpr100.WtPct = Round(.DfTpr100.Tpa / .MtxTPA * 100, 2)
                Else
                    .DfTpr100.WtPct = 0
                End If
            End If
        End With
    End Sub

    Private Function OffSpecPbPltProcessFco(ByRef aRcvryParamsData As gDataRdctnParamsType,
                                            ByRef aRcvryProdQual() As gDataRdctnProdQualType,
                                            ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                            ByVal aProcMode As String) As Boolean

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'DOLOFLOT PLANT FCO
        '------------------

        'Have already determined that the total pebble is off-spec and that the
        'mine has an off-spec pebble MgO processing plant!
        'Does this off-spec pebble meet the requirements for the off-spec pebble
        'MgO processing plant?

        'aProcMode will be "100%" or "ProdCoeff".

        'This procedure may be working on a split or a hole depending on what is
        '"transferred" through aRdctnCalcData and aSsDataReview.

        Dim TpbTpa As Integer
        Dim TpbBpl As Single
        Dim TpbIns As Single
        Dim TpbIA As Single
        Dim TpbCa As Single
        Dim TpbFe As Single
        Dim TpbAl As Single
        Dim TpbMg As Single
        Dim TpbWtPct As Single

        '03/24/2011**, lss
        Dim TpbFeAdj As Single
        Dim TpbIaAdj As Single

        Dim DoloflotPlantMgoMin As Single
        Dim DoloflotPlantMgoMax As Single
        Dim ProdBplRcvry As Single
        Dim ProdBplTpa As Double

        Dim Value1 As Single
        Dim Value2 As Single
        Dim Value3 As Single
        Dim Value4 As Single
        Dim Value5 As Single
        Dim Value6 As Single

        'DpFnePbMgoCutoff --> TotPbMgoMax
        'DpIpMgoCutoff    --> TotPbMgoMin
        DoloflotPlantMgoMin = aRcvryParamsData.DpIpMgoCutoff
        DoloflotPlantMgoMax = aRcvryParamsData.DpFnePbMgoCutoff

        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect

        If aProcMode = "100%" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!
            With aRdctnCalcData
                'New DfpFco
                'gGetTotalValue averagesin zero values -- replaced it with gGetTotalValue2

                TpbTpa = .Cpb100.Tpa + .Fpb100.Tpa
                TpbBpl = gGetTotalValue2(.Cpb100.Bpl, .Cpb100.Tpa,
                                        .Fpb100.Bpl, .Fpb100.Tpa, 1)
                TpbIns = gGetTotalValue2(.Cpb100.Ins, .Cpb100.Tpa,
                                        .Fpb100.Ins, .Fpb100.Tpa, 1)
                TpbIA = gGetTotalValue2(.Cpb100.Ia, .Cpb100.Tpa,
                                       .Fpb100.Ia, .Fpb100.Tpa, 2)
                TpbCa = gGetTotalValue2(.Cpb100.Ca, .Cpb100.Tpa,
                                       .Fpb100.Ca, .Fpb100.Tpa, 1)
                TpbFe = gGetTotalValue2(.Cpb100.Fe, .Cpb100.Tpa,
                                       .Fpb100.Fe, .Fpb100.Tpa, 2)
                TpbAl = gGetTotalValue2(.Cpb100.Al, .Cpb100.Tpa,
                                       .Fpb100.Al, .Fpb100.Tpa, 2)
                TpbMg = gGetTotalValue2(.Cpb100.Mg, .Cpb100.Tpa,
                                       .Fpb100.Mg, .Fpb100.Tpa, 2)
                TpbWtPct = .Cpb100.WtPct + .Fpb100.WtPct

                TpbIaAdj = gGetTotalValue2(.Cpb100.IaAdj, .Cpb100.Tpa,
                                          .Fpb100.IaAdj, .Fpb100.Tpa, 2)
                TpbFeAdj = gGetTotalValue2(.Cpb100.FeAdj, .Cpb100.Tpa,
                                          .Fpb100.FeAdj, .Fpb100.Tpa, 2)

                .MgPltTcn100.Tpa = 0
                .MgPltTcn100.WtPct = 0
                .MgPltTcn100.Bpl = 0
                .MgPltTcn100.Ins = 0
                .MgPltTcn100.Fe = 0
                .MgPltTcn100.Al = 0
                .MgPltTcn100.Ia = 0
                .MgPltTcn100.Mg = 0
                .MgPltTcn100.Ca = 0
                .MgPltTcn100.FeAdj = 0
                .MgPltTcn100.IaAdj = 0

                .MgPltTpr100.Tpa = 0
                .MgPltTpr100.WtPct = 0
                .MgPltTpr100.Bpl = 0
                .MgPltTpr100.Ins = 0
                .MgPltTpr100.Fe = 0
                .MgPltTpr100.Al = 0
                .MgPltTpr100.Ia = 0
                .MgPltTpr100.Mg = 0
                .MgPltTpr100.Ca = 0
                .MgPltTpr100.FeAdj = 0
                .MgPltTpr100.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.

                'The MgO of the total pebble must be in a given range.

                'If the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbMg <= DoloflotPlantMgoMin Or
                    TpbMg > DoloflotPlantMgoMax Then
                    'This total pebble is MgO plant reject.

                    .MgPltInp100.Tpa = 0
                    .MgPltInp100.WtPct = 0
                    .MgPltInp100.Bpl = 0
                    .MgPltInp100.Ins = 0
                    .MgPltInp100.Fe = 0
                    .MgPltInp100.Al = 0
                    .MgPltInp100.Ia = 0
                    .MgPltInp100.Mg = 0
                    .MgPltInp100.Ca = 0
                    .MgPltInp100.FeAdj = 0
                    .MgPltInp100.IaAdj = 0

                    .MgPltRej100.Tpa = TpbTpa
                    .MgPltRej100.WtPct = TpbWtPct
                    .MgPltRej100.Bpl = TpbBpl
                    .MgPltRej100.Ins = TpbIns
                    .MgPltRej100.Fe = TpbFe
                    .MgPltRej100.Al = TpbAl
                    .MgPltRej100.Ia = TpbIA
                    .MgPltRej100.Mg = TpbMg
                    .MgPltRej100.Ca = TpbCa
                    .MgPltRej100.FeAdj = TpbFeAdj
                    .MgPltRej100.IaAdj = TpbIaAdj

                    .MgPltProd100.Tpa = 0
                    .MgPltProd100.Bpl = 0
                    .MgPltProd100.Ins = 0
                    .MgPltProd100.Fe = 0
                    .MgPltProd100.Al = 0
                    .MgPltProd100.Ca = 0
                    .MgPltProd100.Mg = 0
                    .MgPltProd100.Ia = 0

                    Exit Function
                End If

                'What we have now is Doloflot plant FCO input.
                'Currently in Function OffSpecPbPltProcessFco.

                .MgPltInp100.Tpa = TpbTpa
                .MgPltInp100.WtPct = TpbWtPct
                .MgPltInp100.Bpl = TpbBpl
                .MgPltInp100.Ins = TpbIns
                .MgPltInp100.Fe = TpbFe
                .MgPltInp100.Al = TpbAl
                .MgPltInp100.Ia = TpbIA
                .MgPltInp100.Mg = TpbMg
                .MgPltInp100.Ca = TpbCa
                .MgPltInp100.FeAdj = TpbFeAdj
                .MgPltInp100.IaAdj = TpbIaAdj

                'Need to determine the MgO plant product from this input.

                'Have:
                ' 1) aRcvryParamsData.DpFnePbMgoCutoff
                ' 2) aRcvryParamsData.DpIpMgoCutoff
                ' 3) aRcvryParamsData.DpGrind
                ' 4) aRcvryParamsData.DpAcid
                ' 5) aRcvryParamsData.DpP2o5
                ' 6) aRcvryParamsData.DpPa64
                ' 7) aRcvryParamsData.DpFlotMin
                ' 8) aRcvryParamsData.DpTargMgo

                'F2
                'Prod BPL = 36.4 + (0.339 * DfProdInpBpl) + (0.435 * DpPa64) +
                '           (30.0 * DpAcid) - (14.5 * DpP2o5) - (0.350 * DpFlotMin)

                'F1
                'BPL %Rcvry = 100 * (1 - EXP(-4.56 + (0.0474 * DfProdInpMgO) + (0.0226 * DpGrind) -
                '            (0.0964 * DpFlotMin) - (5.90 * DpP2o5) + (12.2 * DpAcid) +
                '            (0.121 * DpPa64)))

                'Doloflot product
                '----------------
                '1) Prod BPL tons = Input Tons * Input BPL * F1
                '2) Prod BPL      = F2
                '3) Prod tons     = Prod BPL tons / Prod BPL
                '4) Prod MgO      = DpTargMgo
                '5) Prod Insol    = (1 - (Prod BPL * 0.012844) - (Prod MgO * 0.048303) -
                '                (Prod Al2O3 * 0.016062) +
                '                   (Prod Fe2O3 * 0.015825)) / 0.012591)
                '6) Prod Fe2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpFe2o3
                '7) Prod Al2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpAl2o3

                If TpbBpl > 0 Then
                    .MgPltProd100.Bpl = Round(36.4 + (0.339 * TpbBpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                       (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                       (0.35 * aRcvryParamsData.DpFlotMin), 1)
                Else
                    .MgPltProd100.Bpl = 0
                End If

                .MgPltProd100.Mg = aRcvryParamsData.DpTargMgo

                ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * TpbMg) +
                               (0.0226 * aRcvryParamsData.DpGrind) -
                               (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                               (12.2 * aRcvryParamsData.DpAcid) +
                               (0.121 * aRcvryParamsData.DpPa64)))

                ProdBplTpa = Round(TpbTpa * TpbBpl * (ProdBplRcvry / 100), 1)

                If .MgPltProd100.Bpl > 0 Then
                    .MgPltProd100.Tpa = Round(ProdBplTpa / .MgPltProd100.Bpl, 0)
                Else
                    .MgPltProd100.Tpa = 0
                End If

                'Will determine this later!
                .MgPltProd100.WtPct = 0

                If TpbBpl > 0 Then
                    .MgPltProd100.Fe = Round((.MgPltProd100.Bpl / TpbBpl) * TpbFe, 2)
                Else
                    .MgPltProd100.Fe = 0
                End If

                If TpbBpl > 0 Then
                    .MgPltProd100.FeAdj = Round((.MgPltProd100.Bpl / TpbBpl) * TpbFeAdj, 2)
                Else
                    .MgPltProd100.FeAdj = 0
                End If

                If TpbBpl > 0 Then
                    .MgPltProd100.Al = Round((.MgPltProd100.Bpl / TpbBpl) * TpbAl, 2)
                Else
                    .MgPltProd100.Al = 0
                End If

                If aRcvryParamsData.UseFeAdjust = True Then
                    If TpbIns > 0 Then
                        .MgPltProd100.Ins = Round((1 - (.MgPltProd100.Bpl * 0.012844) - (.MgPltProd100.Mg * 0.048303) -
                                            (.MgPltProd100.Al * 0.016062) +
                                            (.MgPltProd100.FeAdj * 0.015825)) / 0.012591, 1)
                    Else
                        .MgPltProd100.Ins = 0
                    End If

                    Value1 = .MgPltProd100.Bpl * 0.012844
                    Value2 = .MgPltProd100.Mg * 0.048303
                    Value3 = .MgPltProd100.Al * 0.016062
                    Value4 = .MgPltProd100.FeAdj * 0.015825

                    Value5 = (1 - Value1 - Value2 - Value3 + Value4) / 0.012591
                    Value6 = 1
                Else
                    If TpbIns > 0 Then
                        .MgPltProd100.Ins = Round((1 - (.MgPltProd100.Bpl * 0.012844) - (.MgPltProd100.Mg * 0.048303) -
                                            (.MgPltProd100.Al * 0.016062) +
                                            (.MgPltProd100.Fe * 0.015825)) / 0.012591, 1)
                    Else
                        .MgPltProd100.Ins = 0
                    End If

                    Value1 = .MgPltProd100.Bpl * 0.012844
                    Value2 = .MgPltProd100.Mg * 0.048303
                    Value3 = .MgPltProd100.Al * 0.016062
                    Value4 = .MgPltProd100.FeAdj * 0.015825

                    Value5 = (1 - Value1 - Value2 - Value3 + Value4) / 0.012591
                    Value6 = 1
                End If

                .MgPltProd100.Ia = .MgPltProd100.Fe + .MgPltProd100.Al
                .MgPltProd100.IaAdj = .MgPltProd100.FeAdj + .MgPltProd100.Al

                If TpbBpl > 0 Then
                    .MgPltProd100.Ca = Round((.MgPltProd100.Bpl / TpbBpl) * TpbCa, 2)
                Else
                    .MgPltProd100.Ca = 0
                End If

                'Set the reject to zero
                .MgPltRej100.Tpa = 0
                .MgPltRej100.WtPct = 0
                .MgPltRej100.Bpl = 0
                .MgPltRej100.Ins = 0
                .MgPltRej100.Fe = 0
                .MgPltRej100.Al = 0
                .MgPltRej100.Ia = 0
                .MgPltRej100.Mg = 0
                .MgPltRej100.Ca = 0
                .MgPltRej100.FeAdj = 0
                .MgPltRej100.IaAdj = 0
            End With
        End If

        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient

        If aProcMode = "ProdCoeff" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!

            'New DfpFco
            'gGetTotalValue averagesin zero values -- replaced it with gGetTotalValue2

            With aRdctnCalcData
                TpbTpa = .Cpb.Tpa + .Fpb.Tpa
                TpbBpl = gGetTotalValue2(.Cpb.Bpl, .Cpb.Tpa,
                                        .Fpb.Bpl, .Fpb.Tpa, 1)
                TpbIns = gGetTotalValue2(.Cpb.Ins, .Cpb.Tpa,
                                        .Fpb.Ins, .Fpb.Tpa, 1)
                TpbIA = gGetTotalValue2(.Cpb.Ia, .Cpb.Tpa,
                                       .Fpb.Ia, .Fpb.Tpa, 2)
                TpbCa = gGetTotalValue2(.Cpb.Ca, .Cpb.Tpa,
                                       .Fpb.Ca, .Fpb.Tpa, 1)
                TpbFe = gGetTotalValue2(.Cpb.Fe, .Cpb.Tpa,
                                       .Fpb.Fe, .Fpb.Tpa, 2)
                TpbAl = gGetTotalValue2(.Cpb.Al, .Cpb.Tpa,
                                       .Fpb.Al, .Fpb.Tpa, 2)
                TpbMg = gGetTotalValue2(.Cpb.Mg, .Cpb.Tpa,
                                       .Fpb.Mg, .Fpb.Tpa, 2)
                TpbWtPct = .Cpb.WtPct + .Fpb.WtPct

                TpbIaAdj = gGetTotalValue2(.Cpb.IaAdj, .Cpb.Tpa,
                                          .Fpb.IaAdj, .Fpb.Tpa, 2)
                TpbFeAdj = gGetTotalValue2(.Cpb.FeAdj, .Cpb.Tpa,
                                          .Fpb.FeAdj, .Fpb.Tpa, 2)

                .MgPltTcn.Tpa = 0
                .MgPltTcn.WtPct = 0
                .MgPltTcn.Bpl = 0
                .MgPltTcn.Ins = 0
                .MgPltTcn.Fe = 0
                .MgPltTcn.Al = 0
                .MgPltTcn.Ia = 0
                .MgPltTcn.Mg = 0
                .MgPltTcn.Ca = 0
                .MgPltTcn.FeAdj = 0
                .MgPltTcn.IaAdj = 0

                .MgPltTpr.Tpa = 0
                .MgPltTpr.WtPct = 0
                .MgPltTpr.Bpl = 0
                .MgPltTpr.Ins = 0
                .MgPltTpr.Fe = 0
                .MgPltTpr.Al = 0
                .MgPltTpr.Ia = 0
                .MgPltTpr.Mg = 0
                .MgPltTpr.Ca = 0
                .MgPltTpr.FeAdj = 0
                .MgPltTpr.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.

                'The MgO of the total pebble must be in a given range.

                'If the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbMg <= DoloflotPlantMgoMin Or
                    TpbMg > DoloflotPlantMgoMax Then
                    'This pebble is MgO plant reject.

                    .MgPltInp.Tpa = 0
                    .MgPltInp.WtPct = 0
                    .MgPltInp.Bpl = 0
                    .MgPltInp.Ins = 0
                    .MgPltInp.Fe = 0
                    .MgPltInp.Al = 0
                    .MgPltInp.Ia = 0
                    .MgPltInp.Mg = 0
                    .MgPltInp.Ca = 0
                    .MgPltInp.FeAdj = 0
                    .MgPltInp.IaAdj = 0

                    .MgPltRej.Tpa = TpbTpa
                    .MgPltRej.WtPct = TpbWtPct
                    .MgPltRej.Bpl = TpbBpl
                    .MgPltRej.Ins = TpbIns
                    .MgPltRej.Fe = TpbFe
                    .MgPltRej.Al = TpbAl
                    .MgPltRej.Ia = TpbIA
                    .MgPltRej.Mg = TpbMg
                    .MgPltRej.Ca = TpbCa
                    .MgPltRej.FeAdj = TpbFeAdj
                    .MgPltRej.IaAdj = TpbIaAdj

                    .MgPltProd.Tpa = 0
                    .MgPltProd.Bpl = 0
                    .MgPltProd.Ins = 0
                    .MgPltProd.Fe = 0
                    .MgPltProd.Al = 0
                    .MgPltProd.Ca = 0
                    .MgPltProd.Mg = 0
                    .MgPltProd.Ia = 0

                    Exit Function
                End If

                'What we have now is Doloflot plant FCO input.
                'Currently in Function OffSpecPbPltProcessFco.

                .MgPltInp.Tpa = TpbTpa
                .MgPltInp.WtPct = TpbWtPct
                .MgPltInp.Bpl = TpbBpl
                .MgPltInp.Ins = TpbIns
                .MgPltInp.Fe = TpbFe
                .MgPltInp.Al = TpbAl
                .MgPltInp.Ia = TpbIA
                .MgPltInp.Mg = TpbMg
                .MgPltInp.Ca = TpbCa
                .MgPltInp.FeAdj = TpbFeAdj
                .MgPltInp.IaAdj = TpbIaAdj

                'Need to determine the MgO plant product from this input.

                'Have:
                ' 1) aRcvryParamsData.DpFnePbMgoCutoff
                ' 2) aRcvryParamsData.DpIpMgoCutoff
                ' 3) aRcvryParamsData.DpGrind
                ' 4) aRcvryParamsData.DpAcid
                ' 5) aRcvryParamsData.DpP2o5
                ' 6) aRcvryParamsData.DpPa64
                ' 7) aRcvryParamsData.DpFlotMin
                ' 8) aRcvryParamsData.DpTargMgo

                'F2
                'Prod BPL = 36.4 + (0.339 * DfProdInpBpl) + (0.435 * DpPa64) +
                '           (30.0 * DpAcid) - (14.5 * DpP2o5) - (0.350 * DpFlotMin)

                'F1
                'BPL %Rcvry = 100 * (1 - EXP(-4.56 + (0.0474 * DfProdInpMgO) + (0.0226 * DpGrind) -
                '            (0.0964 * DpFlotMin) - (5.90 * DpP2o5) + (12.2 * DpAcid) +
                '            (0.121 * DpPa64)))

                'Doloflot product
                '----------------
                '1) Prod BPL tons = Input Tons * Input BPL * F1
                '2) Prod BPL      = F2
                '3) Prod tons     = Prod BPL tons / Prod BPL
                '4) Prod MgO      = DpTargMgo
                '5) Prod Insol    = (1 - (Prod BPL * 0.012844) - (Prod MgO * 0.048303) -
                '                (Prod Al2O3 * 0.016062) +
                '                   (Prod Fe2O3 * 0.015825)) / 0.012591)
                '6) Prod Fe2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpFe2o3
                '7) Prod Al2O3    = (Prod BPL / DfProdInpBpl) * DfProdInpAl2o3

                If TpbBpl > 0 Then
                    .MgPltProd.Bpl = Round(36.4 + (0.339 * TpbBpl) + (0.435 * aRcvryParamsData.DpPa64) +
                                       (30 * aRcvryParamsData.DpAcid) - (14.5 * aRcvryParamsData.DpP2o5) -
                                       (0.35 * aRcvryParamsData.DpFlotMin), 1)
                Else
                    .MgPltProd.Bpl = 0
                End If

                .MgPltProd.Mg = aRcvryParamsData.DpTargMgo

                ProdBplRcvry = 100 * (1 - Exp(-4.56 + (0.0474 * TpbMg) +
                               (0.0226 * aRcvryParamsData.DpGrind) -
                               (0.0964 * aRcvryParamsData.DpFlotMin) - (5.9 * aRcvryParamsData.DpP2o5) +
                               (12.2 * aRcvryParamsData.DpAcid) +
                               (0.121 * aRcvryParamsData.DpPa64)))

                ProdBplTpa = Round(TpbTpa * TpbBpl * (ProdBplRcvry / 100), 1)

                If .MgPltProd.Bpl > 0 Then
                    .MgPltProd.Tpa = Round(ProdBplTpa / .MgPltProd.Bpl, 0)
                Else
                    .MgPltProd.Tpa = 0
                End If

                'Will determine this later!
                .MgPltProd.WtPct = 0

                If TpbBpl > 0 Then
                    .MgPltProd.Fe = Round((.MgPltProd.Bpl / TpbBpl) * TpbFe, 2)
                Else
                    .MgPltProd.Fe = 0
                End If

                If TpbBpl > 0 Then
                    .MgPltProd.FeAdj = Round((.MgPltProd.Bpl / TpbBpl) * TpbFeAdj, 2)
                Else
                    .MgPltProd.FeAdj = 0
                End If

                If TpbBpl > 0 Then
                    .MgPltProd.Al = Round((.MgPltProd.Bpl / TpbBpl) * TpbAl, 2)
                Else
                    .MgPltProd.Al = 0
                End If

                If aRcvryParamsData.UseFeAdjust = True Then
                    If TpbIns > 0 Then
                        .MgPltProd.Ins = Round((1 - (.MgPltProd.Bpl * 0.012844) - (.MgPltProd.Mg * 0.048303) -
                                            (.MgPltProd.Al * 0.016062) +
                                            (.MgPltProd.FeAdj * 0.015825)) / 0.012591, 1)
                    Else
                        .MgPltProd.Ins = 0
                    End If
                Else
                    If TpbIns > 0 Then
                        .MgPltProd.Ins = Round((1 - (.MgPltProd.Bpl * 0.012844) - (.MgPltProd.Mg * 0.048303) -
                                            (.MgPltProd.Al * 0.016062) +
                                            (.MgPltProd.Fe * 0.015825)) / 0.012591, 1)
                    Else
                        .MgPltProd.Ins = 0
                    End If
                End If

                .MgPltProd.Ia = .MgPltProd.Fe + .MgPltProd100.Al
                .MgPltProd.IaAdj = .MgPltProd.FeAdj + .MgPltProd.Al

                If TpbBpl > 0 Then
                    .MgPltProd.Ca = Round((.MgPltProd.Bpl / TpbBpl) * TpbCa, 2)
                Else
                    .MgPltProd.Ca = 0
                End If

                'Set the reject to zero
                .MgPltRej.Tpa = 0
                .MgPltRej.WtPct = 0
                .MgPltRej.Bpl = 0
                .MgPltRej.Ins = 0
                .MgPltRej.Fe = 0
                .MgPltRej.Al = 0
                .MgPltRej.Ia = 0
                .MgPltRej.Mg = 0
                .MgPltRej.Ca = 0
                .MgPltRej.FeAdj = 0
                .MgPltRej.IaAdj = 0
            End With
        End If
    End Function

    Private Function OffSpecPbPltProcessFco2(ByVal aRcvryParamsData As gDataRdctnParamsType,
                                             ByRef aRdctnCalcData As gRawProspSplRdctnType,
                                             ByVal aProcMode As String) As Boolean

        '**********************************************************************
        '
        '
        '
        '**********************************************************************

        'DOLOFLOT PLANT FCO
        '------------------

        'Have already determined that the total pebble is off-spec and that the
        'mine has an off-spec pebble MgO processing plant!
        'Does this off-spec pebble meet the requirements for the off-spec pebble
        'MgO processing plant?

        'aProcMode will be "100%" or "ProdCoeff".

        'This procedure may be working on a split or a hole depending on what is
        '"transferred" through aRdctnCalcData and aSsDataReview.

        'Uses 'new' model derived by Glen Oswald and company -- 11/2011

        Dim TpbTpa As Integer
        Dim TpbBpl As Single
        Dim TpbIns As Single
        Dim TpbIA As Single
        Dim TpbCa As Single
        Dim TpbFe As Single
        Dim TpbAl As Single
        Dim TpbMg As Single
        Dim TpbWtPct As Single

        '03/24/2011**, lss
        Dim TpbFeAdj As Single
        Dim TpbIaAdj As Single

        Dim DoloflotPlantMgoMin As Single
        Dim DoloflotPlantMgoMax As Single
        Dim ProdBplRcvry As Single
        Dim ProdBplTpa As Double

        Dim Value1 As Single
        Dim Value2 As Single
        Dim Value3 As Single
        Dim Value4 As Single
        Dim Value5 As Single
        Dim Value6 As Single

        '11/16/2011  New variables
        Dim Grind As Single
        Dim CondMinutes As Single
        Dim CondPctSolids As Single
        Dim FlotMinutes As Single
        Dim PA64 As Single
        Dim PhosAcid As Single
        Dim SulfAcid As Single
        Dim RghrCnMg As Single          '9
        Dim RghrCnMgP2o5 As Single      '10
        Dim RghrCnBplRcvry As Single    '11
        Dim RghrCnBpl As Single         '12
        Dim AmFdWtPct As Single         '13
        Dim AmFdBpl As Single           '14
        Dim AmFdMg As Single            '15
        Dim FdZzzRatio As Single        '16
        Dim AmCnMg As Single            '17
        Dim AmCnAl As Single            '18
        Dim AmCnFe As Single            '19
        Dim AmCnBpl As Single           '20
        Dim DpRghrCnTons As Single      '21
        Dim AmFlotFdTons As Single      '22
        Dim BypassAmFlotTons As Single  '23
        Dim AmCnTons As Single          '24
        Dim CombProdTons As Single      '25
        Dim CombProdBpl As Single       '26
        Dim CombProdMg As Single        '27
        Dim CombProdFe As Single        '28
        Dim CombProdFeAdj As Single     '28a
        Dim CombProdAl As Single        '29
        Dim CombProdIns As Single       '30

        Dim TempVal As Single
        Dim AmFinalCnIns As Single

        'DpFnePbMgoCutoff --> TotPbMgoMax
        'DpIpMgoCutoff    --> TotPbMgoMin
        DoloflotPlantMgoMin = aRcvryParamsData.DpIpMgoCutoff
        DoloflotPlantMgoMax = aRcvryParamsData.DpFnePbMgoCutoff

        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect
        '100% Prospect  100% Prospect  100% Prospect

        If aProcMode = "100%" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!
            With aRdctnCalcData
                'New DfpFco
                'gGetTotalValue averages in zero values -- replaced it with gGetTotalValue2

                TpbTpa = .Cpb100.Tpa + .Fpb100.Tpa
                TpbBpl = gGetTotalValue2(.Cpb100.Bpl, .Cpb100.Tpa,
                                        .Fpb100.Bpl, .Fpb100.Tpa, 1)
                TpbIns = gGetTotalValue2(.Cpb100.Ins, .Cpb100.Tpa,
                                        .Fpb100.Ins, .Fpb100.Tpa, 1)
                TpbIA = gGetTotalValue2(.Cpb100.Ia, .Cpb100.Tpa,
                                       .Fpb100.Ia, .Fpb100.Tpa, 2)
                TpbCa = gGetTotalValue2(.Cpb100.Ca, .Cpb100.Tpa,
                                       .Fpb100.Ca, .Fpb100.Tpa, 1)
                TpbFe = gGetTotalValue2(.Cpb100.Fe, .Cpb100.Tpa,
                                       .Fpb100.Fe, .Fpb100.Tpa, 2)
                TpbAl = gGetTotalValue2(.Cpb100.Al, .Cpb100.Tpa,
                                       .Fpb100.Al, .Fpb100.Tpa, 2)
                TpbMg = gGetTotalValue2(.Cpb100.Mg, .Cpb100.Tpa,
                                       .Fpb100.Mg, .Fpb100.Tpa, 2)
                TpbWtPct = .Cpb100.WtPct + .Fpb100.WtPct

                TpbIaAdj = gGetTotalValue2(.Cpb100.IaAdj, .Cpb100.Tpa,
                                          .Fpb100.IaAdj, .Fpb100.Tpa, 2)
                TpbFeAdj = gGetTotalValue2(.Cpb100.FeAdj, .Cpb100.Tpa,
                                          .Fpb100.FeAdj, .Fpb100.Tpa, 2)

                'Temporary stuff for testing!!!
                'TpbTpa = 150
                'TpbBpl = 48.41
                'TpbIns = 10.7
                'TpbIA = 0
                'TpbCa = TpbCa
                'TpbFe = 0.97
                'TpbAl = 0.88
                'TpbMg = 3.95
                'TpbWtPct = 0
                '--------------------------------------

                .MgPltTcn100.Tpa = 0
                .MgPltTcn100.WtPct = 0
                .MgPltTcn100.Bpl = 0
                .MgPltTcn100.Ins = 0
                .MgPltTcn100.Fe = 0
                .MgPltTcn100.Al = 0
                .MgPltTcn100.Ia = 0
                .MgPltTcn100.Mg = 0
                .MgPltTcn100.Ca = 0
                .MgPltTcn100.FeAdj = 0
                .MgPltTcn100.IaAdj = 0

                .MgPltTpr100.Tpa = 0
                .MgPltTpr100.WtPct = 0
                .MgPltTpr100.Bpl = 0
                .MgPltTpr100.Ins = 0
                .MgPltTpr100.Fe = 0
                .MgPltTpr100.Al = 0
                .MgPltTpr100.Ia = 0
                .MgPltTpr100.Mg = 0
                .MgPltTpr100.Ca = 0
                .MgPltTpr100.FeAdj = 0
                .MgPltTpr100.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.

                'The MgO of the total pebble must be in a given range.

                'If the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbMg <= DoloflotPlantMgoMin Or
                    TpbMg > DoloflotPlantMgoMax Then
                    'This total pebble is MgO plant reject.

                    .MgPltInp100.Tpa = 0
                    .MgPltInp100.WtPct = 0
                    .MgPltInp100.Bpl = 0
                    .MgPltInp100.Ins = 0
                    .MgPltInp100.Fe = 0
                    .MgPltInp100.Al = 0
                    .MgPltInp100.Ia = 0
                    .MgPltInp100.Mg = 0
                    .MgPltInp100.Ca = 0
                    .MgPltInp100.FeAdj = 0
                    .MgPltInp100.IaAdj = 0

                    .MgPltRej100.Tpa = TpbTpa
                    .MgPltRej100.WtPct = TpbWtPct
                    .MgPltRej100.Bpl = TpbBpl
                    .MgPltRej100.Ins = TpbIns
                    .MgPltRej100.Fe = TpbFe
                    .MgPltRej100.Al = TpbAl
                    .MgPltRej100.Ia = TpbIA
                    .MgPltRej100.Mg = TpbMg
                    .MgPltRej100.Ca = TpbCa
                    .MgPltRej100.FeAdj = TpbFeAdj
                    .MgPltRej100.IaAdj = TpbIaAdj

                    .MgPltProd100.Tpa = 0
                    .MgPltProd100.Bpl = 0
                    .MgPltProd100.Ins = 0
                    .MgPltProd100.Fe = 0
                    .MgPltProd100.Al = 0
                    .MgPltProd100.Ca = 0
                    .MgPltProd100.Mg = 0
                    .MgPltProd100.Ia = 0

                    Exit Function
                End If

                'What we have now is Doloflot plant FCO input.
                'Currently in Function OffSpecPbPltProcessFco.

                .MgPltInp100.Tpa = TpbTpa
                .MgPltInp100.WtPct = TpbWtPct
                .MgPltInp100.Bpl = TpbBpl
                .MgPltInp100.Ins = TpbIns
                .MgPltInp100.Fe = TpbFe
                .MgPltInp100.Al = TpbAl
                .MgPltInp100.Ia = TpbIA
                .MgPltInp100.Mg = TpbMg
                .MgPltInp100.Ca = TpbCa
                .MgPltInp100.FeAdj = TpbFeAdj
                .MgPltInp100.IaAdj = TpbIaAdj

                'Need to determine the MgO plant product from this input.

                'Have:
                ' 1) aRcvryParamsData.DpPctWtM200Mesh
                ' 2) aRcvryParamsData.DpCondMinutes
                ' 3) aRcvryParamsData.DpCondPctSolids
                ' 4) aRcvryParamsData.DpFlotMin
                ' 5) aRcvryParamsData.DpPa64
                ' 6) aRcvryParamsData.DpP2o5
                ' 7) aRcvryParamsData.DpAcid

                '2) Compute grind
                If TpbMg < 3.595 Then
                    Grind = aRcvryParamsData.DpPctWtM200Mesh
                Else
                    Grind = Round(1.3385 + (16.319 * TpbMg), 2)
                End If

                '3) Compute conditioning minutes
                CondMinutes = aRcvryParamsData.DpCondMinutes

                '4) Compute conditioning %solids
                CondPctSolids = aRcvryParamsData.DpCondPctSolids

                '5) Compute flotation minutes
                FlotMinutes = aRcvryParamsData.DpFlotMin

                '6) Compute PA64 dose
                If TpbMg < 2.808 Then
                    PA64 = Round(-7.4182 + (7.271 * TpbMg), 2)
                Else
                    PA64 = 13
                End If

                '7) Compute Phos Acid (P2O5)
                'Never really uses aRcvryParamsData.DpP2o5!
                If TpbMg < 2.808 Then
                    PhosAcid = 5
                Else
                    If TpbMg >= 2.808 And TpbMg < 3.5947 Then
                        PhosAcid = Round(-30.6948 + (12.712 * TpbMg), 2)
                    Else
                        PhosAcid = 15
                    End If
                End If

                '8) Compute Sulfuric acid (acid)
                SulfAcid = aRcvryParamsData.DpAcid

                '9) Determine rougher conc MgO  (V12)
                RghrCnMg = Round(0.873 - (0.0228 * PhosAcid) - (0.0204 * SulfAcid) - (0.0399 * PA64) -
                           (0.00235 * Grind) - (0.00541 * CondPctSolids) + (0.211 * CondMinutes) -
                           (0.00447 * FlotMinutes) + (0.29 * TpbMg), 3)

                '10) Determine rougher conc MgO/P2O5  (V13)
                RghrCnMgP2o5 = Round(4.02 - (0.00681 * PhosAcid) + (0.00335 * FlotMinutes) - (0.0784 * TpbBpl) -
                               (0.163 * TpbMg) + (4.44 * RghrCnMg), 2)

                '11) Determine rougher conc BPL %Recovery  (V14)
                RghrCnBplRcvry = Round(114 + (1.18 * SulfAcid) - (0.317 * Grind) + (0.788 * CondPctSolids) -
                                 (1.52 * FlotMinutes) - (16.9 * TpbMg), 2)

                '12) Determine rougher conc BPL  (V15)
                RghrCnBpl = Round(218.5 * (RghrCnMg / RghrCnMgP2o5), 2)

                '13) Determine amine feed weight%  (V16)
                AmFdWtPct = Round(113.341 - (0.493 * Grind) - (0.353 * PhosAcid), 2)

                '14) Determine amine feed BPL  (V17)
                AmFdBpl = Round(-7.156 + (1.048 * RghrCnBpl) + (3.5 * RghrCnMg) + (0.139 * PA64), 2)

                '15) Determine amine feed MgO  (V18)
                AmFdMg = Round(0.833 - (0.00788 * Grind) + (0.511 * RghrCnMg), 3)

                '16) Determine feed ZZZ Ratio  (V19)
                FdZzzRatio = Round((TpbBpl * 0.012844) + (TpbIns * 0.012591) - (TpbAl * 0.015825) +
                             (TpbFe * 0.016062) + (TpbMg * 0.048303), 4)

                '17) Determine amine Cn MgO  (V20)
                AmCnMg = Round(-0.292 + (1.64 * AmFdMg), 3)

                '18) Determine amine Cn Al2O3  (V21)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbAl * (RghrCnBpl / TpbBpl), 3)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    AmCnAl = TempVal
                Else
                    AmCnAl = 23
                End If

                '19) Determine amine Cn Fe2O3  (V22)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFe * (RghrCnBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    AmCnFe = TempVal
                Else
                    AmCnFe = 23
                End If

                '20) Determine amine Cn BPL  (V23)
                AmFinalCnIns = 8
                AmCnBpl = Round((FdZzzRatio - ((AmFinalCnIns * 0.012591) - (AmCnAl * 0.015825) +
                          (AmCnFe * 0.016062) + (AmCnMg * 0.048303))) / 0.012844, 2)

                '21) Determine doloflot rougher cn tons  (V25)
                DpRghrCnTons = Round(TpbTpa * TpbBpl * (RghrCnBplRcvry / 100) / RghrCnBpl, 3)

                '22) Determine amine flotation feed tons  (V26)
                AmFlotFdTons = Round(DpRghrCnTons * (AmFdWtPct / 100), 2)

                '23) Determine bypass amine flotation tons  (V27)
                BypassAmFlotTons = Round(DpRghrCnTons - AmFlotFdTons, 2)

                '24) Determine amine cn tons  (V24)
                '92.5% BPL recovery used
                AmCnTons = Round(((AmFlotFdTons * AmFdBpl) * (0.925)) / AmCnBpl, 3)

                '25) Determine combined product tons  (V29)
                CombProdTons = Round(AmCnTons + BypassAmFlotTons, 3)

                '26) Determine combined product BPL  (V30)
                If CombProdTons > 0 Then
                    CombProdBpl = Round(((BypassAmFlotTons * RghrCnBpl) + (AmCnTons * AmCnBpl)) /
                                  CombProdTons, 3)
                Else
                    CombProdBpl = 0
                End If

                '27) Determine combined product MgO  (V31)
                If CombProdTons > 0 Then
                    CombProdMg = Round(((BypassAmFlotTons * RghrCnMg) + (AmCnTons * AmCnMg)) /
                                 CombProdTons, 3)
                Else
                    CombProdMg = 0
                End If

                '28) Determine combined product Fe2O3  (V32)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFe * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdFe = TempVal
                Else
                    CombProdFe = 23
                End If

                '28a) Determine combined product Fe2O3  (V32)  (I added this one!)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFeAdj * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdFeAdj = TempVal
                Else
                    CombProdFeAdj = 23
                End If

                '29) Determine combined product Al2O3  (V33)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbAl * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdAl = TempVal
                Else
                    CombProdAl = 23
                End If

                '30) Determine combined product Insol  (V34)
                CombProdIns = Round((FdZzzRatio - ((CombProdBpl * 0.012844) - (CombProdAl * 0.015825) +
                              (CombProdFe * 0.016062) + (CombProdMg * 0.048303))) / 0.012591, 2)


                .MgPltProd100.Bpl = Round(CombProdBpl, 1)
                .MgPltProd100.Mg = Round(CombProdMg, 2)
                .MgPltProd100.Tpa = Round(CombProdTons, 0)

                'Will determine this later!
                .MgPltProd100.WtPct = 0

                .MgPltProd100.Fe = Round(CombProdFe, 2)
                .MgPltProd100.FeAdj = Round(CombProdFeAdj, 2)
                .MgPltProd100.Al = Round(CombProdAl, 2)
                .MgPltProd100.Ins = Round(CombProdIns, 1)
                .MgPltProd100.Ia = .MgPltProd100.Fe + .MgPltProd100.Al
                .MgPltProd100.IaAdj = .MgPltProd100.FeAdj + .MgPltProd100.Al

                If TpbBpl > 0 Then
                    .MgPltProd100.Ca = Round((.MgPltProd100.Bpl / TpbBpl) * TpbCa, 2)
                Else
                    .MgPltProd100.Ca = 0
                End If

                'Set the reject to zero
                .MgPltRej100.Tpa = 0
                .MgPltRej100.WtPct = 0
                .MgPltRej100.Bpl = 0
                .MgPltRej100.Ins = 0
                .MgPltRej100.Fe = 0
                .MgPltRej100.Al = 0
                .MgPltRej100.Ia = 0
                .MgPltRej100.Mg = 0
                .MgPltRej100.Ca = 0
                .MgPltRej100.FeAdj = 0
                .MgPltRej100.IaAdj = 0
            End With
        End If

        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient
        'Product coefficient  Product coefficient

        If aProcMode = "ProdCoeff" Then
            'If the coarse and fine pebble is off-spec then the total pebble values are 0's.
            'Will recalculate them here -- may change this process later!

            'New DfpFco
            'gGetTotalValue averagesin zero values -- replaced it with gGetTotalValue2

            With aRdctnCalcData
                TpbTpa = .Cpb.Tpa + .Fpb.Tpa
                TpbBpl = gGetTotalValue2(.Cpb.Bpl, .Cpb.Tpa,
                                        .Fpb.Bpl, .Fpb.Tpa, 1)
                TpbIns = gGetTotalValue2(.Cpb.Ins, .Cpb.Tpa,
                                        .Fpb.Ins, .Fpb.Tpa, 1)
                TpbIA = gGetTotalValue2(.Cpb.Ia, .Cpb.Tpa,
                                       .Fpb.Ia, .Fpb.Tpa, 2)
                TpbCa = gGetTotalValue2(.Cpb.Ca, .Cpb.Tpa,
                                       .Fpb.Ca, .Fpb.Tpa, 1)
                TpbFe = gGetTotalValue2(.Cpb.Fe, .Cpb.Tpa,
                                       .Fpb.Fe, .Fpb.Tpa, 2)
                TpbAl = gGetTotalValue2(.Cpb.Al, .Cpb.Tpa,
                                       .Fpb.Al, .Fpb.Tpa, 2)
                TpbMg = gGetTotalValue2(.Cpb.Mg, .Cpb.Tpa,
                                       .Fpb.Mg, .Fpb.Tpa, 2)
                TpbWtPct = .Cpb.WtPct + .Fpb.WtPct

                TpbIaAdj = gGetTotalValue2(.Cpb.IaAdj, .Cpb.Tpa,
                                          .Fpb.IaAdj, .Fpb.Tpa, 2)
                TpbFeAdj = gGetTotalValue2(.Cpb.FeAdj, .Cpb.Tpa,
                                          .Fpb.FeAdj, .Fpb.Tpa, 2)

                .MgPltTcn.Tpa = 0
                .MgPltTcn.WtPct = 0
                .MgPltTcn.Bpl = 0
                .MgPltTcn.Ins = 0
                .MgPltTcn.Fe = 0
                .MgPltTcn.Al = 0
                .MgPltTcn.Ia = 0
                .MgPltTcn.Mg = 0
                .MgPltTcn.Ca = 0
                .MgPltTcn.FeAdj = 0
                .MgPltTcn.IaAdj = 0

                .MgPltTpr.Tpa = 0
                .MgPltTpr.WtPct = 0
                .MgPltTpr.Bpl = 0
                .MgPltTpr.Ins = 0
                .MgPltTpr.Fe = 0
                .MgPltTpr.Al = 0
                .MgPltTpr.Ia = 0
                .MgPltTpr.Mg = 0
                .MgPltTpr.Ca = 0
                .MgPltTpr.FeAdj = 0
                .MgPltTpr.IaAdj = 0

                'Check first to see if the pebble is MgO plant reject.

                'The MgO of the total pebble must be in a given range.

                'If the total pebble MgO is too high
                'then the total pebble is considered Off-spec pebble MgO plant reject.
                'If the total pebble is determined to be off-spec then the function is
                'exited.
                If TpbMg <= DoloflotPlantMgoMin Or
                    TpbMg > DoloflotPlantMgoMax Then
                    'This pebble is MgO plant reject.

                    .MgPltInp.Tpa = 0
                    .MgPltInp.WtPct = 0
                    .MgPltInp.Bpl = 0
                    .MgPltInp.Ins = 0
                    .MgPltInp.Fe = 0
                    .MgPltInp.Al = 0
                    .MgPltInp.Ia = 0
                    .MgPltInp.Mg = 0
                    .MgPltInp.Ca = 0
                    .MgPltInp.FeAdj = 0
                    .MgPltInp.IaAdj = 0

                    .MgPltRej.Tpa = TpbTpa
                    .MgPltRej.WtPct = TpbWtPct
                    .MgPltRej.Bpl = TpbBpl
                    .MgPltRej.Ins = TpbIns
                    .MgPltRej.Fe = TpbFe
                    .MgPltRej.Al = TpbAl
                    .MgPltRej.Ia = TpbIA
                    .MgPltRej.Mg = TpbMg
                    .MgPltRej.Ca = TpbCa
                    .MgPltRej.FeAdj = TpbFeAdj
                    .MgPltRej.IaAdj = TpbIaAdj

                    .MgPltProd.Tpa = 0
                    .MgPltProd.Bpl = 0
                    .MgPltProd.Ins = 0
                    .MgPltProd.Fe = 0
                    .MgPltProd.Al = 0
                    .MgPltProd.Ca = 0
                    .MgPltProd.Mg = 0
                    .MgPltProd.Ia = 0

                    Exit Function
                End If

                'What we have now is Doloflot plant FCO input.
                'Currently in Function OffSpecPbPltProcessFco.

                .MgPltInp.Tpa = TpbTpa
                .MgPltInp.WtPct = TpbWtPct
                .MgPltInp.Bpl = TpbBpl
                .MgPltInp.Ins = TpbIns
                .MgPltInp.Fe = TpbFe
                .MgPltInp.Al = TpbAl
                .MgPltInp.Ia = TpbIA
                .MgPltInp.Mg = TpbMg
                .MgPltInp.Ca = TpbCa
                .MgPltInp.FeAdj = TpbFeAdj
                .MgPltInp.IaAdj = TpbIaAdj

                'Need to determine the MgO plant product from this input.

                'Have:
                ' 1) aRcvryParamsData.DpPctWtM200Mesh
                ' 2) aRcvryParamsData.DpCondMinutes
                ' 3) aRcvryParamsData.DpCondPctSolids
                ' 4) aRcvryParamsData.DpFlotMin
                ' 5) aRcvryParamsData.DpPa64
                ' 6) aRcvryParamsData.DpP2o5
                ' 7) aRcvryParamsData.DpAcid

                '2) Compute grind
                If TpbMg < 3.595 Then
                    Grind = aRcvryParamsData.DpPctWtM200Mesh
                Else
                    Grind = Round(1.3385 + (16.319 * TpbMg), 2)
                End If

                '3) Compute conditioning minutes
                CondMinutes = aRcvryParamsData.DpCondMinutes

                '4) Compute conditioning %solids
                CondPctSolids = aRcvryParamsData.DpCondPctSolids

                '5) Compute flotation minutes
                FlotMinutes = aRcvryParamsData.DpFlotMin

                '6) Compute PA64 dose
                If TpbMg < 2.808 Then
                    PA64 = Round(-7.4182 + (7.271 * TpbMg), 2)
                Else
                    PA64 = 13
                End If

                '7) Compute Phos Acid (P2O5)
                'Never really uses aRcvryParamsData.DpP2o5!
                If TpbMg < 2.808 Then
                    PhosAcid = 5
                Else
                    If TpbMg >= 2.808 And TpbMg < 3.5947 Then
                        PhosAcid = Round(-30.6948 + (12.712 * TpbMg), 2)
                    Else
                        PhosAcid = 15
                    End If
                End If

                '8) Compute Sulfuric acid (acid)
                SulfAcid = aRcvryParamsData.DpAcid

                '9) Determine rougher conc MgO  (V12)
                RghrCnMg = Round(0.873 - (0.0228 * PhosAcid) - (0.0204 * SulfAcid) - (0.0399 * PA64) -
                           (0.00235 * Grind) - (0.00541 * CondPctSolids) + (0.211 * CondMinutes) -
                           (0.00447 * FlotMinutes) + (0.29 * TpbMg), 3)

                '10) Determine rougher conc MgO/P2O5  (V13)
                RghrCnMgP2o5 = Round(4.02 - (0.00681 * PhosAcid) + (0.00335 * FlotMinutes) - (0.0784 * TpbBpl) -
                               (0.163 * TpbMg) + (4.44 * RghrCnMg), 2)

                '11) Determine rougher conc BPL %Recovery  (V14)
                RghrCnBplRcvry = Round(114 + (1.18 * SulfAcid) - (0.317 * Grind) + (0.788 * CondPctSolids) -
                                 (1.52 * FlotMinutes) - (16.9 * TpbMg), 2)

                '12) Determine rougher conc BPL  (V15)
                RghrCnBpl = Round(218.5 * (RghrCnMg / RghrCnMgP2o5), 2)

                '13) Determine amine feed weight%  (V16)
                AmFdWtPct = Round(113.341 - (0.493 * Grind) - (0.353 * PhosAcid), 2)

                '14) Determine amine feed BPL  (V17)
                AmFdBpl = Round(-7.156 + (1.048 * RghrCnBpl) + (3.5 * RghrCnMg) + (0.139 * PA64), 2)

                '15) Determine amine feed MgO  (V18)
                AmFdMg = Round(0.833 - (0.00788 * Grind) + (0.511 * RghrCnMg), 3)

                '16) Determine feed ZZZ Ratio  (V19)
                FdZzzRatio = Round((TpbBpl * 0.012844) + (TpbIns * 0.012591) - (TpbAl * 0.015825) +
                             (TpbFe * 0.016062) + (TpbMg * 0.048303), 4)

                '17) Determine amine Cn MgO  (V20)
                AmCnMg = Round(-0.292 + (1.64 * AmFdMg), 3)

                '18) Determine amine Cn Al2O3  (V21)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbAl * (RghrCnBpl / TpbBpl), 3)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    AmCnAl = TempVal
                Else
                    AmCnAl = 23
                End If

                '19) Determine amine Cn Fe2O3  (V22)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFe * (RghrCnBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    AmCnFe = TempVal
                Else
                    AmCnFe = 23
                End If

                '20) Determine amine Cn BPL  (V23)
                AmFinalCnIns = 8
                AmCnBpl = Round((FdZzzRatio - ((AmFinalCnIns * 0.012591) - (AmCnAl * 0.015825) +
                          (AmCnFe * 0.016062) + (AmCnMg * 0.048303))) / 0.012844, 2)

                '21) Determine doloflot rougher cn tons  (V25)
                DpRghrCnTons = Round(TpbTpa * TpbBpl * (RghrCnBplRcvry / 100) / RghrCnBpl, 3)

                '22) Determine amine flotation feed tons  (V26)
                AmFlotFdTons = Round(DpRghrCnTons * (AmFdWtPct / 100), 2)

                '23) Determine bypass amine flotation tons  (V27)
                BypassAmFlotTons = Round(DpRghrCnTons - AmFlotFdTons, 2)

                '24) Determine amine cn tons  (V24)
                '92.5% BPL recovery used
                AmCnTons = Round(((AmFlotFdTons * AmFdBpl) * (0.925)) / AmCnBpl, 3)

                '25) Determine combined product tons  (V29)
                CombProdTons = Round(AmCnTons + BypassAmFlotTons, 3)

                '26) Determine combined product BPL  (V30)
                If CombProdTons > 0 Then
                    CombProdBpl = Round(((BypassAmFlotTons * RghrCnBpl) + (AmCnTons * AmCnBpl)) /
                                  CombProdTons, 3)
                Else
                    CombProdBpl = 0
                End If

                '27) Determine combined product MgO  (V31)
                If CombProdTons > 0 Then
                    CombProdMg = Round(((BypassAmFlotTons * RghrCnMg) + (AmCnTons * AmCnMg)) /
                                 CombProdTons, 3)
                Else
                    CombProdMg = 0
                End If

                '28) Determine combined product Fe2O3  (V32)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFe * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdFe = TempVal
                Else
                    CombProdFe = 23
                End If

                '28a) Determine combined product Fe2O3  (V32)  (I added this one!)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbFeAdj * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdFeAdj = TempVal
                Else
                    CombProdFeAdj = 23
                End If

                '29) Determine combined product Al2O3  (V33)
                If TpbBpl > 0 Then
                    TempVal = Round(TpbAl * (CombProdBpl / TpbBpl), 4)
                Else
                    TempVal = 0
                End If
                If TempVal < 23 Then
                    CombProdAl = TempVal
                Else
                    CombProdAl = 23
                End If

                '30) Determine combined product Insol  (V34)
                CombProdIns = Round((FdZzzRatio - ((CombProdBpl * 0.012844) - (CombProdAl * 0.015825) +
                              (CombProdFe * 0.016062) + (CombProdMg * 0.048303))) / 0.012591, 2)


                .MgPltProd.Bpl = Round(CombProdBpl, 1)
                .MgPltProd.Mg = Round(CombProdMg, 2)
                .MgPltProd.Tpa = Round(CombProdTons, 0)

                'Will determine this later!
                .MgPltProd.WtPct = 0

                .MgPltProd.Fe = Round(CombProdFe, 2)
                .MgPltProd.FeAdj = Round(CombProdFeAdj, 2)
                .MgPltProd.Al = Round(CombProdAl, 2)
                .MgPltProd.Ins = Round(CombProdIns, 1)
                .MgPltProd.Ia = .MgPltProd.Fe + .MgPltProd.Al
                .MgPltProd.IaAdj = .MgPltProd.FeAdj + .MgPltProd.Al

                If TpbBpl > 0 Then
                    .MgPltProd.Ca = Round((.MgPltProd.Bpl / TpbBpl) * TpbCa, 2)
                Else
                    .MgPltProd.Ca = 0
                End If

                'Set the reject to zero
                .MgPltRej.Tpa = 0
                .MgPltRej.WtPct = 0
                .MgPltRej.Bpl = 0
                .MgPltRej.Ins = 0
                .MgPltRej.Fe = 0
                .MgPltRej.Al = 0
                .MgPltRej.Ia = 0
                .MgPltRej.Mg = 0
                .MgPltRej.Ca = 0
                .MgPltRej.FeAdj = 0
                .MgPltRej.IaAdj = 0
            End With
        End If
    End Function

    Public Function FarPointGridToDataSet(ByVal FarPointGrid As AxvaSpread) As DataSet
        Dim Result As DataSet = New DataSet()
        If FarPointGrid IsNot Nothing Then
            If FarPointGrid.MaxCols < 500 Then
                Result.Tables.Add(FarPointGridToDataTable(FarPointGrid, FarPointGrid.Name, 0, FarPointGrid.MaxCols))
            ElseIf FarPointGrid.MaxCols > 500 And FarPointGrid.MaxCols < 1100 Then
                Result.Tables.Add(FarPointGridToDataTable(FarPointGrid, FarPointGrid.Name & "Part1", 0, 500))
                Result.Tables.Add(FarPointGridToDataTable(FarPointGrid, FarPointGrid.Name & "Part2", 500, FarPointGrid.MaxCols))
            Else
                Throw New Exception("Grid exceeds number of columns")
            End If
        End If
        Return Result
    End Function

    Public Function FarPointGridToDataTable(ByVal FarPointGrid As AxvaSpread, ByVal TableName As String, ByVal InitialColumnNumber As Integer, ByVal NumberOfColumns As Integer) As DataTable
        Dim Table1 As DataTable = New DataTable()
        Table1.TableName = TableName
        With FarPointGrid
            FarPointGrid.Row = 0
            For ColIdx = InitialColumnNumber To NumberOfColumns
                .Col = ColIdx
                Dim column As DataColumn = New DataColumn(.Text)
                column.DataType = System.Type.GetType("System.String")
                column.AllowDBNull = True
                Table1.Columns.Add(column)
            Next ColIdx
            For RowIdx = 1 To .MaxRows
                .Row = RowIdx
                Dim Row As DataRow = Table1.NewRow()
                For ColIdx = 0 To NumberOfColumns - InitialColumnNumber
                    .Col = ColIdx
                    Row(ColIdx) = .Text
                Next ColIdx
                Table1.Rows.Add(Row)
            Next RowIdx
        End With
        Return Table1
    End Function

End Module
